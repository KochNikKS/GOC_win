/* Generated code for Python module 'PIL.TiffImagePlugin'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_PIL$TiffImagePlugin" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_PIL$TiffImagePlugin;
PyDictObject *moduledict_PIL$TiffImagePlugin;

/* The declarations of module constants used, if any. */
static PyObject *const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple;
static PyObject *const_str_plain_JPEGTABLES;
static PyObject *const_str_plain___floor__;
extern PyObject *const_int_pos_12;
extern PyObject *const_str_plain_compression;
static PyObject *const_str_digest_0ef719cd62029dceeb5c079ca1429379;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_digest_52bfe0cd9e44f2bbf534f910f2922204;
static PyObject *const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
extern PyObject *const_str_plain___name__;
extern PyObject *const_str_plain__util;
extern PyObject *const_str_plain_sorted;
static PyObject *const_str_plain__next;
extern PyObject *const_int_neg_10;
static PyObject *const_tuple_int_pos_16384_tuple;
extern PyObject *const_str_plain_i;
static PyObject *const_str_plain_n_d;
extern PyObject *const_str_plain_save;
extern PyObject *const_str_plain_LONG;
extern PyObject *const_str_plain_max;
extern PyObject *const_str_plain_encode;
extern PyObject *const_str_plain__exclusive_fp;
static PyObject *const_str_digest_2959bfbaad00926382781285512fe82c;
extern PyObject *const_str_plain_err;
static PyObject *const_dict_3fb23a4eb603424df68849b8a14b810b;
static PyObject *const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple;
static PyObject *const_str_digest_fc67544e6dec665b7d6b3c69f65a32f8;
extern PyObject *const_str_plain_fileno;
static PyObject *const_str_digest_34bc167a9662be20f946baa467e82adc;
extern PyObject *const_tuple_int_pos_2_int_0_tuple;
static PyObject *const_str_plain_RGBXXX;
static PyObject *const_str_plain_curPos;
static PyObject *const_str_plain___trunc__;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain__save_all;
extern PyObject *const_tuple_bytes_chr_0_tuple;
static PyObject *const_str_plain_y_resolution;
static PyObject *const_str_plain_fractions;
static PyObject *const_str_digest_4e80b87021e352700620cbe3f7b4aaeb;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_None;
extern PyObject *const_str_plain_end;
static PyObject *const_str_plain_here;
static PyObject *const_str_plain_MM;
static PyObject *const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple;
extern PyObject *const_str_plain___rfloordiv__;
extern PyObject *const_str_plain__size;
extern PyObject *const_int_pos_5;
static PyObject *const_str_digest_3a8ea0240a25c759adfd355df23a25ea;
static PyObject *const_bytes_digest_a3483698f0fbc8406da4d0932ca3ee34;
static PyObject *const_str_digest_3f3fe8ff4c40ed11dd6dd13c59c587ec;
extern PyObject *const_str_plain_next;
static PyObject *const_tuple_str_digest_16264c6cee55ce69ff1ca662f5af22ac_tuple;
static PyObject *const_tuple_str_digest_54d886f81e8101b01b7b58bef7c08e77_tuple;
static PyObject *const_str_digest_b22de4bff5b4be2069d94c3971c8bce8;
static PyObject *const_str_digest_16c586d12fc8b53581149967a4bc2375;
static PyObject *const_str_plain_RGBaX;
static PyObject *const_str_digest_e0f4892db296c0e267a27daafc79697f;
extern PyObject *const_tuple_none_none_none_tuple;
extern PyObject *const_int_pos_16;
static PyObject *const_str_plain_COMPRESSION_INFO;
static PyObject *const_tuple_str_plain___rpow___tuple;
extern PyObject *const_slice_none_int_pos_2_none;
static PyObject *const_str_plain_MutableMapping;
extern PyObject *const_int_pos_262;
static PyObject *const_list_e86f3f63dcccafd263b2bedfc1d476de_list;
extern PyObject *const_int_pos_32;
extern PyObject *const_str_plain___debug__;
static PyObject *const_tuple_89072b39c492afaede3352d819927878_tuple;
extern PyObject *const_str_plain___mul__;
static PyObject *const_str_digest_f169f20812704380dc83deb48954c693;
static PyObject *const_str_plain_StrictVersion;
static PyObject *const_str_digest_136523f5c699ca9430b9715a0cb12ad6;
static PyObject *const_str_digest_5bd3d01c7dc605096daa21ce0c6f6373;
extern PyObject *const_tuple_int_pos_323_tuple;
extern PyObject *const_tuple_str_plain_dpi_tuple;
static PyObject *const_str_plain__numerator;
extern PyObject *const_int_pos_258;
extern PyObject *const_str_plain_UNDEFINED;
static PyObject *const_str_digest_ddea649f39f532e0ea51d141677fd1aa;
extern PyObject *const_str_angle_genexpr;
static PyObject *const_str_plain_WRITE_LIBTIFF;
extern PyObject *const_str_plain___abs__;
static PyObject *const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple;
static PyObject *const_str_plain__prefix;
extern PyObject *const_str_plain_str;
static PyObject *const_str_plain_tf;
extern PyObject *const_int_pos_278;
static PyObject *const_str_digest_7c5fe682ce2af83dee8766437ee37737;
extern PyObject *const_tuple_int_pos_4_tuple;
static PyObject *const_str_plain_load_rational;
static PyObject *const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple;
extern PyObject *const_str_plain__close_exclusive_fp_after_loading;
extern PyObject *const_str_plain_i8;
extern PyObject *const_int_neg_2;
static PyObject *const_str_digest_a1105e36a1e6c2a432fdc8c72e22be55;
static PyObject *const_int_pos_48129;
extern PyObject *const_str_plain_RATIONAL;
extern PyObject *const_str_plain_min;
extern PyObject *const_str_plain_load_prepare;
extern PyObject *const_float_1_0;
static PyObject *const_tuple_str_plain___rmod___tuple;
extern PyObject *const_int_pos_34377;
static PyObject *const_str_digest_41b07b4518ea49499b1bef79841050af;
extern PyObject *const_str_plain_calcsize;
static PyObject *const_str_plain_SAMPLESPERPIXEL;
static PyObject *const_str_plain_TILEOFFSETS;
static PyObject *const_str_plain__tags_v1;
extern PyObject *const_int_pos_8;
extern PyObject *const_str_plain_load;
static PyObject *const_str_digest_92d80fefc28a8052fcffa77414112c77;
static PyObject *const_tuple_str_digest_cb85ff464770b2aa9e9d46bc6629552b_tuple;
extern PyObject *const_int_pos_33432;
static PyObject *const_str_plain__endian;
static PyObject *const_str_plain_SEEK_CUR;
extern PyObject *const_str_plain_decoderconfig;
static PyObject *const_str_digest_9447a377828d8a3eb4b071c4956af392;
static PyObject *const_tuple_str_plain_func_str_plain_idx_tuple;
extern PyObject *const_str_plain_major;
static PyObject *const_str_plain_rewriteLastShort;
extern PyObject *const_str_plain_RGBa;
extern PyObject *const_str_plain_TYPES;
static PyObject *const_str_plain_IIMM;
extern PyObject *const_str_plain_name;
extern PyObject *const_str_plain_SHORT;
extern PyObject *const_str_plain_endswith;
static PyObject *const_str_digest_8da48267e4414d92e08b010db823b294;
static PyObject *const_tuple_str_plain_I_str_digest_397c5c7fdc15959b77fa01985509e603_tuple;
extern PyObject *const_str_plain___div__;
extern PyObject *const_str_plain_SIGNED_RATIONAL;
static PyObject *const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple;
static PyObject *const_tuple_bytes_digest_1ad780dcba2661bd1452198fa75d5f92_tuple;
static PyObject *const_tuple_str_plain___le___tuple;
static PyObject *const_str_plain_has_key;
static PyObject *const_str_digest_0f4650bf2ae33c80f9df4332c00b6710;
static PyObject *const_tuple_int_pos_7_int_pos_1_tuple;
static PyObject *const_bytes_digest_15af81b51bfcc11aa207044331b527e4;
extern PyObject *const_int_pos_270;
extern PyObject *const_tuple_int_0_tuple;
static PyObject *const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple;
static PyObject *const_str_digest_07f436bbe852ffe027be0902481c8ad9;
static PyObject *const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
static PyObject *const_str_plain_IFD_LEGACY_API;
static PyObject *const_str_plain_use_load_libtiff;
static PyObject *const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple;
extern PyObject *const_str_plain_map;
static PyObject *const_tuple_dd1d203e1ad1498d3e5f845fba24d837_tuple;
static PyObject *const_str_digest_eeea2ce515cd0ef3deb0643ca61099d5;
extern PyObject *const_str_plain_False;
extern PyObject *const_str_plain___contains__;
static PyObject *const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple;
static PyObject *const_str_plain_TiffImageFile;
static PyObject *const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
static PyObject *const_tuple_str_plain_RGBX_str_digest_d1530cd9eda625c4eb12bb936e71432d_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple;
extern PyObject *const_str_digest_6500339fb9ac37f5860ed740a1224c1b;
static PyObject *const_str_digest_1b059c50a2a4db2c0252d885bfadbd0c;
static PyObject *const_tuple_str_plain_self_str_plain_values_tuple;
static PyObject *const_str_digest_76f5c36365dd76a7a65d25e7f8001de7;
extern PyObject *const_str_plain_pop;
extern PyObject *const_int_0;
static PyObject *const_str_digest_be1995f0b5ce3dd5fd965fac04e346bf;
static PyObject *const_str_digest_ce02de2fe5593611868b4a64b70fa501;
static PyObject *const_int_pos_999;
static PyObject *const_bytes_digest_153d51c84a9c3251b131f695a1c80929;
extern PyObject *const_str_plain_getvalue;
static PyObject *const_str_plain___round__;
extern PyObject *const_tuple_str_plain_self_str_plain___class___tuple;
static PyObject *const_tuple_str_plain_self_str_plain_endian_tuple;
extern PyObject *const_str_plain_code;
static PyObject *const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple;
static PyObject *const_str_plain__setup;
static PyObject *const_tuple_str_plain_TYPES_tuple;
extern PyObject *const_int_pos_347;
extern PyObject *const_tuple_int_pos_2_tuple;
static PyObject *const_str_digest_92e78cf1d2c84a6d023d60c11ff5861d;
static PyObject *const_str_digest_adc0d2ab4ca715d1067c3df53e57fce1;
static PyObject *const_tuple_str_plain_MutableMapping_tuple;
static PyObject *const_tuple_int_pos_32_tuple;
static PyObject *const_str_digest_ec008b11def3fee25602c86081895340;
static PyObject *const_str_plain_ROWSPERSTRIP;
static PyObject *const_str_plain_SAMPLEFORMAT;
extern PyObject *const_str_plain__getencoder;
static PyObject *const_str_digest_a6f4720cc42395719d6af2978be7f9c8;
extern PyObject *const_str_plain___rpow__;
extern PyObject *const_str_plain___mod__;
static PyObject *const_str_digest_0871b631df963d776df1d930042146d9;
static PyObject *const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple;
extern PyObject *const_str_plain_o8;
extern PyObject *const_int_pos_4;
static PyObject *const_tuple_str_plain___str_space_tuple;
extern PyObject *const_str_plain_type;
static PyObject *const_str_digest_394cd1d93fd4faf14d35b39f57f4f3bb;
static PyObject *const_str_plain_PREFIXES;
static PyObject *const_str_digest_6baded4575fd14685f527600009eb0c0;
static PyObject *const_str_plain_whence;
static PyObject *const_str_digest_70ec016f35c94ff56152caa56a4f378d;
static PyObject *const_str_digest_b94af60b329741e4049ffdfbc9e815de;
static PyObject *const_str_plain_SEEK_SET;
static PyObject *const_str_plain_readLong;
extern PyObject *const_slice_none_none_int_neg_1;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_int_pos_34665;
static PyObject *const_str_plain__libtiff_version;
extern PyObject *const_int_pos_323;
extern PyObject *const_str_plain___hash__;
static PyObject *const_str_plain_Y_RESOLUTION;
static PyObject *const_str_digest_0c43fa8f0e7f9c1bc3c21f5c3151656f;
static PyObject *const_str_digest_ed43c790b6a538123a07bb78b3d563cf;
static PyObject *const_tuple_int_0_int_0_int_0_tuple;
static PyObject *const_str_plain_fieldType;
static PyObject *const_tuple_str_plain___rtruediv___tuple;
static PyObject *const_str_plain___ceil__;
extern PyObject *const_int_pos_50839;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_dpi;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain_newFrame;
extern PyObject *const_str_plain___nonzero__;
static PyObject *const_tuple_2d7608db523ab7514b820a08781131b1_tuple;
extern PyObject *const_str_plain_setimage;
extern PyObject *const_str_plain_1;
extern PyObject *const_str_plain_open;
static PyObject *const_tuple_str_plain_PA_str_plain_PA_tuple;
extern PyObject *const_str_digest_62b7e67e29e99420603c12d205222fa5;
extern PyObject *const_str_plain_other;
extern PyObject *const_str_plain_exc_value;
static PyObject *const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_data_tuple;
extern PyObject *const_str_plain___prepare__;
static PyObject *const_tuple_str_plain_RGB_str_digest_96bd43a8b0706a78cd1cad9911adc73a_tuple;
extern PyObject *const_int_pos_2147483648;
static PyObject *const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
extern PyObject *const_str_plain___rdiv__;
static PyObject *const_str_plain_libtiff;
static PyObject *const_str_digest_afdb5f00ce92cafe90c56f17650752ca;
extern PyObject *const_tuple_int_pos_8_tuple;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___repr__;
extern PyObject *const_int_pos_320;
static PyObject *const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple;
static PyObject *const_str_digest_1067b9cc680d4dfc20959a61f380945a;
static PyObject *const_str_plain__tags_v2;
static PyObject *const_str_digest_a0baa4bb80808920b329f10b45c1da8f;
static PyObject *const_str_digest_f0ccfa7d4f587eaaae592d8f3713f584;
static PyObject *const_tuple_str_plain_L_str_plain_L_tuple;
static PyObject *const_int_pos_33723;
static PyObject *const_str_digest_1d62906af8266e02beba793abbc82c42;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_tuple_int_pos_12_tuple;
static PyObject *const_tuple_str_plain_I_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0_tuple;
static PyObject *const_str_plain_COMPRESSION_INFO_REV;
extern PyObject *const_str_plain_resolution_unit;
static PyObject *const_str_plain__register_writer;
extern PyObject *const_str_digest_397c5c7fdc15959b77fa01985509e603;
static PyObject *const_str_digest_1b14e851371247d7708137c79e11e7e3;
static PyObject *const_tuple_str_plain_RGBA_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1_tuple;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_property;
extern PyObject *const_tuple_int_pos_2_int_pos_1_tuple;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_digest_014e0017b50029be569b14e24a36b93e;
static PyObject *const_str_plain_rewriteLastLong;
static PyObject *const_str_plain_RGBAXX;
static PyObject *const_str_plain_artist;
extern PyObject *const_str_plain_decorator;
extern PyObject *const_str_plain___add__;
static PyObject *const_str_plain_rewriteLastShortToLong;
extern PyObject *const_str_plain_op;
static PyObject *const_tuple_d2e5efd12c666b95f5125ddb1882618e_tuple;
static PyObject *const_tuple_int_pos_5_tuple;
extern PyObject *const_str_plain_YCbCr;
extern PyObject *const_str_digest_dc6974bae1533a27ce9599cdf14ca60e;
extern PyObject *const_str_plain_ImageFileDirectory_v2;
static PyObject *const_tuple_str_plain___ceil___tuple;
static PyObject *const_str_plain_write_rational;
static PyObject *const_str_digest_08d66d5d9d66e1ec869adfbc7b7b06ef;
static PyObject *const_str_digest_64afa65c90866eeaeb2cfc62c2ed5551;
static PyObject *const_str_digest_0e00713afa06076208509e5fd07311b4;
static PyObject *const_slice_int_pos_5_none_none;
extern PyObject *const_str_plain__seek;
static PyObject *const_str_plain_Tags;
static PyObject *const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_setter;
static PyObject *const_str_digest_30cb60b67765334b2b295f3024c62ea3;
extern PyObject *const_str_plain_h;
static PyObject *const_str_digest_cec14e1ec8821c6143797f46ba5e3e02;
static PyObject *const_str_digest_d63fb117ffb46ff6cda4fb0e082808aa;
static PyObject *const_str_plain_offsetOfNewPage;
extern PyObject *const_str_plain_struct;
static PyObject *const_str_digest_cdd5e53041d6bbb88ffd058e2b362a66;
extern PyObject *const_str_plain_unpack;
extern PyObject *const_tuple_str_plain_RGBA_str_plain_RGBa_tuple;
static PyObject *const_str_digest_3a3999943d59392ff6584d751eab9554;
extern PyObject *const_tuple_false_false_tuple;
extern PyObject *const_str_plain_fmt;
extern PyObject *const_str_plain_fn;
static PyObject *const_str_plain_SEEK_END;
static PyObject *const_str_plain_ImageFileDirectory;
static PyObject *const_str_digest_63e41ce0be1b33744234e91bbfd3694f;
extern PyObject *const_str_plain_num;
extern PyObject *const_str_plain_seek;
static PyObject *const_str_plain__register_basic;
extern PyObject *const_int_pos_257;
extern PyObject *const_str_chr_61;
extern PyObject *const_str_plain_inv;
static PyObject *const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple;
extern PyObject *const_str_plain_H;
static PyObject *const_str_digest_8336b700d4e432f5dee89565b3bbfb48;
static PyObject *const_tuple_str_plain___mul___tuple;
static PyObject *const_tuple_b7325af518eefa977b38a25ae794bf43_tuple;
static PyObject *const_str_digest_6da32f2677f2876f0d19b8aec6191f27;
extern PyObject *const_str_plain_func;
extern PyObject *const_str_plain_LA;
static PyObject *const_str_plain__tagdata;
static PyObject *const_str_digest_0ba47df103c88e4b97bc17b69694639a;
extern PyObject *const_int_pos_324;
static PyObject *const_str_digest_c36da39c7c65e54f3d98a9d859aab6b7;
extern PyObject *const_str_plain_read;
static PyObject *const_str_digest_d687ba9d0a20767ca771c8cb089e3484;
static PyObject *const_str_plain_IFDoffset;
static PyObject *const_str_digest_d7e629bfb69eb6b0fec8b50cbe62c91a;
static PyObject *const_str_plain_combine;
static PyObject *const_str_digest_ee4a3fba8fc3306e6cef526eeff90632;
extern PyObject *const_tuple_str_plain_v_tuple;
static PyObject *const_str_digest_843ed406639f09239929be890e1db672;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_str_plain_ARTIST;
static PyObject *const_str_digest_56dfe18a992b31936ba76f9e84173d96;
extern PyObject *const_str_plain__getdecoder;
extern PyObject *const_int_pos_50838;
extern PyObject *const_str_plain_RGBX;
static PyObject *const_str_digest_4d423ef79a0b823d0444d270265c8a85;
static PyObject *const_tuple_str_plain___ge___tuple;
static PyObject *const_str_digest_7f1557a96760768a0c43c9c1d8bf4c7b;
static PyObject *const_str_digest_5dc413e42e09ea1ee700a04fe4511fc2;
static PyObject *const_str_plain_PHOTOSHOP_CHUNK;
extern PyObject *const_str_chr_62;
extern PyObject *const_str_plain_x_resolution;
static PyObject *const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple;
extern PyObject *const_str_plain___orig_bases__;
static PyObject *const_tuple_str_plain_RGBX_str_plain_RGBX_tuple;
static PyObject *const_str_digest_11f5dbf60ebb415ec7395c7fe32c31a5;
extern PyObject *const_str_plain_close;
static PyObject *const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple;
static PyObject *const_str_plain__setitem;
extern PyObject *const_int_pos_259;
extern PyObject *const_int_pos_1073741824;
static PyObject *const_slice_none_none_int_pos_2;
static PyObject *const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple;
static PyObject *const_tuple_str_plain___mod___tuple;
extern PyObject *const_str_plain___ge__;
static PyObject *const_str_plain_HL;
static PyObject *const_str_digest_9e78b0491fb8e5d68c5f1c8254dd9c79;
static PyObject *const_tuple_str_plain_i8_str_plain_o8_tuple;
extern PyObject *const_str_plain___qualname__;
extern PyObject *const_str_plain___radd__;
static PyObject *const_str_digest_d563e1630064893d81f5c964d91100c8;
extern PyObject *const_tuple_str_plain_P_str_digest_676e11a5ff7d2b82b18a5b0dbbad6c6d_tuple;
extern PyObject *const_str_plain_n;
extern PyObject *const_str_plain_long;
extern PyObject *const_str_plain_tags;
static PyObject *const_str_digest_37cb21a10952216801826b6d0e8eed45;
static PyObject *const_str_plain_ifd;
static PyObject *const_str_plain_writeLong;
static PyObject *const_str_plain_copyright;
extern PyObject *const_str_plain_value;
extern PyObject *const_str_plain___pow__;
static PyObject *const_str_digest_104f43ace8a2dd2688c64d99e33006a2;
extern PyObject *const_int_pos_339;
static PyObject *const_str_digest_ee0894063643bd57726272cee14acd50;
extern PyObject *const_str_plain_collections;
static PyObject *const_str_plain__write_dispatch;
extern PyObject *const_str_plain_all;
extern PyObject *const_str_plain_resolution;
extern PyObject *const_int_pos_34675;
static PyObject *const_str_plain_tag_v2;
static PyObject *const_tuple_str_plain___neg___tuple;
static PyObject *const_str_plain_IMAGEJ_META_DATA;
extern PyObject *const_tuple_str_newline_tuple;
extern PyObject *const_str_plain_py3;
static PyObject *const_str_plain_finalize;
extern PyObject *const_str_plain_l;
extern PyObject *const_str_plain_exc_type;
extern PyObject *const_tuple_str_plain_self_str_plain_value_tuple;
extern PyObject *const_str_plain_numbers;
static PyObject *const_tuple_str_plain_Fraction_tuple;
extern PyObject *const_str_plain_new;
static PyObject *const_bytes_digest_b65fc0f8807dad4b45c77b9fe922011e;
extern PyObject *const_str_plain_raw;
static PyObject *const_str_plain_basetypes;
extern PyObject *const_str_plain_P;
static PyObject *const_str_digest_9b4319a76efe1c901eb0d8c93992356a;
static PyObject *const_str_digest_3e24da836032a5bee4f5b55c36ec831d;
extern PyObject *const_str_plain___rmod__;
static PyObject *const_tuple_str_plain___gt___tuple;
extern PyObject *const_str_plain_load_end;
static PyObject *const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089;
static PyObject *const_tuple_str_plain___abs___tuple;
extern PyObject *const_tuple_str_plain_k_str_plain_v_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_frame_tuple;
extern PyObject *const_str_plain_DOUBLE;
static PyObject *const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple;
static PyObject *const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple;
static PyObject *const_tuple_str_plain___rmul___tuple;
extern PyObject *const_str_plain___rtruediv__;
extern PyObject *const_int_pos_521;
extern PyObject *const_str_digest_d3a7496dc9671c04c9e24180d49c8edb;
extern PyObject *const_str_plain_abs;
extern PyObject *const_str_plain__open;
extern PyObject *const_str_plain_decode;
extern PyObject *const_str_plain_pack;
extern PyObject *const_tuple_int_pos_322_tuple;
static PyObject *const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
extern PyObject *const_str_plain___getitem__;
static PyObject *const_str_plain_load_byte;
static PyObject *const_str_digest_bb7b5e999b69bc4f46f91ae4613836dd;
extern PyObject *const_str_plain_k;
static PyObject *const_str_plain_tagdata;
extern PyObject *const_str_plain_f;
static PyObject *const_str_plain_stripoffsets;
static PyObject *const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple;
static PyObject *const_str_digest_9d8621449487ac5dc0f624c7fe4f607c;
static PyObject *const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple;
extern PyObject *const_int_pos_305;
static PyObject *const_str_plain_write_string;
static PyObject *const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple;
extern PyObject *const_str_plain_format_description;
extern PyObject *const_str_plain_I;
extern PyObject *const_str_digest_676e11a5ff7d2b82b18a5b0dbbad6c6d;
static PyObject *const_str_digest_af7a52fad84da97b09cedf0621041882;
static PyObject *const_bytes_digest_1ad780dcba2661bd1452198fa75d5f92;
extern PyObject *const_slice_none_int_pos_3_none;
static PyObject *const_str_plain_COLORMAP;
static PyObject *const_tuple_str_plain___rsub___tuple;
extern PyObject *const_str_plain_F;
extern PyObject *const_int_pos_317;
static PyObject *const_str_plain_numTags;
extern PyObject *const_str_plain__accept;
static PyObject *const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple;
extern PyObject *const_str_plain_tile;
static PyObject *const_str_plain_PLANAR_CONFIGURATION;
static PyObject *const_str_plain_X_RESOLUTION;
extern PyObject *const_str_plain_origin;
extern PyObject *const_str_plain_length;
static PyObject *const_str_plain_write_undefined;
static PyObject *const_tuple_str_plain_RGBA_str_digest_3d7b58fffa8ed7ce418bff1a75c77963_tuple;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_str_plain_numerator;
extern PyObject *const_slice_none_int_pos_4_none;
static PyObject *const_str_plain_shortFmt;
extern PyObject *const_str_plain_register_extensions;
static PyObject *const_tuple_str_plain___round___tuple;
static PyObject *const_str_digest_2c033295b58b93ebf2caef911a75b646;
static PyObject *const_str_digest_10e0e22f3edc67c4907122668a340595;
static PyObject *const_str_plain_IFDRational;
extern PyObject *const_int_pos_16384;
static PyObject *const_str_digest_045116fcde78869c4a017035801be409;
static PyObject *const_str_plain_goToEnd;
static PyObject *const_str_plain_writeShort;
static PyObject *const_str_plain_OPEN_INFO;
static PyObject *const_str_plain_IMAGEDESCRIPTION;
static PyObject *const_tuple_8604fd5de92cf1e0dc04582e17177efb_tuple;
extern PyObject *const_str_plain_d;
static PyObject *const_str_digest_bc9a5568d7961a4abcbcbc75b890c778;
static PyObject *const_str_digest_944d2b0908af9c329cdc6dd3113d910b;
static PyObject *const_str_plain_tiffinfo;
extern PyObject *const_str_plain_print_function;
extern PyObject *const_str_plain_v;
static PyObject *const_str_plain__TiffImageFile__next;
extern PyObject *const_bytes_digest_3d83999277d9e5cf3228587a8fa3a8ce;
static PyObject *const_str_digest_9d800b28b537f147be4f7e1d30bcd4d4;
static PyObject *const_tuple_type_tuple_type_bytes_tuple;
static PyObject *const_str_digest_82b28824d2cb77fb93e22da1c73c7177;
static PyObject *const_str_digest_55323581d0d7393f04c8370157275299;
static PyObject *const_str_digest_58486f122f0bfa598fdd55fe93a43522;
static PyObject *const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple;
static PyObject *const_str_digest_014ebc09434e7e49f602922eb046a479;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_dup;
extern PyObject *const_str_plain_io;
static PyObject *const_tuple_str_digest_13586c50c32aa1b6d5c86580eca24f00_tuple;
static PyObject *const_tuple_int_pos_2_int_0_int_0_tuple;
static PyObject *const_str_digest_96bd43a8b0706a78cd1cad9911adc73a;
static PyObject *const_str_digest_6692cf102d3f538f97ca25bd835e3695;
static PyObject *const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple;
static PyObject *const_str_plain_max_denominator;
static PyObject *const_str_digest_9317aec61315258e1a9827aa603b38b1;
static PyObject *const_str_plain_HHL;
extern PyObject *const_slice_none_int_neg_1_none;
static PyObject *const_str_digest_cb85ff464770b2aa9e9d46bc6629552b;
static PyObject *const_str_plain_fixIFD;
extern PyObject *const_int_pos_256;
static PyObject *const_str_digest_1f47d6fc66029446390a6aed590967bf;
extern PyObject *const_str_plain_decoder;
static PyObject *const_str_digest_e47dd4efad1227d32ad00623d2ee463a;
extern PyObject *const_tuple_a3c4d264fc3ef18a3d120a02567f3451_tuple;
extern PyObject *const_str_digest_e22ac7b852354d067e215f51ea4a3592;
extern PyObject *const_str_plain_copy;
static PyObject *const_tuple_str_plain___radd___tuple;
static PyObject *const_str_digest_13eb7bc9a5609c95771e02bd533dd9f6;
static PyObject *const_str_digest_16264c6cee55ce69ff1ca662f5af22ac;
extern PyObject *const_str_plain_tuple;
extern PyObject *const_str_plain__seek_check;
extern PyObject *const_str_plain__save;
static PyObject *const_tuple_int_pos_999_tuple;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_digest_e91e67de774a34be043e8e8955a64230;
extern PyObject *const_str_plain__is_animated;
static PyObject *const_str_digest_d1530cd9eda625c4eb12bb936e71432d;
extern PyObject *const_str_plain_im;
extern PyObject *const_str_digest_a43c96e669182759de7b6dc21baa30ee;
static PyObject *const_str_digest_08debf0f4bbd8ad2aacfe5bce50b4adf;
static PyObject *const_str_plain_longFmt;
extern PyObject *const_str_plain_RGBA;
extern PyObject *const_tuple_str_plain_a_tuple;
static PyObject *const_str_plain_load_signed_rational;
static PyObject *const_str_digest_6d48505254218ff69df3910d61a5a564;
static PyObject *const_str_digest_778fa9e6db0da507c6d326929fff4b26;
static PyObject *const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple;
static PyObject *const_tuple_int_pos_8_int_pos_8_tuple;
static PyObject *const_str_plain_close_fp;
static PyObject *const_str_plain_original;
static PyObject *const_str_digest_ad2179cb5f897d35c7d5f7ba32d3e854;
static PyObject *const_str_plain_DEBUG;
static PyObject *const_tuple_str_plain_2L_tuple;
extern PyObject *const_str_plain_has_location;
extern PyObject *const_str_plain_version;
static PyObject *const_tuple_8b55c0686e2d1ff60c7f8a942ca30637_tuple;
static PyObject *const_str_digest_ac7ecfa5afac9d9cba7088893119bbcf;
static PyObject *const_str_digest_5a086bbbd36cfacd08c303e7ece5be9c;
static PyObject *const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple;
static PyObject *const_str_plain_STRIPOFFSETS;
static PyObject *const_str_digest_ce68b0ecc72c28e379f99ada6da92ef1;
static PyObject *const_str_digest_bbc19644d747bce501dfd7062a7d3586;
extern PyObject *const_str_plain_ascii;
static PyObject *const_tuple_str_plain___nonzero___tuple;
extern PyObject *const_str_plain_info;
static PyObject *const_tuple_str_plain_RGB_str_digest_ee4a3fba8fc3306e6cef526eeff90632_tuple;
extern PyObject *const_str_empty;
extern PyObject *const_str_plain___floordiv__;
static PyObject *const_str_plain_TIFF;
static PyObject *const_str_digest_35021dd69aca70179a6653ae0392c329;
static PyObject *const_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87;
static PyObject *const_str_plain_distutils;
static PyObject *const_str_digest_3bd8050fabc18c25f5fe43bc68a84616;
static PyObject *const_str_digest_d0307c57f513d1fa587f8cfd66cc7721;
static PyObject *const_tuple_str_plain_compression_tuple;
static PyObject *const_str_digest_5ac66013283065edc605cc1dd029e935;
static PyObject *const_tuple_str_plain___pos___tuple;
static PyObject *const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple;
static PyObject *const_tuple_str_plain_I_str_digest_380c2cde6c6849a9cfbcc9225b2b8425_tuple;
extern PyObject *const_str_plain_legacy;
static PyObject *const_str_plain_totalSize;
extern PyObject *const_int_pos_288;
extern PyObject *const_str_plain_SIGNED_BYTE;
static PyObject *const_str_plain_IMAGELENGTH;
extern PyObject *const_str_plain_palette;
static PyObject *const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple;
static PyObject *const_str_plain_to_v2;
static PyObject *const_str_digest_42acff2a1fadc967cda081746b144844;
extern PyObject *const_str_plain_traceback;
static PyObject *const_str_plain_II;
static PyObject *const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple;
static PyObject *const_bytes_digest_14d88c70bbdd16b98ad773c9c439dd7f;
static PyObject *const_tuple_c26d7102cb00910348cf3aecb080d1f8_tuple;
extern PyObject *const_str_plain_bytes;
static PyObject *const_str_digest_e5a5520d16084b1fa8690fea5fd54003;
extern PyObject *const_str_plain_prefix;
static PyObject *const_str_digest_d01e13759d1e788297ffbd672842812b;
static PyObject *const_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1;
extern PyObject *const_str_plain_beginning;
extern PyObject *const_str_plain_division;
extern PyObject *const_int_neg_1;
static PyObject *const_str_digest_5c0f840f8d91b28856d4b5f739bfca9c;
static PyObject *const_str_digest_6409cd27149cc76e217dad17d2c5d661;
extern PyObject *const_tuple_str_chr_62_tuple;
static PyObject *const_str_digest_14efb3122da4b9eb7106a01cd1e50e56;
extern PyObject *const_int_pos_266;
static PyObject *const_tuple_str_plain_RGBX_str_digest_3a8bd0f273227c1e25ee9d379a59290c_tuple;
extern PyObject *const_str_plain___sub__;
extern PyObject *const_str_plain_FLOAT;
extern PyObject *const_str_plain_classmethod;
static PyObject *const_tuple_str_plain_op_str_plain_delegate_tuple;
extern PyObject *const_str_plain_register_save_all;
static PyObject *const_tuple_int_pos_4_bytes_chr_0_tuple;
static PyObject *const_tuple_93dd6ca688d275935874432b5b84a429_tuple;
extern PyObject *const_str_plain_flush;
extern PyObject *const_str_plain_RGB;
static PyObject *const_str_plain_RESOLUTION_UNIT;
extern PyObject *const_str_digest_19532ebc85912cba7ed62a9cd4e9c195;
static PyObject *const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple;
extern PyObject *const_float_2_54;
static PyObject *const_str_plain_date_time;
extern PyObject *const_str_plain_XMP;
extern PyObject *const_tuple_true_tuple;
static PyObject *const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple;
static PyObject *const_str_plain_HHL4s;
static PyObject *const_str_digest_76e218b2e351f9fedc8ea3d7ca1beebb;
extern PyObject *const_str_plain_pos;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_setup;
static PyObject *const_str_digest_407a4bcbc3e14920848d36554dfc4526;
static PyObject *const_tuple_bytes_digest_153d51c84a9c3251b131f695a1c80929_tuple;
extern PyObject *const_str_plain___le__;
static PyObject *const_str_plain_ICCPROFILE;
extern PyObject *const_str_plain_data;
extern PyObject *const_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0;
extern PyObject *const_tuple_str_plain_prefix_tuple;
static PyObject *const_tuple_str_plain_CMYK_str_plain_CMYK_tuple;
extern PyObject *const_str_plain___len__;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_plain_STRIPBYTECOUNTS;
static PyObject *const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple;
static PyObject *const_str_digest_74cec407fdc40159101a17036ad167d9;
static PyObject *const_str_digest_f5d70555e371b1faee5bc78e89c23755;
static PyObject *const_str_plain__TiffImageFile__frame;
static PyObject *const_str_digest_80414d74ed3d67cc57fcf28a6508ca62;
extern PyObject *const_str_plain_ljust;
static PyObject *const_str_plain_write_signed_rational;
static PyObject *const_str_digest_3d4a30aa5a8fdc78fc1a1b0c477075d3;
extern PyObject *const_str_plain_LAB;
static PyObject *const_str_plain_FILLORDER;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple;
static PyObject *const_list_7966eeb46c8db0e0ad53952e033a7ea8_list;
static PyObject *const_str_digest_81a7a923e149038b01f4ba91e7c8685a;
static PyObject *const_tuple_int_pos_10_int_pos_8_tuple;
static PyObject *const_str_digest_3ef1ad6c38141f3556ac2b919938d04b;
extern PyObject *const_tuple_false_true_tuple;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_float;
static PyObject *const_float_plus_nan;
static PyObject *const_str_digest_5c1b41e424a2246568f742b1a0036c97;
extern PyObject *const_tuple_str_plain_P_str_plain_P_tuple;
static PyObject *const_tuple_str_plain___lt___tuple;
static PyObject *const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple;
static PyObject *const_str_digest_7120d4204cc4762ca7a220b081a44610;
extern PyObject *const_tuple_int_pos_16_tuple;
static PyObject *const_str_digest_1a960c42b63070e58475e386da68f151;
static PyObject *const_str_plain_legacy_api;
static PyObject *const_tuple_str_plain_self_str_plain_ifh_tuple;
static PyObject *const_str_plain_frac;
static PyObject *const_str_plain_2L;
static PyObject *const_str_plain__denominator;
static PyObject *const_str_digest_88be5b33ddf030329f6e522287e232a3;
static PyObject *const_str_digest_a1bc24fc8989dafc486e36d582c6c442;
extern PyObject *const_str_plain_SIGNED_SHORT;
static PyObject *const_tuple_str_plain___trunc___tuple;
static PyObject *const_str_digest_9af315a991f33e1e5efd897c0e99893d;
extern PyObject *const_tuple_empty;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_CMYK;
static PyObject *const_tuple_str_digest_23a28909417200b80891584a041695a0_tuple;
static PyObject *const_tuple_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072_none_tuple;
extern PyObject *const_str_plain_denom;
static PyObject *const_str_plain_tagtype;
extern PyObject *const_str_plain_append;
static PyObject *const_str_digest_6e5675988a662f1b304b8bb0cfa4c595;
extern PyObject *const_str_plain__decompression_bomb_check;
extern PyObject *const_str_plain__binary;
extern PyObject *const_int_pos_279;
static PyObject *const_str_digest_81f304fc4abbeb6612c81962528c76b4;
static PyObject *const_str_digest_0431b665d65283e91f036178c2bc5097;
static PyObject *const_str_plain__load_dispatch;
static PyObject *const_str_plain_fieldSize;
static PyObject *const_str_plain_isShort;
static PyObject *const_str_digest_f66f0d17188cd87dede8ac24ff663a3e;
extern PyObject *const_str_plain_tell;
extern PyObject *const_int_pos_296;
static PyObject *const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple;
extern PyObject *const_int_pos_10;
static PyObject *const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple;
static PyObject *const_str_digest_3e8740f428c752cc4b75714a1531291f;
static PyObject *const_str_digest_4d6f530e35101cfd8d26d52172fe8b24;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_split;
static PyObject *const_str_plain_whereToWriteNewIFDOffset;
static PyObject *const_str_plain_libtiff_version;
static PyObject *const_str_plain_limit_denominator;
static PyObject *const_tuple_str_plain_LAB_str_plain_LAB_tuple;
static PyObject *const_str_plain_unit_size;
static PyObject *const_str_plain_CMYKXX;
static PyObject *const_tuple_str_plain_I_str_digest_668285c8e15fd1c4c777c2ca124e7de4_tuple;
static PyObject *const_tuple_str_plain___truediv___tuple;
extern PyObject *const_str_plain_ImageFileDirectory_v1;
extern PyObject *const_slice_int_pos_4_none_none;
extern PyObject *const_str_plain_list;
extern PyObject *const_str_plain_max_val;
static PyObject *const_str_digest_56692adae372b22f2e783c2a5ca49779;
static PyObject *const_str_plain_setEndian;
static PyObject *const_str_plain_cur_idx;
extern PyObject *const_tuple_int_pos_1_int_pos_1_tuple;
extern PyObject *const_str_plain_val;
extern PyObject *const_int_pos_306;
static PyObject *const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
extern PyObject *const_str_plain_SIGNED_LONG;
static PyObject *const_str_digest_0a1355599d78cf1f896e0715d27e54bd;
static PyObject *const_str_digest_60f4016fa916489e598e8b72100aa5b5;
extern PyObject *const_str_plain_msg;
static PyObject *const_tuple_477e8c2da119e7c6fbe7290e4e284d85_tuple;
static PyObject *const_str_plain_typname;
extern PyObject *const_str_plain_reset;
static PyObject *const_tuple_str_plain_load__tuple;
static PyObject *const_tuple_str_plain_I_str_digest_ce02de2fe5593611868b4a64b70fa501_tuple;
static PyObject *const_str_plain__limit_rational;
static PyObject *const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple;
static PyObject *const_str_digest_207b218ded9f77d80f4f9fbc4fd25802;
extern PyObject *const_str_plain___slots__;
extern PyObject *const_str_plain_current;
static PyObject *const_str_digest_33a666ca376c265b06b92e0797b8830b;
extern PyObject *const_str_plain_dest;
static PyObject *const_str_digest_0c26ebcb2c39f340b95e2b2f1eda8176;
static PyObject *const_str_digest_42b66323a5674c6af016df2810648dca;
static PyObject *const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple;
static PyObject *const_str_digest_cfc738c28d8e59a358b07bbd1a92dd87;
static PyObject *const_str_plain_idx_fmt_name;
extern PyObject *const_str_plain_register_mime;
static PyObject *const_str_digest_d5a7e2f1ea88c24f4a48bac3a1863198;
static PyObject *const_tuple_8c3674872836452c263be064680a25b1_tuple;
static PyObject *const_str_plain_CMYKX;
extern PyObject *const_str_plain___truediv__;
static PyObject *const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple;
extern PyObject *const_str_plain_getpalette;
extern PyObject *const_tuple_str_plain_P_str_digest_19532ebc85912cba7ed62a9cd4e9c195_tuple;
static PyObject *const_tuple_str_digest_76f5c36365dd76a7a65d25e7f8001de7_tuple;
static PyObject *const_str_digest_7b1e18feff02a89a64010e059e45fa64;
static PyObject *const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
static PyObject *const_str_plain_SAVE_INFO;
extern PyObject *const_str_plain_ASCII;
static PyObject *const_str_digest_181093529040d325153e3d3d27abab18;
static PyObject *const_str_plain_fieldSizes;
extern PyObject *const_str_digest_772c0402ef22c7a4d610f4443976d74a;
static PyObject *const_str_digest_0c186396ff51c44270c7e4708fce7395;
extern PyObject *const_str_plain_encoderinfo;
static PyObject *const_tuple_str_plain___pow___tuple;
extern PyObject *const_str_plain___class__;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain_UnsupportedOperation;
static PyObject *const_tuple_str_digest_eb377a8c11b610eba35f02ef754812b7_tuple;
static PyObject *const_str_plain_COPYRIGHT;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_str_plain___rdiv___tuple;
extern PyObject *const_str_plain___str__;
static PyObject *const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple;
static PyObject *const_str_plain_denominator;
static PyObject *const_str_digest_4f8471689e4eeb4a5c59934eb4e2b2f3;
extern PyObject *const_str_plain_typ;
static PyObject *const_tuple_str_plain___add___tuple;
static PyObject *const_tuple_str_plain___floor___tuple;
extern PyObject *const_str_plain_pixel;
extern PyObject *const_str_plain__val;
static PyObject *const_tuple_str_plain_ascii_str_plain_replace_tuple;
static PyObject *const_str_plain_isFirst;
static PyObject *const_str_plain_IMAGEJ_META_DATA_BYTE_COUNTS;
extern PyObject *const_str_plain_readonly;
static PyObject *const_str_digest_bfca6850e4e625572e5e0b275db6f1c5;
extern PyObject *const_int_pos_283;
extern PyObject *const_str_plain___rsub__;
static PyObject *const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple;
static PyObject *const_str_digest_fecdb345486ffbb193a74588571ea056;
static PyObject *const_str_plain_load_;
extern PyObject *const_str_plain_chain;
static PyObject *const_str_plain_padBytes;
static PyObject *const_str_plain_software;
static PyObject *const_str_digest_4f7f4944fe010ab1e87d7a729022551f;
extern PyObject *const_str_plain_print;
static PyObject *const_str_digest_eee6dafc42cb49d0eae4d764c3b1a861;
static PyObject *const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple;
static PyObject *const_str_plain_ifh;
extern PyObject *const_str_plain_Number;
extern PyObject *const_str_plain__n_frames;
extern PyObject *const_str_plain_version_info;
static PyObject *const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple;
static PyObject *const_str_plain_tagname;
static PyObject *const_str_plain__TiffImageFile__fp;
static PyObject *const_str_digest_dd0014195a493dcdefb2a95211b4d78b;
extern PyObject *const_str_plain_get;
extern PyObject *const_str_plain_endian;
extern PyObject *const_int_pos_284;
static PyObject *const_str_digest_c474ef2553f0b1a6f297474abe5e20b0;
static PyObject *const_str_digest_b821c8a6c88fde624ec9dd5fe90a30e1;
static PyObject *const_tuple_str_plain_RGB_str_plain_RGB_tuple;
static PyObject *const_str_plain__load_libtiff;
static PyObject *const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple;
extern PyObject *const_int_pos_700;
static PyObject *const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple;
extern PyObject *const_str_plain___iter__;
static PyObject *const_str_plain___delitem__;
extern PyObject *const_str_plain_register_open;
static PyObject *const_str_digest_7dfeda29e0f8703b75217dc553f65d0c;
static PyObject *const_tuple_int_pos_530_tuple;
static PyObject *const_tuple_str_digest_ec008b11def3fee25602c86081895340_tuple;
static PyObject *const_tuple_str_plain___div___tuple;
extern PyObject *const_str_angle_dictcontraction;
extern PyObject *const_str_plain_lookup;
extern PyObject *const_str_plain_warn;
extern PyObject *const_str_plain_itertools;
extern PyObject *const_str_plain_tag;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_digest_4a4adbabf0cfc1e325ab1fe61f1e5dd5;
static PyObject *const_str_plain__frame_pos;
extern PyObject *const_str_plain_LIBTIFF_CORE;
static PyObject *const_str_digest_9dd2b23b42a751dfc44292a9dcc59aba;
static PyObject *const_str_digest_fd478f0dde6a2123dae00f22c54fe654;
extern PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple;
extern PyObject *const_str_chr_60;
static PyObject *const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple;
extern PyObject *const_tuple_false_tuple;
extern PyObject *const_str_angle_metaclass;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_str_plain_unknown;
extern PyObject *const_str_plain_zip;
extern PyObject *const_str_plain___lt__;
static PyObject *const_int_pos_42;
static PyObject *const_tuple_str_digest_14efb3122da4b9eb7106a01cd1e50e56_tuple;
static PyObject *const_str_plain_EXTRASAMPLES;
static PyObject *const_str_plain__unpack;
extern PyObject *const_int_pos_273;
static PyObject *const_tuple_str_plain___floordiv___tuple;
extern PyObject *const_str_plain_offset;
extern PyObject *const_tuple_str_space_str_plain___tuple;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain___exit__;
static PyObject *const_str_digest_d13b6e88161c381b75c90a7d8ae9490c;
extern PyObject *const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple;
static PyObject *const_str_digest_2f16da6031cf29610c21ade0e458a954;
extern PyObject *const_str_plain_double;
static PyObject *const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple;
extern PyObject *const_str_plain_ret;
static PyObject *const_str_digest_04068613b851f119a2c692e8106c0743;
static PyObject *const_str_digest_89dbc60e7f8b4673fa00848c7fa52c6b;
extern PyObject *const_str_plain_vals;
extern PyObject *const_tuple_int_pos_10_tuple;
extern PyObject *const_str_plain_a;
static PyObject *const_str_digest_fb9886489ecbc572ce067549d373a925;
extern PyObject *const_str_plain_items;
static PyObject *const_str_digest_04c5939470391af46f913f0b1a887918;
static PyObject *const_str_digest_b242611e3516ff22f3e948b468ade6aa;
static PyObject *const_str_digest_d15d46b9a984d08f6d37480428d03f1f;
static PyObject *const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple;
static PyObject *const_str_plain_nfr;
static PyObject *const_tuple_str_digest_6da32f2677f2876f0d19b8aec6191f27_tuple;
extern PyObject *const_int_pos_519;
extern PyObject *const_str_plain_size;
static PyObject *const_str_plain_AppendingTiffWriter;
extern PyObject *const_int_pos_6;
extern PyObject *const_str_plain_is_animated;
static PyObject *const_tuple_str_plain_LA_str_plain_LA_tuple;
extern PyObject *const_str_plain_n_frames;
extern PyObject *const_str_plain_PA;
static PyObject *const_str_digest_13586c50c32aa1b6d5c86580eca24f00;
extern PyObject *const_str_plain___enter__;
static PyObject *const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple;
static PyObject *const_str_plain_IPTC_NAA_CHUNK;
static PyObject *const_str_digest_36d7cd1b9db6c846ee4976d560207cd3;
extern PyObject *const_tuple_str_chr_60_tuple;
extern PyObject *const_str_plain_ImagePalette;
static PyObject *const_str_digest_42a31ede9c68d42f92474f787ceccfc4;
static PyObject *const_str_digest_e59d036d5c01650be279801bdaec0cc4;
static PyObject *const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple;
extern PyObject *const_str_plain_cls;
extern PyObject *const_str_plain___gt__;
extern PyObject *const_tuple_int_0_int_0_tuple;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_52368654d670f3e38c52128c5b7acf14;
static PyObject *const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple;
extern PyObject *const_tuple_int_pos_1_int_0_tuple;
static PyObject *const_str_plain__register_loader;
extern PyObject *const_str_plain_frame;
static PyObject *const_str_digest_973535bb2e882bd8a57330de2bae6594;
static PyObject *const_str_plain_isLong;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_description;
static PyObject *const_tuple_8b630ef948759a11b43a74aea1bea856_tuple;
static PyObject *const_str_plain_READ_LIBTIFF;
extern PyObject *const_str_plain_L;
extern PyObject *const_int_pos_322;
static PyObject *const_str_plain_skipIFDs;
static PyObject *const_str_plain_BITSPERSAMPLE;
static PyObject *const_str_digest_696cfd6263b36104ddb17e4691dd131c;
static PyObject *const_str_digest_296ec732f3454a5d77ec38d29513baeb;
static PyObject *const_str_digest_ddffb0765d651100b56f0c8a14652e8b;
static PyObject *const_str_plain_RGBAX;
static PyObject *const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple;
static PyObject *const_tuple_str_plain___sub___tuple;
static PyObject *const_str_plain_PHOTOMETRIC_INTERPRETATION;
static PyObject *const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple;
static PyObject *const_str_digest_23a28909417200b80891584a041695a0;
static PyObject *const_tuple_str_plain_AppendingTiffWriter_tuple_empty_tuple;
static PyObject *const_str_plain_from_v2;
static PyObject *const_str_digest_41f30dfb874731c8b680e9e93c9f8eb7;
static PyObject *const_str_digest_a4988b6127c542f882d25584d33116d8;
extern PyObject *const_str_plain___rmul__;
static PyObject *const_str_plain_write_;
extern PyObject *const_tuple_str_plain_self_str_plain_other_tuple;
extern PyObject *const_str_plain_int;
static PyObject *const_str_digest_1fa1460420b567cbdd4eb682ed941476;
static PyObject *const_tuple_str_plain___rfloordiv___tuple;
extern PyObject *const_int_neg_4;
extern PyObject *const_str_plain_unicode;
static PyObject *const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple;
extern PyObject *const_str_plain_DeprecationWarning;
static PyObject *const_str_plain_tagFormat;
extern PyObject *const_int_pos_338;
static PyObject *const_str_plain_delegate;
static PyObject *const_str_plain_write_byte;
static PyObject *const_list_8f903af5db046de439bc115b7dbdd517_list;
static PyObject *const_str_digest_06758be47dc92782985a67ee64d7a24c;
extern PyObject *const_tuple_str_plain_py3_tuple;
static PyObject *const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple;
static PyObject *const_str_digest_39013e58ef8e65e4493fa9d212be592f;
extern PyObject *const_str_plain__safe_read;
static PyObject *const_tuple_type_int_type_float_type_str_type_bytes_tuple;
static PyObject *const_str_digest_a50f555c0b56fa82177e1fa640a59e78;
extern PyObject *const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c;
extern PyObject *const_str_plain___neg__;
static PyObject *const_str_digest_c984fe64ee3391b05d8c9a42c352de5c;
extern PyObject *const_tuple_str_plain_self_str_plain_current_tuple;
static PyObject *const_str_plain_bytesWritten;
static PyObject *const_tuple_str_plain_1_str_plain_1_tuple;
static PyObject *const_str_digest_2a66c5c8df4a8d058612c351b526d38e;
static PyObject *const_str_digest_216bbff8b717a029efaf28eba2ad0c36;
static PyObject *const_str_plain_IMAGEWIDTH;
static PyObject *const_str_plain_limit_rational;
static PyObject *const_str_plain_Rational;
static PyObject *const_str_digest_54d886f81e8101b01b7b58bef7c08e77;
static PyObject *const_str_plain_Fraction;
extern PyObject *const_tuple_int_pos_3_tuple;
static PyObject *const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple;
static PyObject *const_str_digest_8384c3bce089a02838fd5d8937848994;
extern PyObject *const_str_plain_encoderconfig;
extern PyObject *const_str_digest_380c2cde6c6849a9cfbcc9225b2b8425;
extern PyObject *const_str_digest_668285c8e15fd1c4c777c2ca124e7de4;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_plain___eq__;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_plain_readShort;
extern PyObject *const_int_pos_282;
static PyObject *const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple;
extern PyObject *const_str_plain_cvt_enum;
static PyObject *const_tuple_str_plain_self_str_plain_IIMM_tuple;
static PyObject *const_str_digest_d0d0426c97504a02e715ed5765c29e83;
extern PyObject *const_str_plain_append_images;
static PyObject *const_str_digest_aa75aebb681891e596622e3da6ff8b94;
extern PyObject *const_int_pos_520;
extern PyObject *const_str_plain_core;
static PyObject *const_str_plain__planar_configuration;
static PyObject *const_str_plain_RGBaXX;
extern PyObject *const_str_angle_listcomp;
extern PyObject *const_int_pos_530;
static PyObject *const_str_plain__offset;
static PyObject *const_str_digest_1ac09ffa8475c7a9b4fe42b53ca370a7;
static PyObject *const_str_plain__ensure_read;
static PyObject *const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple;
static PyObject *const_str_plain_DATE_TIME;
static PyObject *const_tuple_4b14a900351fc88104458d29d4e23fd8_tuple;
static PyObject *const_str_plain__compression;
static PyObject *const_tuple_str_plain_Number_str_plain_Rational_tuple;
extern PyObject *const_str_angle_lambda;
static PyObject *const_str_plain_load_undefined;
extern PyObject *const_bytes_empty;
extern PyObject *const_str_plain_icc_profile;
static PyObject *const_str_digest_eb377a8c11b610eba35f02ef754812b7;
static PyObject *const_str_digest_2557e9b1861c939dc2d1c2b5ae3582e9;
static PyObject *const_str_plain_RGBXX;
static PyObject *const_str_plain__delegate;
static PyObject *const_str_plain_named;
static PyObject *const_str_digest_3a8bd0f273227c1e25ee9d379a59290c;
extern PyObject *const_str_plain__close__fp;
static PyObject *const_str_digest_2ee6e2c0785e264d7b99ca6b70edc256;
static PyObject *const_str_plain__pack;
extern PyObject *const_str_digest_e8f5d73778524447b7d7037d41e7364f;
static PyObject *const_tuple_2f5b45cc6c9c49956b38aa83322d7ab5_tuple;
static PyObject *const_tuple_int_pos_7_tuple;
static PyObject *const_str_digest_d48803d0260721b871b10650fb5527bc;
extern PyObject *const_str_plain_idx;
static PyObject *const_str_plain_TiffTags;
static PyObject *const_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072;
static PyObject *const_str_digest_dd35fdb1c8e222fbe19927058d694e7c;
extern PyObject *const_str_plain_filename;
static PyObject *const_str_digest_a8209851e86e25b9174074cc10865e85;
static PyObject *const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575;
extern PyObject *const_str_plain_values;
static PyObject *const_set_9e5b488b5e37385300d083e92084ce13;
static PyObject *const_tuple_str_plain_RGB_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87_tuple;
static PyObject *const_str_digest_618a3de1c568c2667cce7198dacf177b;
static PyObject *const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple;
extern PyObject *const_str_plain_ImageFile;
static PyObject *const_str_plain__legacy_api;
extern PyObject *const_int_pos_277;
static PyObject *const_str_digest_8461b59e3411b6ea466a968603cbae9d;
extern PyObject *const_str_plain_register_save;
static PyObject *const_tuple_str_plain_idx_str_plain_decorator_tuple;
extern PyObject *const_str_newline;
static PyObject *const_tuple_int_pos_5_int_pos_8_tuple;
extern PyObject *const_str_plain_short;
static PyObject *const_str_plain_isLocal;
static PyObject *const_str_plain__TiffImageFile__first;
static PyObject *const_str_plain_load_string;
extern PyObject *const_int_pos_3;
extern PyObject *const_tuple_str_plain_b_tuple;
extern PyObject *const_str_plain_entries;
static PyObject *const_str_digest_21528ffd3580853090d3b8344eadcd3b;
extern PyObject *const_str_plain___setitem__;
static PyObject *const_tuple_int_pos_1_int_0_int_0_tuple;
static PyObject *const_str_plain__debug_multipage;
static PyObject *const_str_plain_fixOffsets;
static PyObject *const_str_digest_0342d277e81a09f27cd252c2e24c1da9;
static PyObject *const_str_digest_044a19d752b01d2c30c0a044313af1d8;
static PyObject *const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_ims;
static PyObject *const_bytes_digest_c7f4479c7a292e25e55012a1d7bbd1a2;
extern PyObject *const_int_pos_7;
static PyObject *const_str_plain_SOFTWARE;
static PyObject *const_str_digest_b2cc4a1f9603763f05092af4c78725ae;
static PyObject *const_str_digest_77beeccf348e971ef8b7b5b7a70029bb;
static PyObject *const_tuple_str_plain_self_str_plain_ifd_tuple;
extern PyObject *const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple;
static PyObject *const_str_plain_EXIFIFD;
extern PyObject *const_int_pos_2;
static PyObject *const_str_plain_COMPRESSION;
extern PyObject *const_str_plain___pos__;
static PyObject *const_str_digest_6a4528fd84c0e2b69d390d3bac48a989;
extern PyObject *const_bytes_chr_0;
extern PyObject *const_str_plain_Image;
extern PyObject *const_str_plain_extents;
extern PyObject *const_int_pos_315;
static PyObject *const_str_digest_3d7b58fffa8ed7ce418bff1a75c77963;
extern PyObject *const_slice_int_pos_1_none_int_pos_2;
extern PyObject *const_int_pos_65536;
static PyObject *const_str_digest_a2f5508fa71536268c79485a8b84235c;
static PyObject *const_str_digest_4af59da437d2f21ccb08423e5fb98074;
static PyObject *const_str_plain_PREDICTOR;
static PyObject *const_dict_fb4ddbadafbecbaef28aef989e4b600e;
static PyObject *const_tuple_a510deb085123c68162081f66972daec_tuple;
static PyObject *const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple;
extern PyObject *const_str_plain_handler;
static PyObject *const_str_digest_645a4bb1e5a365205de5623d4b842cfa;
static PyObject *const_str_digest_b35b41cdf872120d59d03110260cc850;
static PyObject *const_tuple_str_plain_self_str_plain_tag_tuple;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_696cfd6263b36104ddb17e4691dd131c = UNSTREAM_STRING_ASCII( &constant_bin[ 99096 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple, 1, const_str_digest_696cfd6263b36104ddb17e4691dd131c ); Py_INCREF( const_str_digest_696cfd6263b36104ddb17e4691dd131c );
    const_str_plain_JPEGTABLES = UNSTREAM_STRING_ASCII( &constant_bin[ 99100 ], 10, 1 );
    const_str_plain___floor__ = UNSTREAM_STRING_ASCII( &constant_bin[ 99110 ], 9, 1 );
    const_str_digest_0ef719cd62029dceeb5c079ca1429379 = UNSTREAM_STRING_ASCII( &constant_bin[ 99119 ], 18, 0 );
    const_str_digest_52bfe0cd9e44f2bbf534f910f2922204 = UNSTREAM_STRING_ASCII( &constant_bin[ 99137 ], 28, 0 );
    const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain__next = UNSTREAM_STRING_ASCII( &constant_bin[ 75362 ], 5, 1 );
    const_tuple_int_pos_16384_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16384_tuple, 0, const_int_pos_16384 ); Py_INCREF( const_int_pos_16384 );
    const_str_plain_n_d = UNSTREAM_STRING_ASCII( &constant_bin[ 83177 ], 3, 1 );
    const_str_digest_2959bfbaad00926382781285512fe82c = UNSTREAM_STRING_ASCII( &constant_bin[ 99165 ], 28, 0 );
    const_dict_3fb23a4eb603424df68849b8a14b810b = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 99193 ], 235 );
    const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple, 0, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple, 1, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple, 2, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    const_str_digest_fc67544e6dec665b7d6b3c69f65a32f8 = UNSTREAM_STRING_ASCII( &constant_bin[ 99428 ], 31, 0 );
    const_str_digest_34bc167a9662be20f946baa467e82adc = UNSTREAM_STRING_ASCII( &constant_bin[ 99459 ], 45, 0 );
    const_str_plain_RGBXXX = UNSTREAM_STRING_ASCII( &constant_bin[ 99504 ], 6, 1 );
    const_str_plain_curPos = UNSTREAM_STRING_ASCII( &constant_bin[ 99510 ], 6, 1 );
    const_str_plain___trunc__ = UNSTREAM_STRING_ASCII( &constant_bin[ 99516 ], 9, 1 );
    const_str_plain_y_resolution = UNSTREAM_STRING_ASCII( &constant_bin[ 99525 ], 12, 1 );
    const_str_plain_fractions = UNSTREAM_STRING_ASCII( &constant_bin[ 99537 ], 9, 1 );
    const_str_digest_4e80b87021e352700620cbe3f7b4aaeb = UNSTREAM_STRING_ASCII( &constant_bin[ 99546 ], 27, 0 );
    const_str_plain_here = UNSTREAM_STRING_ASCII( &constant_bin[ 5213 ], 4, 1 );
    const_str_plain_MM = UNSTREAM_STRING_ASCII( &constant_bin[ 14956 ], 2, 1 );
    const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple, 0, const_str_plain_1 ); Py_INCREF( const_str_plain_1 );
    const_str_digest_fd478f0dde6a2123dae00f22c54fe654 = UNSTREAM_STRING_ASCII( &constant_bin[ 99573 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple, 1, const_str_digest_fd478f0dde6a2123dae00f22c54fe654 ); Py_INCREF( const_str_digest_fd478f0dde6a2123dae00f22c54fe654 );
    const_str_digest_3a8ea0240a25c759adfd355df23a25ea = UNSTREAM_STRING_ASCII( &constant_bin[ 99577 ], 25, 0 );
    const_bytes_digest_a3483698f0fbc8406da4d0932ca3ee34 = UNSTREAM_BYTES( &constant_bin[ 14956 ], 2 );
    const_str_digest_3f3fe8ff4c40ed11dd6dd13c59c587ec = UNSTREAM_STRING_ASCII( &constant_bin[ 99602 ], 31, 0 );
    const_tuple_str_digest_16264c6cee55ce69ff1ca662f5af22ac_tuple = PyTuple_New( 1 );
    const_str_digest_16264c6cee55ce69ff1ca662f5af22ac = UNSTREAM_STRING_ASCII( &constant_bin[ 99633 ], 43, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_16264c6cee55ce69ff1ca662f5af22ac_tuple, 0, const_str_digest_16264c6cee55ce69ff1ca662f5af22ac ); Py_INCREF( const_str_digest_16264c6cee55ce69ff1ca662f5af22ac );
    const_tuple_str_digest_54d886f81e8101b01b7b58bef7c08e77_tuple = PyTuple_New( 1 );
    const_str_digest_54d886f81e8101b01b7b58bef7c08e77 = UNSTREAM_STRING_ASCII( &constant_bin[ 99676 ], 28, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_54d886f81e8101b01b7b58bef7c08e77_tuple, 0, const_str_digest_54d886f81e8101b01b7b58bef7c08e77 ); Py_INCREF( const_str_digest_54d886f81e8101b01b7b58bef7c08e77 );
    const_str_digest_b22de4bff5b4be2069d94c3971c8bce8 = UNSTREAM_STRING_ASCII( &constant_bin[ 99704 ], 25, 0 );
    const_str_digest_16c586d12fc8b53581149967a4bc2375 = UNSTREAM_STRING_ASCII( &constant_bin[ 99729 ], 5, 0 );
    const_str_plain_RGBaX = UNSTREAM_STRING_ASCII( &constant_bin[ 99734 ], 5, 1 );
    const_str_digest_e0f4892db296c0e267a27daafc79697f = UNSTREAM_STRING_ASCII( &constant_bin[ 99739 ], 18, 0 );
    const_str_plain_COMPRESSION_INFO = UNSTREAM_STRING_ASCII( &constant_bin[ 99757 ], 16, 1 );
    const_tuple_str_plain___rpow___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rpow___tuple, 0, const_str_plain___rpow__ ); Py_INCREF( const_str_plain___rpow__ );
    const_str_plain_MutableMapping = UNSTREAM_STRING_ASCII( &constant_bin[ 99773 ], 14, 1 );
    const_list_e86f3f63dcccafd263b2bedfc1d476de_list = PyList_New( 4 );
    PyList_SET_ITEM( const_list_e86f3f63dcccafd263b2bedfc1d476de_list, 0, const_bytes_digest_3d83999277d9e5cf3228587a8fa3a8ce ); Py_INCREF( const_bytes_digest_3d83999277d9e5cf3228587a8fa3a8ce );
    const_bytes_digest_c7f4479c7a292e25e55012a1d7bbd1a2 = UNSTREAM_BYTES( &constant_bin[ 99787 ], 4 );
    PyList_SET_ITEM( const_list_e86f3f63dcccafd263b2bedfc1d476de_list, 1, const_bytes_digest_c7f4479c7a292e25e55012a1d7bbd1a2 ); Py_INCREF( const_bytes_digest_c7f4479c7a292e25e55012a1d7bbd1a2 );
    const_bytes_digest_15af81b51bfcc11aa207044331b527e4 = UNSTREAM_BYTES( &constant_bin[ 99791 ], 4 );
    PyList_SET_ITEM( const_list_e86f3f63dcccafd263b2bedfc1d476de_list, 2, const_bytes_digest_15af81b51bfcc11aa207044331b527e4 ); Py_INCREF( const_bytes_digest_15af81b51bfcc11aa207044331b527e4 );
    const_bytes_digest_14d88c70bbdd16b98ad773c9c439dd7f = UNSTREAM_BYTES( &constant_bin[ 99795 ], 4 );
    PyList_SET_ITEM( const_list_e86f3f63dcccafd263b2bedfc1d476de_list, 3, const_bytes_digest_14d88c70bbdd16b98ad773c9c439dd7f ); Py_INCREF( const_bytes_digest_14d88c70bbdd16b98ad773c9c439dd7f );
    const_tuple_89072b39c492afaede3352d819927878_tuple = PyTuple_New( 6 );
    const_str_plain_idx_fmt_name = UNSTREAM_STRING_ASCII( &constant_bin[ 99799 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 0, const_str_plain_idx_fmt_name ); Py_INCREF( const_str_plain_idx_fmt_name );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 1, const_str_plain_TYPES ); Py_INCREF( const_str_plain_TYPES );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 2, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 3, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 4, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_89072b39c492afaede3352d819927878_tuple, 5, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_digest_f169f20812704380dc83deb48954c693 = UNSTREAM_STRING_ASCII( &constant_bin[ 99811 ], 8, 0 );
    const_str_plain_StrictVersion = UNSTREAM_STRING_ASCII( &constant_bin[ 99819 ], 13, 1 );
    const_str_digest_136523f5c699ca9430b9715a0cb12ad6 = UNSTREAM_STRING_ASCII( &constant_bin[ 99832 ], 37, 0 );
    const_str_digest_5bd3d01c7dc605096daa21ce0c6f6373 = UNSTREAM_STRING_ASCII( &constant_bin[ 99869 ], 5, 0 );
    const_str_plain__numerator = UNSTREAM_STRING_ASCII( &constant_bin[ 99874 ], 10, 1 );
    const_str_digest_ddea649f39f532e0ea51d141677fd1aa = UNSTREAM_STRING_ASCII( &constant_bin[ 99884 ], 49, 0 );
    const_str_plain_WRITE_LIBTIFF = UNSTREAM_STRING_ASCII( &constant_bin[ 99933 ], 13, 1 );
    const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_str_plain_legacy_api = UNSTREAM_STRING_ASCII( &constant_bin[ 99946 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 2, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    PyTuple_SET_ITEM( const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 3, const_str_plain_vals ); Py_INCREF( const_str_plain_vals );
    const_str_plain_combine = UNSTREAM_STRING_ASCII( &constant_bin[ 40368 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 4, const_str_plain_combine ); Py_INCREF( const_str_plain_combine );
    const_str_plain__prefix = UNSTREAM_STRING_ASCII( &constant_bin[ 59807 ], 7, 1 );
    const_str_plain_tf = UNSTREAM_STRING_ASCII( &constant_bin[ 1891 ], 2, 1 );
    const_str_digest_7c5fe682ce2af83dee8766437ee37737 = UNSTREAM_STRING_ASCII( &constant_bin[ 99956 ], 11, 0 );
    const_str_plain_load_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 99967 ], 13, 1 );
    const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple, 1, const_str_plain_fn ); Py_INCREF( const_str_plain_fn );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple, 2, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    const_str_digest_a1105e36a1e6c2a432fdc8c72e22be55 = UNSTREAM_STRING_ASCII( &constant_bin[ 99980 ], 10, 0 );
    const_int_pos_48129 = PyLong_FromUnsignedLong( 48129ul );
    const_tuple_str_plain___rmod___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rmod___tuple, 0, const_str_plain___rmod__ ); Py_INCREF( const_str_plain___rmod__ );
    const_str_digest_41b07b4518ea49499b1bef79841050af = UNSTREAM_STRING_ASCII( &constant_bin[ 99990 ], 33, 0 );
    const_str_plain_SAMPLESPERPIXEL = UNSTREAM_STRING_ASCII( &constant_bin[ 100023 ], 15, 1 );
    const_str_plain_TILEOFFSETS = UNSTREAM_STRING_ASCII( &constant_bin[ 100038 ], 11, 1 );
    const_str_plain__tags_v1 = UNSTREAM_STRING_ASCII( &constant_bin[ 100049 ], 8, 1 );
    const_str_digest_92d80fefc28a8052fcffa77414112c77 = UNSTREAM_STRING_ASCII( &constant_bin[ 100057 ], 32, 0 );
    const_tuple_str_digest_cb85ff464770b2aa9e9d46bc6629552b_tuple = PyTuple_New( 1 );
    const_str_digest_cb85ff464770b2aa9e9d46bc6629552b = UNSTREAM_STRING_ASCII( &constant_bin[ 100089 ], 51, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_cb85ff464770b2aa9e9d46bc6629552b_tuple, 0, const_str_digest_cb85ff464770b2aa9e9d46bc6629552b ); Py_INCREF( const_str_digest_cb85ff464770b2aa9e9d46bc6629552b );
    const_str_plain__endian = UNSTREAM_STRING_ASCII( &constant_bin[ 100140 ], 7, 1 );
    const_str_plain_SEEK_CUR = UNSTREAM_STRING_ASCII( &constant_bin[ 100147 ], 8, 1 );
    const_str_digest_9447a377828d8a3eb4b071c4956af392 = UNSTREAM_STRING_ASCII( &constant_bin[ 100155 ], 20, 0 );
    const_tuple_str_plain_func_str_plain_idx_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_idx_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_idx_tuple, 1, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    const_str_plain_rewriteLastShort = UNSTREAM_STRING_ASCII( &constant_bin[ 100175 ], 16, 1 );
    const_str_plain_IIMM = UNSTREAM_STRING_ASCII( &constant_bin[ 100191 ], 4, 1 );
    const_str_digest_8da48267e4414d92e08b010db823b294 = UNSTREAM_STRING_ASCII( &constant_bin[ 100195 ], 36, 0 );
    const_tuple_str_plain_I_str_digest_397c5c7fdc15959b77fa01985509e603_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_397c5c7fdc15959b77fa01985509e603_tuple, 0, const_str_plain_I ); Py_INCREF( const_str_plain_I );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_397c5c7fdc15959b77fa01985509e603_tuple, 1, const_str_digest_397c5c7fdc15959b77fa01985509e603 ); Py_INCREF( const_str_digest_397c5c7fdc15959b77fa01985509e603 );
    const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple, 0, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple, 1, const_str_plain_RGBXXX ); Py_INCREF( const_str_plain_RGBXXX );
    const_tuple_bytes_digest_1ad780dcba2661bd1452198fa75d5f92_tuple = PyTuple_New( 1 );
    const_bytes_digest_1ad780dcba2661bd1452198fa75d5f92 = UNSTREAM_BYTES( &constant_bin[ 100231 ], 4 );
    PyTuple_SET_ITEM( const_tuple_bytes_digest_1ad780dcba2661bd1452198fa75d5f92_tuple, 0, const_bytes_digest_1ad780dcba2661bd1452198fa75d5f92 ); Py_INCREF( const_bytes_digest_1ad780dcba2661bd1452198fa75d5f92 );
    const_tuple_str_plain___le___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___le___tuple, 0, const_str_plain___le__ ); Py_INCREF( const_str_plain___le__ );
    const_str_plain_has_key = UNSTREAM_STRING_ASCII( &constant_bin[ 100235 ], 7, 1 );
    const_str_digest_0f4650bf2ae33c80f9df4332c00b6710 = UNSTREAM_STRING_ASCII( &constant_bin[ 100242 ], 30, 0 );
    const_tuple_int_pos_7_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_int_pos_1_tuple, 0, const_int_pos_7 ); Py_INCREF( const_int_pos_7 );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    const_str_digest_045116fcde78869c4a017035801be409 = UNSTREAM_STRING_ASCII( &constant_bin[ 94766 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple, 1, const_str_digest_045116fcde78869c4a017035801be409 ); Py_INCREF( const_str_digest_045116fcde78869c4a017035801be409 );
    const_str_digest_07f436bbe852ffe027be0902481c8ad9 = UNSTREAM_STRING_ASCII( &constant_bin[ 100272 ], 22, 0 );
    const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple, 0, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple, 1, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple, 2, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple, 3, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    const_str_plain_IFD_LEGACY_API = UNSTREAM_STRING_ASCII( &constant_bin[ 100294 ], 14, 1 );
    const_str_plain_use_load_libtiff = UNSTREAM_STRING_ASCII( &constant_bin[ 100308 ], 16, 1 );
    const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_d48803d0260721b871b10650fb5527bc = UNSTREAM_STRING_ASCII( &constant_bin[ 100324 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple, 1, const_str_digest_d48803d0260721b871b10650fb5527bc ); Py_INCREF( const_str_digest_d48803d0260721b871b10650fb5527bc );
    const_tuple_dd1d203e1ad1498d3e5f845fba24d837_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 100327 ], 194 );
    const_str_digest_eeea2ce515cd0ef3deb0643ca61099d5 = UNSTREAM_STRING_ASCII( &constant_bin[ 100521 ], 29, 0 );
    const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple, 0, const_str_plain_func ); Py_INCREF( const_str_plain_func );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple, 1, const_str_plain_TYPES ); Py_INCREF( const_str_plain_TYPES );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple, 2, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    PyTuple_SET_ITEM( const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple, 3, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_plain_TiffImageFile = UNSTREAM_STRING_ASCII( &constant_bin[ 99119 ], 13, 1 );
    const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 3, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 4, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 5, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_tuple_str_plain_RGBX_str_digest_d1530cd9eda625c4eb12bb936e71432d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_digest_d1530cd9eda625c4eb12bb936e71432d_tuple, 0, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    const_str_digest_d1530cd9eda625c4eb12bb936e71432d = UNSTREAM_STRING_ASCII( &constant_bin[ 100550 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_digest_d1530cd9eda625c4eb12bb936e71432d_tuple, 1, const_str_digest_d1530cd9eda625c4eb12bb936e71432d ); Py_INCREF( const_str_digest_d1530cd9eda625c4eb12bb936e71432d );
    const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 1, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    const_str_plain_whence = UNSTREAM_STRING_ASCII( &constant_bin[ 100558 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 2, const_str_plain_whence ); Py_INCREF( const_str_plain_whence );
    const_str_digest_1b059c50a2a4db2c0252d885bfadbd0c = UNSTREAM_STRING_ASCII( &constant_bin[ 100564 ], 57, 0 );
    const_tuple_str_plain_self_str_plain_values_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_values_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_values_tuple, 1, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_digest_76f5c36365dd76a7a65d25e7f8001de7 = UNSTREAM_STRING_ASCII( &constant_bin[ 100621 ], 31, 0 );
    const_str_digest_be1995f0b5ce3dd5fd965fac04e346bf = UNSTREAM_STRING_ASCII( &constant_bin[ 100652 ], 19, 0 );
    const_str_digest_ce02de2fe5593611868b4a64b70fa501 = UNSTREAM_STRING_ASCII( &constant_bin[ 100671 ], 5, 0 );
    const_int_pos_999 = PyLong_FromUnsignedLong( 999ul );
    const_bytes_digest_153d51c84a9c3251b131f695a1c80929 = UNSTREAM_BYTES( &constant_bin[ 1427 ], 4 );
    const_str_plain___round__ = UNSTREAM_STRING_ASCII( &constant_bin[ 100676 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_endian_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endian_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endian_tuple, 1, const_str_plain_endian ); Py_INCREF( const_str_plain_endian );
    const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    const_str_digest_d15d46b9a984d08f6d37480428d03f1f = UNSTREAM_STRING_ASCII( &constant_bin[ 100685 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple, 1, const_str_digest_d15d46b9a984d08f6d37480428d03f1f ); Py_INCREF( const_str_digest_d15d46b9a984d08f6d37480428d03f1f );
    const_str_plain__setup = UNSTREAM_STRING_ASCII( &constant_bin[ 100688 ], 6, 1 );
    const_tuple_str_plain_TYPES_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_TYPES_tuple, 0, const_str_plain_TYPES ); Py_INCREF( const_str_plain_TYPES );
    const_str_digest_92e78cf1d2c84a6d023d60c11ff5861d = UNSTREAM_STRING_ASCII( &constant_bin[ 100694 ], 27, 0 );
    const_str_digest_adc0d2ab4ca715d1067c3df53e57fce1 = UNSTREAM_STRING_ASCII( &constant_bin[ 100721 ], 28, 0 );
    const_tuple_str_plain_MutableMapping_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_MutableMapping_tuple, 0, const_str_plain_MutableMapping ); Py_INCREF( const_str_plain_MutableMapping );
    const_tuple_int_pos_32_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_32_tuple, 0, const_int_pos_32 ); Py_INCREF( const_int_pos_32 );
    const_str_digest_ec008b11def3fee25602c86081895340 = UNSTREAM_STRING_ASCII( &constant_bin[ 23327 ], 3, 0 );
    const_str_plain_ROWSPERSTRIP = UNSTREAM_STRING_ASCII( &constant_bin[ 100749 ], 12, 1 );
    const_str_plain_SAMPLEFORMAT = UNSTREAM_STRING_ASCII( &constant_bin[ 100761 ], 12, 1 );
    const_str_digest_a6f4720cc42395719d6af2978be7f9c8 = UNSTREAM_STRING_ASCII( &constant_bin[ 100773 ], 27, 0 );
    const_str_digest_0871b631df963d776df1d930042146d9 = UNSTREAM_STRING_ASCII( &constant_bin[ 100800 ], 17, 0 );
    const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 2, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    PyTuple_SET_ITEM( const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 3, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 4, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    const_tuple_str_plain___str_space_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain___str_space_tuple, 0, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    PyTuple_SET_ITEM( const_tuple_str_plain___str_space_tuple, 1, const_str_space ); Py_INCREF( const_str_space );
    const_str_digest_394cd1d93fd4faf14d35b39f57f4f3bb = UNSTREAM_STRING_ASCII( &constant_bin[ 100817 ], 34, 0 );
    const_str_plain_PREFIXES = UNSTREAM_STRING_ASCII( &constant_bin[ 100851 ], 8, 1 );
    const_str_digest_6baded4575fd14685f527600009eb0c0 = UNSTREAM_STRING_ASCII( &constant_bin[ 100859 ], 307, 0 );
    const_str_digest_70ec016f35c94ff56152caa56a4f378d = UNSTREAM_STRING_ASCII( &constant_bin[ 99729 ], 4, 0 );
    const_str_digest_b94af60b329741e4049ffdfbc9e815de = UNSTREAM_STRING_ASCII( &constant_bin[ 101166 ], 27, 0 );
    const_str_plain_SEEK_SET = UNSTREAM_STRING_ASCII( &constant_bin[ 101193 ], 8, 1 );
    const_str_plain_readLong = UNSTREAM_STRING_ASCII( &constant_bin[ 101201 ], 8, 1 );
    const_str_plain__libtiff_version = UNSTREAM_STRING_ASCII( &constant_bin[ 101209 ], 16, 1 );
    const_str_plain_Y_RESOLUTION = UNSTREAM_STRING_ASCII( &constant_bin[ 101225 ], 12, 1 );
    const_str_digest_0c43fa8f0e7f9c1bc3c21f5c3151656f = UNSTREAM_STRING_ASCII( &constant_bin[ 101237 ], 27, 0 );
    const_str_digest_ed43c790b6a538123a07bb78b3d563cf = UNSTREAM_STRING_ASCII( &constant_bin[ 101264 ], 11, 0 );
    const_tuple_int_0_int_0_int_0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_0_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_0_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_fieldType = UNSTREAM_STRING_ASCII( &constant_bin[ 101275 ], 9, 1 );
    const_tuple_str_plain___rtruediv___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rtruediv___tuple, 0, const_str_plain___rtruediv__ ); Py_INCREF( const_str_plain___rtruediv__ );
    const_str_plain___ceil__ = UNSTREAM_STRING_ASCII( &constant_bin[ 101284 ], 8, 1 );
    const_str_plain_newFrame = UNSTREAM_STRING_ASCII( &constant_bin[ 101292 ], 8, 1 );
    const_tuple_2d7608db523ab7514b820a08781131b1_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 1, const_str_plain_num ); Py_INCREF( const_str_plain_num );
    PyTuple_SET_ITEM( const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 2, const_str_plain_denom ); Py_INCREF( const_str_plain_denom );
    PyTuple_SET_ITEM( const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 3, const_str_plain_combine ); Py_INCREF( const_str_plain_combine );
    const_tuple_str_plain_PA_str_plain_PA_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_PA_str_plain_PA_tuple, 0, const_str_plain_PA ); Py_INCREF( const_str_plain_PA );
    PyTuple_SET_ITEM( const_tuple_str_plain_PA_str_plain_PA_tuple, 1, const_str_plain_PA ); Py_INCREF( const_str_plain_PA );
    const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    const_str_digest_104f43ace8a2dd2688c64d99e33006a2 = UNSTREAM_STRING_ASCII( &constant_bin[ 96041 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple, 1, const_str_digest_104f43ace8a2dd2688c64d99e33006a2 ); Py_INCREF( const_str_digest_104f43ace8a2dd2688c64d99e33006a2 );
    const_tuple_str_plain_RGB_str_digest_96bd43a8b0706a78cd1cad9911adc73a_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_96bd43a8b0706a78cd1cad9911adc73a_tuple, 0, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    const_str_digest_96bd43a8b0706a78cd1cad9911adc73a = UNSTREAM_STRING_ASCII( &constant_bin[ 95842 ], 7, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_96bd43a8b0706a78cd1cad9911adc73a_tuple, 1, const_str_digest_96bd43a8b0706a78cd1cad9911adc73a ); Py_INCREF( const_str_digest_96bd43a8b0706a78cd1cad9911adc73a );
    const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 3, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain_libtiff = UNSTREAM_STRING_ASCII( &constant_bin[ 99689 ], 7, 1 );
    const_str_digest_afdb5f00ce92cafe90c56f17650752ca = UNSTREAM_STRING_ASCII( &constant_bin[ 101300 ], 4, 0 );
    const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_74cec407fdc40159101a17036ad167d9 = UNSTREAM_STRING_ASCII( &constant_bin[ 101304 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple, 1, const_str_digest_74cec407fdc40159101a17036ad167d9 ); Py_INCREF( const_str_digest_74cec407fdc40159101a17036ad167d9 );
    const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple, 1, const_str_plain_IIMM ); Py_INCREF( const_str_plain_IIMM );
    const_str_plain_IFDoffset = UNSTREAM_STRING_ASCII( &constant_bin[ 101307 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple, 2, const_str_plain_IFDoffset ); Py_INCREF( const_str_plain_IFDoffset );
    const_str_digest_1067b9cc680d4dfc20959a61f380945a = UNSTREAM_STRING_ASCII( &constant_bin[ 101316 ], 4, 0 );
    const_str_plain__tags_v2 = UNSTREAM_STRING_ASCII( &constant_bin[ 101320 ], 8, 1 );
    const_str_digest_a0baa4bb80808920b329f10b45c1da8f = UNSTREAM_STRING_ASCII( &constant_bin[ 101328 ], 129, 0 );
    const_str_digest_f0ccfa7d4f587eaaae592d8f3713f584 = UNSTREAM_STRING_ASCII( &constant_bin[ 101457 ], 29, 0 );
    const_tuple_str_plain_L_str_plain_L_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_plain_L_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_plain_L_tuple, 1, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_int_pos_33723 = PyLong_FromUnsignedLong( 33723ul );
    const_str_digest_1d62906af8266e02beba793abbc82c42 = UNSTREAM_STRING_ASCII( &constant_bin[ 100564 ], 38, 0 );
    const_tuple_int_pos_12_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_12_tuple, 0, const_int_pos_12 ); Py_INCREF( const_int_pos_12 );
    const_tuple_str_plain_I_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0_tuple, 0, const_str_plain_I ); Py_INCREF( const_str_plain_I );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0_tuple, 1, const_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0 ); Py_INCREF( const_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0 );
    const_str_plain_COMPRESSION_INFO_REV = UNSTREAM_STRING_ASCII( &constant_bin[ 101486 ], 20, 1 );
    const_str_plain__register_writer = UNSTREAM_STRING_ASCII( &constant_bin[ 100586 ], 16, 1 );
    const_str_digest_1b14e851371247d7708137c79e11e7e3 = UNSTREAM_STRING_ASCII( &constant_bin[ 101506 ], 30, 0 );
    const_tuple_str_plain_RGBA_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    const_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1 = UNSTREAM_STRING_ASCII( &constant_bin[ 101536 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1_tuple, 1, const_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1 ); Py_INCREF( const_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1 );
    const_str_digest_014e0017b50029be569b14e24a36b93e = UNSTREAM_STRING_ASCII( &constant_bin[ 101544 ], 29, 0 );
    const_str_plain_rewriteLastLong = UNSTREAM_STRING_ASCII( &constant_bin[ 101573 ], 15, 1 );
    const_str_plain_RGBAXX = UNSTREAM_STRING_ASCII( &constant_bin[ 101588 ], 6, 1 );
    const_str_plain_artist = UNSTREAM_STRING_ASCII( &constant_bin[ 101594 ], 6, 1 );
    const_str_plain_rewriteLastShortToLong = UNSTREAM_STRING_ASCII( &constant_bin[ 101600 ], 22, 1 );
    const_tuple_d2e5efd12c666b95f5125ddb1882618e_tuple = PyTuple_New( 2 );
    const_str_digest_207b218ded9f77d80f4f9fbc4fd25802 = UNSTREAM_STRING_ASCII( &constant_bin[ 34607 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_d2e5efd12c666b95f5125ddb1882618e_tuple, 0, const_str_digest_207b218ded9f77d80f4f9fbc4fd25802 ); Py_INCREF( const_str_digest_207b218ded9f77d80f4f9fbc4fd25802 );
    const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089 = UNSTREAM_STRING_ASCII( &constant_bin[ 99870 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_d2e5efd12c666b95f5125ddb1882618e_tuple, 1, const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089 ); Py_INCREF( const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089 );
    const_tuple_int_pos_5_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_5_tuple, 0, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    const_tuple_str_plain___ceil___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___ceil___tuple, 0, const_str_plain___ceil__ ); Py_INCREF( const_str_plain___ceil__ );
    const_str_plain_write_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 101622 ], 14, 1 );
    const_str_digest_08d66d5d9d66e1ec869adfbc7b7b06ef = UNSTREAM_STRING_ASCII( &constant_bin[ 101636 ], 43, 0 );
    const_str_digest_64afa65c90866eeaeb2cfc62c2ed5551 = UNSTREAM_STRING_ASCII( &constant_bin[ 101679 ], 5, 0 );
    const_str_digest_0e00713afa06076208509e5fd07311b4 = UNSTREAM_STRING_ASCII( &constant_bin[ 101684 ], 20, 0 );
    const_slice_int_pos_5_none_none = PySlice_New( const_int_pos_5, Py_None, Py_None );
    const_str_plain_Tags = UNSTREAM_STRING_ASCII( &constant_bin[ 101704 ], 4, 1 );
    const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple, 1, const_str_plain_IFDoffset ); Py_INCREF( const_str_plain_IFDoffset );
    const_str_plain_numTags = UNSTREAM_STRING_ASCII( &constant_bin[ 101708 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple, 2, const_str_plain_numTags ); Py_INCREF( const_str_plain_numTags );
    const_str_digest_30cb60b67765334b2b295f3024c62ea3 = UNSTREAM_STRING_ASCII( &constant_bin[ 101715 ], 30, 0 );
    const_str_digest_cec14e1ec8821c6143797f46ba5e3e02 = UNSTREAM_STRING_ASCII( &constant_bin[ 101745 ], 19, 0 );
    const_str_digest_d63fb117ffb46ff6cda4fb0e082808aa = UNSTREAM_STRING_ASCII( &constant_bin[ 101764 ], 36, 0 );
    const_str_plain_offsetOfNewPage = UNSTREAM_STRING_ASCII( &constant_bin[ 101800 ], 15, 1 );
    const_str_digest_cdd5e53041d6bbb88ffd058e2b362a66 = UNSTREAM_STRING_ASCII( &constant_bin[ 101815 ], 37, 0 );
    const_str_digest_3a3999943d59392ff6584d751eab9554 = UNSTREAM_STRING_ASCII( &constant_bin[ 101852 ], 38, 0 );
    const_str_plain_SEEK_END = UNSTREAM_STRING_ASCII( &constant_bin[ 101890 ], 8, 1 );
    const_str_plain_ImageFileDirectory = UNSTREAM_STRING_ASCII( &constant_bin[ 99602 ], 18, 1 );
    const_str_digest_63e41ce0be1b33744234e91bbfd3694f = UNSTREAM_STRING_ASCII( &constant_bin[ 101898 ], 25, 0 );
    const_str_plain__register_basic = UNSTREAM_STRING_ASCII( &constant_bin[ 101923 ], 15, 1 );
    const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_2c033295b58b93ebf2caef911a75b646 = UNSTREAM_STRING_ASCII( &constant_bin[ 94675 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple, 1, const_str_digest_2c033295b58b93ebf2caef911a75b646 ); Py_INCREF( const_str_digest_2c033295b58b93ebf2caef911a75b646 );
    const_str_digest_8336b700d4e432f5dee89565b3bbfb48 = UNSTREAM_STRING_ASCII( &constant_bin[ 101938 ], 4, 0 );
    const_tuple_str_plain___mul___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___mul___tuple, 0, const_str_plain___mul__ ); Py_INCREF( const_str_plain___mul__ );
    const_tuple_b7325af518eefa977b38a25ae794bf43_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_b7325af518eefa977b38a25ae794bf43_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_b7325af518eefa977b38a25ae794bf43_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_b7325af518eefa977b38a25ae794bf43_tuple, 2, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_b7325af518eefa977b38a25ae794bf43_tuple, 3, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    const_str_digest_6da32f2677f2876f0d19b8aec6191f27 = UNSTREAM_STRING_ASCII( &constant_bin[ 101942 ], 15, 0 );
    const_str_plain__tagdata = UNSTREAM_STRING_ASCII( &constant_bin[ 101957 ], 8, 1 );
    const_str_digest_0ba47df103c88e4b97bc17b69694639a = UNSTREAM_STRING_ASCII( &constant_bin[ 101965 ], 9, 0 );
    const_str_digest_c36da39c7c65e54f3d98a9d859aab6b7 = UNSTREAM_STRING_ASCII( &constant_bin[ 99884 ], 30, 0 );
    const_str_digest_d687ba9d0a20767ca771c8cb089e3484 = UNSTREAM_STRING_ASCII( &constant_bin[ 29881 ], 6, 0 );
    const_str_digest_d7e629bfb69eb6b0fec8b50cbe62c91a = UNSTREAM_STRING_ASCII( &constant_bin[ 101974 ], 32, 0 );
    const_str_digest_ee4a3fba8fc3306e6cef526eeff90632 = UNSTREAM_STRING_ASCII( &constant_bin[ 102006 ], 5, 0 );
    const_str_digest_843ed406639f09239929be890e1db672 = UNSTREAM_STRING_ASCII( &constant_bin[ 102011 ], 491, 0 );
    const_str_plain_ARTIST = UNSTREAM_STRING_ASCII( &constant_bin[ 102502 ], 6, 1 );
    const_str_digest_56dfe18a992b31936ba76f9e84173d96 = UNSTREAM_STRING_ASCII( &constant_bin[ 102508 ], 61, 0 );
    const_str_digest_4d423ef79a0b823d0444d270265c8a85 = UNSTREAM_STRING_ASCII( &constant_bin[ 102569 ], 30, 0 );
    const_tuple_str_plain___ge___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___ge___tuple, 0, const_str_plain___ge__ ); Py_INCREF( const_str_plain___ge__ );
    const_str_digest_7f1557a96760768a0c43c9c1d8bf4c7b = UNSTREAM_STRING_ASCII( &constant_bin[ 102599 ], 37, 0 );
    const_str_digest_5dc413e42e09ea1ee700a04fe4511fc2 = UNSTREAM_STRING_ASCII( &constant_bin[ 102636 ], 28, 0 );
    const_str_plain_PHOTOSHOP_CHUNK = UNSTREAM_STRING_ASCII( &constant_bin[ 102664 ], 15, 1 );
    const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple, 0, const_str_plain_CMYK ); Py_INCREF( const_str_plain_CMYK );
    const_str_plain_CMYKX = UNSTREAM_STRING_ASCII( &constant_bin[ 102679 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple, 1, const_str_plain_CMYKX ); Py_INCREF( const_str_plain_CMYKX );
    const_tuple_str_plain_RGBX_str_plain_RGBX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBX_tuple, 0, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBX_tuple, 1, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    const_str_digest_11f5dbf60ebb415ec7395c7fe32c31a5 = UNSTREAM_STRING_ASCII( &constant_bin[ 102684 ], 88, 0 );
    const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple, 1, const_str_digest_8336b700d4e432f5dee89565b3bbfb48 ); Py_INCREF( const_str_digest_8336b700d4e432f5dee89565b3bbfb48 );
    const_str_plain__setitem = UNSTREAM_STRING_ASCII( &constant_bin[ 98102 ], 8, 1 );
    const_slice_none_none_int_pos_2 = PySlice_New( Py_None, Py_None, const_int_pos_2 );
    const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple, 1, const_str_digest_1067b9cc680d4dfc20959a61f380945a ); Py_INCREF( const_str_digest_1067b9cc680d4dfc20959a61f380945a );
    const_tuple_str_plain___mod___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___mod___tuple, 0, const_str_plain___mod__ ); Py_INCREF( const_str_plain___mod__ );
    const_str_plain_HL = UNSTREAM_STRING_ASCII( &constant_bin[ 28892 ], 2, 1 );
    const_str_digest_9e78b0491fb8e5d68c5f1c8254dd9c79 = UNSTREAM_STRING_ASCII( &constant_bin[ 102772 ], 8, 0 );
    const_tuple_str_plain_i8_str_plain_o8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i8_str_plain_o8_tuple, 0, const_str_plain_i8 ); Py_INCREF( const_str_plain_i8 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i8_str_plain_o8_tuple, 1, const_str_plain_o8 ); Py_INCREF( const_str_plain_o8 );
    const_str_digest_d563e1630064893d81f5c964d91100c8 = UNSTREAM_STRING_ASCII( &constant_bin[ 102780 ], 35, 0 );
    const_str_digest_37cb21a10952216801826b6d0e8eed45 = UNSTREAM_STRING_ASCII( &constant_bin[ 102815 ], 26, 0 );
    const_str_plain_ifd = UNSTREAM_STRING_ASCII( &constant_bin[ 102159 ], 3, 1 );
    const_str_plain_writeLong = UNSTREAM_STRING_ASCII( &constant_bin[ 102841 ], 9, 1 );
    const_str_plain_copyright = UNSTREAM_STRING_ASCII( &constant_bin[ 102850 ], 9, 1 );
    const_str_digest_ee0894063643bd57726272cee14acd50 = UNSTREAM_STRING_ASCII( &constant_bin[ 102859 ], 49, 0 );
    const_str_plain__write_dispatch = UNSTREAM_STRING_ASCII( &constant_bin[ 102908 ], 15, 1 );
    const_str_plain_tag_v2 = UNSTREAM_STRING_ASCII( &constant_bin[ 102923 ], 6, 1 );
    const_tuple_str_plain___neg___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___neg___tuple, 0, const_str_plain___neg__ ); Py_INCREF( const_str_plain___neg__ );
    const_str_plain_IMAGEJ_META_DATA = UNSTREAM_STRING_ASCII( &constant_bin[ 102929 ], 16, 1 );
    const_str_plain_finalize = UNSTREAM_STRING_ASCII( &constant_bin[ 99157 ], 8, 1 );
    const_tuple_str_plain_Fraction_tuple = PyTuple_New( 1 );
    const_str_plain_Fraction = UNSTREAM_STRING_ASCII( &constant_bin[ 102945 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Fraction_tuple, 0, const_str_plain_Fraction ); Py_INCREF( const_str_plain_Fraction );
    const_bytes_digest_b65fc0f8807dad4b45c77b9fe922011e = UNSTREAM_BYTES( &constant_bin[ 96622 ], 2 );
    const_str_plain_basetypes = UNSTREAM_STRING_ASCII( &constant_bin[ 102953 ], 9, 1 );
    const_str_digest_9b4319a76efe1c901eb0d8c93992356a = UNSTREAM_STRING_ASCII( &constant_bin[ 102962 ], 22, 0 );
    const_str_digest_3e24da836032a5bee4f5b55c36ec831d = UNSTREAM_STRING_ASCII( &constant_bin[ 102984 ], 5, 0 );
    const_tuple_str_plain___gt___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___gt___tuple, 0, const_str_plain___gt__ ); Py_INCREF( const_str_plain___gt__ );
    const_tuple_str_plain___abs___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___abs___tuple, 0, const_str_plain___abs__ ); Py_INCREF( const_str_plain___abs__ );
    const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple, 0, const_str_plain_HL ); Py_INCREF( const_str_plain_HL );
    const_int_pos_42 = PyLong_FromUnsignedLong( 42ul );
    PyTuple_SET_ITEM( const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple, 1, const_int_pos_42 ); Py_INCREF( const_int_pos_42 );
    PyTuple_SET_ITEM( const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple, 0, const_str_plain_F ); Py_INCREF( const_str_plain_F );
    PyTuple_SET_ITEM( const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple, 1, const_str_digest_d687ba9d0a20767ca771c8cb089e3484 ); Py_INCREF( const_str_digest_d687ba9d0a20767ca771c8cb089e3484 );
    const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 2, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    const_tuple_str_plain___rmul___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rmul___tuple, 0, const_str_plain___rmul__ ); Py_INCREF( const_str_plain___rmul__ );
    const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 3, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple, 4, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain_load_byte = UNSTREAM_STRING_ASCII( &constant_bin[ 99624 ], 9, 1 );
    const_str_digest_bb7b5e999b69bc4f46f91ae4613836dd = UNSTREAM_STRING_ASCII( &constant_bin[ 102989 ], 36, 0 );
    const_str_plain_tagdata = UNSTREAM_STRING_ASCII( &constant_bin[ 101958 ], 7, 1 );
    const_str_plain_stripoffsets = UNSTREAM_STRING_ASCII( &constant_bin[ 103025 ], 12, 1 );
    const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple, 0, const_str_plain_1 ); Py_INCREF( const_str_plain_1 );
    const_str_digest_bbc19644d747bce501dfd7062a7d3586 = UNSTREAM_STRING_ASCII( &constant_bin[ 103037 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple, 1, const_str_digest_bbc19644d747bce501dfd7062a7d3586 ); Py_INCREF( const_str_digest_bbc19644d747bce501dfd7062a7d3586 );
    const_str_digest_9d8621449487ac5dc0f624c7fe4f607c = UNSTREAM_STRING_ASCII( &constant_bin[ 103040 ], 19, 0 );
    const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple, 0, const_str_plain_Image ); Py_INCREF( const_str_plain_Image );
    PyTuple_SET_ITEM( const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple, 1, const_str_plain_ImageFile ); Py_INCREF( const_str_plain_ImageFile );
    PyTuple_SET_ITEM( const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple, 2, const_str_plain_ImagePalette ); Py_INCREF( const_str_plain_ImagePalette );
    const_str_plain_TiffTags = UNSTREAM_STRING_ASCII( &constant_bin[ 103059 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple, 3, const_str_plain_TiffTags ); Py_INCREF( const_str_plain_TiffTags );
    const_str_plain_write_string = UNSTREAM_STRING_ASCII( &constant_bin[ 103067 ], 12, 1 );
    const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple, 2, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple, 3, const_str_plain_ret ); Py_INCREF( const_str_plain_ret );
    const_str_digest_af7a52fad84da97b09cedf0621041882 = UNSTREAM_STRING_ASCII( &constant_bin[ 103079 ], 4, 0 );
    const_str_plain_COLORMAP = UNSTREAM_STRING_ASCII( &constant_bin[ 103083 ], 8, 1 );
    const_tuple_str_plain___rsub___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rsub___tuple, 0, const_str_plain___rsub__ ); Py_INCREF( const_str_plain___rsub__ );
    const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple, 3, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    const_str_plain_PLANAR_CONFIGURATION = UNSTREAM_STRING_ASCII( &constant_bin[ 103091 ], 20, 1 );
    const_str_plain_X_RESOLUTION = UNSTREAM_STRING_ASCII( &constant_bin[ 103111 ], 12, 1 );
    const_str_plain_write_undefined = UNSTREAM_STRING_ASCII( &constant_bin[ 103123 ], 15, 1 );
    const_tuple_str_plain_RGBA_str_digest_3d7b58fffa8ed7ce418bff1a75c77963_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_3d7b58fffa8ed7ce418bff1a75c77963_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    const_str_digest_3d7b58fffa8ed7ce418bff1a75c77963 = UNSTREAM_STRING_ASCII( &constant_bin[ 103138 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_3d7b58fffa8ed7ce418bff1a75c77963_tuple, 1, const_str_digest_3d7b58fffa8ed7ce418bff1a75c77963 ); Py_INCREF( const_str_digest_3d7b58fffa8ed7ce418bff1a75c77963 );
    const_str_plain_numerator = UNSTREAM_STRING_ASCII( &constant_bin[ 99875 ], 9, 1 );
    const_str_plain_shortFmt = UNSTREAM_STRING_ASCII( &constant_bin[ 103146 ], 8, 1 );
    const_tuple_str_plain___round___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___round___tuple, 0, const_str_plain___round__ ); Py_INCREF( const_str_plain___round__ );
    const_str_digest_10e0e22f3edc67c4907122668a340595 = UNSTREAM_STRING_ASCII( &constant_bin[ 102713 ], 44, 0 );
    const_str_plain_IFDRational = UNSTREAM_STRING_ASCII( &constant_bin[ 100155 ], 11, 1 );
    const_str_plain_goToEnd = UNSTREAM_STRING_ASCII( &constant_bin[ 99566 ], 7, 1 );
    const_str_plain_writeShort = UNSTREAM_STRING_ASCII( &constant_bin[ 103154 ], 10, 1 );
    const_str_plain_OPEN_INFO = UNSTREAM_STRING_ASCII( &constant_bin[ 103164 ], 9, 1 );
    const_str_plain_IMAGEDESCRIPTION = UNSTREAM_STRING_ASCII( &constant_bin[ 103173 ], 16, 1 );
    const_tuple_8604fd5de92cf1e0dc04582e17177efb_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 103189 ], 196 );
    const_str_digest_bc9a5568d7961a4abcbcbc75b890c778 = UNSTREAM_STRING_ASCII( &constant_bin[ 103385 ], 24, 0 );
    const_str_digest_944d2b0908af9c329cdc6dd3113d910b = UNSTREAM_STRING_ASCII( &constant_bin[ 103409 ], 27, 0 );
    const_str_plain_tiffinfo = UNSTREAM_STRING_ASCII( &constant_bin[ 103436 ], 8, 1 );
    const_str_plain__TiffImageFile__next = UNSTREAM_STRING_ASCII( &constant_bin[ 103444 ], 20, 1 );
    const_str_digest_9d800b28b537f147be4f7e1d30bcd4d4 = UNSTREAM_STRING_ASCII( &constant_bin[ 103464 ], 32, 0 );
    const_tuple_type_tuple_type_bytes_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_type_tuple_type_bytes_tuple, 0, (PyObject *)&PyTuple_Type ); Py_INCREF( (PyObject *)&PyTuple_Type );
    PyTuple_SET_ITEM( const_tuple_type_tuple_type_bytes_tuple, 1, (PyObject *)&PyBytes_Type ); Py_INCREF( (PyObject *)&PyBytes_Type );
    const_str_digest_82b28824d2cb77fb93e22da1c73c7177 = UNSTREAM_STRING_ASCII( &constant_bin[ 103496 ], 23, 0 );
    const_str_digest_55323581d0d7393f04c8370157275299 = UNSTREAM_STRING_ASCII( &constant_bin[ 103519 ], 20, 0 );
    const_str_digest_58486f122f0bfa598fdd55fe93a43522 = UNSTREAM_STRING_ASCII( &constant_bin[ 103539 ], 29, 0 );
    const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple, 2, const_str_plain_op ); Py_INCREF( const_str_plain_op );
    const_str_digest_014ebc09434e7e49f602922eb046a479 = UNSTREAM_STRING_ASCII( &constant_bin[ 103568 ], 4, 0 );
    const_tuple_str_digest_13586c50c32aa1b6d5c86580eca24f00_tuple = PyTuple_New( 1 );
    const_str_digest_13586c50c32aa1b6d5c86580eca24f00 = UNSTREAM_STRING_ASCII( &constant_bin[ 103572 ], 53, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_13586c50c32aa1b6d5c86580eca24f00_tuple, 0, const_str_digest_13586c50c32aa1b6d5c86580eca24f00 ); Py_INCREF( const_str_digest_13586c50c32aa1b6d5c86580eca24f00 );
    const_tuple_int_pos_2_int_0_int_0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_0_int_0_tuple, 0, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_0_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_0_int_0_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_digest_6692cf102d3f538f97ca25bd835e3695 = UNSTREAM_STRING_ASCII( &constant_bin[ 103625 ], 10, 0 );
    const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple, 0, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple, 1, const_str_digest_64afa65c90866eeaeb2cfc62c2ed5551 ); Py_INCREF( const_str_digest_64afa65c90866eeaeb2cfc62c2ed5551 );
    const_str_plain_max_denominator = UNSTREAM_STRING_ASCII( &constant_bin[ 103635 ], 15, 1 );
    const_str_digest_9317aec61315258e1a9827aa603b38b1 = UNSTREAM_STRING_ASCII( &constant_bin[ 103650 ], 30, 0 );
    const_str_plain_HHL = UNSTREAM_STRING_ASCII( &constant_bin[ 103680 ], 3, 1 );
    const_str_plain_fixIFD = UNSTREAM_STRING_ASCII( &constant_bin[ 103683 ], 6, 1 );
    const_str_digest_1f47d6fc66029446390a6aed590967bf = UNSTREAM_STRING_ASCII( &constant_bin[ 103689 ], 18, 0 );
    const_str_digest_e47dd4efad1227d32ad00623d2ee463a = UNSTREAM_STRING_ASCII( &constant_bin[ 103707 ], 33, 0 );
    const_tuple_str_plain___radd___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___radd___tuple, 0, const_str_plain___radd__ ); Py_INCREF( const_str_plain___radd__ );
    const_str_digest_13eb7bc9a5609c95771e02bd533dd9f6 = UNSTREAM_STRING_ASCII( &constant_bin[ 103740 ], 26, 0 );
    const_tuple_int_pos_999_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_999_tuple, 0, const_int_pos_999 ); Py_INCREF( const_int_pos_999 );
    const_str_digest_e91e67de774a34be043e8e8955a64230 = UNSTREAM_STRING_ASCII( &constant_bin[ 103766 ], 20, 0 );
    const_str_digest_08debf0f4bbd8ad2aacfe5bce50b4adf = UNSTREAM_STRING_ASCII( &constant_bin[ 103786 ], 33, 0 );
    const_str_plain_longFmt = UNSTREAM_STRING_ASCII( &constant_bin[ 103819 ], 7, 1 );
    const_str_plain_load_signed_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 103826 ], 20, 1 );
    const_str_digest_6d48505254218ff69df3910d61a5a564 = UNSTREAM_STRING_ASCII( &constant_bin[ 103846 ], 20, 0 );
    const_str_digest_778fa9e6db0da507c6d326929fff4b26 = UNSTREAM_STRING_ASCII( &constant_bin[ 103866 ], 54, 0 );
    const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple, 0, const_str_plain_CMYK ); Py_INCREF( const_str_plain_CMYK );
    const_str_plain_CMYKXX = UNSTREAM_STRING_ASCII( &constant_bin[ 103920 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple, 1, const_str_plain_CMYKXX ); Py_INCREF( const_str_plain_CMYKXX );
    const_tuple_int_pos_8_int_pos_8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_tuple, 0, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_int_pos_8_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain_close_fp = UNSTREAM_STRING_ASCII( &constant_bin[ 103926 ], 8, 1 );
    const_str_plain_original = UNSTREAM_STRING_ASCII( &constant_bin[ 4394 ], 8, 1 );
    const_str_digest_ad2179cb5f897d35c7d5f7ba32d3e854 = UNSTREAM_STRING_ASCII( &constant_bin[ 103934 ], 7, 0 );
    const_str_plain_DEBUG = UNSTREAM_STRING_ASCII( &constant_bin[ 103941 ], 5, 1 );
    const_tuple_str_plain_2L_tuple = PyTuple_New( 1 );
    const_str_plain_2L = UNSTREAM_STRING_ASCII( &constant_bin[ 18087 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_2L_tuple, 0, const_str_plain_2L ); Py_INCREF( const_str_plain_2L );
    const_tuple_8b55c0686e2d1ff60c7f8a942ca30637_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_8b55c0686e2d1ff60c7f8a942ca30637_tuple, 0, const_str_digest_772c0402ef22c7a4d610f4443976d74a ); Py_INCREF( const_str_digest_772c0402ef22c7a4d610f4443976d74a );
    PyTuple_SET_ITEM( const_tuple_8b55c0686e2d1ff60c7f8a942ca30637_tuple, 1, const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c ); Py_INCREF( const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c );
    const_str_digest_ac7ecfa5afac9d9cba7088893119bbcf = UNSTREAM_STRING_ASCII( &constant_bin[ 103946 ], 29, 0 );
    const_str_digest_5a086bbbd36cfacd08c303e7ece5be9c = UNSTREAM_STRING_ASCII( &constant_bin[ 103975 ], 29, 0 );
    const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple, 1, const_str_plain_max_denominator ); Py_INCREF( const_str_plain_max_denominator );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple, 2, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    const_str_plain_STRIPOFFSETS = UNSTREAM_STRING_ASCII( &constant_bin[ 104004 ], 12, 1 );
    const_str_digest_ce68b0ecc72c28e379f99ada6da92ef1 = UNSTREAM_STRING_ASCII( &constant_bin[ 104016 ], 18, 0 );
    const_tuple_str_plain___nonzero___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___nonzero___tuple, 0, const_str_plain___nonzero__ ); Py_INCREF( const_str_plain___nonzero__ );
    const_tuple_str_plain_RGB_str_digest_ee4a3fba8fc3306e6cef526eeff90632_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_ee4a3fba8fc3306e6cef526eeff90632_tuple, 0, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_ee4a3fba8fc3306e6cef526eeff90632_tuple, 1, const_str_digest_ee4a3fba8fc3306e6cef526eeff90632 ); Py_INCREF( const_str_digest_ee4a3fba8fc3306e6cef526eeff90632 );
    const_str_plain_TIFF = UNSTREAM_STRING_ASCII( &constant_bin[ 99942 ], 4, 1 );
    const_str_digest_35021dd69aca70179a6653ae0392c329 = UNSTREAM_STRING_ASCII( &constant_bin[ 104034 ], 22, 0 );
    const_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87 = UNSTREAM_STRING_ASCII( &constant_bin[ 104056 ], 7, 0 );
    const_str_plain_distutils = UNSTREAM_STRING_ASCII( &constant_bin[ 104063 ], 9, 1 );
    const_str_digest_3bd8050fabc18c25f5fe43bc68a84616 = UNSTREAM_STRING_ASCII( &constant_bin[ 104072 ], 11, 0 );
    const_str_digest_d0307c57f513d1fa587f8cfd66cc7721 = UNSTREAM_STRING_ASCII( &constant_bin[ 104083 ], 5, 0 );
    const_tuple_str_plain_compression_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_compression_tuple, 0, const_str_plain_compression ); Py_INCREF( const_str_plain_compression );
    const_str_digest_5ac66013283065edc605cc1dd029e935 = UNSTREAM_STRING_ASCII( &constant_bin[ 104088 ], 28, 0 );
    const_tuple_str_plain___pos___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___pos___tuple, 0, const_str_plain___pos__ ); Py_INCREF( const_str_plain___pos__ );
    const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple, 1, const_str_digest_afdb5f00ce92cafe90c56f17650752ca ); Py_INCREF( const_str_digest_afdb5f00ce92cafe90c56f17650752ca );
    const_tuple_str_plain_I_str_digest_380c2cde6c6849a9cfbcc9225b2b8425_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_380c2cde6c6849a9cfbcc9225b2b8425_tuple, 0, const_str_plain_I ); Py_INCREF( const_str_plain_I );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_380c2cde6c6849a9cfbcc9225b2b8425_tuple, 1, const_str_digest_380c2cde6c6849a9cfbcc9225b2b8425 ); Py_INCREF( const_str_digest_380c2cde6c6849a9cfbcc9225b2b8425 );
    const_str_plain_totalSize = UNSTREAM_STRING_ASCII( &constant_bin[ 104116 ], 9, 1 );
    const_str_plain_IMAGELENGTH = UNSTREAM_STRING_ASCII( &constant_bin[ 104125 ], 11, 1 );
    const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple, 1, const_str_plain_code ); Py_INCREF( const_str_plain_code );
    PyTuple_SET_ITEM( const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_to_v2 = UNSTREAM_STRING_ASCII( &constant_bin[ 101188 ], 5, 1 );
    const_str_digest_42acff2a1fadc967cda081746b144844 = UNSTREAM_STRING_ASCII( &constant_bin[ 104136 ], 4, 0 );
    const_str_plain_II = UNSTREAM_STRING_ASCII( &constant_bin[ 96622 ], 2, 1 );
    const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple, 1, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple, 2, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_tuple_c26d7102cb00910348cf3aecb080d1f8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_c26d7102cb00910348cf3aecb080d1f8_tuple, 0, const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c ); Py_INCREF( const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c );
    PyTuple_SET_ITEM( const_tuple_c26d7102cb00910348cf3aecb080d1f8_tuple, 1, const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c ); Py_INCREF( const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c );
    const_str_digest_e5a5520d16084b1fa8690fea5fd54003 = UNSTREAM_STRING_ASCII( &constant_bin[ 104140 ], 42, 0 );
    const_str_digest_d01e13759d1e788297ffbd672842812b = UNSTREAM_STRING_ASCII( &constant_bin[ 104182 ], 57, 0 );
    const_str_digest_5c0f840f8d91b28856d4b5f739bfca9c = UNSTREAM_STRING_ASCII( &constant_bin[ 104239 ], 33, 0 );
    const_str_digest_6409cd27149cc76e217dad17d2c5d661 = UNSTREAM_STRING_ASCII( &constant_bin[ 104272 ], 21, 0 );
    const_str_digest_14efb3122da4b9eb7106a01cd1e50e56 = UNSTREAM_STRING_ASCII( &constant_bin[ 104293 ], 27, 0 );
    const_tuple_str_plain_RGBX_str_digest_3a8bd0f273227c1e25ee9d379a59290c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_digest_3a8bd0f273227c1e25ee9d379a59290c_tuple, 0, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    const_str_digest_3a8bd0f273227c1e25ee9d379a59290c = UNSTREAM_STRING_ASCII( &constant_bin[ 104320 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_digest_3a8bd0f273227c1e25ee9d379a59290c_tuple, 1, const_str_digest_3a8bd0f273227c1e25ee9d379a59290c ); Py_INCREF( const_str_digest_3a8bd0f273227c1e25ee9d379a59290c );
    const_tuple_str_plain_op_str_plain_delegate_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_op_str_plain_delegate_tuple, 0, const_str_plain_op ); Py_INCREF( const_str_plain_op );
    const_str_plain_delegate = UNSTREAM_STRING_ASCII( &constant_bin[ 104328 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_op_str_plain_delegate_tuple, 1, const_str_plain_delegate ); Py_INCREF( const_str_plain_delegate );
    const_tuple_int_pos_4_bytes_chr_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_4_bytes_chr_0_tuple, 0, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    PyTuple_SET_ITEM( const_tuple_int_pos_4_bytes_chr_0_tuple, 1, const_bytes_chr_0 ); Py_INCREF( const_bytes_chr_0 );
    const_tuple_93dd6ca688d275935874432b5b84a429_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 2, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 3, const_str_plain_typ ); Py_INCREF( const_str_plain_typ );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 4, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 5, const_str_plain_handler ); Py_INCREF( const_str_plain_handler );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 6, const_str_plain_legacy ); Py_INCREF( const_str_plain_legacy );
    PyTuple_SET_ITEM( const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 7, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_str_plain_RESOLUTION_UNIT = UNSTREAM_STRING_ASCII( &constant_bin[ 104336 ], 15, 1 );
    const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple, 1, const_str_digest_f169f20812704380dc83deb48954c693 ); Py_INCREF( const_str_digest_f169f20812704380dc83deb48954c693 );
    const_str_plain_date_time = UNSTREAM_STRING_ASCII( &constant_bin[ 104351 ], 9, 1 );
    const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple = PyTuple_New( 15 );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 2, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 3, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 4, const_str_plain_typ ); Py_INCREF( const_str_plain_typ );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 5, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 6, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_str_plain_tagname = UNSTREAM_STRING_ASCII( &constant_bin[ 104360 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 7, const_str_plain_tagname ); Py_INCREF( const_str_plain_tagname );
    const_str_plain_typname = UNSTREAM_STRING_ASCII( &constant_bin[ 104367 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 8, const_str_plain_typname ); Py_INCREF( const_str_plain_typname );
    const_str_plain_unit_size = UNSTREAM_STRING_ASCII( &constant_bin[ 104374 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 9, const_str_plain_unit_size ); Py_INCREF( const_str_plain_unit_size );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 10, const_str_plain_handler ); Py_INCREF( const_str_plain_handler );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 11, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 12, const_str_plain_here ); Py_INCREF( const_str_plain_here );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 13, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 14, const_str_plain_msg ); Py_INCREF( const_str_plain_msg );
    const_str_plain_HHL4s = UNSTREAM_STRING_ASCII( &constant_bin[ 104383 ], 5, 1 );
    const_str_digest_76e218b2e351f9fedc8ea3d7ca1beebb = UNSTREAM_STRING_ASCII( &constant_bin[ 104388 ], 29, 0 );
    const_str_plain_setup = UNSTREAM_STRING_ASCII( &constant_bin[ 99597 ], 5, 1 );
    const_str_digest_407a4bcbc3e14920848d36554dfc4526 = UNSTREAM_STRING_ASCII( &constant_bin[ 104417 ], 29, 0 );
    const_tuple_bytes_digest_153d51c84a9c3251b131f695a1c80929_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_bytes_digest_153d51c84a9c3251b131f695a1c80929_tuple, 0, const_bytes_digest_153d51c84a9c3251b131f695a1c80929 ); Py_INCREF( const_bytes_digest_153d51c84a9c3251b131f695a1c80929 );
    const_str_plain_ICCPROFILE = UNSTREAM_STRING_ASCII( &constant_bin[ 104446 ], 10, 1 );
    const_tuple_str_plain_CMYK_str_plain_CMYK_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYK_tuple, 0, const_str_plain_CMYK ); Py_INCREF( const_str_plain_CMYK );
    PyTuple_SET_ITEM( const_tuple_str_plain_CMYK_str_plain_CMYK_tuple, 1, const_str_plain_CMYK ); Py_INCREF( const_str_plain_CMYK );
    const_str_plain_STRIPBYTECOUNTS = UNSTREAM_STRING_ASCII( &constant_bin[ 104456 ], 15, 1 );
    const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_ifh = UNSTREAM_STRING_ASCII( &constant_bin[ 104471 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple, 1, const_str_plain_ifh ); Py_INCREF( const_str_plain_ifh );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple, 2, const_str_plain_prefix ); Py_INCREF( const_str_plain_prefix );
    const_str_digest_f5d70555e371b1faee5bc78e89c23755 = UNSTREAM_STRING_ASCII( &constant_bin[ 104474 ], 34, 0 );
    const_str_plain__TiffImageFile__frame = UNSTREAM_STRING_ASCII( &constant_bin[ 104508 ], 21, 1 );
    const_str_digest_80414d74ed3d67cc57fcf28a6508ca62 = UNSTREAM_STRING_ASCII( &constant_bin[ 104529 ], 29, 0 );
    const_str_plain_write_signed_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 104558 ], 21, 1 );
    const_str_digest_3d4a30aa5a8fdc78fc1a1b0c477075d3 = UNSTREAM_STRING_ASCII( &constant_bin[ 104579 ], 14, 0 );
    const_str_plain_FILLORDER = UNSTREAM_STRING_ASCII( &constant_bin[ 104593 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_bytesWritten = UNSTREAM_STRING_ASCII( &constant_bin[ 104602 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, const_str_plain_bytesWritten ); Py_INCREF( const_str_plain_bytesWritten );
    const_list_7966eeb46c8db0e0ad53952e033a7ea8_list = PyList_New( 2 );
    const_str_digest_39013e58ef8e65e4493fa9d212be592f = UNSTREAM_STRING_ASCII( &constant_bin[ 104083 ], 4, 0 );
    PyList_SET_ITEM( const_list_7966eeb46c8db0e0ad53952e033a7ea8_list, 0, const_str_digest_39013e58ef8e65e4493fa9d212be592f ); Py_INCREF( const_str_digest_39013e58ef8e65e4493fa9d212be592f );
    PyList_SET_ITEM( const_list_7966eeb46c8db0e0ad53952e033a7ea8_list, 1, const_str_digest_d0307c57f513d1fa587f8cfd66cc7721 ); Py_INCREF( const_str_digest_d0307c57f513d1fa587f8cfd66cc7721 );
    const_str_digest_81a7a923e149038b01f4ba91e7c8685a = UNSTREAM_STRING_ASCII( &constant_bin[ 104614 ], 18, 0 );
    const_tuple_int_pos_10_int_pos_8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_10_int_pos_8_tuple, 0, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    PyTuple_SET_ITEM( const_tuple_int_pos_10_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_digest_3ef1ad6c38141f3556ac2b919938d04b = UNSTREAM_STRING_ASCII( &constant_bin[ 104632 ], 46, 0 );
    const_float_plus_nan = UNSTREAM_FLOAT( &constant_bin[ 104678 ] );
    const_str_digest_5c1b41e424a2246568f742b1a0036c97 = UNSTREAM_STRING_ASCII( &constant_bin[ 104686 ], 20, 0 );
    const_tuple_str_plain___lt___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___lt___tuple, 0, const_str_plain___lt__ ); Py_INCREF( const_str_plain___lt__ );
    const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple, 1, const_str_digest_014ebc09434e7e49f602922eb046a479 ); Py_INCREF( const_str_digest_014ebc09434e7e49f602922eb046a479 );
    const_str_digest_7120d4204cc4762ca7a220b081a44610 = UNSTREAM_STRING_ASCII( &constant_bin[ 104706 ], 24, 0 );
    const_str_digest_1a960c42b63070e58475e386da68f151 = UNSTREAM_STRING_ASCII( &constant_bin[ 104730 ], 28, 0 );
    const_tuple_str_plain_self_str_plain_ifh_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifh_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifh_tuple, 1, const_str_plain_ifh ); Py_INCREF( const_str_plain_ifh );
    const_str_plain_frac = UNSTREAM_STRING_ASCII( &constant_bin[ 99537 ], 4, 1 );
    const_str_plain__denominator = UNSTREAM_STRING_ASCII( &constant_bin[ 103638 ], 12, 1 );
    const_str_digest_88be5b33ddf030329f6e522287e232a3 = UNSTREAM_STRING_ASCII( &constant_bin[ 104758 ], 34, 0 );
    const_str_digest_a1bc24fc8989dafc486e36d582c6c442 = UNSTREAM_STRING_ASCII( &constant_bin[ 104792 ], 62, 0 );
    const_tuple_str_plain___trunc___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___trunc___tuple, 0, const_str_plain___trunc__ ); Py_INCREF( const_str_plain___trunc__ );
    const_str_digest_9af315a991f33e1e5efd897c0e99893d = UNSTREAM_STRING_ASCII( &constant_bin[ 104854 ], 55, 0 );
    const_tuple_str_digest_23a28909417200b80891584a041695a0_tuple = PyTuple_New( 1 );
    const_str_digest_23a28909417200b80891584a041695a0 = UNSTREAM_STRING_ASCII( &constant_bin[ 104909 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_23a28909417200b80891584a041695a0_tuple, 0, const_str_digest_23a28909417200b80891584a041695a0 ); Py_INCREF( const_str_digest_23a28909417200b80891584a041695a0 );
    const_tuple_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072_none_tuple = PyTuple_New( 2 );
    const_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072 = UNSTREAM_BYTES( &constant_bin[ 104917 ], 8 );
    PyTuple_SET_ITEM( const_tuple_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072_none_tuple, 0, const_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072 ); Py_INCREF( const_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072 );
    PyTuple_SET_ITEM( const_tuple_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain_tagtype = UNSTREAM_STRING_ASCII( &constant_bin[ 102232 ], 7, 1 );
    const_str_digest_6e5675988a662f1b304b8bb0cfa4c595 = UNSTREAM_STRING_ASCII( &constant_bin[ 104925 ], 13, 0 );
    const_str_digest_81f304fc4abbeb6612c81962528c76b4 = UNSTREAM_STRING_ASCII( &constant_bin[ 104854 ], 36, 0 );
    const_str_digest_0431b665d65283e91f036178c2bc5097 = UNSTREAM_STRING_ASCII( &constant_bin[ 99602 ], 26, 0 );
    const_str_plain__load_dispatch = UNSTREAM_STRING_ASCII( &constant_bin[ 104938 ], 14, 1 );
    const_str_plain_fieldSize = UNSTREAM_STRING_ASCII( &constant_bin[ 104952 ], 9, 1 );
    const_str_plain_isShort = UNSTREAM_STRING_ASCII( &constant_bin[ 104961 ], 7, 1 );
    const_str_digest_f66f0d17188cd87dede8ac24ff663a3e = UNSTREAM_STRING_ASCII( &constant_bin[ 104968 ], 7, 0 );
    const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple, 0, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    PyTuple_SET_ITEM( const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple, 2, const_str_plain_decorator ); Py_INCREF( const_str_plain_decorator );
    const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple, 1, const_str_digest_16c586d12fc8b53581149967a4bc2375 ); Py_INCREF( const_str_digest_16c586d12fc8b53581149967a4bc2375 );
    const_str_digest_3e8740f428c752cc4b75714a1531291f = UNSTREAM_STRING_ASCII( &constant_bin[ 104975 ], 38, 0 );
    const_str_digest_4d6f530e35101cfd8d26d52172fe8b24 = UNSTREAM_STRING_ASCII( &constant_bin[ 105013 ], 29, 0 );
    const_str_plain_whereToWriteNewIFDOffset = UNSTREAM_STRING_ASCII( &constant_bin[ 105042 ], 24, 1 );
    const_str_plain_libtiff_version = UNSTREAM_STRING_ASCII( &constant_bin[ 101210 ], 15, 1 );
    const_str_plain_limit_denominator = UNSTREAM_STRING_ASCII( &constant_bin[ 105066 ], 17, 1 );
    const_tuple_str_plain_LAB_str_plain_LAB_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_LAB_str_plain_LAB_tuple, 0, const_str_plain_LAB ); Py_INCREF( const_str_plain_LAB );
    PyTuple_SET_ITEM( const_tuple_str_plain_LAB_str_plain_LAB_tuple, 1, const_str_plain_LAB ); Py_INCREF( const_str_plain_LAB );
    const_tuple_str_plain_I_str_digest_668285c8e15fd1c4c777c2ca124e7de4_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_668285c8e15fd1c4c777c2ca124e7de4_tuple, 0, const_str_plain_I ); Py_INCREF( const_str_plain_I );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_668285c8e15fd1c4c777c2ca124e7de4_tuple, 1, const_str_digest_668285c8e15fd1c4c777c2ca124e7de4 ); Py_INCREF( const_str_digest_668285c8e15fd1c4c777c2ca124e7de4 );
    const_tuple_str_plain___truediv___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___truediv___tuple, 0, const_str_plain___truediv__ ); Py_INCREF( const_str_plain___truediv__ );
    const_str_digest_56692adae372b22f2e783c2a5ca49779 = UNSTREAM_STRING_ASCII( &constant_bin[ 105083 ], 28, 0 );
    const_str_plain_setEndian = UNSTREAM_STRING_ASCII( &constant_bin[ 104408 ], 9, 1 );
    const_str_plain_cur_idx = UNSTREAM_STRING_ASCII( &constant_bin[ 105111 ], 7, 1 );
    const_str_digest_357d51dfc182b6fae5c38b3588a154f0 = UNSTREAM_STRING_ASCII( &constant_bin[ 100891 ], 19, 0 );
    const_str_digest_0a1355599d78cf1f896e0715d27e54bd = UNSTREAM_STRING_ASCII( &constant_bin[ 105118 ], 74, 0 );
    const_str_digest_60f4016fa916489e598e8b72100aa5b5 = UNSTREAM_STRING_ASCII( &constant_bin[ 105192 ], 26, 0 );
    const_tuple_477e8c2da119e7c6fbe7290e4e284d85_tuple = PyTuple_New( 2 );
    const_str_digest_eee6dafc42cb49d0eae4d764c3b1a861 = UNSTREAM_STRING_ASCII( &constant_bin[ 29619 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_477e8c2da119e7c6fbe7290e4e284d85_tuple, 0, const_str_digest_eee6dafc42cb49d0eae4d764c3b1a861 ); Py_INCREF( const_str_digest_eee6dafc42cb49d0eae4d764c3b1a861 );
    PyTuple_SET_ITEM( const_tuple_477e8c2da119e7c6fbe7290e4e284d85_tuple, 1, const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089 ); Py_INCREF( const_str_digest_7dafacfcc4ef5ce9434e2f6c09600089 );
    const_tuple_str_plain_load__tuple = PyTuple_New( 1 );
    const_str_plain_load_ = UNSTREAM_STRING_ASCII( &constant_bin[ 4050 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_load__tuple, 0, const_str_plain_load_ ); Py_INCREF( const_str_plain_load_ );
    const_tuple_str_plain_I_str_digest_ce02de2fe5593611868b4a64b70fa501_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_ce02de2fe5593611868b4a64b70fa501_tuple, 0, const_str_plain_I ); Py_INCREF( const_str_plain_I );
    PyTuple_SET_ITEM( const_tuple_str_plain_I_str_digest_ce02de2fe5593611868b4a64b70fa501_tuple, 1, const_str_digest_ce02de2fe5593611868b4a64b70fa501 ); Py_INCREF( const_str_digest_ce02de2fe5593611868b4a64b70fa501 );
    const_str_plain__limit_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 105218 ], 15, 1 );
    const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    const_str_plain_RGBaXX = UNSTREAM_STRING_ASCII( &constant_bin[ 105233 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple, 1, const_str_plain_RGBaXX ); Py_INCREF( const_str_plain_RGBaXX );
    const_str_digest_33a666ca376c265b06b92e0797b8830b = UNSTREAM_STRING_ASCII( &constant_bin[ 105239 ], 407, 0 );
    const_str_digest_0c26ebcb2c39f340b95e2b2f1eda8176 = UNSTREAM_STRING_ASCII( &constant_bin[ 105646 ], 14, 0 );
    const_str_digest_42b66323a5674c6af016df2810648dca = UNSTREAM_STRING_ASCII( &constant_bin[ 105660 ], 32, 0 );
    const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_4f7f4944fe010ab1e87d7a729022551f = UNSTREAM_STRING_ASCII( &constant_bin[ 105692 ], 5, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple, 1, const_str_digest_4f7f4944fe010ab1e87d7a729022551f ); Py_INCREF( const_str_digest_4f7f4944fe010ab1e87d7a729022551f );
    const_str_digest_cfc738c28d8e59a358b07bbd1a92dd87 = UNSTREAM_STRING_ASCII( &constant_bin[ 103866 ], 35, 0 );
    const_str_digest_d5a7e2f1ea88c24f4a48bac3a1863198 = UNSTREAM_STRING_ASCII( &constant_bin[ 105697 ], 10, 0 );
    const_tuple_8c3674872836452c263be064680a25b1_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 3, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 4, const_str_plain_basetypes ); Py_INCREF( const_str_plain_basetypes );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 5, const_str_plain_info ); Py_INCREF( const_str_plain_info );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 6, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    PyTuple_SET_ITEM( const_tuple_8c3674872836452c263be064680a25b1_tuple, 7, const_str_plain_dest ); Py_INCREF( const_str_plain_dest );
    const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple, 0, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple, 1, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple, 2, const_str_plain_legacy_api ); Py_INCREF( const_str_plain_legacy_api );
    const_tuple_str_digest_76f5c36365dd76a7a65d25e7f8001de7_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_76f5c36365dd76a7a65d25e7f8001de7_tuple, 0, const_str_digest_76f5c36365dd76a7a65d25e7f8001de7 ); Py_INCREF( const_str_digest_76f5c36365dd76a7a65d25e7f8001de7 );
    const_str_digest_7b1e18feff02a89a64010e059e45fa64 = UNSTREAM_STRING_ASCII( &constant_bin[ 105707 ], 26, 0 );
    const_tuple_str_plain_RGBA_str_plain_RGBA_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBA_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBA_tuple, 1, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    const_str_plain_SAVE_INFO = UNSTREAM_STRING_ASCII( &constant_bin[ 105733 ], 9, 1 );
    const_str_digest_181093529040d325153e3d3d27abab18 = UNSTREAM_STRING_ASCII( &constant_bin[ 105742 ], 193, 0 );
    const_str_plain_fieldSizes = UNSTREAM_STRING_ASCII( &constant_bin[ 105935 ], 10, 1 );
    const_str_digest_0c186396ff51c44270c7e4708fce7395 = UNSTREAM_STRING_ASCII( &constant_bin[ 105945 ], 52, 0 );
    const_tuple_str_plain___pow___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___pow___tuple, 0, const_str_plain___pow__ ); Py_INCREF( const_str_plain___pow__ );
    const_tuple_str_digest_eb377a8c11b610eba35f02ef754812b7_tuple = PyTuple_New( 1 );
    const_str_digest_eb377a8c11b610eba35f02ef754812b7 = UNSTREAM_STRING_ASCII( &constant_bin[ 105997 ], 20, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_eb377a8c11b610eba35f02ef754812b7_tuple, 0, const_str_digest_eb377a8c11b610eba35f02ef754812b7 ); Py_INCREF( const_str_digest_eb377a8c11b610eba35f02ef754812b7 );
    const_str_plain_COPYRIGHT = UNSTREAM_STRING_ASCII( &constant_bin[ 106017 ], 9, 1 );
    const_tuple_str_plain___rdiv___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rdiv___tuple, 0, const_str_plain___rdiv__ ); Py_INCREF( const_str_plain___rdiv__ );
    const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_denominator = UNSTREAM_STRING_ASCII( &constant_bin[ 103508 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple, 2, const_str_plain_denominator ); Py_INCREF( const_str_plain_denominator );
    const_str_digest_4f8471689e4eeb4a5c59934eb4e2b2f3 = UNSTREAM_STRING_ASCII( &constant_bin[ 106026 ], 24, 0 );
    const_tuple_str_plain___add___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___add___tuple, 0, const_str_plain___add__ ); Py_INCREF( const_str_plain___add__ );
    const_tuple_str_plain___floor___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___floor___tuple, 0, const_str_plain___floor__ ); Py_INCREF( const_str_plain___floor__ );
    const_tuple_str_plain_ascii_str_plain_replace_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 0, const_str_plain_ascii ); Py_INCREF( const_str_plain_ascii );
    PyTuple_SET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 1, const_str_plain_replace ); Py_INCREF( const_str_plain_replace );
    const_str_plain_isFirst = UNSTREAM_STRING_ASCII( &constant_bin[ 106050 ], 7, 1 );
    const_str_plain_IMAGEJ_META_DATA_BYTE_COUNTS = UNSTREAM_STRING_ASCII( &constant_bin[ 106057 ], 28, 1 );
    const_str_digest_bfca6850e4e625572e5e0b275db6f1c5 = UNSTREAM_STRING_ASCII( &constant_bin[ 106085 ], 133, 0 );
    const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    const_str_digest_618a3de1c568c2667cce7198dacf177b = UNSTREAM_STRING_ASCII( &constant_bin[ 94656 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple, 1, const_str_digest_618a3de1c568c2667cce7198dacf177b ); Py_INCREF( const_str_digest_618a3de1c568c2667cce7198dacf177b );
    const_str_digest_fecdb345486ffbb193a74588571ea056 = UNSTREAM_STRING_ASCII( &constant_bin[ 106218 ], 59, 0 );
    const_str_plain_padBytes = UNSTREAM_STRING_ASCII( &constant_bin[ 106277 ], 8, 1 );
    const_str_plain_software = UNSTREAM_STRING_ASCII( &constant_bin[ 106285 ], 8, 1 );
    const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple, 1, const_str_plain_RGBAXX ); Py_INCREF( const_str_plain_RGBAXX );
    const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple, 1, const_str_plain_RGBaX ); Py_INCREF( const_str_plain_RGBaX );
    const_str_plain__TiffImageFile__fp = UNSTREAM_STRING_ASCII( &constant_bin[ 106293 ], 18, 1 );
    const_str_digest_dd0014195a493dcdefb2a95211b4d78b = UNSTREAM_STRING_ASCII( &constant_bin[ 29848 ], 5, 0 );
    const_str_digest_c474ef2553f0b1a6f297474abe5e20b0 = UNSTREAM_STRING_ASCII( &constant_bin[ 106311 ], 33, 0 );
    const_str_digest_b821c8a6c88fde624ec9dd5fe90a30e1 = UNSTREAM_STRING_ASCII( &constant_bin[ 106344 ], 37, 0 );
    const_tuple_str_plain_RGB_str_plain_RGB_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_plain_RGB_tuple, 0, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_plain_RGB_tuple, 1, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    const_str_plain__load_libtiff = UNSTREAM_STRING_ASCII( &constant_bin[ 100311 ], 13, 1 );
    const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple, 1, const_str_digest_42acff2a1fadc967cda081746b144844 ); Py_INCREF( const_str_digest_42acff2a1fadc967cda081746b144844 );
    const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple, 0, const_str_plain__numerator ); Py_INCREF( const_str_plain__numerator );
    PyTuple_SET_ITEM( const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple, 1, const_str_plain__denominator ); Py_INCREF( const_str_plain__denominator );
    PyTuple_SET_ITEM( const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple, 2, const_str_plain__val ); Py_INCREF( const_str_plain__val );
    const_str_plain___delitem__ = UNSTREAM_STRING_ASCII( &constant_bin[ 103808 ], 11, 1 );
    const_str_digest_7dfeda29e0f8703b75217dc553f65d0c = UNSTREAM_STRING_ASCII( &constant_bin[ 106381 ], 11, 0 );
    const_tuple_int_pos_530_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_530_tuple, 0, const_int_pos_530 ); Py_INCREF( const_int_pos_530 );
    const_tuple_str_digest_ec008b11def3fee25602c86081895340_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_ec008b11def3fee25602c86081895340_tuple, 0, const_str_digest_ec008b11def3fee25602c86081895340 ); Py_INCREF( const_str_digest_ec008b11def3fee25602c86081895340 );
    const_tuple_str_plain___div___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___div___tuple, 0, const_str_plain___div__ ); Py_INCREF( const_str_plain___div__ );
    const_str_digest_4a4adbabf0cfc1e325ab1fe61f1e5dd5 = UNSTREAM_STRING_ASCII( &constant_bin[ 106392 ], 128, 0 );
    const_str_plain__frame_pos = UNSTREAM_STRING_ASCII( &constant_bin[ 106520 ], 10, 1 );
    const_str_digest_9dd2b23b42a751dfc44292a9dcc59aba = UNSTREAM_STRING_ASCII( &constant_bin[ 106530 ], 18, 0 );
    const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple, 1, const_str_plain_frac ); Py_INCREF( const_str_plain_frac );
    PyTuple_SET_ITEM( const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple, 2, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_tuple_str_digest_14efb3122da4b9eb7106a01cd1e50e56_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_14efb3122da4b9eb7106a01cd1e50e56_tuple, 0, const_str_digest_14efb3122da4b9eb7106a01cd1e50e56 ); Py_INCREF( const_str_digest_14efb3122da4b9eb7106a01cd1e50e56 );
    const_str_plain_EXTRASAMPLES = UNSTREAM_STRING_ASCII( &constant_bin[ 106548 ], 12, 1 );
    const_str_plain__unpack = UNSTREAM_STRING_ASCII( &constant_bin[ 104551 ], 7, 1 );
    const_tuple_str_plain___floordiv___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___floordiv___tuple, 0, const_str_plain___floordiv__ ); Py_INCREF( const_str_plain___floordiv__ );
    const_str_digest_d13b6e88161c381b75c90a7d8ae9490c = UNSTREAM_STRING_ASCII( &constant_bin[ 106560 ], 27, 0 );
    const_str_digest_2f16da6031cf29610c21ade0e458a954 = UNSTREAM_STRING_ASCII( &constant_bin[ 106587 ], 174, 0 );
    const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 0, const_str_plain_im ); Py_INCREF( const_str_plain_im );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 2, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 3, const_str_plain_encoderinfo ); Py_INCREF( const_str_plain_encoderinfo );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 4, const_str_plain_encoderconfig ); Py_INCREF( const_str_plain_encoderconfig );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 5, const_str_plain_append_images ); Py_INCREF( const_str_plain_append_images );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 6, const_str_plain_cur_idx ); Py_INCREF( const_str_plain_cur_idx );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 7, const_str_plain_tf ); Py_INCREF( const_str_plain_tf );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 8, const_str_plain_ims ); Py_INCREF( const_str_plain_ims );
    const_str_plain_nfr = UNSTREAM_STRING_ASCII( &constant_bin[ 99536 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 9, const_str_plain_nfr ); Py_INCREF( const_str_plain_nfr );
    PyTuple_SET_ITEM( const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 10, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    const_str_digest_04068613b851f119a2c692e8106c0743 = UNSTREAM_STRING_ASCII( &constant_bin[ 105118 ], 55, 0 );
    const_str_digest_89dbc60e7f8b4673fa00848c7fa52c6b = UNSTREAM_STRING_ASCII( &constant_bin[ 106761 ], 3, 0 );
    const_str_digest_fb9886489ecbc572ce067549d373a925 = UNSTREAM_STRING_ASCII( &constant_bin[ 106764 ], 21, 0 );
    const_str_digest_04c5939470391af46f913f0b1a887918 = UNSTREAM_STRING_ASCII( &constant_bin[ 106785 ], 34, 0 );
    const_str_digest_b242611e3516ff22f3e948b468ade6aa = UNSTREAM_STRING_ASCII( &constant_bin[ 106819 ], 22, 0 );
    const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 1, const_str_plain_numTags ); Py_INCREF( const_str_plain_numTags );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 2, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 3, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 4, const_str_plain_fieldType ); Py_INCREF( const_str_plain_fieldType );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 5, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 6, const_str_plain_fieldSize ); Py_INCREF( const_str_plain_fieldSize );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 7, const_str_plain_totalSize ); Py_INCREF( const_str_plain_totalSize );
    const_str_plain_isLocal = UNSTREAM_STRING_ASCII( &constant_bin[ 106841 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 8, const_str_plain_isLocal ); Py_INCREF( const_str_plain_isLocal );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 9, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 10, const_str_plain_curPos ); Py_INCREF( const_str_plain_curPos );
    const_tuple_str_digest_6da32f2677f2876f0d19b8aec6191f27_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_6da32f2677f2876f0d19b8aec6191f27_tuple, 0, const_str_digest_6da32f2677f2876f0d19b8aec6191f27 ); Py_INCREF( const_str_digest_6da32f2677f2876f0d19b8aec6191f27 );
    const_str_plain_AppendingTiffWriter = UNSTREAM_STRING_ASCII( &constant_bin[ 99137 ], 19, 1 );
    const_tuple_str_plain_LA_str_plain_LA_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_LA_str_plain_LA_tuple, 0, const_str_plain_LA ); Py_INCREF( const_str_plain_LA );
    PyTuple_SET_ITEM( const_tuple_str_plain_LA_str_plain_LA_tuple, 1, const_str_plain_LA ); Py_INCREF( const_str_plain_LA );
    const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 1, const_str_plain_pixel ); Py_INCREF( const_str_plain_pixel );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 2, const_str_plain_extents ); Py_INCREF( const_str_plain_extents );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 3, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 4, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 5, const_str_plain_decoder ); Py_INCREF( const_str_plain_decoder );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 6, const_str_plain_n ); Py_INCREF( const_str_plain_n );
    PyTuple_SET_ITEM( const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 7, const_str_plain_err ); Py_INCREF( const_str_plain_err );
    const_str_plain_IPTC_NAA_CHUNK = UNSTREAM_STRING_ASCII( &constant_bin[ 106848 ], 14, 1 );
    const_str_digest_36d7cd1b9db6c846ee4976d560207cd3 = UNSTREAM_STRING_ASCII( &constant_bin[ 106862 ], 25, 0 );
    const_str_digest_42a31ede9c68d42f92474f787ceccfc4 = UNSTREAM_STRING_ASCII( &constant_bin[ 106887 ], 28, 0 );
    const_str_digest_e59d036d5c01650be279801bdaec0cc4 = UNSTREAM_STRING_ASCII( &constant_bin[ 106915 ], 30, 0 );
    const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 1, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 2, const_str_plain_isShort ); Py_INCREF( const_str_plain_isShort );
    const_str_plain_isLong = UNSTREAM_STRING_ASCII( &constant_bin[ 106945 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 3, const_str_plain_isLong ); Py_INCREF( const_str_plain_isLong );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 5, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    const_str_digest_52368654d670f3e38c52128c5b7acf14 = UNSTREAM_STRING_ASCII( &constant_bin[ 106951 ], 18, 0 );
    const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple, 1, const_str_plain_original ); Py_INCREF( const_str_plain_original );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple, 2, const_str_plain_ifd ); Py_INCREF( const_str_plain_ifd );
    const_str_plain__register_loader = UNSTREAM_STRING_ASCII( &constant_bin[ 101874 ], 16, 1 );
    const_str_digest_973535bb2e882bd8a57330de2bae6594 = UNSTREAM_STRING_ASCII( &constant_bin[ 106969 ], 93, 0 );
    const_tuple_8b630ef948759a11b43a74aea1bea856_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 2, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 3, const_str_plain_typ ); Py_INCREF( const_str_plain_typ );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 4, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 5, const_str_plain_handler ); Py_INCREF( const_str_plain_handler );
    PyTuple_SET_ITEM( const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 6, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_str_plain_READ_LIBTIFF = UNSTREAM_STRING_ASCII( &constant_bin[ 107062 ], 12, 1 );
    const_str_plain_skipIFDs = UNSTREAM_STRING_ASCII( &constant_bin[ 100741 ], 8, 1 );
    const_str_plain_BITSPERSAMPLE = UNSTREAM_STRING_ASCII( &constant_bin[ 107074 ], 13, 1 );
    const_str_digest_296ec732f3454a5d77ec38d29513baeb = UNSTREAM_STRING_ASCII( &constant_bin[ 107087 ], 11, 0 );
    const_str_digest_ddffb0765d651100b56f0c8a14652e8b = UNSTREAM_STRING_ASCII( &constant_bin[ 107098 ], 26, 0 );
    const_str_plain_RGBAX = UNSTREAM_STRING_ASCII( &constant_bin[ 101588 ], 5, 1 );
    const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple, 0, const_str_plain_RGBX ); Py_INCREF( const_str_plain_RGBX );
    const_str_plain_RGBXX = UNSTREAM_STRING_ASCII( &constant_bin[ 99504 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple, 1, const_str_plain_RGBXX ); Py_INCREF( const_str_plain_RGBXX );
    const_tuple_str_plain___sub___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___sub___tuple, 0, const_str_plain___sub__ ); Py_INCREF( const_str_plain___sub__ );
    const_str_plain_PHOTOMETRIC_INTERPRETATION = UNSTREAM_STRING_ASCII( &constant_bin[ 107124 ], 26, 1 );
    const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 2, const_str_plain_entries ); Py_INCREF( const_str_plain_entries );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 3, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 4, const_str_plain_stripoffsets ); Py_INCREF( const_str_plain_stripoffsets );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 5, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 6, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 7, const_str_plain_typ ); Py_INCREF( const_str_plain_typ );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 8, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 9, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 10, const_str_plain_tagname ); Py_INCREF( const_str_plain_tagname );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 11, const_str_plain_typname ); Py_INCREF( const_str_plain_typname );
    PyTuple_SET_ITEM( const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 12, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_tuple_str_plain_AppendingTiffWriter_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_AppendingTiffWriter_tuple_empty_tuple, 0, const_str_plain_AppendingTiffWriter ); Py_INCREF( const_str_plain_AppendingTiffWriter );
    PyTuple_SET_ITEM( const_tuple_str_plain_AppendingTiffWriter_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain_from_v2 = UNSTREAM_STRING_ASCII( &constant_bin[ 107150 ], 7, 1 );
    const_str_digest_41f30dfb874731c8b680e9e93c9f8eb7 = UNSTREAM_STRING_ASCII( &constant_bin[ 107157 ], 28, 0 );
    const_str_digest_a4988b6127c542f882d25584d33116d8 = UNSTREAM_STRING_ASCII( &constant_bin[ 107185 ], 24, 0 );
    const_str_plain_write_ = UNSTREAM_STRING_ASCII( &constant_bin[ 3472 ], 6, 1 );
    const_str_digest_1fa1460420b567cbdd4eb682ed941476 = UNSTREAM_STRING_ASCII( &constant_bin[ 107209 ], 23, 0 );
    const_tuple_str_plain___rfloordiv___tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain___rfloordiv___tuple, 0, const_str_plain___rfloordiv__ ); Py_INCREF( const_str_plain___rfloordiv__ );
    const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple, 0, const_str_plain_F ); Py_INCREF( const_str_plain_F );
    PyTuple_SET_ITEM( const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple, 1, const_str_digest_dd0014195a493dcdefb2a95211b4d78b ); Py_INCREF( const_str_digest_dd0014195a493dcdefb2a95211b4d78b );
    const_str_plain_tagFormat = UNSTREAM_STRING_ASCII( &constant_bin[ 107232 ], 9, 1 );
    const_str_plain_write_byte = UNSTREAM_STRING_ASCII( &constant_bin[ 107241 ], 10, 1 );
    const_list_8f903af5db046de439bc115b7dbdd517_list = PyList_New( 13 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 2, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 3, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 4, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 5, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 6, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 7, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 8, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 9, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 10, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 11, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    PyList_SET_ITEM( const_list_8f903af5db046de439bc115b7dbdd517_list, 12, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_digest_06758be47dc92782985a67ee64d7a24c = UNSTREAM_STRING_ASCII( &constant_bin[ 107251 ], 4, 0 );
    const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    const_str_digest_a50f555c0b56fa82177e1fa640a59e78 = UNSTREAM_STRING_ASCII( &constant_bin[ 107255 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple, 1, const_str_digest_a50f555c0b56fa82177e1fa640a59e78 ); Py_INCREF( const_str_digest_a50f555c0b56fa82177e1fa640a59e78 );
    const_tuple_type_int_type_float_type_str_type_bytes_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_type_int_type_float_type_str_type_bytes_tuple, 0, (PyObject *)&PyLong_Type ); Py_INCREF( (PyObject *)&PyLong_Type );
    PyTuple_SET_ITEM( const_tuple_type_int_type_float_type_str_type_bytes_tuple, 1, (PyObject *)&PyFloat_Type ); Py_INCREF( (PyObject *)&PyFloat_Type );
    PyTuple_SET_ITEM( const_tuple_type_int_type_float_type_str_type_bytes_tuple, 2, (PyObject *)&PyUnicode_Type ); Py_INCREF( (PyObject *)&PyUnicode_Type );
    PyTuple_SET_ITEM( const_tuple_type_int_type_float_type_str_type_bytes_tuple, 3, (PyObject *)&PyBytes_Type ); Py_INCREF( (PyObject *)&PyBytes_Type );
    const_str_digest_c984fe64ee3391b05d8c9a42c352de5c = UNSTREAM_STRING_ASCII( &constant_bin[ 106218 ], 42, 0 );
    const_tuple_str_plain_1_str_plain_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_plain_1_tuple, 0, const_str_plain_1 ); Py_INCREF( const_str_plain_1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_plain_1_tuple, 1, const_str_plain_1 ); Py_INCREF( const_str_plain_1 );
    const_str_digest_2a66c5c8df4a8d058612c351b526d38e = UNSTREAM_STRING_ASCII( &constant_bin[ 107259 ], 39, 0 );
    const_str_digest_216bbff8b717a029efaf28eba2ad0c36 = UNSTREAM_STRING_ASCII( &constant_bin[ 13020 ], 15, 0 );
    const_str_plain_IMAGEWIDTH = UNSTREAM_STRING_ASCII( &constant_bin[ 107298 ], 10, 1 );
    const_str_plain_limit_rational = UNSTREAM_STRING_ASCII( &constant_bin[ 105219 ], 14, 1 );
    const_str_plain_Rational = UNSTREAM_STRING_ASCII( &constant_bin[ 100158 ], 8, 1 );
    const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple, 0, const_str_plain_RGBA ); Py_INCREF( const_str_plain_RGBA );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple, 1, const_str_plain_RGBAX ); Py_INCREF( const_str_plain_RGBAX );
    const_str_digest_8384c3bce089a02838fd5d8937848994 = UNSTREAM_STRING_ASCII( &constant_bin[ 107308 ], 32, 0 );
    const_str_plain_readShort = UNSTREAM_STRING_ASCII( &constant_bin[ 103995 ], 9, 1 );
    const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple, 0, const_str_plain_1 ); Py_INCREF( const_str_plain_1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple, 1, const_str_digest_a43c96e669182759de7b6dc21baa30ee ); Py_INCREF( const_str_digest_a43c96e669182759de7b6dc21baa30ee );
    const_tuple_str_plain_self_str_plain_IIMM_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IIMM_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_IIMM_tuple, 1, const_str_plain_IIMM ); Py_INCREF( const_str_plain_IIMM );
    const_str_digest_d0d0426c97504a02e715ed5765c29e83 = UNSTREAM_STRING_ASCII( &constant_bin[ 107340 ], 307, 0 );
    const_str_digest_aa75aebb681891e596622e3da6ff8b94 = UNSTREAM_STRING_ASCII( &constant_bin[ 107647 ], 30, 0 );
    const_str_plain__planar_configuration = UNSTREAM_STRING_ASCII( &constant_bin[ 107677 ], 21, 1 );
    const_str_plain__offset = UNSTREAM_STRING_ASCII( &constant_bin[ 4131 ], 7, 1 );
    const_str_digest_1ac09ffa8475c7a9b4fe42b53ca370a7 = UNSTREAM_STRING_ASCII( &constant_bin[ 104792 ], 43, 0 );
    const_str_plain__ensure_read = UNSTREAM_STRING_ASCII( &constant_bin[ 104780 ], 12, 1 );
    const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple, 0, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple, 1, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple, 2, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain_DATE_TIME = UNSTREAM_STRING_ASCII( &constant_bin[ 107698 ], 9, 1 );
    const_tuple_4b14a900351fc88104458d29d4e23fd8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_4b14a900351fc88104458d29d4e23fd8_tuple, 0, const_str_digest_772c0402ef22c7a4d610f4443976d74a ); Py_INCREF( const_str_digest_772c0402ef22c7a4d610f4443976d74a );
    PyTuple_SET_ITEM( const_tuple_4b14a900351fc88104458d29d4e23fd8_tuple, 1, const_str_digest_772c0402ef22c7a4d610f4443976d74a ); Py_INCREF( const_str_digest_772c0402ef22c7a4d610f4443976d74a );
    const_str_plain__compression = UNSTREAM_STRING_ASCII( &constant_bin[ 107707 ], 12, 1 );
    const_tuple_str_plain_Number_str_plain_Rational_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Number_str_plain_Rational_tuple, 0, const_str_plain_Number ); Py_INCREF( const_str_plain_Number );
    PyTuple_SET_ITEM( const_tuple_str_plain_Number_str_plain_Rational_tuple, 1, const_str_plain_Rational ); Py_INCREF( const_str_plain_Rational );
    const_str_plain_load_undefined = UNSTREAM_STRING_ASCII( &constant_bin[ 103011 ], 14, 1 );
    const_str_digest_2557e9b1861c939dc2d1c2b5ae3582e9 = UNSTREAM_STRING_ASCII( &constant_bin[ 107719 ], 57, 0 );
    const_str_plain__delegate = UNSTREAM_STRING_ASCII( &constant_bin[ 106776 ], 9, 1 );
    const_str_plain_named = UNSTREAM_STRING_ASCII( &constant_bin[ 101422 ], 5, 1 );
    const_str_digest_2ee6e2c0785e264d7b99ca6b70edc256 = UNSTREAM_STRING_ASCII( &constant_bin[ 107776 ], 30, 0 );
    const_str_plain__pack = UNSTREAM_STRING_ASCII( &constant_bin[ 100716 ], 5, 1 );
    const_tuple_2f5b45cc6c9c49956b38aa83322d7ab5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_2f5b45cc6c9c49956b38aa83322d7ab5_tuple, 0, const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c ); Py_INCREF( const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c );
    PyTuple_SET_ITEM( const_tuple_2f5b45cc6c9c49956b38aa83322d7ab5_tuple, 1, const_str_digest_af7a52fad84da97b09cedf0621041882 ); Py_INCREF( const_str_digest_af7a52fad84da97b09cedf0621041882 );
    const_tuple_int_pos_7_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_7_tuple, 0, const_int_pos_7 ); Py_INCREF( const_int_pos_7 );
    const_str_digest_dd35fdb1c8e222fbe19927058d694e7c = UNSTREAM_STRING_ASCII( &constant_bin[ 107806 ], 61, 0 );
    const_str_digest_a8209851e86e25b9174074cc10865e85 = UNSTREAM_STRING_ASCII( &constant_bin[ 103539 ], 25, 0 );
    const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575 = UNSTREAM_STRING_ASCII( &constant_bin[ 98261 ], 12, 0 );
    const_set_9e5b488b5e37385300d083e92084ce13 = PySet_New( NULL );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_288 );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_324 );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_519 );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_520 );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_521 );
    PySet_Add( const_set_9e5b488b5e37385300d083e92084ce13, const_int_pos_273 );
    assert( PySet_Size( const_set_9e5b488b5e37385300d083e92084ce13 ) == 6 );
    const_tuple_str_plain_RGB_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87_tuple, 0, const_str_plain_RGB ); Py_INCREF( const_str_plain_RGB );
    PyTuple_SET_ITEM( const_tuple_str_plain_RGB_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87_tuple, 1, const_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87 ); Py_INCREF( const_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87 );
    const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple, 0, const_str_plain_L ); Py_INCREF( const_str_plain_L );
    PyTuple_SET_ITEM( const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple, 1, const_str_digest_70ec016f35c94ff56152caa56a4f378d ); Py_INCREF( const_str_digest_70ec016f35c94ff56152caa56a4f378d );
    const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple, 1, const_str_plain_pos ); Py_INCREF( const_str_plain_pos );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple, 2, const_str_plain_padBytes ); Py_INCREF( const_str_plain_padBytes );
    const_str_plain__legacy_api = UNSTREAM_STRING_ASCII( &constant_bin[ 107867 ], 11, 1 );
    const_str_digest_8461b59e3411b6ea466a968603cbae9d = UNSTREAM_STRING_ASCII( &constant_bin[ 107878 ], 29, 0 );
    const_tuple_str_plain_idx_str_plain_decorator_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_idx_str_plain_decorator_tuple, 0, const_str_plain_idx ); Py_INCREF( const_str_plain_idx );
    PyTuple_SET_ITEM( const_tuple_str_plain_idx_str_plain_decorator_tuple, 1, const_str_plain_decorator ); Py_INCREF( const_str_plain_decorator );
    const_tuple_int_pos_5_int_pos_8_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_5_int_pos_8_tuple, 0, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    PyTuple_SET_ITEM( const_tuple_int_pos_5_int_pos_8_tuple, 1, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    const_str_plain__TiffImageFile__first = UNSTREAM_STRING_ASCII( &constant_bin[ 107907 ], 21, 1 );
    const_str_plain_load_string = UNSTREAM_STRING_ASCII( &constant_bin[ 100012 ], 11, 1 );
    const_str_digest_21528ffd3580853090d3b8344eadcd3b = UNSTREAM_STRING_ASCII( &constant_bin[ 107928 ], 35, 0 );
    const_tuple_int_pos_1_int_0_int_0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_int_0_int_0_tuple, 0, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_int_0_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_int_0_int_0_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain__debug_multipage = UNSTREAM_STRING_ASCII( &constant_bin[ 107963 ], 16, 1 );
    const_str_plain_fixOffsets = UNSTREAM_STRING_ASCII( &constant_bin[ 107667 ], 10, 1 );
    const_str_digest_0342d277e81a09f27cd252c2e24c1da9 = UNSTREAM_STRING_ASCII( &constant_bin[ 107979 ], 24, 0 );
    const_str_digest_044a19d752b01d2c30c0a044313af1d8 = UNSTREAM_STRING_ASCII( &constant_bin[ 108003 ], 34, 0 );
    const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple, 1, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple, 2, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_plain_SOFTWARE = UNSTREAM_STRING_ASCII( &constant_bin[ 108037 ], 8, 1 );
    const_str_digest_b2cc4a1f9603763f05092af4c78725ae = UNSTREAM_STRING_ASCII( &constant_bin[ 108045 ], 29, 0 );
    const_str_digest_77beeccf348e971ef8b7b5b7a70029bb = UNSTREAM_STRING_ASCII( &constant_bin[ 108074 ], 33, 0 );
    const_tuple_str_plain_self_str_plain_ifd_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifd_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifd_tuple, 1, const_str_plain_ifd ); Py_INCREF( const_str_plain_ifd );
    const_str_plain_EXIFIFD = UNSTREAM_STRING_ASCII( &constant_bin[ 108107 ], 7, 1 );
    const_str_plain_COMPRESSION = UNSTREAM_STRING_ASCII( &constant_bin[ 1635 ], 11, 1 );
    const_str_digest_6a4528fd84c0e2b69d390d3bac48a989 = UNSTREAM_STRING_ASCII( &constant_bin[ 108114 ], 910, 0 );
    const_str_digest_a2f5508fa71536268c79485a8b84235c = UNSTREAM_STRING_ASCII( &constant_bin[ 83539 ], 3, 0 );
    const_str_digest_4af59da437d2f21ccb08423e5fb98074 = UNSTREAM_STRING_ASCII( &constant_bin[ 109024 ], 17, 0 );
    const_str_plain_PREDICTOR = UNSTREAM_STRING_ASCII( &constant_bin[ 109041 ], 9, 1 );
    const_dict_fb4ddbadafbecbaef28aef989e4b600e = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_fb4ddbadafbecbaef28aef989e4b600e, const_str_plain_end, const_str_space );
    assert( PyDict_Size( const_dict_fb4ddbadafbecbaef28aef989e4b600e ) == 1 );
    const_tuple_a510deb085123c68162081f66972daec_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a510deb085123c68162081f66972daec_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_a510deb085123c68162081f66972daec_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_a510deb085123c68162081f66972daec_tuple, 2, const_str_plain_info ); Py_INCREF( const_str_plain_info );
    const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple, 0, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple, 1, const_str_plain_max_val ); Py_INCREF( const_str_plain_max_val );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple, 2, const_str_plain_inv ); Py_INCREF( const_str_plain_inv );
    PyTuple_SET_ITEM( const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple, 3, const_str_plain_n_d ); Py_INCREF( const_str_plain_n_d );
    const_str_digest_645a4bb1e5a365205de5623d4b842cfa = UNSTREAM_STRING_ASCII( &constant_bin[ 109050 ], 20, 0 );
    const_str_digest_b35b41cdf872120d59d03110260cc850 = UNSTREAM_STRING_ASCII( &constant_bin[ 109070 ], 27, 0 );
    const_tuple_str_plain_self_str_plain_tag_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tag_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_tag_tuple, 1, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_PIL$TiffImagePlugin( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_c9019b5d8a2eb1708c114c2d4187b84a;
static PyCodeObject *codeobj_c1ea11a7c879a48d6b1e7d15f67c2e4a;
static PyCodeObject *codeobj_08e60133f7eab259dac0b8329dd32a53;
static PyCodeObject *codeobj_905111738b763fc73ea4d988e0102b42;
static PyCodeObject *codeobj_5f1c77d7c2d7ba9b523096727d9ea761;
static PyCodeObject *codeobj_e5402b538a0df715cd0b61d4eb9ad096;
static PyCodeObject *codeobj_d3aea38a36bff67700f5dd0a7261a4d1;
static PyCodeObject *codeobj_60d41c0d4749db00802db01f49d0ff24;
static PyCodeObject *codeobj_61b774a2e1591663c2e632b4a7aac705;
static PyCodeObject *codeobj_2a3b0a4527de6ccd2eb3e8254f067db2;
static PyCodeObject *codeobj_8d02518275ccdb9520baba0883372825;
static PyCodeObject *codeobj_62da24ae92d489e0eeb4700d803bb1cc;
static PyCodeObject *codeobj_b6e944fdb8211695df0188220a199269;
static PyCodeObject *codeobj_edeb7491728c796e25e023bbafd1ac75;
static PyCodeObject *codeobj_2ed633868cc02c462b5110fe63984608;
static PyCodeObject *codeobj_b4d1665cd192f0f66496d609206d92c0;
static PyCodeObject *codeobj_7931ebd4c5e42ec165d2cf6bbf8a4292;
static PyCodeObject *codeobj_1f99c1e8717f64044a988507720a75a9;
static PyCodeObject *codeobj_967aaeb57ab3190287d08779e3961bb3;
static PyCodeObject *codeobj_9a1dcabb83b8619d0d5db8838b3810f2;
static PyCodeObject *codeobj_0b85bc72a84f799ffd774d4be80b51ef;
static PyCodeObject *codeobj_4931e230bb386f7edca92779620c041f;
static PyCodeObject *codeobj_9bbef538ef689fe1a54a30d7b09625e0;
static PyCodeObject *codeobj_e81c3e3366ae57b402c59dcc068b3b8a;
static PyCodeObject *codeobj_225b72f8e18a7713185e90c0bf993f32;
static PyCodeObject *codeobj_822097513f144e173a2602fbaf394b97;
static PyCodeObject *codeobj_5847501e044c9194e44bab7d6542bd15;
static PyCodeObject *codeobj_fe73e589bb33c902ac4cf7156b7f9250;
static PyCodeObject *codeobj_484f0f48054c26892011d4b0dcb4ed0b;
static PyCodeObject *codeobj_d6ede18a8fd32f09345e1d9a4b57894b;
static PyCodeObject *codeobj_d778c9800471fd2e2a59d50a545b8ac4;
static PyCodeObject *codeobj_40c435ff47b196c1a57aa3df647a8daf;
static PyCodeObject *codeobj_10fea9b02280a0e3e2c6033ca9175eaa;
static PyCodeObject *codeobj_a6b7d6f1fc8c98e9a6c227da842fcb5f;
static PyCodeObject *codeobj_b130e0032423f55156640809853856ee;
static PyCodeObject *codeobj_f726153c2ab688313fb6192b64a165a5;
static PyCodeObject *codeobj_faad67dff9a716b224fa6a9002d2041c;
static PyCodeObject *codeobj_7cb7acefb66c9f4c713b0729737e8461;
static PyCodeObject *codeobj_2e1e4c1f5330055476ea5659804e1e40;
static PyCodeObject *codeobj_ef2bd1a8914c793343d87e28cdbe4e51;
static PyCodeObject *codeobj_3e4237cb079ef39d375bd3fa69aa4fdf;
static PyCodeObject *codeobj_c06d2b45287a725176290b1facdbaab6;
static PyCodeObject *codeobj_f26dce26fdc64eea13374b4cadf88e86;
static PyCodeObject *codeobj_312fd463751bf0babfc46d8761c6b6e6;
static PyCodeObject *codeobj_e982f86f735f95188b8655c4a12d9a58;
static PyCodeObject *codeobj_0d462b9205720dd46676aaf6d3150b05;
static PyCodeObject *codeobj_1ae13cc10216c3c56f8de6b175f63849;
static PyCodeObject *codeobj_e7887f7acbd628c31ede8823e04e6a38;
static PyCodeObject *codeobj_b7f9cb64c295e170ed666b9321bd9b77;
static PyCodeObject *codeobj_27c9ea1e69d26b3104f92269aa08e1c7;
static PyCodeObject *codeobj_2575d1fafa5ee2e0a350462a2206e554;
static PyCodeObject *codeobj_f06f48873dfc793a4b11d897a07834fd;
static PyCodeObject *codeobj_b06de1521e8626708430cb3d8bc83282;
static PyCodeObject *codeobj_37bce8d2a322291925eb48a1396ad929;
static PyCodeObject *codeobj_4cfa63263812b0b75a6a6431eeada605;
static PyCodeObject *codeobj_20ecfd8a32c6bfd8f918732e60620813;
static PyCodeObject *codeobj_42adb49f00dcb5a9d82a072b42606ab4;
static PyCodeObject *codeobj_09423594580680a7a194b3076286dbf6;
static PyCodeObject *codeobj_342317ae8ab3bd9edb224f8d7af0b825;
static PyCodeObject *codeobj_e5c941007fe38e475d700bffe0369461;
static PyCodeObject *codeobj_bcce158a4d6f41ca9253c76c1e1be241;
static PyCodeObject *codeobj_c82772004a87c6a7bb35738eb45b3817;
static PyCodeObject *codeobj_6cda4f89e1245682282b8adef14ab664;
static PyCodeObject *codeobj_cbccd8829ad9c2a0cbafe9ed5793eaa1;
static PyCodeObject *codeobj_08022af7f40313a8c4c985aee619a19b;
static PyCodeObject *codeobj_e501b4d2298b52f36845c1ee1accf36f;
static PyCodeObject *codeobj_b8632c5f1f36afe4f972176d21c2e38f;
static PyCodeObject *codeobj_ac7e3ef1c57c07915ccc7f53d7f3969e;
static PyCodeObject *codeobj_0d6b4fb5870d5a5567f1835676abd3dc;
static PyCodeObject *codeobj_81a5b827dcac3539ef66c90c1d383515;
static PyCodeObject *codeobj_aa66f459a2c09d2ffda5f44034204ebb;
static PyCodeObject *codeobj_fdd8a8df3a67830324707201830c0715;
static PyCodeObject *codeobj_10d42498402b62ece1d8beff9457b6f1;
static PyCodeObject *codeobj_f4fc4ec5ab0aa4e9c041063b94979b8b;
static PyCodeObject *codeobj_6689142d0b279dc6e8b0c25991ea3894;
static PyCodeObject *codeobj_336f27bae7a685b3eca6c53d34597a82;
static PyCodeObject *codeobj_741ddc383480035d74106484182f19b9;
static PyCodeObject *codeobj_f8e19cb72f58afe34bd7fbae29d60efd;
static PyCodeObject *codeobj_1ff42e346a2754cb0ad082098d047812;
static PyCodeObject *codeobj_078177cbaf4ee42129545a54c84dce8c;
static PyCodeObject *codeobj_65acf2f2b8b04bc5eb83e472984337e9;
static PyCodeObject *codeobj_a947e9874296c004bdad2116ab6f31a3;
static PyCodeObject *codeobj_7e232219f718db02f73592a2d5df0d32;
static PyCodeObject *codeobj_dbdab077daf7b2c03c61eecd4b003219;
static PyCodeObject *codeobj_6b83910b66967b3a1559d551a269f208;
static PyCodeObject *codeobj_726f2dfc8f4541083282f444923c412b;
static PyCodeObject *codeobj_0efedaccea387e79db3b8b27feb02e66;
static PyCodeObject *codeobj_847b9e04fc3f5623f77010a62056a35f;
static PyCodeObject *codeobj_4ea75d3fead62b0ce8b58965be6b32fc;
static PyCodeObject *codeobj_6587ff696723c46961c038013de53154;
static PyCodeObject *codeobj_0082b00a12f39acfc510cc861342f685;
static PyCodeObject *codeobj_1340e8b393177fc8332501ef651ebf48;
static PyCodeObject *codeobj_b8dda3ad7cb1be231c12f8823ec5b866;
static PyCodeObject *codeobj_80d5329d7d171701e770a3cc5a3450f4;
static PyCodeObject *codeobj_7b4bb5730ac50485820f76a51668d633;
static PyCodeObject *codeobj_a0a828f24324513e60581b2711a251a1;
static PyCodeObject *codeobj_6cb860ca7c8db47431876b8f94c14c0c;
static PyCodeObject *codeobj_82996f6194c95ad02d897b5cb9f54f52;
static PyCodeObject *codeobj_cee9afab1d0baacb6b732e90d6fcfff8;
static PyCodeObject *codeobj_ed60a787d3aca02854acb57ad82f7fb9;
static PyCodeObject *codeobj_9c0321c0f03ab889f2e725dcee3d6bc2;
static PyCodeObject *codeobj_4a5d34f527e95c432e45aa6b4807c32e;
static PyCodeObject *codeobj_3548084e462e583b5bdd1d2b003a978d;
static PyCodeObject *codeobj_37cc5b83577da51cce196080465f5610;
static PyCodeObject *codeobj_164e78496ac14e9b1d5386aa73ca2a62;
static PyCodeObject *codeobj_2856c68ddb52c15f325b6454ff818552;
static PyCodeObject *codeobj_f9524a3076e2e7138f609e6c4ad55b8c;
static PyCodeObject *codeobj_5ea41118e7c1019505b42897e95a9685;
static PyCodeObject *codeobj_acb470d44072f1d55d1eb2629adf0c6a;
static PyCodeObject *codeobj_267cb1a2ac702db4ed0b705f1221373a;
static PyCodeObject *codeobj_e0a5956b232208871ef5771c8fbe1eac;
static PyCodeObject *codeobj_fdc6c6e8844de9ab475a66708690dcde;
static PyCodeObject *codeobj_a5b7f302af9cbae27961f6342cc65451;
static PyCodeObject *codeobj_2ae5a0740f159777a3ce3a976648fe63;
static PyCodeObject *codeobj_e506afd6b88e1ef3346114190f1afafc;
static PyCodeObject *codeobj_20bfb7154e4fda4fb602e7a2fadf65f5;
static PyCodeObject *codeobj_035016e5fd5e65a1f3524a185e374970;
static PyCodeObject *codeobj_7dc53a3a0068576ca023c47aa5fc74f0;
static PyCodeObject *codeobj_b29504290a067901d73c63e9cfff37d9;
static PyCodeObject *codeobj_82e978eebf395d5b8225a7d16edcc456;
static PyCodeObject *codeobj_cabd68c42c300d0dc522e314acd51d59;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_35021dd69aca70179a6653ae0392c329 );
    codeobj_c9019b5d8a2eb1708c114c2d4187b84a = MAKE_CODEOBJ( module_filename_obj, const_str_angle_dictcontraction, 138, const_tuple_str_plain_k_str_plain_v_tuple, 1, 0, CO_NEWLOCALS | CO_NOFREE );
    codeobj_c1ea11a7c879a48d6b1e7d15f67c2e4a = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 519, const_tuple_ce9f8bfd6ad14e546837bdd3049a31f5_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_08e60133f7eab259dac0b8329dd32a53 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 559, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_905111738b763fc73ea4d988e0102b42 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 561, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5f1c77d7c2d7ba9b523096727d9ea761 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 562, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e5402b538a0df715cd0b61d4eb9ad096 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 566, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d3aea38a36bff67700f5dd0a7261a4d1 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 570, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_60d41c0d4749db00802db01f49d0ff24 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 583, const_tuple_a510deb085123c68162081f66972daec_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_61b774a2e1591663c2e632b4a7aac705 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 652, const_tuple_b7325af518eefa977b38a25ae794bf43_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_2a3b0a4527de6ccd2eb3e8254f067db2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 689, const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8d02518275ccdb9520baba0883372825 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 694, const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_62da24ae92d489e0eeb4700d803bb1cc = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 710, const_tuple_2d7608db523ab7514b820a08781131b1_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b6e944fdb8211695df0188220a199269 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 715, const_tuple_5609da5b155d91b1b40b50d14c2a9284_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_edeb7491728c796e25e023bbafd1ac75 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 1486, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_v_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2ed633868cc02c462b5110fe63984608 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 494, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b4d1665cd192f0f66496d609206d92c0 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 495, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7931ebd4c5e42ec165d2cf6bbf8a4292 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 496, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1f99c1e8717f64044a988507720a75a9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 649, const_tuple_ebb510f2b3fcc6dfebb97e1e6a2508cf_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_967aaeb57ab3190287d08779e3961bb3 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 651, const_tuple_str_plain_self_str_plain_values_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS );
    codeobj_9a1dcabb83b8619d0d5db8838b3810f2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 888, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0b85bc72a84f799ffd774d4be80b51ef = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 889, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4931e230bb386f7edca92779620c041f = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 580, const_tuple_str_plain_v_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9bbef538ef689fe1a54a30d7b09625e0 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 1359, const_tuple_str_plain_b_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e81c3e3366ae57b402c59dcc068b3b8a = MAKE_CODEOBJ( module_filename_obj, const_str_digest_5ac66013283065edc605cc1dd029e935, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_225b72f8e18a7713185e90c0bf993f32 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_AppendingTiffWriter, 1578, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_822097513f144e173a2602fbaf394b97 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_IFDRational, 299, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_5847501e044c9194e44bab7d6542bd15 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ImageFileDirectory_v1, 866, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_fe73e589bb33c902ac4cf7156b7f9250 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ImageFileDirectory_v2, 416, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_484f0f48054c26892011d4b0dcb4ed0b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_TiffImageFile, 959, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_d6ede18a8fd32f09345e1d9a4b57894b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___contains__, 536, const_tuple_str_plain_self_str_plain_tag_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d778c9800471fd2e2a59d50a545b8ac4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___contains__, 926, const_tuple_str_plain_self_str_plain_tag_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_40c435ff47b196c1a57aa3df647a8daf = MAKE_CODEOBJ( module_filename_obj, const_str_plain___delitem__, 615, const_tuple_str_plain_self_str_plain_tag_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_10fea9b02280a0e3e2c6033ca9175eaa = MAKE_CODEOBJ( module_filename_obj, const_str_plain___enter__, 1670, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a6b7d6f1fc8c98e9a6c227da842fcb5f = MAKE_CODEOBJ( module_filename_obj, const_str_plain___eq__, 370, const_tuple_str_plain_self_str_plain_other_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b130e0032423f55156640809853856ee = MAKE_CODEOBJ( module_filename_obj, const_str_plain___exit__, 1673, const_tuple_4056a0ef07ec9188d15ce9b607833855_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f726153c2ab688313fb6192b64a165a5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 525, const_tuple_8b630ef948759a11b43a74aea1bea856_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_faad67dff9a716b224fa6a9002d2041c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 939, const_tuple_93dd6ca688d275935874432b5b84a429_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7cb7acefb66c9f4c713b0729737e8461 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___hash__, 367, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2e1e4c1f5330055476ea5659804e1e40 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 313, const_tuple_str_plain_self_str_plain_value_str_plain_denominator_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ef2bd1a8914c793343d87e28cdbe4e51 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 470, const_tuple_str_plain_self_str_plain_ifh_str_plain_prefix_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3e4237cb079ef39d375bd3fa69aa4fdf = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 884, const_tuple_str_plain_self_str_plain_args_str_plain_kwargs_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_c06d2b45287a725176290b1facdbaab6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 1603, const_tuple_str_plain_self_str_plain_fn_str_plain_new_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f26dce26fdc64eea13374b4cadf88e86 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 620, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_312fd463751bf0babfc46d8761c6b6e6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 932, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e982f86f735f95188b8655c4a12d9a58 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 522, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0d462b9205720dd46676aaf6d3150b05 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 929, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1ae13cc10216c3c56f8de6b175f63849 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 364, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e7887f7acbd628c31ede8823e04e6a38 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___setitem__, 543, const_tuple_str_plain_self_str_plain_tag_str_plain_value_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b7f9cb64c295e170ed666b9321bd9b77 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___setitem__, 935, const_tuple_38fdc0dfb09e64dfe1c7b3dbb610d05d_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_27c9ea1e69d26b3104f92269aa08e1c7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___str__, 510, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2575d1fafa5ee2e0a350462a2206e554 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__accept, 278, const_tuple_str_plain_prefix_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f06f48873dfc793a4b11d897a07834fd = MAKE_CODEOBJ( module_filename_obj, const_str_plain__close__fp, 1362, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b06de1521e8626708430cb3d8bc83282 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__delegate, 373, const_tuple_str_plain_op_str_plain_delegate_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_37bce8d2a322291925eb48a1396ad929 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__ensure_read, 718, const_tuple_str_plain_self_str_plain_fp_str_plain_size_str_plain_ret_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4cfa63263812b0b75a6a6431eeada605 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__libtiff_version, 288, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_20ecfd8a32c6bfd8f918732e60620813 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__limit_rational, 282, const_tuple_str_plain_val_str_plain_max_val_str_plain_inv_str_plain_n_d_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_42adb49f00dcb5a9d82a072b42606ab4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__load_libtiff, 1088, const_tuple_c66f1cb12ede3b5b4a1f4b600dd87185_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_09423594580680a7a194b3076286dbf6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__open, 965, const_tuple_str_plain_self_str_plain_ifh_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_342317ae8ab3bd9edb224f8d7af0b825 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__pack, 626, const_tuple_str_plain_self_str_plain_fmt_str_plain_values_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE );
    codeobj_e5c941007fe38e475d700bffe0369461 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__register_basic, 644, const_tuple_89072b39c492afaede3352d819927878_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bcce158a4d6f41ca9253c76c1e1be241 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__register_loader, 629, const_tuple_str_plain_idx_str_plain_size_str_plain_decorator_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c82772004a87c6a7bb35738eb45b3817 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__register_writer, 638, const_tuple_str_plain_idx_str_plain_decorator_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6cda4f89e1245682282b8adef14ab664 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__save, 1405, const_tuple_8604fd5de92cf1e0dc04582e17177efb_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cbccd8829ad9c2a0cbafe9ed5793eaa1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__save_all, 1821, const_tuple_ba33dd8aa805c7e4b81bf214fb6d7c27_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_08022af7f40313a8c4c985aee619a19b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__seek, 1033, const_tuple_str_plain_self_str_plain_frame_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e501b4d2298b52f36845c1ee1accf36f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__setitem, 546, const_tuple_8c3674872836452c263be064680a25b1_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b8632c5f1f36afe4f972176d21c2e38f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__setup, 1175, const_tuple_dd1d203e1ad1498d3e5f845fba24d837_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ac7e3ef1c57c07915ccc7f53d7f3969e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__unpack, 623, const_tuple_str_plain_self_str_plain_fmt_str_plain_data_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0d6b4fb5870d5a5567f1835676abd3dc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_close, 1759, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_81a5b827dcac3539ef66c90c1d383515 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_combine, 688, const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_aa66f459a2c09d2ffda5f44034204ebb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_combine, 709, const_tuple_str_plain_a_str_plain_b_str_plain_legacy_api_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_fdd8a8df3a67830324707201830c0715 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_decorator, 630, const_tuple_str_plain_func_str_plain_TYPES_str_plain_idx_str_plain_size_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_10d42498402b62ece1d8beff9457b6f1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_decorator, 639, const_tuple_str_plain_func_str_plain_idx_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_f4fc4ec5ab0aa4e9c041063b94979b8b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_delegate, 374, const_tuple_str_plain_self_str_plain_args_str_plain_op_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS );
    codeobj_6689142d0b279dc6e8b0c25991ea3894 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_denominator, 347, const_tuple_str_plain_a_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_336f27bae7a685b3eca6c53d34597a82 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_finalize, 1641, const_tuple_str_plain_self_str_plain_IIMM_str_plain_IFDoffset_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_741ddc383480035d74106484182f19b9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_fixIFD, 1763, const_tuple_918d9811f320c2e9b62d25c72ac05a72_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f8e19cb72f58afe34bd7fbae29d60efd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_fixOffsets, 1797, const_tuple_017a84fefe25a0581f5f85142c2b62d9_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1ff42e346a2754cb0ad082098d047812 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_from_v2, 891, const_tuple_str_plain_cls_str_plain_original_str_plain_ifd_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_078177cbaf4ee42129545a54c84dce8c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_goToEnd, 1688, const_tuple_str_plain_self_str_plain_pos_str_plain_padBytes_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_65acf2f2b8b04bc5eb83e472984337e9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_has_key, 540, const_tuple_str_plain_self_str_plain_tag_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a947e9874296c004bdad2116ab6f31a3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_is_animated, 1005, const_tuple_str_plain_self_str_plain_current_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7e232219f718db02f73592a2d5df0d32 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_legacy_api, 498, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dbdab077daf7b2c03c61eecd4b003219 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_limit_rational, 351, const_tuple_str_plain_self_str_plain_max_denominator_str_plain_f_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6b83910b66967b3a1559d551a269f208 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load, 726, const_tuple_17351531cdbcff0b6c5dff9ab03014b4_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_726f2dfc8f4541083282f444923c412b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load, 1077, const_tuple_str_plain_self_str_plain___class___tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_0efedaccea387e79db3b8b27feb02e66 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_byte, 663, const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_847b9e04fc3f5623f77010a62056a35f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_end, 1082, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4ea75d3fead62b0ce8b58965be6b32fc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_rational, 684, const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6587ff696723c46961c038013de53154 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_signed_rational, 705, const_tuple_46281bc7f7f4b0fd9fa111365b9a7bec_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0082b00a12f39acfc510cc861342f685 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_string, 671, const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1340e8b393177fc8332501ef651ebf48 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_undefined, 697, const_tuple_str_plain_self_str_plain_data_str_plain_legacy_api_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b8dda3ad7cb1be231c12f8823ec5b866 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_n_frames, 993, const_tuple_str_plain_self_str_plain_current_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_80d5329d7d171701e770a3cc5a3450f4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_named, 513, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7b4bb5730ac50485820f76a51668d633 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_newFrame, 1665, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a0a828f24324513e60581b2711a251a1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_numerator, 343, const_tuple_str_plain_a_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6cb860ca7c8db47431876b8f94c14c0c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_readLong, 1722, const_tuple_str_plain_self_str_plain_value_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_82996f6194c95ad02d897b5cb9f54f52 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_readShort, 1718, const_tuple_str_plain_self_str_plain_value_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cee9afab1d0baacb6b732e90d6fcfff8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_reset, 502, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ed60a787d3aca02854acb57ad82f7fb9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rewriteLastLong, 1740, const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9c0321c0f03ab889f2e725dcee3d6bc2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rewriteLastShort, 1733, const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4a5d34f527e95c432e45aa6b4807c32e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_rewriteLastShortToLong, 1726, const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3548084e462e583b5bdd1d2b003a978d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_save, 783, const_tuple_7cf32c682f6455f33a2293c4f16f51aa_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_37cc5b83577da51cce196080465f5610 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_seek, 1022, const_tuple_str_plain_self_str_plain_frame_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_164e78496ac14e9b1d5386aa73ca2a62 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_seek, 1681, const_tuple_str_plain_self_str_plain_offset_str_plain_whence_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2856c68ddb52c15f325b6454ff818552 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_setEndian, 1698, const_tuple_str_plain_self_str_plain_endian_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f9524a3076e2e7138f609e6c4ad55b8c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_setup, 1617, const_tuple_str_plain_self_str_plain_IIMM_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5ea41118e7c1019505b42897e95a9685 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_size, 1064, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_acb470d44072f1d55d1eb2629adf0c6a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_size, 1068, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_267cb1a2ac702db4ed0b705f1221373a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_skipIFDs, 1704, const_tuple_str_plain_self_str_plain_IFDoffset_str_plain_numTags_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e0a5956b232208871ef5771c8fbe1eac = MAKE_CODEOBJ( module_filename_obj, const_str_plain_tell, 1060, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fdc6c6e8844de9ab475a66708690dcde = MAKE_CODEOBJ( module_filename_obj, const_str_plain_tell, 1678, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a5b7f302af9cbae27961f6342cc65451 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_to_v2, 909, const_tuple_str_plain_self_str_plain_ifd_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2ae5a0740f159777a3ce3a976648fe63 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 1715, const_tuple_str_plain_self_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e506afd6b88e1ef3346114190f1afafc = MAKE_CODEOBJ( module_filename_obj, const_str_plain_writeLong, 1753, const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_20bfb7154e4fda4fb602e7a2fadf65f5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_writeShort, 1747, const_tuple_str_plain_self_str_plain_value_str_plain_bytesWritten_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_035016e5fd5e65a1f3524a185e374970 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_byte, 667, const_tuple_str_plain_self_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7dc53a3a0068576ca023c47aa5fc74f0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_rational, 692, const_tuple_str_plain_self_str_plain_values_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE );
    codeobj_b29504290a067901d73c63e9cfff37d9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_signed_rational, 713, const_tuple_str_plain_self_str_plain_values_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE );
    codeobj_82e978eebf395d5b8225a7d16edcc456 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_string, 677, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cabd68c42c300d0dc522e314acd51d59 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_undefined, 701, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_maker( void );


static PyObject *PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_maker( void );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_4__mro_entries_conversion( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1_complex_call_helper_star_list( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_5_complex_call_helper_pos_star_list( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_9_complex_call_helper_pos_star_list_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_10___eq__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_12___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_13_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_14_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_15_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_16_legacy_api(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_17_reset(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_18___str__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_19_named(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_1__accept(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_20___len__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_21___getitem__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_22___contains__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_23_has_key(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_24___setitem__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_25__setitem(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_26___delitem__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_27___iter__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_28__unpack(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_29__pack(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_2__limit_rational(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_33_load_byte( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_34_write_byte(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_35_load_string( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_36_write_string(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_38_write_rational(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_39_load_undefined( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_3__libtiff_version(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_40_write_undefined(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_42_write_signed_rational(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_43__ensure_read(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_44_load(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_45_save(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_46___init__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_47_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_48_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_49_from_v2(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_4___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_50_to_v2(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_51___contains__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_52___len__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_53___iter__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_54___setitem__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_55___getitem__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_56__open(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_57_n_frames(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_58_is_animated(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_59_seek(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_5_numerator(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_60__seek(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_61_tell(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_62_size(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_63_size(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_64_load(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_65_load_end(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_66__load_libtiff(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_67__setup(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_68__close__fp(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_69__save(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_6_denominator(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_70___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_71_setup(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_72_finalize(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_73_newFrame(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_74___enter__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_75___exit__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_76_tell(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_77_seek(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_78_goToEnd(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_79_setEndian(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_7_limit_rational(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_80_skipIFDs(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_81_write(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_82_readShort(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_83_readLong(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_85_rewriteLastShort(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_86_rewriteLastLong(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_87_writeShort(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_88_writeLong(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_89_close(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_8___repr__(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_90_fixIFD(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_91_fixOffsets( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_92__save_all(  );


static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_9___hash__(  );


// The module function definitions.
static PyObject *impl_PIL$TiffImagePlugin$$$function_1__accept( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_prefix = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_2575d1fafa5ee2e0a350462a2206e554;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_2575d1fafa5ee2e0a350462a2206e554 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2575d1fafa5ee2e0a350462a2206e554, codeobj_2575d1fafa5ee2e0a350462a2206e554, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_2575d1fafa5ee2e0a350462a2206e554 = cache_frame_2575d1fafa5ee2e0a350462a2206e554;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2575d1fafa5ee2e0a350462a2206e554 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2575d1fafa5ee2e0a350462a2206e554 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_prefix );
        tmp_subscribed_name_1 = par_prefix;
        tmp_subscript_name_1 = const_slice_none_int_pos_4_none;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PREFIXES );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PREFIXES );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_compexpr_left_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PREFIXES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 279;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_1;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = ( tmp_res == 1 ) ? Py_True : Py_False;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2575d1fafa5ee2e0a350462a2206e554 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2575d1fafa5ee2e0a350462a2206e554 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2575d1fafa5ee2e0a350462a2206e554 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2575d1fafa5ee2e0a350462a2206e554, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2575d1fafa5ee2e0a350462a2206e554->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2575d1fafa5ee2e0a350462a2206e554, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2575d1fafa5ee2e0a350462a2206e554,
        type_description_1,
        par_prefix
    );


    // Release cached frame.
    if ( frame_2575d1fafa5ee2e0a350462a2206e554 == cache_frame_2575d1fafa5ee2e0a350462a2206e554 )
    {
        Py_DECREF( frame_2575d1fafa5ee2e0a350462a2206e554 );
    }
    cache_frame_2575d1fafa5ee2e0a350462a2206e554 = NULL;

    assertFrameObject( frame_2575d1fafa5ee2e0a350462a2206e554 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_1__accept );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_1__accept );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_2__limit_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_val = python_pars[ 0 ];
    PyObject *par_max_val = python_pars[ 1 ];
    PyObject *var_inv = NULL;
    PyObject *var_n_d = NULL;
    struct Nuitka_FrameObject *frame_20ecfd8a32c6bfd8f918732e60620813;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_20ecfd8a32c6bfd8f918732e60620813 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_20ecfd8a32c6bfd8f918732e60620813, codeobj_20ecfd8a32c6bfd8f918732e60620813, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_20ecfd8a32c6bfd8f918732e60620813 = cache_frame_20ecfd8a32c6bfd8f918732e60620813;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_20ecfd8a32c6bfd8f918732e60620813 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_20ecfd8a32c6bfd8f918732e60620813 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_abs );
        assert( tmp_called_name_1 != NULL );
        CHECK_OBJECT( par_val );
        tmp_args_element_name_1 = par_val;
        frame_20ecfd8a32c6bfd8f918732e60620813->m_frame.f_lineno = 283;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_compexpr_left_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 283;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_1;
        tmp_assign_source_1 = RICH_COMPARE_GT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 283;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_inv == NULL );
        var_inv = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 284;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        CHECK_OBJECT( var_inv );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_inv );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_left_name_1 = const_int_pos_1;
        CHECK_OBJECT( par_val );
        tmp_right_name_1 = par_val;
        tmp_args_element_name_2 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( par_val );
        tmp_args_element_name_2 = par_val;
        Py_INCREF( tmp_args_element_name_2 );
        condexpr_end_1:;
        frame_20ecfd8a32c6bfd8f918732e60620813->m_frame.f_lineno = 284;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_called_instance_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_max_val );
        tmp_args_element_name_3 = par_max_val;
        frame_20ecfd8a32c6bfd8f918732e60620813->m_frame.f_lineno = 284;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_limit_rational, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_n_d == NULL );
        var_n_d = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_inv );
        tmp_truth_name_2 = CHECK_IF_TRUE( var_inv );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT( var_n_d );
        tmp_subscribed_name_1 = var_n_d;
        tmp_subscript_name_1 = const_slice_none_none_int_neg_1;
        tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        CHECK_OBJECT( var_n_d );
        tmp_return_value = var_n_d;
        Py_INCREF( tmp_return_value );
        condexpr_end_2:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20ecfd8a32c6bfd8f918732e60620813 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_20ecfd8a32c6bfd8f918732e60620813 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20ecfd8a32c6bfd8f918732e60620813 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_20ecfd8a32c6bfd8f918732e60620813, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_20ecfd8a32c6bfd8f918732e60620813->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_20ecfd8a32c6bfd8f918732e60620813, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20ecfd8a32c6bfd8f918732e60620813,
        type_description_1,
        par_val,
        par_max_val,
        var_inv,
        var_n_d
    );


    // Release cached frame.
    if ( frame_20ecfd8a32c6bfd8f918732e60620813 == cache_frame_20ecfd8a32c6bfd8f918732e60620813 )
    {
        Py_DECREF( frame_20ecfd8a32c6bfd8f918732e60620813 );
    }
    cache_frame_20ecfd8a32c6bfd8f918732e60620813 = NULL;

    assertFrameObject( frame_20ecfd8a32c6bfd8f918732e60620813 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_2__limit_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_val );
    Py_DECREF( par_val );
    par_val = NULL;

    CHECK_OBJECT( (PyObject *)par_max_val );
    Py_DECREF( par_max_val );
    par_max_val = NULL;

    CHECK_OBJECT( (PyObject *)var_inv );
    Py_DECREF( var_inv );
    var_inv = NULL;

    CHECK_OBJECT( (PyObject *)var_n_d );
    Py_DECREF( var_n_d );
    var_n_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_val );
    Py_DECREF( par_val );
    par_val = NULL;

    CHECK_OBJECT( (PyObject *)par_max_val );
    Py_DECREF( par_max_val );
    par_max_val = NULL;

    Py_XDECREF( var_inv );
    var_inv = NULL;

    Py_XDECREF( var_n_d );
    var_n_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_2__limit_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_3__libtiff_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_4cfa63263812b0b75a6a6431eeada605;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4cfa63263812b0b75a6a6431eeada605 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_4cfa63263812b0b75a6a6431eeada605, codeobj_4cfa63263812b0b75a6a6431eeada605, module_PIL$TiffImagePlugin, 0 );
    frame_4cfa63263812b0b75a6a6431eeada605 = cache_frame_4cfa63263812b0b75a6a6431eeada605;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4cfa63263812b0b75a6a6431eeada605 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4cfa63263812b0b75a6a6431eeada605 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_subscript_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 289;

            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_core );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_libtiff_version );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        frame_4cfa63263812b0b75a6a6431eeada605->m_frame.f_lineno = 289;
        tmp_subscribed_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_newline_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_called_instance_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        frame_4cfa63263812b0b75a6a6431eeada605->m_frame.f_lineno = 289;
        tmp_subscribed_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_digest_23a28909417200b80891584a041695a0_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_2, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4cfa63263812b0b75a6a6431eeada605 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4cfa63263812b0b75a6a6431eeada605 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4cfa63263812b0b75a6a6431eeada605 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4cfa63263812b0b75a6a6431eeada605, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4cfa63263812b0b75a6a6431eeada605->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4cfa63263812b0b75a6a6431eeada605, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4cfa63263812b0b75a6a6431eeada605,
        type_description_1
    );


    // Release cached frame.
    if ( frame_4cfa63263812b0b75a6a6431eeada605 == cache_frame_4cfa63263812b0b75a6a6431eeada605 )
    {
        Py_DECREF( frame_4cfa63263812b0b75a6a6431eeada605 );
    }
    cache_frame_4cfa63263812b0b75a6a6431eeada605 = NULL;

    assertFrameObject( frame_4cfa63263812b0b75a6a6431eeada605 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_3__libtiff_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_4___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *par_denominator = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_2e1e4c1f5330055476ea5659804e1e40;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_2e1e4c1f5330055476ea5659804e1e40 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2e1e4c1f5330055476ea5659804e1e40, codeobj_2e1e4c1f5330055476ea5659804e1e40, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_2e1e4c1f5330055476ea5659804e1e40 = cache_frame_2e1e4c1f5330055476ea5659804e1e40;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2e1e4c1f5330055476ea5659804e1e40 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2e1e4c1f5330055476ea5659804e1e40 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_denominator );
        tmp_assattr_name_1 = par_denominator;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__denominator, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 319;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_value );
        tmp_assattr_name_2 = par_value;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__numerator, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 320;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = const_float_1_0;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__val, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 321;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_1 = par_value;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Fraction );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Fraction );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Fraction" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 323;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_1 = tmp_mvar_value_1;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_source_name_1;
            PyObject *tmp_assattr_target_4;
            CHECK_OBJECT( par_value );
            tmp_source_name_1 = par_value;
            tmp_assattr_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_numerator );
            if ( tmp_assattr_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 324;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_4 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__numerator, tmp_assattr_name_4 );
            Py_DECREF( tmp_assattr_name_4 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 324;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_source_name_2;
            PyObject *tmp_assattr_target_5;
            CHECK_OBJECT( par_value );
            tmp_source_name_2 = par_value;
            tmp_assattr_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_denominator );
            if ( tmp_assattr_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 325;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_5 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__denominator, tmp_assattr_name_5 );
            Py_DECREF( tmp_assattr_name_5 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 325;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_6;
            PyObject *tmp_assattr_target_6;
            CHECK_OBJECT( par_value );
            tmp_assattr_name_6 = par_value;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_6 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__val, tmp_assattr_name_6 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 326;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_2 = par_value;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 328;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_2 = tmp_mvar_value_2;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 328;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_7;
            PyObject *tmp_source_name_3;
            PyObject *tmp_assattr_target_7;
            CHECK_OBJECT( par_value );
            tmp_source_name_3 = par_value;
            tmp_assattr_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_denominator );
            if ( tmp_assattr_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 329;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_7 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain__denominator, tmp_assattr_name_7 );
            Py_DECREF( tmp_assattr_name_7 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 329;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_8;
            PyObject *tmp_source_name_4;
            PyObject *tmp_assattr_target_8;
            CHECK_OBJECT( par_value );
            tmp_source_name_4 = par_value;
            tmp_assattr_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_numerator );
            if ( tmp_assattr_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 330;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_8 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain__numerator, tmp_assattr_name_8 );
            Py_DECREF( tmp_assattr_name_8 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 330;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_9;
            PyObject *tmp_source_name_5;
            PyObject *tmp_assattr_target_9;
            CHECK_OBJECT( par_value );
            tmp_source_name_5 = par_value;
            tmp_assattr_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__val );
            if ( tmp_assattr_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 331;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_9 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain__val, tmp_assattr_name_9 );
            Py_DECREF( tmp_assattr_name_9 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 331;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_denominator );
        tmp_compexpr_left_1 = par_denominator;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 334;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assattr_name_10;
            PyObject *tmp_assattr_target_10;
            tmp_assattr_name_10 = const_float_plus_nan;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_10 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain__val, tmp_assattr_name_10 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 335;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        goto branch_end_3;
        branch_no_3:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_denominator );
            tmp_compexpr_left_2 = par_denominator;
            tmp_compexpr_right_2 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 338;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assattr_name_11;
                PyObject *tmp_called_name_1;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_assattr_target_11;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Fraction );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Fraction );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Fraction" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 339;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_1 = tmp_mvar_value_3;
                CHECK_OBJECT( par_value );
                tmp_args_element_name_1 = par_value;
                frame_2e1e4c1f5330055476ea5659804e1e40->m_frame.f_lineno = 339;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_assattr_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                if ( tmp_assattr_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 339;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_11 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain__val, tmp_assattr_name_11 );
                Py_DECREF( tmp_assattr_name_11 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 339;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_4;
            branch_no_4:;
            {
                PyObject *tmp_assattr_name_12;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_assattr_target_12;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Fraction );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Fraction );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Fraction" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 341;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_2 = tmp_mvar_value_4;
                CHECK_OBJECT( par_value );
                tmp_args_element_name_2 = par_value;
                CHECK_OBJECT( par_denominator );
                tmp_args_element_name_3 = par_denominator;
                frame_2e1e4c1f5330055476ea5659804e1e40->m_frame.f_lineno = 341;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                    tmp_assattr_name_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                }

                if ( tmp_assattr_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 341;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_12 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain__val, tmp_assattr_name_12 );
                Py_DECREF( tmp_assattr_name_12 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 341;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_end_4:;
        }
        branch_end_3:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e1e4c1f5330055476ea5659804e1e40 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e1e4c1f5330055476ea5659804e1e40 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e1e4c1f5330055476ea5659804e1e40 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2e1e4c1f5330055476ea5659804e1e40, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2e1e4c1f5330055476ea5659804e1e40->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2e1e4c1f5330055476ea5659804e1e40, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2e1e4c1f5330055476ea5659804e1e40,
        type_description_1,
        par_self,
        par_value,
        par_denominator
    );


    // Release cached frame.
    if ( frame_2e1e4c1f5330055476ea5659804e1e40 == cache_frame_2e1e4c1f5330055476ea5659804e1e40 )
    {
        Py_DECREF( frame_2e1e4c1f5330055476ea5659804e1e40 );
    }
    cache_frame_2e1e4c1f5330055476ea5659804e1e40 = NULL;

    assertFrameObject( frame_2e1e4c1f5330055476ea5659804e1e40 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_4___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_denominator );
    Py_DECREF( par_denominator );
    par_denominator = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_denominator );
    Py_DECREF( par_denominator );
    par_denominator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_4___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_5_numerator( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_a0a828f24324513e60581b2711a251a1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a0a828f24324513e60581b2711a251a1 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a0a828f24324513e60581b2711a251a1, codeobj_a0a828f24324513e60581b2711a251a1, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_a0a828f24324513e60581b2711a251a1 = cache_frame_a0a828f24324513e60581b2711a251a1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a0a828f24324513e60581b2711a251a1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a0a828f24324513e60581b2711a251a1 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_a );
        tmp_source_name_1 = par_a;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__numerator );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 345;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a0a828f24324513e60581b2711a251a1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a0a828f24324513e60581b2711a251a1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a0a828f24324513e60581b2711a251a1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a0a828f24324513e60581b2711a251a1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a0a828f24324513e60581b2711a251a1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a0a828f24324513e60581b2711a251a1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a0a828f24324513e60581b2711a251a1,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_a0a828f24324513e60581b2711a251a1 == cache_frame_a0a828f24324513e60581b2711a251a1 )
    {
        Py_DECREF( frame_a0a828f24324513e60581b2711a251a1 );
    }
    cache_frame_a0a828f24324513e60581b2711a251a1 = NULL;

    assertFrameObject( frame_a0a828f24324513e60581b2711a251a1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_5_numerator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_5_numerator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_6_denominator( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_6689142d0b279dc6e8b0c25991ea3894;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6689142d0b279dc6e8b0c25991ea3894 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6689142d0b279dc6e8b0c25991ea3894, codeobj_6689142d0b279dc6e8b0c25991ea3894, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_6689142d0b279dc6e8b0c25991ea3894 = cache_frame_6689142d0b279dc6e8b0c25991ea3894;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6689142d0b279dc6e8b0c25991ea3894 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6689142d0b279dc6e8b0c25991ea3894 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_a );
        tmp_source_name_1 = par_a;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__denominator );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 349;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6689142d0b279dc6e8b0c25991ea3894 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6689142d0b279dc6e8b0c25991ea3894 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6689142d0b279dc6e8b0c25991ea3894 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6689142d0b279dc6e8b0c25991ea3894, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6689142d0b279dc6e8b0c25991ea3894->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6689142d0b279dc6e8b0c25991ea3894, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6689142d0b279dc6e8b0c25991ea3894,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_6689142d0b279dc6e8b0c25991ea3894 == cache_frame_6689142d0b279dc6e8b0c25991ea3894 )
    {
        Py_DECREF( frame_6689142d0b279dc6e8b0c25991ea3894 );
    }
    cache_frame_6689142d0b279dc6e8b0c25991ea3894 = NULL;

    assertFrameObject( frame_6689142d0b279dc6e8b0c25991ea3894 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_6_denominator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_6_denominator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_7_limit_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_max_denominator = python_pars[ 1 ];
    PyObject *var_f = NULL;
    struct Nuitka_FrameObject *frame_dbdab077daf7b2c03c61eecd4b003219;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_dbdab077daf7b2c03c61eecd4b003219 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dbdab077daf7b2c03c61eecd4b003219, codeobj_dbdab077daf7b2c03c61eecd4b003219, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_dbdab077daf7b2c03c61eecd4b003219 = cache_frame_dbdab077daf7b2c03c61eecd4b003219;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dbdab077daf7b2c03c61eecd4b003219 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dbdab077daf7b2c03c61eecd4b003219 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_denominator );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 358;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 358;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_numerator );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 359;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_return_value = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_denominator );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_return_value );

                exception_lineno = 359;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__val );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_max_denominator );
        tmp_args_element_name_1 = par_max_denominator;
        frame_dbdab077daf7b2c03c61eecd4b003219->m_frame.f_lineno = 361;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_limit_denominator, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_f == NULL );
        var_f = tmp_assign_source_1;
    }
    {
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( var_f );
        tmp_source_name_5 = var_f;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_numerator );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 362;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_f );
        tmp_source_name_6 = var_f;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_denominator );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_return_value );

            exception_lineno = 362;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbdab077daf7b2c03c61eecd4b003219 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbdab077daf7b2c03c61eecd4b003219 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbdab077daf7b2c03c61eecd4b003219 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dbdab077daf7b2c03c61eecd4b003219, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dbdab077daf7b2c03c61eecd4b003219->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dbdab077daf7b2c03c61eecd4b003219, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dbdab077daf7b2c03c61eecd4b003219,
        type_description_1,
        par_self,
        par_max_denominator,
        var_f
    );


    // Release cached frame.
    if ( frame_dbdab077daf7b2c03c61eecd4b003219 == cache_frame_dbdab077daf7b2c03c61eecd4b003219 )
    {
        Py_DECREF( frame_dbdab077daf7b2c03c61eecd4b003219 );
    }
    cache_frame_dbdab077daf7b2c03c61eecd4b003219 = NULL;

    assertFrameObject( frame_dbdab077daf7b2c03c61eecd4b003219 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_7_limit_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_max_denominator );
    Py_DECREF( par_max_denominator );
    par_max_denominator = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_max_denominator );
    Py_DECREF( par_max_denominator );
    par_max_denominator = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_7_limit_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_8___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_1ae13cc10216c3c56f8de6b175f63849;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1ae13cc10216c3c56f8de6b175f63849 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1ae13cc10216c3c56f8de6b175f63849, codeobj_1ae13cc10216c3c56f8de6b175f63849, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_1ae13cc10216c3c56f8de6b175f63849 = cache_frame_1ae13cc10216c3c56f8de6b175f63849;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1ae13cc10216c3c56f8de6b175f63849 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1ae13cc10216c3c56f8de6b175f63849 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        PyObject *tmp_float_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_float_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__val );
        if ( tmp_float_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_unicode_arg_1 = TO_FLOAT( tmp_float_arg_1 );
        Py_DECREF( tmp_float_arg_1 );
        if ( tmp_unicode_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyObject_Unicode( tmp_unicode_arg_1 );
        Py_DECREF( tmp_unicode_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ae13cc10216c3c56f8de6b175f63849 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ae13cc10216c3c56f8de6b175f63849 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ae13cc10216c3c56f8de6b175f63849 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1ae13cc10216c3c56f8de6b175f63849, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1ae13cc10216c3c56f8de6b175f63849->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1ae13cc10216c3c56f8de6b175f63849, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1ae13cc10216c3c56f8de6b175f63849,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_1ae13cc10216c3c56f8de6b175f63849 == cache_frame_1ae13cc10216c3c56f8de6b175f63849 )
    {
        Py_DECREF( frame_1ae13cc10216c3c56f8de6b175f63849 );
    }
    cache_frame_1ae13cc10216c3c56f8de6b175f63849 = NULL;

    assertFrameObject( frame_1ae13cc10216c3c56f8de6b175f63849 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_8___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_8___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_9___hash__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_7cb7acefb66c9f4c713b0729737e8461;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7cb7acefb66c9f4c713b0729737e8461 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7cb7acefb66c9f4c713b0729737e8461, codeobj_7cb7acefb66c9f4c713b0729737e8461, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_7cb7acefb66c9f4c713b0729737e8461 = cache_frame_7cb7acefb66c9f4c713b0729737e8461;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7cb7acefb66c9f4c713b0729737e8461 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7cb7acefb66c9f4c713b0729737e8461 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__val );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 368;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_7cb7acefb66c9f4c713b0729737e8461->m_frame.f_lineno = 368;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain___hash__ );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 368;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cb7acefb66c9f4c713b0729737e8461 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cb7acefb66c9f4c713b0729737e8461 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7cb7acefb66c9f4c713b0729737e8461 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7cb7acefb66c9f4c713b0729737e8461, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7cb7acefb66c9f4c713b0729737e8461->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7cb7acefb66c9f4c713b0729737e8461, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7cb7acefb66c9f4c713b0729737e8461,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7cb7acefb66c9f4c713b0729737e8461 == cache_frame_7cb7acefb66c9f4c713b0729737e8461 )
    {
        Py_DECREF( frame_7cb7acefb66c9f4c713b0729737e8461 );
    }
    cache_frame_7cb7acefb66c9f4c713b0729737e8461 = NULL;

    assertFrameObject( frame_7cb7acefb66c9f4c713b0729737e8461 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_9___hash__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_9___hash__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_10___eq__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_a6b7d6f1fc8c98e9a6c227da842fcb5f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a6b7d6f1fc8c98e9a6c227da842fcb5f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a6b7d6f1fc8c98e9a6c227da842fcb5f, codeobj_a6b7d6f1fc8c98e9a6c227da842fcb5f, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_a6b7d6f1fc8c98e9a6c227da842fcb5f = cache_frame_a6b7d6f1fc8c98e9a6c227da842fcb5f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__val );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 371;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_other );
        tmp_compexpr_right_1 = par_other;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 371;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a6b7d6f1fc8c98e9a6c227da842fcb5f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a6b7d6f1fc8c98e9a6c227da842fcb5f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a6b7d6f1fc8c98e9a6c227da842fcb5f,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f == cache_frame_a6b7d6f1fc8c98e9a6c227da842fcb5f )
    {
        Py_DECREF( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );
    }
    cache_frame_a6b7d6f1fc8c98e9a6c227da842fcb5f = NULL;

    assertFrameObject( frame_a6b7d6f1fc8c98e9a6c227da842fcb5f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_10___eq__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_10___eq__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_11__delegate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_op = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_delegate = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate(  );

        ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] = par_op;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] );


        assert( var_delegate == NULL );
        var_delegate = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT( var_delegate );
    tmp_return_value = var_delegate;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_11__delegate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_op );
    Py_DECREF( par_op );
    par_op = NULL;

    CHECK_OBJECT( (PyObject *)var_delegate );
    Py_DECREF( var_delegate );
    var_delegate = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_11__delegate );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_f4fc4ec5ab0aa4e9c041063b94979b8b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f4fc4ec5ab0aa4e9c041063b94979b8b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f4fc4ec5ab0aa4e9c041063b94979b8b, codeobj_f4fc4ec5ab0aa4e9c041063b94979b8b, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f4fc4ec5ab0aa4e9c041063b94979b8b = cache_frame_f4fc4ec5ab0aa4e9c041063b94979b8b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f4fc4ec5ab0aa4e9c041063b94979b8b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__val );
        if ( tmp_getattr_target_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 375;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_getattr_target_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "op" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 375;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_getattr_attr_1 = PyCell_GET( self->m_closure[0] );
        tmp_dircall_arg1_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
        Py_DECREF( tmp_getattr_target_1 );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 375;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_args );
        tmp_dircall_arg2_1 = par_args;
        Py_INCREF( tmp_dircall_arg2_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___internal__$$$function_1_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 375;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f4fc4ec5ab0aa4e9c041063b94979b8b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f4fc4ec5ab0aa4e9c041063b94979b8b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f4fc4ec5ab0aa4e9c041063b94979b8b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f4fc4ec5ab0aa4e9c041063b94979b8b,
        type_description_1,
        par_self,
        par_args,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_f4fc4ec5ab0aa4e9c041063b94979b8b == cache_frame_f4fc4ec5ab0aa4e9c041063b94979b8b )
    {
        Py_DECREF( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );
    }
    cache_frame_f4fc4ec5ab0aa4e9c041063b94979b8b = NULL;

    assertFrameObject( frame_f4fc4ec5ab0aa4e9c041063b94979b8b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_12___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_ifh = python_pars[ 1 ];
    PyObject *par_prefix = python_pars[ 2 ];
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_ef2bd1a8914c793343d87e28cdbe4e51;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_ef2bd1a8914c793343d87e28cdbe4e51 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ef2bd1a8914c793343d87e28cdbe4e51, codeobj_ef2bd1a8914c793343d87e28cdbe4e51, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ef2bd1a8914c793343d87e28cdbe4e51 = cache_frame_ef2bd1a8914c793343d87e28cdbe4e51;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ef2bd1a8914c793343d87e28cdbe4e51 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ef2bd1a8914c793343d87e28cdbe4e51 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_ifh );
        tmp_subscribed_name_1 = par_ifh;
        tmp_subscript_name_1 = const_slice_none_int_pos_4_none;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PREFIXES );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PREFIXES );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_compexpr_left_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PREFIXES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 481;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_1;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_cdd5e53041d6bbb88ffd058e2b362a66;
            CHECK_OBJECT( par_ifh );
            tmp_right_name_1 = par_ifh;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 482;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_ef2bd1a8914c793343d87e28cdbe4e51->m_frame.f_lineno = 482;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_SyntaxError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 482;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_prefix );
        tmp_compexpr_left_2 = par_prefix;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( par_prefix );
        tmp_assattr_name_1 = par_prefix;
        Py_INCREF( tmp_assattr_name_1 );
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( par_ifh );
        tmp_subscribed_name_2 = par_ifh;
        tmp_subscript_name_2 = const_slice_none_int_pos_2_none;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__prefix, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__prefix );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_compexpr_left_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_3 = tmp_mvar_value_2;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = const_str_chr_62;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__endian, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 485;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__prefix );
            if ( tmp_compexpr_left_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 486;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
            }

            if ( tmp_mvar_value_3 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_4 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 486;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_4 = tmp_mvar_value_3;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            Py_DECREF( tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 486;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assattr_name_3;
                PyObject *tmp_assattr_target_3;
                tmp_assattr_name_3 = const_str_chr_60;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_3 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__endian, tmp_assattr_name_3 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 487;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                tmp_make_exception_arg_2 = const_str_digest_0c26ebcb2c39f340b95e2b2f1eda8176;
                frame_ef2bd1a8914c793343d87e28cdbe4e51->m_frame.f_lineno = 489;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_SyntaxError, call_args );
                }

                assert( !(tmp_raise_type_2 == NULL) );
                exception_type = tmp_raise_type_2;
                exception_lineno = 489;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            branch_end_3:;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_ef2bd1a8914c793343d87e28cdbe4e51->m_frame.f_lineno = 490;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_reset );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 490;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_1 = const_str_plain_L;
        CHECK_OBJECT( par_ifh );
        tmp_subscribed_name_3 = par_ifh;
        tmp_subscript_name_3 = const_slice_int_pos_4_none_none;
        tmp_args_element_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 491;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        frame_ef2bd1a8914c793343d87e28cdbe4e51->m_frame.f_lineno = 491;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooo";
            exception_lineno = 491;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooo";
                    exception_lineno = 491;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooo";
            exception_lineno = 491;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assattr_name_4 = tmp_tuple_unpack_1__element_1;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_next, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__legacy_api, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 492;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef2bd1a8914c793343d87e28cdbe4e51 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef2bd1a8914c793343d87e28cdbe4e51 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ef2bd1a8914c793343d87e28cdbe4e51, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ef2bd1a8914c793343d87e28cdbe4e51->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ef2bd1a8914c793343d87e28cdbe4e51, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ef2bd1a8914c793343d87e28cdbe4e51,
        type_description_1,
        par_self,
        par_ifh,
        par_prefix
    );


    // Release cached frame.
    if ( frame_ef2bd1a8914c793343d87e28cdbe4e51 == cache_frame_ef2bd1a8914c793343d87e28cdbe4e51 )
    {
        Py_DECREF( frame_ef2bd1a8914c793343d87e28cdbe4e51 );
    }
    cache_frame_ef2bd1a8914c793343d87e28cdbe4e51 = NULL;

    assertFrameObject( frame_ef2bd1a8914c793343d87e28cdbe4e51 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_12___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_ifh );
    Py_DECREF( par_ifh );
    par_ifh = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_ifh );
    Py_DECREF( par_ifh );
    par_ifh = NULL;

    CHECK_OBJECT( (PyObject *)par_prefix );
    Py_DECREF( par_prefix );
    par_prefix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_12___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_13_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_2ed633868cc02c462b5110fe63984608;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2ed633868cc02c462b5110fe63984608 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2ed633868cc02c462b5110fe63984608, codeobj_2ed633868cc02c462b5110fe63984608, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_2ed633868cc02c462b5110fe63984608 = cache_frame_2ed633868cc02c462b5110fe63984608;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2ed633868cc02c462b5110fe63984608 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2ed633868cc02c462b5110fe63984608 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__prefix );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 494;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ed633868cc02c462b5110fe63984608 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ed633868cc02c462b5110fe63984608 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ed633868cc02c462b5110fe63984608 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2ed633868cc02c462b5110fe63984608, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2ed633868cc02c462b5110fe63984608->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2ed633868cc02c462b5110fe63984608, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2ed633868cc02c462b5110fe63984608,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2ed633868cc02c462b5110fe63984608 == cache_frame_2ed633868cc02c462b5110fe63984608 )
    {
        Py_DECREF( frame_2ed633868cc02c462b5110fe63984608 );
    }
    cache_frame_2ed633868cc02c462b5110fe63984608 = NULL;

    assertFrameObject( frame_2ed633868cc02c462b5110fe63984608 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_13_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_13_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_14_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_b4d1665cd192f0f66496d609206d92c0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b4d1665cd192f0f66496d609206d92c0 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b4d1665cd192f0f66496d609206d92c0, codeobj_b4d1665cd192f0f66496d609206d92c0, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_b4d1665cd192f0f66496d609206d92c0 = cache_frame_b4d1665cd192f0f66496d609206d92c0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b4d1665cd192f0f66496d609206d92c0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b4d1665cd192f0f66496d609206d92c0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__offset );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 495;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4d1665cd192f0f66496d609206d92c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4d1665cd192f0f66496d609206d92c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4d1665cd192f0f66496d609206d92c0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b4d1665cd192f0f66496d609206d92c0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b4d1665cd192f0f66496d609206d92c0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b4d1665cd192f0f66496d609206d92c0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b4d1665cd192f0f66496d609206d92c0,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_b4d1665cd192f0f66496d609206d92c0 == cache_frame_b4d1665cd192f0f66496d609206d92c0 )
    {
        Py_DECREF( frame_b4d1665cd192f0f66496d609206d92c0 );
    }
    cache_frame_b4d1665cd192f0f66496d609206d92c0 = NULL;

    assertFrameObject( frame_b4d1665cd192f0f66496d609206d92c0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_14_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_14_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_15_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_7931ebd4c5e42ec165d2cf6bbf8a4292;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7931ebd4c5e42ec165d2cf6bbf8a4292 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7931ebd4c5e42ec165d2cf6bbf8a4292, codeobj_7931ebd4c5e42ec165d2cf6bbf8a4292, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_7931ebd4c5e42ec165d2cf6bbf8a4292 = cache_frame_7931ebd4c5e42ec165d2cf6bbf8a4292;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__legacy_api );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 496;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7931ebd4c5e42ec165d2cf6bbf8a4292, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7931ebd4c5e42ec165d2cf6bbf8a4292->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7931ebd4c5e42ec165d2cf6bbf8a4292, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7931ebd4c5e42ec165d2cf6bbf8a4292,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 == cache_frame_7931ebd4c5e42ec165d2cf6bbf8a4292 )
    {
        Py_DECREF( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );
    }
    cache_frame_7931ebd4c5e42ec165d2cf6bbf8a4292 = NULL;

    assertFrameObject( frame_7931ebd4c5e42ec165d2cf6bbf8a4292 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_15_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_15_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_16_legacy_api( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_7e232219f718db02f73592a2d5df0d32;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7e232219f718db02f73592a2d5df0d32 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7e232219f718db02f73592a2d5df0d32, codeobj_7e232219f718db02f73592a2d5df0d32, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_7e232219f718db02f73592a2d5df0d32 = cache_frame_7e232219f718db02f73592a2d5df0d32;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7e232219f718db02f73592a2d5df0d32 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7e232219f718db02f73592a2d5df0d32 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = const_str_digest_394cd1d93fd4faf14d35b39f57f4f3bb;
        frame_7e232219f718db02f73592a2d5df0d32->m_frame.f_lineno = 500;
        {
            PyObject *call_args[] = { tmp_make_exception_arg_1 };
            tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_Exception, call_args );
        }

        assert( !(tmp_raise_type_1 == NULL) );
        exception_type = tmp_raise_type_1;
        exception_lineno = 500;
        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7e232219f718db02f73592a2d5df0d32 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7e232219f718db02f73592a2d5df0d32 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7e232219f718db02f73592a2d5df0d32, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7e232219f718db02f73592a2d5df0d32->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7e232219f718db02f73592a2d5df0d32, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7e232219f718db02f73592a2d5df0d32,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_7e232219f718db02f73592a2d5df0d32 == cache_frame_7e232219f718db02f73592a2d5df0d32 )
    {
        Py_DECREF( frame_7e232219f718db02f73592a2d5df0d32 );
    }
    cache_frame_7e232219f718db02f73592a2d5df0d32 = NULL;

    assertFrameObject( frame_7e232219f718db02f73592a2d5df0d32 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_16_legacy_api );
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_16_legacy_api );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

}


static PyObject *impl_PIL$TiffImagePlugin$$$function_17_reset( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_cee9afab1d0baacb6b732e90d6fcfff8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_cee9afab1d0baacb6b732e90d6fcfff8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cee9afab1d0baacb6b732e90d6fcfff8, codeobj_cee9afab1d0baacb6b732e90d6fcfff8, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_cee9afab1d0baacb6b732e90d6fcfff8 = cache_frame_cee9afab1d0baacb6b732e90d6fcfff8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cee9afab1d0baacb6b732e90d6fcfff8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cee9afab1d0baacb6b732e90d6fcfff8 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__tags_v1, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 503;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__tags_v2, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 504;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__tagdata, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 505;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_tagtype, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 506;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__next, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__offset, tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 508;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cee9afab1d0baacb6b732e90d6fcfff8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cee9afab1d0baacb6b732e90d6fcfff8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cee9afab1d0baacb6b732e90d6fcfff8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cee9afab1d0baacb6b732e90d6fcfff8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cee9afab1d0baacb6b732e90d6fcfff8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cee9afab1d0baacb6b732e90d6fcfff8,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_cee9afab1d0baacb6b732e90d6fcfff8 == cache_frame_cee9afab1d0baacb6b732e90d6fcfff8 )
    {
        Py_DECREF( frame_cee9afab1d0baacb6b732e90d6fcfff8 );
    }
    cache_frame_cee9afab1d0baacb6b732e90d6fcfff8 = NULL;

    assertFrameObject( frame_cee9afab1d0baacb6b732e90d6fcfff8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_17_reset );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_17_reset );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_18___str__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_27c9ea1e69d26b3104f92269aa08e1c7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_27c9ea1e69d26b3104f92269aa08e1c7 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_27c9ea1e69d26b3104f92269aa08e1c7, codeobj_27c9ea1e69d26b3104f92269aa08e1c7, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_27c9ea1e69d26b3104f92269aa08e1c7 = cache_frame_27c9ea1e69d26b3104f92269aa08e1c7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_27c9ea1e69d26b3104f92269aa08e1c7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_27c9ea1e69d26b3104f92269aa08e1c7 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        PyObject *tmp_dict_seq_1;
        CHECK_OBJECT( par_self );
        tmp_dict_seq_1 = par_self;
        tmp_unicode_arg_1 = TO_DICT( tmp_dict_seq_1, NULL );
        if ( tmp_unicode_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 511;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyObject_Unicode( tmp_unicode_arg_1 );
        Py_DECREF( tmp_unicode_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 511;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_27c9ea1e69d26b3104f92269aa08e1c7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_27c9ea1e69d26b3104f92269aa08e1c7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_27c9ea1e69d26b3104f92269aa08e1c7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_27c9ea1e69d26b3104f92269aa08e1c7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_27c9ea1e69d26b3104f92269aa08e1c7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_27c9ea1e69d26b3104f92269aa08e1c7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_27c9ea1e69d26b3104f92269aa08e1c7,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_27c9ea1e69d26b3104f92269aa08e1c7 == cache_frame_27c9ea1e69d26b3104f92269aa08e1c7 )
    {
        Py_DECREF( frame_27c9ea1e69d26b3104f92269aa08e1c7 );
    }
    cache_frame_27c9ea1e69d26b3104f92269aa08e1c7 = NULL;

    assertFrameObject( frame_27c9ea1e69d26b3104f92269aa08e1c7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_18___str__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_18___str__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_19_named( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_80d5329d7d171701e770a3cc5a3450f4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_80d5329d7d171701e770a3cc5a3450f4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_80d5329d7d171701e770a3cc5a3450f4, codeobj_80d5329d7d171701e770a3cc5a3450f4, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_80d5329d7d171701e770a3cc5a3450f4 = cache_frame_80d5329d7d171701e770a3cc5a3450f4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_80d5329d7d171701e770a3cc5a3450f4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_80d5329d7d171701e770a3cc5a3450f4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_seq_1;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_80d5329d7d171701e770a3cc5a3450f4->m_frame.f_lineno = 520;
            tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 520;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 519;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        tmp_dict_seq_1 = PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_dict_seq_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_19_named );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_19_named );
        return NULL;
        outline_result_1:;
        tmp_return_value = TO_DICT( tmp_dict_seq_1, NULL );
        Py_DECREF( tmp_dict_seq_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 519;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80d5329d7d171701e770a3cc5a3450f4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_80d5329d7d171701e770a3cc5a3450f4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80d5329d7d171701e770a3cc5a3450f4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_80d5329d7d171701e770a3cc5a3450f4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_80d5329d7d171701e770a3cc5a3450f4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_80d5329d7d171701e770a3cc5a3450f4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_80d5329d7d171701e770a3cc5a3450f4,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_80d5329d7d171701e770a3cc5a3450f4 == cache_frame_80d5329d7d171701e770a3cc5a3450f4 )
    {
        Py_DECREF( frame_80d5329d7d171701e770a3cc5a3450f4 );
    }
    cache_frame_80d5329d7d171701e770a3cc5a3450f4 = NULL;

    assertFrameObject( frame_80d5329d7d171701e770a3cc5a3450f4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_19_named );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_19_named );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_locals {
    PyObject *var_code;
    PyObject *var_value;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_code = NULL;
    generator_heap->var_value = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_c1ea11a7c879a48d6b1e7d15f67c2e4a, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 519;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 519;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 519;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 519;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        generator_heap->tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( generator_heap->tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

                    generator_heap->type_description_1 = "Noo";
                    generator_heap->exception_lineno = 519;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( generator_heap->tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 519;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_code;
            generator_heap->var_code = tmp_assign_source_5;
            Py_INCREF( generator_heap->var_code );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_value;
            generator_heap->var_value = tmp_assign_source_6;
            Py_INCREF( generator_heap->var_value );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 519;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( generator_heap->var_code );
        tmp_args_element_name_1 = generator_heap->var_code;
        generator->m_frame->m_frame.f_lineno = 519;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_source_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_lookup, call_args );
        }

        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 519;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 519;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_expression_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( generator_heap->var_value );
        tmp_tuple_element_1 = generator_heap->var_value;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_expression_name_1, 1, tmp_tuple_element_1 );
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_called_instance_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_called_instance_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 519;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 519;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_code,
            generator_heap->var_value
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_code );
    generator_heap->var_code = NULL;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_code );
    generator_heap->var_code = NULL;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_3ef1ad6c38141f3556ac2b919938d04b,
#endif
        codeobj_c1ea11a7c879a48d6b1e7d15f67c2e4a,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_19_named$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_20___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_e982f86f735f95188b8655c4a12d9a58;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e982f86f735f95188b8655c4a12d9a58 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e982f86f735f95188b8655c4a12d9a58, codeobj_e982f86f735f95188b8655c4a12d9a58, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_e982f86f735f95188b8655c4a12d9a58 = cache_frame_e982f86f735f95188b8655c4a12d9a58;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e982f86f735f95188b8655c4a12d9a58 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e982f86f735f95188b8655c4a12d9a58 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_len_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_set_arg_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_set_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tagdata );
        if ( tmp_set_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PySet_New( tmp_set_arg_1 );
        Py_DECREF( tmp_set_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_set_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tags_v2 );
        if ( tmp_set_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PySet_New( tmp_set_arg_2 );
        Py_DECREF( tmp_set_arg_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_len_arg_1 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 523;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e982f86f735f95188b8655c4a12d9a58 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e982f86f735f95188b8655c4a12d9a58 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e982f86f735f95188b8655c4a12d9a58 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e982f86f735f95188b8655c4a12d9a58, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e982f86f735f95188b8655c4a12d9a58->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e982f86f735f95188b8655c4a12d9a58, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e982f86f735f95188b8655c4a12d9a58,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_e982f86f735f95188b8655c4a12d9a58 == cache_frame_e982f86f735f95188b8655c4a12d9a58 )
    {
        Py_DECREF( frame_e982f86f735f95188b8655c4a12d9a58 );
    }
    cache_frame_e982f86f735f95188b8655c4a12d9a58 = NULL;

    assertFrameObject( frame_e982f86f735f95188b8655c4a12d9a58 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_20___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_20___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_21___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    PyObject *var_data = NULL;
    PyObject *var_typ = NULL;
    PyObject *var_size = NULL;
    PyObject *var_handler = NULL;
    PyObject *var_val = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_f726153c2ab688313fb6192b64a165a5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f726153c2ab688313fb6192b64a165a5 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f726153c2ab688313fb6192b64a165a5, codeobj_f726153c2ab688313fb6192b64a165a5, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f726153c2ab688313fb6192b64a165a5 = cache_frame_f726153c2ab688313fb6192b64a165a5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f726153c2ab688313fb6192b64a165a5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f726153c2ab688313fb6192b64a165a5 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v2 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 526;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 526;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 527;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_1 = par_tag;
            tmp_assign_source_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 527;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_data == NULL );
            var_data = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tagtype );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 528;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_2 = par_tag;
            tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 528;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_typ == NULL );
            var_typ = tmp_assign_source_2;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__load_dispatch );
            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 529;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_typ );
            tmp_subscript_name_3 = var_typ;
            tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 529;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 529;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooo";
                exception_lineno = 529;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_5 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooo";
                exception_lineno = 529;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooo";
                        exception_lineno = 529;
                        goto try_except_handler_3;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 529;
                goto try_except_handler_3;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
            assert( var_size == NULL );
            Py_INCREF( tmp_assign_source_6 );
            var_size = tmp_assign_source_6;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
            assert( var_handler == NULL );
            Py_INCREF( tmp_assign_source_7 );
            var_handler = tmp_assign_source_7;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( var_handler );
            tmp_called_name_1 = var_handler;
            CHECK_OBJECT( par_self );
            tmp_args_element_name_1 = par_self;
            CHECK_OBJECT( var_data );
            tmp_args_element_name_2 = var_data;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_legacy_api );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            frame_f726153c2ab688313fb6192b64a165a5->m_frame.f_lineno = 530;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_ass_subvalue_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_ass_subscribed_1 = par_self;
            CHECK_OBJECT( par_tag );
            tmp_ass_subscript_1 = par_tag;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__tags_v2 );
        if ( tmp_subscribed_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 531;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_subscript_name_4 = par_tag;
        tmp_assign_source_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscribed_name_4 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 531;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_val == NULL );
        var_val = tmp_assign_source_8;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_legacy_api );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 532;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 532;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_val );
        tmp_isinstance_inst_1 = var_val;
        tmp_isinstance_cls_1 = const_tuple_type_tuple_type_bytes_tuple;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 532;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 532;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( var_val );
            tmp_tuple_element_1 = var_val;
            tmp_assign_source_9 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_assign_source_9, 0, tmp_tuple_element_1 );
            {
                PyObject *old = var_val;
                assert( old != NULL );
                var_val = tmp_assign_source_9;
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f726153c2ab688313fb6192b64a165a5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f726153c2ab688313fb6192b64a165a5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f726153c2ab688313fb6192b64a165a5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f726153c2ab688313fb6192b64a165a5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f726153c2ab688313fb6192b64a165a5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f726153c2ab688313fb6192b64a165a5,
        type_description_1,
        par_self,
        par_tag,
        var_data,
        var_typ,
        var_size,
        var_handler,
        var_val
    );


    // Release cached frame.
    if ( frame_f726153c2ab688313fb6192b64a165a5 == cache_frame_f726153c2ab688313fb6192b64a165a5 )
    {
        Py_DECREF( frame_f726153c2ab688313fb6192b64a165a5 );
    }
    cache_frame_f726153c2ab688313fb6192b64a165a5 = NULL;

    assertFrameObject( frame_f726153c2ab688313fb6192b64a165a5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_val );
    tmp_return_value = var_val;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_21___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    CHECK_OBJECT( (PyObject *)var_val );
    Py_DECREF( var_val );
    var_val = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_21___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_22___contains__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_d6ede18a8fd32f09345e1d9a4b57894b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d6ede18a8fd32f09345e1d9a4b57894b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d6ede18a8fd32f09345e1d9a4b57894b, codeobj_d6ede18a8fd32f09345e1d9a4b57894b, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_d6ede18a8fd32f09345e1d9a4b57894b = cache_frame_d6ede18a8fd32f09345e1d9a4b57894b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d6ede18a8fd32f09345e1d9a4b57894b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d6ede18a8fd32f09345e1d9a4b57894b ) == 2 ); // Frame stack

    // Framed code:
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v2 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 537;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 537;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_2 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 537;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 537;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6ede18a8fd32f09345e1d9a4b57894b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6ede18a8fd32f09345e1d9a4b57894b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6ede18a8fd32f09345e1d9a4b57894b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d6ede18a8fd32f09345e1d9a4b57894b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d6ede18a8fd32f09345e1d9a4b57894b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d6ede18a8fd32f09345e1d9a4b57894b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d6ede18a8fd32f09345e1d9a4b57894b,
        type_description_1,
        par_self,
        par_tag
    );


    // Release cached frame.
    if ( frame_d6ede18a8fd32f09345e1d9a4b57894b == cache_frame_d6ede18a8fd32f09345e1d9a4b57894b )
    {
        Py_DECREF( frame_d6ede18a8fd32f09345e1d9a4b57894b );
    }
    cache_frame_d6ede18a8fd32f09345e1d9a4b57894b = NULL;

    assertFrameObject( frame_d6ede18a8fd32f09345e1d9a4b57894b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_22___contains__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_22___contains__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_23_has_key( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_65acf2f2b8b04bc5eb83e472984337e9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_65acf2f2b8b04bc5eb83e472984337e9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_65acf2f2b8b04bc5eb83e472984337e9, codeobj_65acf2f2b8b04bc5eb83e472984337e9, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_65acf2f2b8b04bc5eb83e472984337e9 = cache_frame_65acf2f2b8b04bc5eb83e472984337e9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_65acf2f2b8b04bc5eb83e472984337e9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_65acf2f2b8b04bc5eb83e472984337e9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_compexpr_right_1 = par_self;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 541;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = ( tmp_res == 1 ) ? Py_True : Py_False;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65acf2f2b8b04bc5eb83e472984337e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_65acf2f2b8b04bc5eb83e472984337e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_65acf2f2b8b04bc5eb83e472984337e9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_65acf2f2b8b04bc5eb83e472984337e9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_65acf2f2b8b04bc5eb83e472984337e9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_65acf2f2b8b04bc5eb83e472984337e9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_65acf2f2b8b04bc5eb83e472984337e9,
        type_description_1,
        par_self,
        par_tag
    );


    // Release cached frame.
    if ( frame_65acf2f2b8b04bc5eb83e472984337e9 == cache_frame_65acf2f2b8b04bc5eb83e472984337e9 )
    {
        Py_DECREF( frame_65acf2f2b8b04bc5eb83e472984337e9 );
    }
    cache_frame_65acf2f2b8b04bc5eb83e472984337e9 = NULL;

    assertFrameObject( frame_65acf2f2b8b04bc5eb83e472984337e9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_23_has_key );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_23_has_key );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_24___setitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_e7887f7acbd628c31ede8823e04e6a38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e7887f7acbd628c31ede8823e04e6a38 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e7887f7acbd628c31ede8823e04e6a38, codeobj_e7887f7acbd628c31ede8823e04e6a38, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e7887f7acbd628c31ede8823e04e6a38 = cache_frame_e7887f7acbd628c31ede8823e04e6a38;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e7887f7acbd628c31ede8823e04e6a38 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e7887f7acbd628c31ede8823e04e6a38 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__setitem );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 544;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_1 = par_tag;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_2 = par_value;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_legacy_api );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 544;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_e7887f7acbd628c31ede8823e04e6a38->m_frame.f_lineno = 544;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 544;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7887f7acbd628c31ede8823e04e6a38 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e7887f7acbd628c31ede8823e04e6a38 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e7887f7acbd628c31ede8823e04e6a38, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e7887f7acbd628c31ede8823e04e6a38->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e7887f7acbd628c31ede8823e04e6a38, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e7887f7acbd628c31ede8823e04e6a38,
        type_description_1,
        par_self,
        par_tag,
        par_value
    );


    // Release cached frame.
    if ( frame_e7887f7acbd628c31ede8823e04e6a38 == cache_frame_e7887f7acbd628c31ede8823e04e6a38 )
    {
        Py_DECREF( frame_e7887f7acbd628c31ede8823e04e6a38 );
    }
    cache_frame_e7887f7acbd628c31ede8823e04e6a38 = NULL;

    assertFrameObject( frame_e7887f7acbd628c31ede8823e04e6a38 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_24___setitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_24___setitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_25__setitem( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *par_legacy_api = python_pars[ 3 ];
    PyObject *var_basetypes = NULL;
    struct Nuitka_CellObject *var_info = PyCell_EMPTY();
    PyObject *var_values = NULL;
    PyObject *var_dest = NULL;
    PyObject *outline_0_var_v = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_genexpr_2__$0 = NULL;
    PyObject *tmp_genexpr_3__$0 = NULL;
    PyObject *tmp_genexpr_4__$0 = NULL;
    PyObject *tmp_genexpr_5__$0 = NULL;
    PyObject *tmp_genexpr_6__$0 = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_e501b4d2298b52f36845c1ee1accf36f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    struct Nuitka_FrameObject *frame_4931e230bb386f7edca92779620c041f_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_4931e230bb386f7edca92779620c041f_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_e501b4d2298b52f36845c1ee1accf36f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e501b4d2298b52f36845c1ee1accf36f, codeobj_e501b4d2298b52f36845c1ee1accf36f, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e501b4d2298b52f36845c1ee1accf36f = cache_frame_e501b4d2298b52f36845c1ee1accf36f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e501b4d2298b52f36845c1ee1accf36f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e501b4d2298b52f36845c1ee1accf36f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Number );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Number );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Number" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 547;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_1;
        tmp_assign_source_1 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_1, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = (PyObject *)&PyBytes_Type;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_1, 1, tmp_tuple_element_1 );
        tmp_tuple_element_1 = (PyObject *)&PyUnicode_Type;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_1, 2, tmp_tuple_element_1 );
        assert( var_basetypes == NULL );
        var_basetypes = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 548;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_1 = tmp_mvar_value_2;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 548;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( var_basetypes );
            tmp_left_name_1 = var_basetypes;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_unicode );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "unicode" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 549;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_2 = tmp_mvar_value_3;
            tmp_right_name_1 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
            tmp_result = BINARY_OPERATION_ADD_TUPLE_TUPLE_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 549;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = tmp_left_name_1;
            var_basetypes = tmp_assign_source_2;

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 551;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_4;
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_1 = par_tag;
        frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 551;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_lookup, call_args );
        }

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 551;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        assert( PyCell_GET( var_info ) == NULL );
        PyCell_SET( var_info, tmp_assign_source_3 );

    }
    {
        PyObject *tmp_assign_source_4;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_list_element_1;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_1 = par_value;
        CHECK_OBJECT( var_basetypes );
        tmp_isinstance_cls_1 = var_basetypes;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 552;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( par_value );
        tmp_list_element_1 = par_value;
        tmp_assign_source_4 = PyList_New( 1 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_4, 0, tmp_list_element_1 );
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( par_value );
        tmp_assign_source_4 = par_value;
        Py_INCREF( tmp_assign_source_4 );
        condexpr_end_1:;
        assert( var_values == NULL );
        var_values = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tagtype );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_source_name_2;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( PyCell_GET( var_info ) );
            tmp_source_name_2 = PyCell_GET( var_info );
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_type );
            if ( tmp_attribute_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 555;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_1 );

                exception_lineno = 555;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_1 );
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_ass_subvalue_1;
                PyObject *tmp_source_name_3;
                PyObject *tmp_ass_subscribed_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_ass_subscript_1;
                CHECK_OBJECT( PyCell_GET( var_info ) );
                tmp_source_name_3 = PyCell_GET( var_info );
                tmp_ass_subvalue_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_type );
                if ( tmp_ass_subvalue_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 556;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_tagtype );
                if ( tmp_ass_subscribed_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_1 );

                    exception_lineno = 556;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_tag );
                tmp_ass_subscript_1 = par_tag;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
                Py_DECREF( tmp_ass_subscribed_1 );
                Py_DECREF( tmp_ass_subvalue_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 556;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_ass_subvalue_2;
                PyObject *tmp_ass_subscribed_2;
                PyObject *tmp_source_name_5;
                PyObject *tmp_ass_subscript_2;
                tmp_ass_subvalue_2 = const_int_pos_7;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tagtype );
                if ( tmp_ass_subscribed_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_tag );
                tmp_ass_subscript_2 = par_tag;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
                Py_DECREF( tmp_ass_subscribed_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
            }
            {
                nuitka_bool tmp_condition_result_5;
                PyObject *tmp_called_name_1;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_2;
                int tmp_truth_name_2;
                tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_all );
                assert( tmp_called_name_1 != NULL );
                {
                    PyObject *tmp_assign_source_5;
                    PyObject *tmp_iter_arg_1;
                    CHECK_OBJECT( var_values );
                    tmp_iter_arg_1 = var_values;
                    tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_1 );
                    if ( tmp_assign_source_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 559;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                    assert( tmp_genexpr_1__$0 == NULL );
                    tmp_genexpr_1__$0 = tmp_assign_source_5;
                }
                // Tried code:
                tmp_args_element_name_2 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_maker();

                ((struct Nuitka_GeneratorObject *)tmp_args_element_name_2)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


                goto try_return_handler_2;
                // tried codes exits in all cases
                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                return NULL;
                // Return handler code:
                try_return_handler_2:;
                CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                Py_DECREF( tmp_genexpr_1__$0 );
                tmp_genexpr_1__$0 = NULL;

                goto outline_result_1;
                // End of try:
                CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                Py_DECREF( tmp_genexpr_1__$0 );
                tmp_genexpr_1__$0 = NULL;

                // Return statement must have exited already.
                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                return NULL;
                outline_result_1:;
                frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 559;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 559;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_2 = CHECK_IF_TRUE( tmp_call_result_1 );
                if ( tmp_truth_name_2 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_call_result_1 );

                    exception_lineno = 559;
                    type_description_1 = "ooooocoo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_5 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_call_result_1 );
                if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_ass_subvalue_3;
                    PyObject *tmp_source_name_6;
                    PyObject *tmp_mvar_value_5;
                    PyObject *tmp_ass_subscribed_3;
                    PyObject *tmp_source_name_7;
                    PyObject *tmp_ass_subscript_3;
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_5 == NULL ))
                    {
                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_5 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 560;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_6 = tmp_mvar_value_5;
                    tmp_ass_subvalue_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_RATIONAL );
                    if ( tmp_ass_subvalue_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 560;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_source_name_7 = par_self;
                    tmp_ass_subscribed_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tagtype );
                    if ( tmp_ass_subscribed_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_ass_subvalue_3 );

                        exception_lineno = 560;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_tag );
                    tmp_ass_subscript_3 = par_tag;
                    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
                    Py_DECREF( tmp_ass_subscribed_3 );
                    Py_DECREF( tmp_ass_subvalue_3 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 560;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                }
                goto branch_end_4;
                branch_no_4:;
                {
                    nuitka_bool tmp_condition_result_6;
                    PyObject *tmp_called_name_2;
                    PyObject *tmp_call_result_2;
                    PyObject *tmp_args_element_name_3;
                    int tmp_truth_name_3;
                    tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_all );
                    assert( tmp_called_name_2 != NULL );
                    {
                        PyObject *tmp_assign_source_6;
                        PyObject *tmp_iter_arg_2;
                        CHECK_OBJECT( var_values );
                        tmp_iter_arg_2 = var_values;
                        tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
                        if ( tmp_assign_source_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_1 = "ooooocoo";
                            goto frame_exception_exit_1;
                        }
                        assert( tmp_genexpr_2__$0 == NULL );
                        tmp_genexpr_2__$0 = tmp_assign_source_6;
                    }
                    // Tried code:
                    tmp_args_element_name_3 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_maker();

                    ((struct Nuitka_GeneratorObject *)tmp_args_element_name_3)->m_closure[0] = PyCell_NEW0( tmp_genexpr_2__$0 );


                    goto try_return_handler_3;
                    // tried codes exits in all cases
                    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                    return NULL;
                    // Return handler code:
                    try_return_handler_3:;
                    CHECK_OBJECT( (PyObject *)tmp_genexpr_2__$0 );
                    Py_DECREF( tmp_genexpr_2__$0 );
                    tmp_genexpr_2__$0 = NULL;

                    goto outline_result_2;
                    // End of try:
                    CHECK_OBJECT( (PyObject *)tmp_genexpr_2__$0 );
                    Py_DECREF( tmp_genexpr_2__$0 );
                    tmp_genexpr_2__$0 = NULL;

                    // Return statement must have exited already.
                    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                    return NULL;
                    outline_result_2:;
                    frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 561;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_3 };
                        tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                    }

                    Py_DECREF( tmp_args_element_name_3 );
                    if ( tmp_call_result_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 561;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                    tmp_truth_name_3 = CHECK_IF_TRUE( tmp_call_result_2 );
                    if ( tmp_truth_name_3 == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_call_result_2 );

                        exception_lineno = 561;
                        type_description_1 = "ooooocoo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_6 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    Py_DECREF( tmp_call_result_2 );
                    if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_5;
                    }
                    else
                    {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        nuitka_bool tmp_condition_result_7;
                        PyObject *tmp_called_name_3;
                        PyObject *tmp_call_result_3;
                        PyObject *tmp_args_element_name_4;
                        int tmp_truth_name_4;
                        tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_all );
                        assert( tmp_called_name_3 != NULL );
                        {
                            PyObject *tmp_assign_source_7;
                            PyObject *tmp_iter_arg_3;
                            CHECK_OBJECT( var_values );
                            tmp_iter_arg_3 = var_values;
                            tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_3 );
                            if ( tmp_assign_source_7 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 562;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            assert( tmp_genexpr_3__$0 == NULL );
                            tmp_genexpr_3__$0 = tmp_assign_source_7;
                        }
                        // Tried code:
                        tmp_args_element_name_4 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_maker();

                        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_4)->m_closure[0] = PyCell_NEW0( tmp_genexpr_3__$0 );


                        goto try_return_handler_4;
                        // tried codes exits in all cases
                        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                        return NULL;
                        // Return handler code:
                        try_return_handler_4:;
                        CHECK_OBJECT( (PyObject *)tmp_genexpr_3__$0 );
                        Py_DECREF( tmp_genexpr_3__$0 );
                        tmp_genexpr_3__$0 = NULL;

                        goto outline_result_3;
                        // End of try:
                        CHECK_OBJECT( (PyObject *)tmp_genexpr_3__$0 );
                        Py_DECREF( tmp_genexpr_3__$0 );
                        tmp_genexpr_3__$0 = NULL;

                        // Return statement must have exited already.
                        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                        return NULL;
                        outline_result_3:;
                        frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 562;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_4 };
                            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                        }

                        Py_DECREF( tmp_args_element_name_4 );
                        if ( tmp_call_result_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 562;
                            type_description_1 = "ooooocoo";
                            goto frame_exception_exit_1;
                        }
                        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_call_result_3 );
                        if ( tmp_truth_name_4 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_call_result_3 );

                            exception_lineno = 562;
                            type_description_1 = "ooooocoo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_7 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        Py_DECREF( tmp_call_result_3 );
                        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_6;
                        }
                        else
                        {
                            goto branch_no_6;
                        }
                        branch_yes_6:;
                        {
                            PyObject *tmp_ass_subvalue_4;
                            PyObject *tmp_source_name_8;
                            PyObject *tmp_mvar_value_6;
                            PyObject *tmp_ass_subscribed_4;
                            PyObject *tmp_source_name_9;
                            PyObject *tmp_ass_subscript_4;
                            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                            if (unlikely( tmp_mvar_value_6 == NULL ))
                            {
                                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                            }

                            if ( tmp_mvar_value_6 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 563;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_8 = tmp_mvar_value_6;
                            tmp_ass_subvalue_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_SHORT );
                            if ( tmp_ass_subvalue_4 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 563;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_self );
                            tmp_source_name_9 = par_self;
                            tmp_ass_subscribed_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_tagtype );
                            if ( tmp_ass_subscribed_4 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_ass_subvalue_4 );

                                exception_lineno = 563;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_tag );
                            tmp_ass_subscript_4 = par_tag;
                            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
                            Py_DECREF( tmp_ass_subscribed_4 );
                            Py_DECREF( tmp_ass_subvalue_4 );
                            if ( tmp_result == false )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 563;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                        }
                        goto branch_end_6;
                        branch_no_6:;
                        {
                            PyObject *tmp_ass_subvalue_5;
                            PyObject *tmp_source_name_10;
                            PyObject *tmp_mvar_value_7;
                            PyObject *tmp_ass_subscribed_5;
                            PyObject *tmp_source_name_11;
                            PyObject *tmp_ass_subscript_5;
                            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                            if (unlikely( tmp_mvar_value_7 == NULL ))
                            {
                                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                            }

                            if ( tmp_mvar_value_7 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 565;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_10 = tmp_mvar_value_7;
                            tmp_ass_subvalue_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_LONG );
                            if ( tmp_ass_subvalue_5 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 565;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_self );
                            tmp_source_name_11 = par_self;
                            tmp_ass_subscribed_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_tagtype );
                            if ( tmp_ass_subscribed_5 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_ass_subvalue_5 );

                                exception_lineno = 565;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_tag );
                            tmp_ass_subscript_5 = par_tag;
                            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
                            Py_DECREF( tmp_ass_subscribed_5 );
                            Py_DECREF( tmp_ass_subvalue_5 );
                            if ( tmp_result == false )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 565;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                        }
                        branch_end_6:;
                    }
                    goto branch_end_5;
                    branch_no_5:;
                    {
                        nuitka_bool tmp_condition_result_8;
                        PyObject *tmp_called_name_4;
                        PyObject *tmp_call_result_4;
                        PyObject *tmp_args_element_name_5;
                        int tmp_truth_name_5;
                        tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_all );
                        assert( tmp_called_name_4 != NULL );
                        {
                            PyObject *tmp_assign_source_8;
                            PyObject *tmp_iter_arg_4;
                            CHECK_OBJECT( var_values );
                            tmp_iter_arg_4 = var_values;
                            tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_4 );
                            if ( tmp_assign_source_8 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 566;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            assert( tmp_genexpr_4__$0 == NULL );
                            tmp_genexpr_4__$0 = tmp_assign_source_8;
                        }
                        // Tried code:
                        tmp_args_element_name_5 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_maker();

                        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_5)->m_closure[0] = PyCell_NEW0( tmp_genexpr_4__$0 );


                        goto try_return_handler_5;
                        // tried codes exits in all cases
                        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                        return NULL;
                        // Return handler code:
                        try_return_handler_5:;
                        CHECK_OBJECT( (PyObject *)tmp_genexpr_4__$0 );
                        Py_DECREF( tmp_genexpr_4__$0 );
                        tmp_genexpr_4__$0 = NULL;

                        goto outline_result_4;
                        // End of try:
                        CHECK_OBJECT( (PyObject *)tmp_genexpr_4__$0 );
                        Py_DECREF( tmp_genexpr_4__$0 );
                        tmp_genexpr_4__$0 = NULL;

                        // Return statement must have exited already.
                        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                        return NULL;
                        outline_result_4:;
                        frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 566;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_5 };
                            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                        }

                        Py_DECREF( tmp_args_element_name_5 );
                        if ( tmp_call_result_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 566;
                            type_description_1 = "ooooocoo";
                            goto frame_exception_exit_1;
                        }
                        tmp_truth_name_5 = CHECK_IF_TRUE( tmp_call_result_4 );
                        if ( tmp_truth_name_5 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_call_result_4 );

                            exception_lineno = 566;
                            type_description_1 = "ooooocoo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_8 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        Py_DECREF( tmp_call_result_4 );
                        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_7;
                        }
                        else
                        {
                            goto branch_no_7;
                        }
                        branch_yes_7:;
                        {
                            PyObject *tmp_ass_subvalue_6;
                            PyObject *tmp_source_name_12;
                            PyObject *tmp_mvar_value_8;
                            PyObject *tmp_ass_subscribed_6;
                            PyObject *tmp_source_name_13;
                            PyObject *tmp_ass_subscript_6;
                            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                            if (unlikely( tmp_mvar_value_8 == NULL ))
                            {
                                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                            }

                            if ( tmp_mvar_value_8 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 567;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_12 = tmp_mvar_value_8;
                            tmp_ass_subvalue_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_DOUBLE );
                            if ( tmp_ass_subvalue_6 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 567;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_self );
                            tmp_source_name_13 = par_self;
                            tmp_ass_subscribed_6 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_tagtype );
                            if ( tmp_ass_subscribed_6 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_ass_subvalue_6 );

                                exception_lineno = 567;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_tag );
                            tmp_ass_subscript_6 = par_tag;
                            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
                            Py_DECREF( tmp_ass_subscribed_6 );
                            Py_DECREF( tmp_ass_subvalue_6 );
                            if ( tmp_result == false )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 567;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                        }
                        goto branch_end_7;
                        branch_no_7:;
                        {
                            nuitka_bool tmp_condition_result_9;
                            PyObject *tmp_mvar_value_9;
                            int tmp_truth_name_6;
                            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

                            if (unlikely( tmp_mvar_value_9 == NULL ))
                            {
                                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
                            }

                            if ( tmp_mvar_value_9 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 569;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }

                            tmp_truth_name_6 = CHECK_IF_TRUE( tmp_mvar_value_9 );
                            if ( tmp_truth_name_6 == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 569;
                                type_description_1 = "ooooocoo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_9 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_8;
                            }
                            else
                            {
                                goto branch_no_8;
                            }
                            branch_yes_8:;
                            {
                                nuitka_bool tmp_condition_result_10;
                                PyObject *tmp_called_name_5;
                                PyObject *tmp_call_result_5;
                                PyObject *tmp_args_element_name_6;
                                int tmp_truth_name_7;
                                tmp_called_name_5 = LOOKUP_BUILTIN( const_str_plain_all );
                                assert( tmp_called_name_5 != NULL );
                                {
                                    PyObject *tmp_assign_source_9;
                                    PyObject *tmp_iter_arg_5;
                                    CHECK_OBJECT( var_values );
                                    tmp_iter_arg_5 = var_values;
                                    tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_5 );
                                    if ( tmp_assign_source_9 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 570;
                                        type_description_1 = "ooooocoo";
                                        goto frame_exception_exit_1;
                                    }
                                    assert( tmp_genexpr_5__$0 == NULL );
                                    tmp_genexpr_5__$0 = tmp_assign_source_9;
                                }
                                // Tried code:
                                tmp_args_element_name_6 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_maker();

                                ((struct Nuitka_GeneratorObject *)tmp_args_element_name_6)->m_closure[0] = PyCell_NEW0( tmp_genexpr_5__$0 );


                                goto try_return_handler_6;
                                // tried codes exits in all cases
                                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                                return NULL;
                                // Return handler code:
                                try_return_handler_6:;
                                CHECK_OBJECT( (PyObject *)tmp_genexpr_5__$0 );
                                Py_DECREF( tmp_genexpr_5__$0 );
                                tmp_genexpr_5__$0 = NULL;

                                goto outline_result_5;
                                // End of try:
                                CHECK_OBJECT( (PyObject *)tmp_genexpr_5__$0 );
                                Py_DECREF( tmp_genexpr_5__$0 );
                                tmp_genexpr_5__$0 = NULL;

                                // Return statement must have exited already.
                                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                                return NULL;
                                outline_result_5:;
                                frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 570;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_6 };
                                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                                }

                                Py_DECREF( tmp_args_element_name_6 );
                                if ( tmp_call_result_5 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 570;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_truth_name_7 = CHECK_IF_TRUE( tmp_call_result_5 );
                                if ( tmp_truth_name_7 == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_call_result_5 );

                                    exception_lineno = 570;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_10 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                Py_DECREF( tmp_call_result_5 );
                                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_9;
                                }
                                else
                                {
                                    goto branch_no_9;
                                }
                                branch_yes_9:;
                                {
                                    PyObject *tmp_ass_subvalue_7;
                                    PyObject *tmp_source_name_14;
                                    PyObject *tmp_mvar_value_10;
                                    PyObject *tmp_ass_subscribed_7;
                                    PyObject *tmp_source_name_15;
                                    PyObject *tmp_ass_subscript_7;
                                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                                    if (unlikely( tmp_mvar_value_10 == NULL ))
                                    {
                                        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                                    }

                                    if ( tmp_mvar_value_10 == NULL )
                                    {

                                        exception_type = PyExc_NameError;
                                        Py_INCREF( exception_type );
                                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                                        exception_tb = NULL;
                                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                        CHAIN_EXCEPTION( exception_value );

                                        exception_lineno = 571;
                                        type_description_1 = "ooooocoo";
                                        goto frame_exception_exit_1;
                                    }

                                    tmp_source_name_14 = tmp_mvar_value_10;
                                    tmp_ass_subvalue_7 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_ASCII );
                                    if ( tmp_ass_subvalue_7 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 571;
                                        type_description_1 = "ooooocoo";
                                        goto frame_exception_exit_1;
                                    }
                                    CHECK_OBJECT( par_self );
                                    tmp_source_name_15 = par_self;
                                    tmp_ass_subscribed_7 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tagtype );
                                    if ( tmp_ass_subscribed_7 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_ass_subvalue_7 );

                                        exception_lineno = 571;
                                        type_description_1 = "ooooocoo";
                                        goto frame_exception_exit_1;
                                    }
                                    CHECK_OBJECT( par_tag );
                                    tmp_ass_subscript_7 = par_tag;
                                    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
                                    Py_DECREF( tmp_ass_subscribed_7 );
                                    Py_DECREF( tmp_ass_subvalue_7 );
                                    if ( tmp_result == false )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 571;
                                        type_description_1 = "ooooocoo";
                                        goto frame_exception_exit_1;
                                    }
                                }
                                branch_no_9:;
                            }
                            goto branch_end_8;
                            branch_no_8:;
                            {
                                PyObject *tmp_ass_subvalue_8;
                                PyObject *tmp_source_name_16;
                                PyObject *tmp_mvar_value_11;
                                PyObject *tmp_ass_subscribed_8;
                                PyObject *tmp_source_name_17;
                                PyObject *tmp_ass_subscript_8;
                                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                                if (unlikely( tmp_mvar_value_11 == NULL ))
                                {
                                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                                }

                                if ( tmp_mvar_value_11 == NULL )
                                {

                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 574;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_source_name_16 = tmp_mvar_value_11;
                                tmp_ass_subvalue_8 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_ASCII );
                                if ( tmp_ass_subvalue_8 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 574;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }
                                CHECK_OBJECT( par_self );
                                tmp_source_name_17 = par_self;
                                tmp_ass_subscribed_8 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_tagtype );
                                if ( tmp_ass_subscribed_8 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_ass_subvalue_8 );

                                    exception_lineno = 574;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }
                                CHECK_OBJECT( par_tag );
                                tmp_ass_subscript_8 = par_tag;
                                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_8, tmp_ass_subscript_8, tmp_ass_subvalue_8 );
                                Py_DECREF( tmp_ass_subscribed_8 );
                                Py_DECREF( tmp_ass_subvalue_8 );
                                if ( tmp_result == false )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 574;
                                    type_description_1 = "ooooocoo";
                                    goto frame_exception_exit_1;
                                }
                            }
                            branch_end_8:;
                        }
                        branch_end_7:;
                    }
                    branch_end_5:;
                }
                branch_end_4:;
            }
            branch_end_3:;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_18;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_19;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_mvar_value_13;
        int tmp_truth_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_18 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_tagtype );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_subscript_name_1 = par_tag;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
        }

        if ( tmp_mvar_value_12 == NULL )
        {
            Py_DECREF( tmp_compexpr_left_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_19 = tmp_mvar_value_12;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_UNDEFINED );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_2 );

            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_8 = CHECK_IF_TRUE( tmp_mvar_value_13 );
        if ( tmp_truth_name_8 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 576;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_11 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_11 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_list_element_2;
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( par_value );
            tmp_isinstance_inst_2 = par_value;
            tmp_isinstance_cls_2 = (PyObject *)&PyUnicode_Type;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 577;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_2;
            }
            else
            {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            CHECK_OBJECT( par_value );
            tmp_called_instance_2 = par_value;
            frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 577;
            tmp_list_element_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 0 ) );

            if ( tmp_list_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 577;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            CHECK_OBJECT( par_value );
            tmp_list_element_2 = par_value;
            Py_INCREF( tmp_list_element_2 );
            condexpr_end_2:;
            tmp_assign_source_10 = PyList_New( 1 );
            PyList_SET_ITEM( tmp_assign_source_10, 0, tmp_list_element_2 );
            {
                PyObject *old = var_values;
                assert( old != NULL );
                var_values = tmp_assign_source_10;
                Py_DECREF( old );
            }

        }
        goto branch_end_10;
        branch_no_10:;
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_20;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_source_name_21;
            PyObject *tmp_mvar_value_14;
            CHECK_OBJECT( par_self );
            tmp_source_name_20 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_tagtype );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 579;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_2 = par_tag;
            tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_compexpr_left_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 579;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_14 == NULL ))
            {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_14 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 579;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_21 = tmp_mvar_value_14;
            tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_RATIONAL );
            if ( tmp_compexpr_right_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_3 );

                exception_lineno = 579;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_left_3 );
            Py_DECREF( tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 579;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_assign_source_11;
                // Tried code:
                {
                    PyObject *tmp_assign_source_12;
                    PyObject *tmp_iter_arg_6;
                    CHECK_OBJECT( var_values );
                    tmp_iter_arg_6 = var_values;
                    tmp_assign_source_12 = MAKE_ITERATOR( tmp_iter_arg_6 );
                    if ( tmp_assign_source_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 580;
                        type_description_1 = "ooooocoo";
                        goto try_except_handler_7;
                    }
                    assert( tmp_listcomp_1__$0 == NULL );
                    tmp_listcomp_1__$0 = tmp_assign_source_12;
                }
                {
                    PyObject *tmp_assign_source_13;
                    tmp_assign_source_13 = PyList_New( 0 );
                    assert( tmp_listcomp_1__contraction == NULL );
                    tmp_listcomp_1__contraction = tmp_assign_source_13;
                }
                MAKE_OR_REUSE_FRAME( cache_frame_4931e230bb386f7edca92779620c041f_2, codeobj_4931e230bb386f7edca92779620c041f, module_PIL$TiffImagePlugin, sizeof(void *) );
                frame_4931e230bb386f7edca92779620c041f_2 = cache_frame_4931e230bb386f7edca92779620c041f_2;

                // Push the new frame as the currently active one.
                pushFrameStack( frame_4931e230bb386f7edca92779620c041f_2 );

                // Mark the frame object as in use, ref count 1 will be up for reuse.
                assert( Py_REFCNT( frame_4931e230bb386f7edca92779620c041f_2 ) == 2 ); // Frame stack

                // Framed code:
                // Tried code:
                loop_start_1:;
                {
                    PyObject *tmp_next_source_1;
                    PyObject *tmp_assign_source_14;
                    CHECK_OBJECT( tmp_listcomp_1__$0 );
                    tmp_next_source_1 = tmp_listcomp_1__$0;
                    tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_1 );
                    if ( tmp_assign_source_14 == NULL )
                    {
                        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                        {

                            goto loop_end_1;
                        }
                        else
                        {

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            type_description_2 = "o";
                            exception_lineno = 580;
                            goto try_except_handler_8;
                        }
                    }

                    {
                        PyObject *old = tmp_listcomp_1__iter_value_0;
                        tmp_listcomp_1__iter_value_0 = tmp_assign_source_14;
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_15;
                    CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
                    tmp_assign_source_15 = tmp_listcomp_1__iter_value_0;
                    {
                        PyObject *old = outline_0_var_v;
                        outline_0_var_v = tmp_assign_source_15;
                        Py_INCREF( outline_0_var_v );
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_append_list_1;
                    PyObject *tmp_append_value_1;
                    nuitka_bool tmp_condition_result_14;
                    PyObject *tmp_isinstance_inst_3;
                    PyObject *tmp_isinstance_cls_3;
                    PyObject *tmp_float_arg_1;
                    CHECK_OBJECT( tmp_listcomp_1__contraction );
                    tmp_append_list_1 = tmp_listcomp_1__contraction;
                    CHECK_OBJECT( outline_0_var_v );
                    tmp_isinstance_inst_3 = outline_0_var_v;
                    tmp_isinstance_cls_3 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 580;
                        type_description_2 = "o";
                        goto try_except_handler_8;
                    }
                    tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                    {
                        goto condexpr_true_3;
                    }
                    else
                    {
                        goto condexpr_false_3;
                    }
                    condexpr_true_3:;
                    CHECK_OBJECT( outline_0_var_v );
                    tmp_float_arg_1 = outline_0_var_v;
                    tmp_append_value_1 = TO_FLOAT( tmp_float_arg_1 );
                    if ( tmp_append_value_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 580;
                        type_description_2 = "o";
                        goto try_except_handler_8;
                    }
                    goto condexpr_end_3;
                    condexpr_false_3:;
                    CHECK_OBJECT( outline_0_var_v );
                    tmp_append_value_1 = outline_0_var_v;
                    Py_INCREF( tmp_append_value_1 );
                    condexpr_end_3:;
                    assert( PyList_Check( tmp_append_list_1 ) );
                    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
                    Py_DECREF( tmp_append_value_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 580;
                        type_description_2 = "o";
                        goto try_except_handler_8;
                    }
                }
                if ( CONSIDER_THREADING() == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 580;
                    type_description_2 = "o";
                    goto try_except_handler_8;
                }
                goto loop_start_1;
                loop_end_1:;
                CHECK_OBJECT( tmp_listcomp_1__contraction );
                tmp_assign_source_11 = tmp_listcomp_1__contraction;
                Py_INCREF( tmp_assign_source_11 );
                goto try_return_handler_8;
                // tried codes exits in all cases
                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                return NULL;
                // Return handler code:
                try_return_handler_8:;
                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
                Py_DECREF( tmp_listcomp_1__$0 );
                tmp_listcomp_1__$0 = NULL;

                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
                Py_DECREF( tmp_listcomp_1__contraction );
                tmp_listcomp_1__contraction = NULL;

                Py_XDECREF( tmp_listcomp_1__iter_value_0 );
                tmp_listcomp_1__iter_value_0 = NULL;

                goto frame_return_exit_1;
                // Exception handler code:
                try_except_handler_8:;
                exception_keeper_type_1 = exception_type;
                exception_keeper_value_1 = exception_value;
                exception_keeper_tb_1 = exception_tb;
                exception_keeper_lineno_1 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
                Py_DECREF( tmp_listcomp_1__$0 );
                tmp_listcomp_1__$0 = NULL;

                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
                Py_DECREF( tmp_listcomp_1__contraction );
                tmp_listcomp_1__contraction = NULL;

                Py_XDECREF( tmp_listcomp_1__iter_value_0 );
                tmp_listcomp_1__iter_value_0 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_1;
                exception_value = exception_keeper_value_1;
                exception_tb = exception_keeper_tb_1;
                exception_lineno = exception_keeper_lineno_1;

                goto frame_exception_exit_2;
                // End of try:

#if 0
                RESTORE_FRAME_EXCEPTION( frame_4931e230bb386f7edca92779620c041f_2 );
#endif

                // Put the previous frame back on top.
                popFrameStack();

                goto frame_no_exception_1;

                frame_return_exit_1:;
#if 0
                RESTORE_FRAME_EXCEPTION( frame_4931e230bb386f7edca92779620c041f_2 );
#endif

                // Put the previous frame back on top.
                popFrameStack();

                goto try_return_handler_7;

                frame_exception_exit_2:;

#if 0
                RESTORE_FRAME_EXCEPTION( frame_4931e230bb386f7edca92779620c041f_2 );
#endif

                if ( exception_tb == NULL )
                {
                    exception_tb = MAKE_TRACEBACK( frame_4931e230bb386f7edca92779620c041f_2, exception_lineno );
                }
                else if ( exception_tb->tb_frame != &frame_4931e230bb386f7edca92779620c041f_2->m_frame )
                {
                    exception_tb = ADD_TRACEBACK( exception_tb, frame_4931e230bb386f7edca92779620c041f_2, exception_lineno );
                }

                // Attachs locals to frame if any.
                Nuitka_Frame_AttachLocals(
                    (struct Nuitka_FrameObject *)frame_4931e230bb386f7edca92779620c041f_2,
                    type_description_2,
                    outline_0_var_v
                );


                // Release cached frame.
                if ( frame_4931e230bb386f7edca92779620c041f_2 == cache_frame_4931e230bb386f7edca92779620c041f_2 )
                {
                    Py_DECREF( frame_4931e230bb386f7edca92779620c041f_2 );
                }
                cache_frame_4931e230bb386f7edca92779620c041f_2 = NULL;

                assertFrameObject( frame_4931e230bb386f7edca92779620c041f_2 );

                // Put the previous frame back on top.
                popFrameStack();

                // Return the error.
                goto nested_frame_exit_1;

                frame_no_exception_1:;
                goto skip_nested_handling_1;
                nested_frame_exit_1:;
                type_description_1 = "ooooocoo";
                goto try_except_handler_7;
                skip_nested_handling_1:;
                // tried codes exits in all cases
                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                return NULL;
                // Return handler code:
                try_return_handler_7:;
                Py_XDECREF( outline_0_var_v );
                outline_0_var_v = NULL;

                goto outline_result_6;
                // Exception handler code:
                try_except_handler_7:;
                exception_keeper_type_2 = exception_type;
                exception_keeper_value_2 = exception_value;
                exception_keeper_tb_2 = exception_tb;
                exception_keeper_lineno_2 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( outline_0_var_v );
                outline_0_var_v = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_2;
                exception_value = exception_keeper_value_2;
                exception_tb = exception_keeper_tb_2;
                exception_lineno = exception_keeper_lineno_2;

                goto outline_exception_1;
                // End of try:
                // Return statement must have exited already.
                NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
                return NULL;
                outline_exception_1:;
                exception_lineno = 580;
                goto frame_exception_exit_1;
                outline_result_6:;
                {
                    PyObject *old = var_values;
                    assert( old != NULL );
                    var_values = tmp_assign_source_11;
                    Py_DECREF( old );
                }

            }
            branch_no_11:;
        }
        branch_end_10:;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_tuple_arg_1;
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_iter_arg_7;
            if ( var_values == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "values" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 583;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }

            tmp_iter_arg_7 = var_values;
            tmp_assign_source_17 = MAKE_ITERATOR( tmp_iter_arg_7 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 583;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_6__$0 == NULL );
            tmp_genexpr_6__$0 = tmp_assign_source_17;
        }
        // Tried code:
        tmp_tuple_arg_1 = PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_6__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] = var_info;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] );


        goto try_return_handler_9;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_6__$0 );
        Py_DECREF( tmp_genexpr_6__$0 );
        tmp_genexpr_6__$0 = NULL;

        goto outline_result_7;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_6__$0 );
        Py_DECREF( tmp_genexpr_6__$0 );
        tmp_genexpr_6__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
        return NULL;
        outline_result_7:;
        tmp_assign_source_16 = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 583;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_values;
            var_values = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_18;
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_9;
        PyObject *tmp_source_name_22;
        PyObject *tmp_source_name_23;
        CHECK_OBJECT( par_legacy_api );
        tmp_truth_name_9 = CHECK_IF_TRUE( par_legacy_api );
        if ( tmp_truth_name_9 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 585;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT( par_self );
        tmp_source_name_22 = par_self;
        tmp_assign_source_18 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain__tags_v1 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 585;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        CHECK_OBJECT( par_self );
        tmp_source_name_23 = par_self;
        tmp_assign_source_18 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__tags_v2 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 585;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        condexpr_end_4:;
        assert( var_dest == NULL );
        var_dest = tmp_assign_source_18;
    }
    {
        nuitka_bool tmp_condition_result_16;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_source_name_24;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_source_name_25;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( PyCell_GET( var_info ) );
        tmp_source_name_24 = PyCell_GET( var_info );
        tmp_compexpr_left_4 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_length );
        if ( tmp_compexpr_left_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 592;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        Py_DECREF( tmp_compexpr_left_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 592;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( PyCell_GET( var_info ) );
        tmp_source_name_25 = PyCell_GET( var_info );
        tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_length );
        if ( tmp_compexpr_left_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 593;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_5 = Py_None;
        tmp_and_left_value_2 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_5 );
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( var_values );
        tmp_len_arg_1 = var_values;
        tmp_compexpr_left_6 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 593;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_6 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        Py_DECREF( tmp_compexpr_left_6 );
        assert( !(tmp_res == -1) );
        tmp_and_left_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( par_legacy_api );
        tmp_operand_name_2 = par_legacy_api;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 593;
            type_description_1 = "ooooocoo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_2 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_and_right_value_2 = tmp_and_left_value_3;
        and_end_3:;
        tmp_or_right_value_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_or_right_value_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_condition_result_16 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_16 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            nuitka_bool tmp_condition_result_17;
            int tmp_and_left_truth_4;
            nuitka_bool tmp_and_left_value_4;
            nuitka_bool tmp_and_right_value_4;
            int tmp_truth_name_10;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_source_name_26;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_list_element_3;
            PyObject *tmp_source_name_27;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_source_name_28;
            PyObject *tmp_mvar_value_16;
            CHECK_OBJECT( par_legacy_api );
            tmp_truth_name_10 = CHECK_IF_TRUE( par_legacy_api );
            if ( tmp_truth_name_10 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 595;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_4 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_4 == 1 )
            {
                goto and_right_4;
            }
            else
            {
                goto and_left_4;
            }
            and_right_4:;
            CHECK_OBJECT( par_self );
            tmp_source_name_26 = par_self;
            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_tagtype );
            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 595;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_3 = par_tag;
            tmp_compexpr_left_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_compexpr_left_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 595;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_15 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_7 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 596;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_27 = tmp_mvar_value_15;
            tmp_list_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_RATIONAL );
            if ( tmp_list_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_7 );

                exception_lineno = 596;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_7 = PyList_New( 2 );
            PyList_SET_ITEM( tmp_compexpr_right_7, 0, tmp_list_element_3 );
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_16 == NULL ))
            {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_16 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_7 );
                Py_DECREF( tmp_compexpr_right_7 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 597;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_28 = tmp_mvar_value_16;
            tmp_list_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_SIGNED_RATIONAL );
            if ( tmp_list_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_7 );
                Py_DECREF( tmp_compexpr_right_7 );

                exception_lineno = 597;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            PyList_SET_ITEM( tmp_compexpr_right_7, 1, tmp_list_element_3 );
            tmp_res = PySequence_Contains( tmp_compexpr_right_7, tmp_compexpr_left_7 );
            Py_DECREF( tmp_compexpr_left_7 );
            Py_DECREF( tmp_compexpr_right_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 595;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_4 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_17 = tmp_and_right_value_4;
            goto and_end_4;
            and_left_4:;
            tmp_condition_result_17 = tmp_and_left_value_4;
            and_end_4:;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_tuple_element_3;
                CHECK_OBJECT( var_values );
                tmp_tuple_element_3 = var_values;
                tmp_assign_source_19 = PyTuple_New( 1 );
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_assign_source_19, 0, tmp_tuple_element_3 );
                {
                    PyObject *old = var_values;
                    assert( old != NULL );
                    var_values = tmp_assign_source_19;
                    Py_DECREF( old );
                }

            }
            branch_no_13:;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_iter_arg_8;
            CHECK_OBJECT( var_values );
            tmp_iter_arg_8 = var_values;
            tmp_assign_source_20 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_8 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 601;
                type_description_1 = "ooooocoo";
                goto try_except_handler_11;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_20;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_1, 0, 1 );
            if ( tmp_assign_source_21 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooocoo";
                exception_lineno = 601;
                goto try_except_handler_12;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_21;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooocoo";
                        exception_lineno = 601;
                        goto try_except_handler_12;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooocoo";
                exception_lineno = 601;
                goto try_except_handler_12;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_11;
        // End of try:
        try_end_1:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_ass_subvalue_9;
            PyObject *tmp_ass_subscribed_9;
            PyObject *tmp_ass_subscript_9;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_ass_subvalue_9 = tmp_tuple_unpack_1__element_1;
            CHECK_OBJECT( var_dest );
            tmp_ass_subscribed_9 = var_dest;
            CHECK_OBJECT( par_tag );
            tmp_ass_subscript_9 = par_tag;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_9, tmp_ass_subscript_9, tmp_ass_subvalue_9 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 601;
                type_description_1 = "ooooocoo";
                goto try_except_handler_11;
            }
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_10;
        // End of try:
        try_end_2:;
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        goto try_end_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_5 == NULL )
        {
            exception_keeper_tb_5 = MAKE_TRACEBACK( frame_e501b4d2298b52f36845c1ee1accf36f, exception_keeper_lineno_5 );
        }
        else if ( exception_keeper_lineno_5 != 0 )
        {
            exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_e501b4d2298b52f36845c1ee1accf36f, exception_keeper_lineno_5 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
        PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
        PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            tmp_compexpr_left_8 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_8 = PyExc_ValueError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 602;
                type_description_1 = "ooooocoo";
                goto try_except_handler_13;
            }
            tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_29;
                PyObject *tmp_mvar_value_17;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_4;
                PyObject *tmp_len_arg_2;
                tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_warnings );

                if (unlikely( tmp_mvar_value_17 == NULL ))
                {
                    tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                }

                if ( tmp_mvar_value_17 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 604;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }

                tmp_source_name_29 = tmp_mvar_value_17;
                tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_warn );
                if ( tmp_called_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 604;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
                tmp_left_name_2 = const_str_digest_56dfe18a992b31936ba76f9e84173d96;
                CHECK_OBJECT( par_tag );
                tmp_tuple_element_4 = par_tag;
                tmp_right_name_2 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_4 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_4 );
                CHECK_OBJECT( var_values );
                tmp_len_arg_2 = var_values;
                tmp_tuple_element_4 = BUILTIN_LEN( tmp_len_arg_2 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_6 );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 607;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_4 );
                tmp_args_element_name_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_args_element_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_6 );

                    exception_lineno = 605;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
                frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = 604;
                {
                    PyObject *call_args[] = { tmp_args_element_name_7 };
                    tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_7 );
                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 604;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            {
                PyObject *tmp_ass_subvalue_10;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_ass_subscribed_10;
                PyObject *tmp_ass_subscript_10;
                CHECK_OBJECT( var_values );
                tmp_subscribed_name_4 = var_values;
                tmp_subscript_name_4 = const_int_0;
                tmp_ass_subvalue_10 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 0 );
                if ( tmp_ass_subvalue_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
                CHECK_OBJECT( var_dest );
                tmp_ass_subscribed_10 = var_dest;
                CHECK_OBJECT( par_tag );
                tmp_ass_subscript_10 = par_tag;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_10, tmp_ass_subscript_10, tmp_ass_subvalue_10 );
                Py_DECREF( tmp_ass_subvalue_10 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;
                    type_description_1 = "ooooocoo";
                    goto try_except_handler_13;
                }
            }
            goto branch_end_14;
            branch_no_14:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 600;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_e501b4d2298b52f36845c1ee1accf36f->m_frame) frame_e501b4d2298b52f36845c1ee1accf36f->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooocoo";
            goto try_except_handler_13;
            branch_end_14:;
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_3;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
        return NULL;
        // End of try:
        try_end_3:;
        goto branch_end_12;
        branch_no_12:;
        {
            PyObject *tmp_ass_subvalue_11;
            PyObject *tmp_ass_subscribed_11;
            PyObject *tmp_ass_subscript_11;
            CHECK_OBJECT( var_values );
            tmp_ass_subvalue_11 = var_values;
            CHECK_OBJECT( var_dest );
            tmp_ass_subscribed_11 = var_dest;
            CHECK_OBJECT( par_tag );
            tmp_ass_subscript_11 = par_tag;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_11, tmp_ass_subscript_11, tmp_ass_subvalue_11 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 613;
                type_description_1 = "ooooocoo";
                goto frame_exception_exit_1;
            }
        }
        branch_end_12:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e501b4d2298b52f36845c1ee1accf36f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e501b4d2298b52f36845c1ee1accf36f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e501b4d2298b52f36845c1ee1accf36f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e501b4d2298b52f36845c1ee1accf36f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e501b4d2298b52f36845c1ee1accf36f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e501b4d2298b52f36845c1ee1accf36f,
        type_description_1,
        par_self,
        par_tag,
        par_value,
        par_legacy_api,
        var_basetypes,
        var_info,
        var_values,
        var_dest
    );


    // Release cached frame.
    if ( frame_e501b4d2298b52f36845c1ee1accf36f == cache_frame_e501b4d2298b52f36845c1ee1accf36f )
    {
        Py_DECREF( frame_e501b4d2298b52f36845c1ee1accf36f );
    }
    cache_frame_e501b4d2298b52f36845c1ee1accf36f = NULL;

    assertFrameObject( frame_e501b4d2298b52f36845c1ee1accf36f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    CHECK_OBJECT( (PyObject *)var_basetypes );
    Py_DECREF( var_basetypes );
    var_basetypes = NULL;

    CHECK_OBJECT( (PyObject *)var_info );
    Py_DECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    CHECK_OBJECT( (PyObject *)var_dest );
    Py_DECREF( var_dest );
    var_dest = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    Py_XDECREF( var_basetypes );
    var_basetypes = NULL;

    CHECK_OBJECT( (PyObject *)var_info );
    Py_DECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_dest );
    var_dest = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_25__setitem );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_08e60133f7eab259dac0b8329dd32a53, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 559;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_mvar_value_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_isinstance_inst_1 = generator_heap->var_v;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 559;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }

        tmp_isinstance_cls_1 = tmp_mvar_value_1;
        generator_heap->tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( generator_heap->tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 559;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = ( generator_heap->tmp_res != 0 ) ? Py_True : Py_False;
        Py_INCREF( tmp_expression_name_1 );
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 559;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 559;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_08e60133f7eab259dac0b8329dd32a53,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_1_genexpr_locals)
    );
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_905111738b763fc73ea4d988e0102b42, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 561;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_isinstance_inst_1 = generator_heap->var_v;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        generator_heap->tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( generator_heap->tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 561;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = ( generator_heap->tmp_res != 0 ) ? Py_True : Py_False;
        Py_INCREF( tmp_expression_name_1 );
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 561;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 561;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_905111738b763fc73ea4d988e0102b42,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_2_genexpr_locals)
    );
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_5f1c77d7c2d7ba9b523096727d9ea761, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 562;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_compexpr_left_1 = generator_heap->var_v;
        tmp_compexpr_right_1 = const_int_pos_65536;
        tmp_expression_name_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 562;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_compexpr_left_1, sizeof(PyObject *), &tmp_compexpr_right_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_compexpr_left_1, sizeof(PyObject *), &tmp_compexpr_right_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 562;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 562;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_5f1c77d7c2d7ba9b523096727d9ea761,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_3_genexpr_locals)
    );
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_e5402b538a0df715cd0b61d4eb9ad096, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 566;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_isinstance_inst_1 = generator_heap->var_v;
        tmp_isinstance_cls_1 = (PyObject *)&PyFloat_Type;
        generator_heap->tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( generator_heap->tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 566;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = ( generator_heap->tmp_res != 0 ) ? Py_True : Py_False;
        Py_INCREF( tmp_expression_name_1 );
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 566;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 566;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_e5402b538a0df715cd0b61d4eb9ad096,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_4_genexpr_locals)
    );
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_d3aea38a36bff67700f5dd0a7261a4d1, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 570;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_isinstance_inst_1 = generator_heap->var_v;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        generator_heap->tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( generator_heap->tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 570;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = ( generator_heap->tmp_res != 0 ) ? Py_True : Py_False;
        Py_INCREF( tmp_expression_name_1 );
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 570;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 570;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_d3aea38a36bff67700f5dd0a7261a4d1,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_5_genexpr_locals)
    );
}



struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_locals {
    PyObject *var_value;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_value = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_60d41c0d4749db00802db01f49d0ff24, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 583;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_value;
            generator_heap->var_value = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_value );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "info" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 583;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = PyCell_GET( generator->m_closure[1] );
        CHECK_OBJECT( generator_heap->var_value );
        tmp_args_element_name_1 = generator_heap->var_value;
        generator->m_frame->m_frame.f_lineno = 583;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_expression_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_cvt_enum, call_args );
        }

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 583;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 583;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 583;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_value,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_ddea649f39f532e0ea51d141677fd1aa,
#endif
        codeobj_60d41c0d4749db00802db01f49d0ff24,
        2,
        sizeof(struct PIL$TiffImagePlugin$$$function_25__setitem$$$genexpr_6_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_26___delitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_40c435ff47b196c1a57aa3df647a8daf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_40c435ff47b196c1a57aa3df647a8daf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_40c435ff47b196c1a57aa3df647a8daf, codeobj_40c435ff47b196c1a57aa3df647a8daf, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_40c435ff47b196c1a57aa3df647a8daf = cache_frame_40c435ff47b196c1a57aa3df647a8daf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_40c435ff47b196c1a57aa3df647a8daf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_40c435ff47b196c1a57aa3df647a8daf ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v2 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 616;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_1 = par_tag;
        tmp_args_element_name_2 = Py_None;
        frame_40c435ff47b196c1a57aa3df647a8daf->m_frame.f_lineno = 616;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_pop, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 616;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tags_v1 );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 617;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_3 = par_tag;
        tmp_args_element_name_4 = Py_None;
        frame_40c435ff47b196c1a57aa3df647a8daf->m_frame.f_lineno = 617;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_pop, call_args );
        }

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 617;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__tagdata );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 618;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_5 = par_tag;
        tmp_args_element_name_6 = Py_None;
        frame_40c435ff47b196c1a57aa3df647a8daf->m_frame.f_lineno = 618;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_pop, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 618;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40c435ff47b196c1a57aa3df647a8daf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40c435ff47b196c1a57aa3df647a8daf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_40c435ff47b196c1a57aa3df647a8daf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_40c435ff47b196c1a57aa3df647a8daf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_40c435ff47b196c1a57aa3df647a8daf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_40c435ff47b196c1a57aa3df647a8daf,
        type_description_1,
        par_self,
        par_tag
    );


    // Release cached frame.
    if ( frame_40c435ff47b196c1a57aa3df647a8daf == cache_frame_40c435ff47b196c1a57aa3df647a8daf )
    {
        Py_DECREF( frame_40c435ff47b196c1a57aa3df647a8daf );
    }
    cache_frame_40c435ff47b196c1a57aa3df647a8daf = NULL;

    assertFrameObject( frame_40c435ff47b196c1a57aa3df647a8daf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_26___delitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_26___delitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_27___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f26dce26fdc64eea13374b4cadf88e86;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f26dce26fdc64eea13374b4cadf88e86 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f26dce26fdc64eea13374b4cadf88e86, codeobj_f26dce26fdc64eea13374b4cadf88e86, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_f26dce26fdc64eea13374b4cadf88e86 = cache_frame_f26dce26fdc64eea13374b4cadf88e86;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f26dce26fdc64eea13374b4cadf88e86 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f26dce26fdc64eea13374b4cadf88e86 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_set_arg_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_set_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tagdata );
        if ( tmp_set_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PySet_New( tmp_set_arg_1 );
        Py_DECREF( tmp_set_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_set_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tags_v2 );
        if ( tmp_set_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PySet_New( tmp_set_arg_2 );
        Py_DECREF( tmp_set_arg_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_1 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 621;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f26dce26fdc64eea13374b4cadf88e86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f26dce26fdc64eea13374b4cadf88e86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f26dce26fdc64eea13374b4cadf88e86 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f26dce26fdc64eea13374b4cadf88e86, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f26dce26fdc64eea13374b4cadf88e86->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f26dce26fdc64eea13374b4cadf88e86, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f26dce26fdc64eea13374b4cadf88e86,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f26dce26fdc64eea13374b4cadf88e86 == cache_frame_f26dce26fdc64eea13374b4cadf88e86 )
    {
        Py_DECREF( frame_f26dce26fdc64eea13374b4cadf88e86 );
    }
    cache_frame_f26dce26fdc64eea13374b4cadf88e86 = NULL;

    assertFrameObject( frame_f26dce26fdc64eea13374b4cadf88e86 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_27___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_27___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_28__unpack( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fmt = python_pars[ 1 ];
    PyObject *par_data = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_ac7e3ef1c57c07915ccc7f53d7f3969e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ac7e3ef1c57c07915ccc7f53d7f3969e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ac7e3ef1c57c07915ccc7f53d7f3969e, codeobj_ac7e3ef1c57c07915ccc7f53d7f3969e, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ac7e3ef1c57c07915ccc7f53d7f3969e = cache_frame_ac7e3ef1c57c07915ccc7f53d7f3969e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ac7e3ef1c57c07915ccc7f53d7f3969e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 624;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 624;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__endian );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 624;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_fmt );
        tmp_right_name_1 = par_fmt;
        tmp_args_element_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 624;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_2 = par_data;
        frame_ac7e3ef1c57c07915ccc7f53d7f3969e->m_frame.f_lineno = 624;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 624;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ac7e3ef1c57c07915ccc7f53d7f3969e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ac7e3ef1c57c07915ccc7f53d7f3969e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ac7e3ef1c57c07915ccc7f53d7f3969e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ac7e3ef1c57c07915ccc7f53d7f3969e,
        type_description_1,
        par_self,
        par_fmt,
        par_data
    );


    // Release cached frame.
    if ( frame_ac7e3ef1c57c07915ccc7f53d7f3969e == cache_frame_ac7e3ef1c57c07915ccc7f53d7f3969e )
    {
        Py_DECREF( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );
    }
    cache_frame_ac7e3ef1c57c07915ccc7f53d7f3969e = NULL;

    assertFrameObject( frame_ac7e3ef1c57c07915ccc7f53d7f3969e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_28__unpack );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_28__unpack );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_29__pack( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fmt = python_pars[ 1 ];
    PyObject *par_values = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_342317ae8ab3bd9edb224f8d7af0b825;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_342317ae8ab3bd9edb224f8d7af0b825 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_342317ae8ab3bd9edb224f8d7af0b825, codeobj_342317ae8ab3bd9edb224f8d7af0b825, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_342317ae8ab3bd9edb224f8d7af0b825 = cache_frame_342317ae8ab3bd9edb224f8d7af0b825;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_342317ae8ab3bd9edb224f8d7af0b825 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_342317ae8ab3bd9edb224f8d7af0b825 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 627;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pack );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 627;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__endian );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 627;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_fmt );
        tmp_right_name_1 = par_fmt;
        tmp_tuple_element_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 627;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_values );
        tmp_dircall_arg3_1 = par_values;
        Py_INCREF( tmp_dircall_arg3_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___internal__$$$function_5_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 627;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_342317ae8ab3bd9edb224f8d7af0b825 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_342317ae8ab3bd9edb224f8d7af0b825 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_342317ae8ab3bd9edb224f8d7af0b825 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_342317ae8ab3bd9edb224f8d7af0b825, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_342317ae8ab3bd9edb224f8d7af0b825->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_342317ae8ab3bd9edb224f8d7af0b825, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_342317ae8ab3bd9edb224f8d7af0b825,
        type_description_1,
        par_self,
        par_fmt,
        par_values
    );


    // Release cached frame.
    if ( frame_342317ae8ab3bd9edb224f8d7af0b825 == cache_frame_342317ae8ab3bd9edb224f8d7af0b825 )
    {
        Py_DECREF( frame_342317ae8ab3bd9edb224f8d7af0b825 );
    }
    cache_frame_342317ae8ab3bd9edb224f8d7af0b825 = NULL;

    assertFrameObject( frame_342317ae8ab3bd9edb224f8d7af0b825 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_29__pack );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_29__pack );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_30__register_loader( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_idx = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_size = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *var_decorator = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator(  );

        ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] = par_idx;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] );
        ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[1] = par_size;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[1] );


        assert( var_decorator == NULL );
        var_decorator = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT( var_decorator );
    tmp_return_value = var_decorator;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_30__register_loader );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_idx );
    Py_DECREF( par_idx );
    par_idx = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)var_decorator );
    Py_DECREF( var_decorator );
    var_decorator = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_30__register_loader );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    PyObject *var_TYPES = NULL;
    struct Nuitka_FrameObject *frame_fdd8a8df3a67830324707201830c0715;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_fdd8a8df3a67830324707201830c0715 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fdd8a8df3a67830324707201830c0715, codeobj_fdd8a8df3a67830324707201830c0715, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_fdd8a8df3a67830324707201830c0715 = cache_frame_fdd8a8df3a67830324707201830c0715;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fdd8a8df3a67830324707201830c0715 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fdd8a8df3a67830324707201830c0715 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_TiffTags;
        tmp_globals_name_1 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_str_plain_TYPES_tuple;
        tmp_level_name_1 = const_int_pos_1;
        frame_fdd8a8df3a67830324707201830c0715->m_frame.f_lineno = 631;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 631;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        if ( PyModule_Check( tmp_import_name_from_1 ) )
        {
           tmp_assign_source_1 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)MODULE_DICT(tmp_import_name_from_1),
                const_str_plain_TYPES,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_TYPES );
        }

        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 631;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        assert( var_TYPES == NULL );
        var_TYPES = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_func );
        tmp_source_name_1 = par_func;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___name__ );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 632;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        frame_fdd8a8df3a67830324707201830c0715->m_frame.f_lineno = 632;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_str_plain_load__tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 632;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 632;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( par_func );
            tmp_source_name_2 = par_func;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 633;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_1 = const_slice_int_pos_5_none_none;
            tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 633;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            frame_fdd8a8df3a67830324707201830c0715->m_frame.f_lineno = 633;
            tmp_ass_subvalue_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_plain___str_space_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_ass_subvalue_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 633;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_TYPES );
            tmp_ass_subscribed_1 = var_TYPES;
            if ( PyCell_GET( self->m_closure[0] ) == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "idx" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 633;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_1 = PyCell_GET( self->m_closure[0] );
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 633;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_ass_subscript_2;
        if ( PyCell_GET( self->m_closure[1] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "size" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 634;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = PyCell_GET( self->m_closure[1] );
        tmp_ass_subvalue_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_ass_subvalue_2, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_func );
        tmp_tuple_element_1 = par_func;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_ass_subvalue_2, 1, tmp_tuple_element_1 );
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__load_dispatch );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__load_dispatch );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_load_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 634;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_2 = tmp_mvar_value_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "idx" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 634;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_2 = PyCell_GET( self->m_closure[0] );
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
        Py_DECREF( tmp_ass_subvalue_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 634;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdd8a8df3a67830324707201830c0715 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdd8a8df3a67830324707201830c0715 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fdd8a8df3a67830324707201830c0715, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fdd8a8df3a67830324707201830c0715->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fdd8a8df3a67830324707201830c0715, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fdd8a8df3a67830324707201830c0715,
        type_description_1,
        par_func,
        var_TYPES,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame.
    if ( frame_fdd8a8df3a67830324707201830c0715 == cache_frame_fdd8a8df3a67830324707201830c0715 )
    {
        Py_DECREF( frame_fdd8a8df3a67830324707201830c0715 );
    }
    cache_frame_fdd8a8df3a67830324707201830c0715 = NULL;

    assertFrameObject( frame_fdd8a8df3a67830324707201830c0715 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_func );
    tmp_return_value = par_func;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    CHECK_OBJECT( (PyObject *)var_TYPES );
    Py_DECREF( var_TYPES );
    var_TYPES = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    Py_XDECREF( var_TYPES );
    var_TYPES = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_31__register_writer( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_idx = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_decorator = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator(  );

        ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] = par_idx;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_1)->m_closure[0] );


        assert( var_decorator == NULL );
        var_decorator = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT( var_decorator );
    tmp_return_value = var_decorator;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_31__register_writer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_idx );
    Py_DECREF( par_idx );
    par_idx = NULL;

    CHECK_OBJECT( (PyObject *)var_decorator );
    Py_DECREF( var_decorator );
    var_decorator = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_31__register_writer );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_func = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_10d42498402b62ece1d8beff9457b6f1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_10d42498402b62ece1d8beff9457b6f1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_10d42498402b62ece1d8beff9457b6f1, codeobj_10d42498402b62ece1d8beff9457b6f1, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_10d42498402b62ece1d8beff9457b6f1 = cache_frame_10d42498402b62ece1d8beff9457b6f1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_10d42498402b62ece1d8beff9457b6f1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_10d42498402b62ece1d8beff9457b6f1 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( par_func );
        tmp_ass_subvalue_1 = par_func;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__write_dispatch );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__write_dispatch );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_write_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 640;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_1 = tmp_mvar_value_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "idx" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 640;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_1 = PyCell_GET( self->m_closure[0] );
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 640;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_10d42498402b62ece1d8beff9457b6f1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_10d42498402b62ece1d8beff9457b6f1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_10d42498402b62ece1d8beff9457b6f1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_10d42498402b62ece1d8beff9457b6f1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_10d42498402b62ece1d8beff9457b6f1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_10d42498402b62ece1d8beff9457b6f1,
        type_description_1,
        par_func,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_10d42498402b62ece1d8beff9457b6f1 == cache_frame_10d42498402b62ece1d8beff9457b6f1 )
    {
        Py_DECREF( frame_10d42498402b62ece1d8beff9457b6f1 );
    }
    cache_frame_10d42498402b62ece1d8beff9457b6f1 = NULL;

    assertFrameObject( frame_10d42498402b62ece1d8beff9457b6f1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_func );
    tmp_return_value = par_func;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_func );
    Py_DECREF( par_func );
    par_func = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_32__register_basic( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_idx_fmt_name = python_pars[ 0 ];
    PyObject *var_TYPES = NULL;
    PyObject *var_idx = NULL;
    struct Nuitka_CellObject *var_fmt = PyCell_EMPTY();
    PyObject *var_name = NULL;
    struct Nuitka_CellObject *var_size = PyCell_EMPTY();
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_e5c941007fe38e475d700bffe0369461;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_e5c941007fe38e475d700bffe0369461 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e5c941007fe38e475d700bffe0369461, codeobj_e5c941007fe38e475d700bffe0369461, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e5c941007fe38e475d700bffe0369461 = cache_frame_e5c941007fe38e475d700bffe0369461;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e5c941007fe38e475d700bffe0369461 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e5c941007fe38e475d700bffe0369461 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_TiffTags;
        tmp_globals_name_1 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_str_plain_TYPES_tuple;
        tmp_level_name_1 = const_int_pos_1;
        frame_e5c941007fe38e475d700bffe0369461->m_frame.f_lineno = 645;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 645;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
        if ( PyModule_Check( tmp_import_name_from_1 ) )
        {
           tmp_assign_source_1 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)MODULE_DICT(tmp_import_name_from_1),
                const_str_plain_TYPES,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_TYPES );
        }

        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 645;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
        assert( var_TYPES == NULL );
        var_TYPES = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_idx_fmt_name );
        tmp_iter_arg_1 = par_idx_fmt_name;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 646;
            type_description_1 = "ooococ";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooococ";
            exception_lineno = 646;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooococ";
            exception_lineno = 646;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooococ";
            exception_lineno = 646;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooococ";
                    exception_lineno = 646;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooococ";
            exception_lineno = 646;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
        assert( var_idx == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_idx = tmp_assign_source_6;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
        assert( PyCell_GET( var_fmt ) == NULL );
        Py_INCREF( tmp_assign_source_7 );
        PyCell_SET( var_fmt, tmp_assign_source_7 );

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_3;
        assert( var_name == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_name = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( var_name );
        tmp_ass_subvalue_1 = var_name;
        CHECK_OBJECT( var_TYPES );
        tmp_ass_subscribed_1 = var_TYPES;
        CHECK_OBJECT( var_idx );
        tmp_ass_subscript_1 = var_idx;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 647;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 648;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_calcsize );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 648;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = const_str_chr_61;
        CHECK_OBJECT( PyCell_GET( var_fmt ) );
        tmp_right_name_1 = PyCell_GET( var_fmt );
        tmp_args_element_name_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 648;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
        frame_e5c941007fe38e475d700bffe0369461->m_frame.f_lineno = 648;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 648;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
        assert( PyCell_GET( var_size ) == NULL );
        PyCell_SET( var_size, tmp_assign_source_9 );

    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_defaults_1;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT( PyCell_GET( var_size ) );
        tmp_tuple_element_1 = PyCell_GET( var_size );
        tmp_ass_subvalue_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_ass_subvalue_2, 0, tmp_tuple_element_1 );
        tmp_defaults_1 = const_tuple_true_tuple;
        Py_INCREF( tmp_defaults_1 );
        tmp_tuple_element_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda( tmp_defaults_1 );

        ((struct Nuitka_FunctionObject *)tmp_tuple_element_1)->m_closure[0] = var_fmt;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_tuple_element_1)->m_closure[0] );
        ((struct Nuitka_FunctionObject *)tmp_tuple_element_1)->m_closure[1] = var_size;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_tuple_element_1)->m_closure[1] );


        PyTuple_SET_ITEM( tmp_ass_subvalue_2, 1, tmp_tuple_element_1 );
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__load_dispatch );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__load_dispatch );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_load_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 649;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_2 = tmp_mvar_value_2;
        CHECK_OBJECT( var_idx );
        tmp_ass_subscript_2 = var_idx;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
        Py_DECREF( tmp_ass_subvalue_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 649;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_ass_subscript_3;
        tmp_ass_subvalue_3 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_ass_subvalue_3)->m_closure[0] = var_fmt;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_ass_subvalue_3)->m_closure[0] );


        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__write_dispatch );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__write_dispatch );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_write_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 651;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_3 = tmp_mvar_value_3;
        CHECK_OBJECT( var_idx );
        tmp_ass_subscript_3 = var_idx;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
        Py_DECREF( tmp_ass_subvalue_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 651;
            type_description_1 = "ooococ";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e5c941007fe38e475d700bffe0369461 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e5c941007fe38e475d700bffe0369461 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e5c941007fe38e475d700bffe0369461, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e5c941007fe38e475d700bffe0369461->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e5c941007fe38e475d700bffe0369461, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e5c941007fe38e475d700bffe0369461,
        type_description_1,
        par_idx_fmt_name,
        var_TYPES,
        var_idx,
        var_fmt,
        var_name,
        var_size
    );


    // Release cached frame.
    if ( frame_e5c941007fe38e475d700bffe0369461 == cache_frame_e5c941007fe38e475d700bffe0369461 )
    {
        Py_DECREF( frame_e5c941007fe38e475d700bffe0369461 );
    }
    cache_frame_e5c941007fe38e475d700bffe0369461 = NULL;

    assertFrameObject( frame_e5c941007fe38e475d700bffe0369461 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_idx_fmt_name );
    Py_DECREF( par_idx_fmt_name );
    par_idx_fmt_name = NULL;

    CHECK_OBJECT( (PyObject *)var_TYPES );
    Py_DECREF( var_TYPES );
    var_TYPES = NULL;

    CHECK_OBJECT( (PyObject *)var_idx );
    Py_DECREF( var_idx );
    var_idx = NULL;

    CHECK_OBJECT( (PyObject *)var_fmt );
    Py_DECREF( var_fmt );
    var_fmt = NULL;

    CHECK_OBJECT( (PyObject *)var_name );
    Py_DECREF( var_name );
    var_name = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_idx_fmt_name );
    Py_DECREF( par_idx_fmt_name );
    par_idx_fmt_name = NULL;

    Py_XDECREF( var_TYPES );
    var_TYPES = NULL;

    Py_XDECREF( var_idx );
    var_idx = NULL;

    CHECK_OBJECT( (PyObject *)var_fmt );
    Py_DECREF( var_fmt );
    var_fmt = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    CHECK_OBJECT( (PyObject *)var_size );
    Py_DECREF( var_size );
    var_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *par_legacy_api = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_1f99c1e8717f64044a988507720a75a9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1f99c1e8717f64044a988507720a75a9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1f99c1e8717f64044a988507720a75a9, codeobj_1f99c1e8717f64044a988507720a75a9, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1f99c1e8717f64044a988507720a75a9 = cache_frame_1f99c1e8717f64044a988507720a75a9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1f99c1e8717f64044a988507720a75a9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1f99c1e8717f64044a988507720a75a9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }
        tmp_source_name_2 = const_str_digest_06758be47dc92782985a67ee64d7a24c;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_data );
        tmp_len_arg_1 = par_data;
        tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }
        if ( PyCell_GET( self->m_closure[1] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_left_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "size" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }

        tmp_right_name_1 = PyCell_GET( self->m_closure[1] );
        tmp_args_element_name_2 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fmt" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_3 = PyCell_GET( self->m_closure[0] );
        frame_1f99c1e8717f64044a988507720a75a9->m_frame.f_lineno = 650;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_4 = par_data;
        frame_1f99c1e8717f64044a988507720a75a9->m_frame.f_lineno = 650;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_4 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 650;
            type_description_1 = "ooocc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f99c1e8717f64044a988507720a75a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f99c1e8717f64044a988507720a75a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f99c1e8717f64044a988507720a75a9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1f99c1e8717f64044a988507720a75a9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1f99c1e8717f64044a988507720a75a9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1f99c1e8717f64044a988507720a75a9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1f99c1e8717f64044a988507720a75a9,
        type_description_1,
        par_self,
        par_data,
        par_legacy_api,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_1f99c1e8717f64044a988507720a75a9 == cache_frame_1f99c1e8717f64044a988507720a75a9 )
    {
        Py_DECREF( frame_1f99c1e8717f64044a988507720a75a9 );
    }
    cache_frame_1f99c1e8717f64044a988507720a75a9 = NULL;

    assertFrameObject( frame_1f99c1e8717f64044a988507720a75a9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *par_values = python_pars[ 1 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_967aaeb57ab3190287d08779e3961bb3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_967aaeb57ab3190287d08779e3961bb3 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_967aaeb57ab3190287d08779e3961bb3, codeobj_967aaeb57ab3190287d08779e3961bb3, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_967aaeb57ab3190287d08779e3961bb3 = cache_frame_967aaeb57ab3190287d08779e3961bb3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_967aaeb57ab3190287d08779e3961bb3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_967aaeb57ab3190287d08779e3961bb3 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_bytes_empty;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_values );
            tmp_iter_arg_1 = par_values;
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 652;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        tmp_args_element_name_1 = PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = self->m_closure[0];
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[2] = par_self;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[2] );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda );
        return NULL;
        outline_result_1:;
        frame_967aaeb57ab3190287d08779e3961bb3->m_frame.f_lineno = 652;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 652;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_967aaeb57ab3190287d08779e3961bb3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_967aaeb57ab3190287d08779e3961bb3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_967aaeb57ab3190287d08779e3961bb3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_967aaeb57ab3190287d08779e3961bb3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_967aaeb57ab3190287d08779e3961bb3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_967aaeb57ab3190287d08779e3961bb3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_967aaeb57ab3190287d08779e3961bb3,
        type_description_1,
        par_self,
        par_values
    );


    // Release cached frame.
    if ( frame_967aaeb57ab3190287d08779e3961bb3 == cache_frame_967aaeb57ab3190287d08779e3961bb3 )
    {
        Py_DECREF( frame_967aaeb57ab3190287d08779e3961bb3 );
    }
    cache_frame_967aaeb57ab3190287d08779e3961bb3 = NULL;

    assertFrameObject( frame_967aaeb57ab3190287d08779e3961bb3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_locals {
    PyObject *var_value;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_value = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_61b774a2e1591663c2e632b4a7aac705, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[1] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Nocc";
                generator_heap->exception_lineno = 652;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_value;
            generator_heap->var_value = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_value );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[2] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 652;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = PyCell_GET( generator->m_closure[2] );
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 652;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        if ( PyCell_GET( generator->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "fmt" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 652;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }

        tmp_args_element_name_1 = PyCell_GET( generator->m_closure[0] );
        CHECK_OBJECT( generator_heap->var_value );
        tmp_args_element_name_2 = generator_heap->var_value;
        generator->m_frame->m_frame.f_lineno = 652;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 652;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 652;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 652;
        generator_heap->type_description_1 = "Nocc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_value,
            generator->m_closure[2],
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_value );
    generator_heap->var_value = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_0a1355599d78cf1f896e0715d27e54bd,
#endif
        codeobj_61b774a2e1591663c2e632b4a7aac705,
        3,
        sizeof(struct PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_33_load_byte( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *par_legacy_api = python_pars[ 2 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_data );
    tmp_return_value = par_data;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_33_load_byte );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_33_load_byte );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_34_write_byte( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_data );
    tmp_return_value = par_data;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_34_write_byte );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_34_write_byte );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_35_load_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *par_legacy_api = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_0082b00a12f39acfc510cc861342f685;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_0082b00a12f39acfc510cc861342f685 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0082b00a12f39acfc510cc861342f685, codeobj_0082b00a12f39acfc510cc861342f685, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0082b00a12f39acfc510cc861342f685 = cache_frame_0082b00a12f39acfc510cc861342f685;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0082b00a12f39acfc510cc861342f685 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0082b00a12f39acfc510cc861342f685 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_data );
        tmp_called_instance_1 = par_data;
        frame_0082b00a12f39acfc510cc861342f685->m_frame.f_lineno = 673;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_endswith, &PyTuple_GET_ITEM( const_tuple_bytes_chr_0_tuple, 0 ) );

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 673;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 673;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( par_data );
            tmp_subscribed_name_1 = par_data;
            tmp_subscript_name_1 = const_slice_none_int_neg_1_none;
            tmp_assign_source_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 674;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_data;
                assert( old != NULL );
                par_data = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_data );
        tmp_called_instance_2 = par_data;
        frame_0082b00a12f39acfc510cc861342f685->m_frame.f_lineno = 675;
        tmp_return_value = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_a3c4d264fc3ef18a3d120a02567f3451_tuple, 0 ) );

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 675;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0082b00a12f39acfc510cc861342f685 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0082b00a12f39acfc510cc861342f685 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0082b00a12f39acfc510cc861342f685 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0082b00a12f39acfc510cc861342f685, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0082b00a12f39acfc510cc861342f685->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0082b00a12f39acfc510cc861342f685, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0082b00a12f39acfc510cc861342f685,
        type_description_1,
        par_self,
        par_data,
        par_legacy_api
    );


    // Release cached frame.
    if ( frame_0082b00a12f39acfc510cc861342f685 == cache_frame_0082b00a12f39acfc510cc861342f685 )
    {
        Py_DECREF( frame_0082b00a12f39acfc510cc861342f685 );
    }
    cache_frame_0082b00a12f39acfc510cc861342f685 = NULL;

    assertFrameObject( frame_0082b00a12f39acfc510cc861342f685 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_35_load_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_35_load_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_36_write_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_82e978eebf395d5b8225a7d16edcc456;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_82e978eebf395d5b8225a7d16edcc456 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_82e978eebf395d5b8225a7d16edcc456, codeobj_82e978eebf395d5b8225a7d16edcc456, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_82e978eebf395d5b8225a7d16edcc456 = cache_frame_82e978eebf395d5b8225a7d16edcc456;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_82e978eebf395d5b8225a7d16edcc456 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_82e978eebf395d5b8225a7d16edcc456 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 680;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_version_info );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 680;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_major );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 680;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 680;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_value );
            tmp_called_instance_1 = par_value;
            frame_82e978eebf395d5b8225a7d16edcc456->m_frame.f_lineno = 681;
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 0 ) );

            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 681;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_value;
                assert( old != NULL );
                par_value = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_right_name_2;
        tmp_left_name_2 = const_bytes_empty;
        CHECK_OBJECT( par_value );
        tmp_called_instance_2 = par_value;
        frame_82e978eebf395d5b8225a7d16edcc456->m_frame.f_lineno = 682;
        tmp_right_name_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 0 ) );

        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 682;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = BINARY_OPERATION_ADD_BYTES_OBJECT( tmp_left_name_2, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 682;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_bytes_chr_0;
        tmp_return_value = BINARY_OPERATION_ADD_OBJECT_BYTES( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 682;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82e978eebf395d5b8225a7d16edcc456 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_82e978eebf395d5b8225a7d16edcc456 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82e978eebf395d5b8225a7d16edcc456 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_82e978eebf395d5b8225a7d16edcc456, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_82e978eebf395d5b8225a7d16edcc456->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_82e978eebf395d5b8225a7d16edcc456, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_82e978eebf395d5b8225a7d16edcc456,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_82e978eebf395d5b8225a7d16edcc456 == cache_frame_82e978eebf395d5b8225a7d16edcc456 )
    {
        Py_DECREF( frame_82e978eebf395d5b8225a7d16edcc456 );
    }
    cache_frame_82e978eebf395d5b8225a7d16edcc456 = NULL;

    assertFrameObject( frame_82e978eebf395d5b8225a7d16edcc456 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_36_write_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_36_write_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_37_load_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_CellObject *par_legacy_api = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *var_vals = NULL;
    struct Nuitka_CellObject *var_combine = PyCell_EMPTY();
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_4ea75d3fead62b0ce8b58965be6b32fc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_4ea75d3fead62b0ce8b58965be6b32fc = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4ea75d3fead62b0ce8b58965be6b32fc, codeobj_4ea75d3fead62b0ce8b58965be6b32fc, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4ea75d3fead62b0ce8b58965be6b32fc = cache_frame_4ea75d3fead62b0ce8b58965be6b32fc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4ea75d3fead62b0ce8b58965be6b32fc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4ea75d3fead62b0ce8b58965be6b32fc ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 686;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        tmp_source_name_2 = const_str_digest_a2f5508fa71536268c79485a8b84235c;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_data );
        tmp_len_arg_1 = par_data;
        tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 686;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_4;
        tmp_args_element_name_2 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 686;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        frame_4ea75d3fead62b0ce8b58965be6b32fc->m_frame.f_lineno = 686;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 686;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_3 = par_data;
        frame_4ea75d3fead62b0ce8b58965be6b32fc->m_frame.f_lineno = 686;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 686;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        assert( var_vals == NULL );
        var_vals = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine(  );

        ((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0] = par_legacy_api;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0] );


        assert( PyCell_GET( var_combine ) == NULL );
        PyCell_SET( var_combine, tmp_assign_source_2 );

    }
    {
        PyObject *tmp_tuple_arg_1;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            tmp_called_name_3 = (PyObject *)&PyZip_Type;
            CHECK_OBJECT( var_vals );
            tmp_subscribed_name_1 = var_vals;
            tmp_subscript_name_1 = const_slice_none_none_int_pos_2;
            tmp_args_element_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 690;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_vals );
            tmp_subscribed_name_2 = var_vals;
            tmp_subscript_name_2 = const_slice_int_pos_1_none_int_pos_2;
            tmp_args_element_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_4 );

                exception_lineno = 690;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            frame_4ea75d3fead62b0ce8b58965be6b32fc->m_frame.f_lineno = 690;
            {
                PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 690;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 689;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_3;
        }
        // Tried code:
        tmp_tuple_arg_1 = PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = var_combine;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] );
        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational );
        return NULL;
        outline_result_1:;
        tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 689;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ea75d3fead62b0ce8b58965be6b32fc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ea75d3fead62b0ce8b58965be6b32fc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ea75d3fead62b0ce8b58965be6b32fc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4ea75d3fead62b0ce8b58965be6b32fc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4ea75d3fead62b0ce8b58965be6b32fc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4ea75d3fead62b0ce8b58965be6b32fc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4ea75d3fead62b0ce8b58965be6b32fc,
        type_description_1,
        par_self,
        par_data,
        par_legacy_api,
        var_vals,
        var_combine
    );


    // Release cached frame.
    if ( frame_4ea75d3fead62b0ce8b58965be6b32fc == cache_frame_4ea75d3fead62b0ce8b58965be6b32fc )
    {
        Py_DECREF( frame_4ea75d3fead62b0ce8b58965be6b32fc );
    }
    cache_frame_4ea75d3fead62b0ce8b58965be6b32fc = NULL;

    assertFrameObject( frame_4ea75d3fead62b0ce8b58965be6b32fc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    CHECK_OBJECT( (PyObject *)var_vals );
    Py_DECREF( var_vals );
    var_vals = NULL;

    CHECK_OBJECT( (PyObject *)var_combine );
    Py_DECREF( var_combine );
    var_combine = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    Py_XDECREF( var_vals );
    var_vals = NULL;

    CHECK_OBJECT( (PyObject *)var_combine );
    Py_DECREF( var_combine );
    var_combine = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_b = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_81a5b827dcac3539ef66c90c1d383515;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_81a5b827dcac3539ef66c90c1d383515 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_81a5b827dcac3539ef66c90c1d383515, codeobj_81a5b827dcac3539ef66c90c1d383515, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_81a5b827dcac3539ef66c90c1d383515 = cache_frame_81a5b827dcac3539ef66c90c1d383515;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_81a5b827dcac3539ef66c90c1d383515 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_81a5b827dcac3539ef66c90c1d383515 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "legacy_api" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 688;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( PyCell_GET( self->m_closure[0] ) );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 688;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( par_a );
        tmp_tuple_element_1 = par_a;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_b );
        tmp_tuple_element_1 = par_b;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 688;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_a );
        tmp_args_element_name_1 = par_a;
        CHECK_OBJECT( par_b );
        tmp_args_element_name_2 = par_b;
        frame_81a5b827dcac3539ef66c90c1d383515->m_frame.f_lineno = 688;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 688;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_81a5b827dcac3539ef66c90c1d383515 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_81a5b827dcac3539ef66c90c1d383515 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_81a5b827dcac3539ef66c90c1d383515 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_81a5b827dcac3539ef66c90c1d383515, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_81a5b827dcac3539ef66c90c1d383515->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_81a5b827dcac3539ef66c90c1d383515, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_81a5b827dcac3539ef66c90c1d383515,
        type_description_1,
        par_a,
        par_b,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_81a5b827dcac3539ef66c90c1d383515 == cache_frame_81a5b827dcac3539ef66c90c1d383515 )
    {
        Py_DECREF( frame_81a5b827dcac3539ef66c90c1d383515 );
    }
    cache_frame_81a5b827dcac3539ef66c90c1d383515 = NULL;

    assertFrameObject( frame_81a5b827dcac3539ef66c90c1d383515 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_locals {
    PyObject *var_num;
    PyObject *var_denom;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_num = NULL;
    generator_heap->var_denom = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_2a3b0a4527de6ccd2eb3e8254f067db2, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[1] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Nooc";
                generator_heap->exception_lineno = 689;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 689;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 689;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 689;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        generator_heap->tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( generator_heap->tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

                    generator_heap->type_description_1 = "Nooc";
                    generator_heap->exception_lineno = 689;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( generator_heap->tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 689;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_num;
            generator_heap->var_num = tmp_assign_source_5;
            Py_INCREF( generator_heap->var_num );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_denom;
            generator_heap->var_denom = tmp_assign_source_6;
            Py_INCREF( generator_heap->var_denom );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[0] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "combine" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 689;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = PyCell_GET( generator->m_closure[0] );
        CHECK_OBJECT( generator_heap->var_num );
        tmp_args_element_name_1 = generator_heap->var_num;
        CHECK_OBJECT( generator_heap->var_denom );
        tmp_args_element_name_2 = generator_heap->var_denom;
        generator->m_frame->m_frame.f_lineno = 689;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 689;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 689;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 689;
        generator_heap->type_description_1 = "Nooc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_num,
            generator_heap->var_denom,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_num );
    generator_heap->var_num = NULL;

    Py_XDECREF( generator_heap->var_denom );
    generator_heap->var_denom = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_num );
    generator_heap->var_num = NULL;

    Py_XDECREF( generator_heap->var_denom );
    generator_heap->var_denom = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_778fa9e6db0da507c6d326929fff4b26,
#endif
        codeobj_2a3b0a4527de6ccd2eb3e8254f067db2,
        2,
        sizeof(struct PIL$TiffImagePlugin$$$function_37_load_rational$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_38_write_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *par_values = python_pars[ 1 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_7dc53a3a0068576ca023c47aa5fc74f0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7dc53a3a0068576ca023c47aa5fc74f0 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7dc53a3a0068576ca023c47aa5fc74f0, codeobj_7dc53a3a0068576ca023c47aa5fc74f0, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_7dc53a3a0068576ca023c47aa5fc74f0 = cache_frame_7dc53a3a0068576ca023c47aa5fc74f0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7dc53a3a0068576ca023c47aa5fc74f0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7dc53a3a0068576ca023c47aa5fc74f0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_bytes_empty;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_values );
            tmp_iter_arg_1 = par_values;
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 694;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        tmp_args_element_name_1 = PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] = par_self;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_38_write_rational );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_38_write_rational );
        return NULL;
        outline_result_1:;
        frame_7dc53a3a0068576ca023c47aa5fc74f0->m_frame.f_lineno = 694;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 694;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7dc53a3a0068576ca023c47aa5fc74f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7dc53a3a0068576ca023c47aa5fc74f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7dc53a3a0068576ca023c47aa5fc74f0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7dc53a3a0068576ca023c47aa5fc74f0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7dc53a3a0068576ca023c47aa5fc74f0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7dc53a3a0068576ca023c47aa5fc74f0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7dc53a3a0068576ca023c47aa5fc74f0,
        type_description_1,
        par_self,
        par_values
    );


    // Release cached frame.
    if ( frame_7dc53a3a0068576ca023c47aa5fc74f0 == cache_frame_7dc53a3a0068576ca023c47aa5fc74f0 )
    {
        Py_DECREF( frame_7dc53a3a0068576ca023c47aa5fc74f0 );
    }
    cache_frame_7dc53a3a0068576ca023c47aa5fc74f0 = NULL;

    assertFrameObject( frame_7dc53a3a0068576ca023c47aa5fc74f0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_38_write_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_38_write_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_locals {
    PyObject *var_frac;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_frac = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_8d02518275ccdb9520baba0883372825, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 694;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_frac;
            generator_heap->var_frac = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_frac );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = PyCell_GET( generator->m_closure[1] );
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_dircall_arg2_1 = const_tuple_str_plain_2L_tuple;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__limit_rational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__limit_rational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_dircall_arg1_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_limit_rational" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( generator_heap->var_frac );
        tmp_args_element_name_1 = generator_heap->var_frac;
        tmp_args_element_name_2 = const_int_pos_2147483648;
        generator->m_frame->m_frame.f_lineno = 694;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_dircall_arg3_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_dircall_arg3_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Py_INCREF( tmp_dircall_arg2_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_expression_name_1 = impl___internal__$$$function_5_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 694;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 694;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_frac,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_frac );
    generator_heap->var_frac = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_frac );
    generator_heap->var_frac = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_9af315a991f33e1e5efd897c0e99893d,
#endif
        codeobj_8d02518275ccdb9520baba0883372825,
        2,
        sizeof(struct PIL$TiffImagePlugin$$$function_38_write_rational$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_39_load_undefined( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *par_legacy_api = python_pars[ 2 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_data );
    tmp_return_value = par_data;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_39_load_undefined );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_39_load_undefined );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_40_write_undefined( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_value );
    tmp_return_value = par_value;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_40_write_undefined );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_40_write_undefined );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_41_load_signed_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_CellObject *par_legacy_api = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *var_vals = NULL;
    struct Nuitka_CellObject *var_combine = PyCell_EMPTY();
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_6587ff696723c46961c038013de53154;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6587ff696723c46961c038013de53154 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6587ff696723c46961c038013de53154, codeobj_6587ff696723c46961c038013de53154, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6587ff696723c46961c038013de53154 = cache_frame_6587ff696723c46961c038013de53154;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6587ff696723c46961c038013de53154 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6587ff696723c46961c038013de53154 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 707;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        tmp_source_name_2 = const_str_digest_89dbc60e7f8b4673fa00848c7fa52c6b;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_data );
        tmp_len_arg_1 = par_data;
        tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 707;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_4;
        tmp_args_element_name_2 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 707;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        frame_6587ff696723c46961c038013de53154->m_frame.f_lineno = 707;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 707;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_3 = par_data;
        frame_6587ff696723c46961c038013de53154->m_frame.f_lineno = 707;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 707;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        assert( var_vals == NULL );
        var_vals = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine(  );

        ((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0] = par_legacy_api;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_assign_source_2)->m_closure[0] );


        assert( PyCell_GET( var_combine ) == NULL );
        PyCell_SET( var_combine, tmp_assign_source_2 );

    }
    {
        PyObject *tmp_tuple_arg_1;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            tmp_called_name_3 = (PyObject *)&PyZip_Type;
            CHECK_OBJECT( var_vals );
            tmp_subscribed_name_1 = var_vals;
            tmp_subscript_name_1 = const_slice_none_none_int_pos_2;
            tmp_args_element_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 711;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_vals );
            tmp_subscribed_name_2 = var_vals;
            tmp_subscript_name_2 = const_slice_int_pos_1_none_int_pos_2;
            tmp_args_element_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_4 );

                exception_lineno = 711;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            frame_6587ff696723c46961c038013de53154->m_frame.f_lineno = 711;
            {
                PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 711;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 710;
                type_description_1 = "oococ";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_3;
        }
        // Tried code:
        tmp_tuple_arg_1 = PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = var_combine;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] );
        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational );
        return NULL;
        outline_result_1:;
        tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 710;
            type_description_1 = "oococ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6587ff696723c46961c038013de53154 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6587ff696723c46961c038013de53154 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6587ff696723c46961c038013de53154 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6587ff696723c46961c038013de53154, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6587ff696723c46961c038013de53154->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6587ff696723c46961c038013de53154, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6587ff696723c46961c038013de53154,
        type_description_1,
        par_self,
        par_data,
        par_legacy_api,
        var_vals,
        var_combine
    );


    // Release cached frame.
    if ( frame_6587ff696723c46961c038013de53154 == cache_frame_6587ff696723c46961c038013de53154 )
    {
        Py_DECREF( frame_6587ff696723c46961c038013de53154 );
    }
    cache_frame_6587ff696723c46961c038013de53154 = NULL;

    assertFrameObject( frame_6587ff696723c46961c038013de53154 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    CHECK_OBJECT( (PyObject *)var_vals );
    Py_DECREF( var_vals );
    var_vals = NULL;

    CHECK_OBJECT( (PyObject *)var_combine );
    Py_DECREF( var_combine );
    var_combine = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_legacy_api );
    Py_DECREF( par_legacy_api );
    par_legacy_api = NULL;

    Py_XDECREF( var_vals );
    var_vals = NULL;

    CHECK_OBJECT( (PyObject *)var_combine );
    Py_DECREF( var_combine );
    var_combine = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_b = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_aa66f459a2c09d2ffda5f44034204ebb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_aa66f459a2c09d2ffda5f44034204ebb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_aa66f459a2c09d2ffda5f44034204ebb, codeobj_aa66f459a2c09d2ffda5f44034204ebb, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_aa66f459a2c09d2ffda5f44034204ebb = cache_frame_aa66f459a2c09d2ffda5f44034204ebb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_aa66f459a2c09d2ffda5f44034204ebb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_aa66f459a2c09d2ffda5f44034204ebb ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "legacy_api" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 709;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( PyCell_GET( self->m_closure[0] ) );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 709;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( par_a );
        tmp_tuple_element_1 = par_a;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_b );
        tmp_tuple_element_1 = par_b;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 709;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_a );
        tmp_args_element_name_1 = par_a;
        CHECK_OBJECT( par_b );
        tmp_args_element_name_2 = par_b;
        frame_aa66f459a2c09d2ffda5f44034204ebb->m_frame.f_lineno = 709;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 709;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa66f459a2c09d2ffda5f44034204ebb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa66f459a2c09d2ffda5f44034204ebb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa66f459a2c09d2ffda5f44034204ebb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_aa66f459a2c09d2ffda5f44034204ebb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_aa66f459a2c09d2ffda5f44034204ebb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_aa66f459a2c09d2ffda5f44034204ebb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_aa66f459a2c09d2ffda5f44034204ebb,
        type_description_1,
        par_a,
        par_b,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_aa66f459a2c09d2ffda5f44034204ebb == cache_frame_aa66f459a2c09d2ffda5f44034204ebb )
    {
        Py_DECREF( frame_aa66f459a2c09d2ffda5f44034204ebb );
    }
    cache_frame_aa66f459a2c09d2ffda5f44034204ebb = NULL;

    assertFrameObject( frame_aa66f459a2c09d2ffda5f44034204ebb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_locals {
    PyObject *var_num;
    PyObject *var_denom;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_num = NULL;
    generator_heap->var_denom = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_62da24ae92d489e0eeb4700d803bb1cc, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[1] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Nooc";
                generator_heap->exception_lineno = 710;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 710;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 710;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            }


            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 710;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        generator_heap->tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( generator_heap->tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

                    generator_heap->type_description_1 = "Nooc";
                    generator_heap->exception_lineno = 710;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( generator_heap->tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

            generator_heap->type_description_1 = "Nooc";
            generator_heap->exception_lineno = 710;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)generator_heap->tmp_tuple_unpack_1__source_iter );
    Py_DECREF( generator_heap->tmp_tuple_unpack_1__source_iter );
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_num;
            generator_heap->var_num = tmp_assign_source_5;
            Py_INCREF( generator_heap->var_num );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_1 );
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( generator_heap->tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_denom;
            generator_heap->var_denom = tmp_assign_source_6;
            Py_INCREF( generator_heap->var_denom );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( generator_heap->tmp_tuple_unpack_1__element_2 );
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[0] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "combine" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 710;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = PyCell_GET( generator->m_closure[0] );
        CHECK_OBJECT( generator_heap->var_num );
        tmp_args_element_name_1 = generator_heap->var_num;
        CHECK_OBJECT( generator_heap->var_denom );
        tmp_args_element_name_2 = generator_heap->var_denom;
        generator->m_frame->m_frame.f_lineno = 710;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 710;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 710;
            generator_heap->type_description_1 = "Nooc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 710;
        generator_heap->type_description_1 = "Nooc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_num,
            generator_heap->var_denom,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_num );
    generator_heap->var_num = NULL;

    Py_XDECREF( generator_heap->var_denom );
    generator_heap->var_denom = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_num );
    generator_heap->var_num = NULL;

    Py_XDECREF( generator_heap->var_denom );
    generator_heap->var_denom = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_dd35fdb1c8e222fbe19927058d694e7c,
#endif
        codeobj_62da24ae92d489e0eeb4700d803bb1cc,
        2,
        sizeof(struct PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_42_write_signed_rational( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *par_values = python_pars[ 1 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_b29504290a067901d73c63e9cfff37d9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b29504290a067901d73c63e9cfff37d9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b29504290a067901d73c63e9cfff37d9, codeobj_b29504290a067901d73c63e9cfff37d9, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_b29504290a067901d73c63e9cfff37d9 = cache_frame_b29504290a067901d73c63e9cfff37d9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b29504290a067901d73c63e9cfff37d9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b29504290a067901d73c63e9cfff37d9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_bytes_empty;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_values );
            tmp_iter_arg_1 = par_values;
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 715;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        tmp_args_element_name_1 = PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] = par_self;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_42_write_signed_rational );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_42_write_signed_rational );
        return NULL;
        outline_result_1:;
        frame_b29504290a067901d73c63e9cfff37d9->m_frame.f_lineno = 715;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 715;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b29504290a067901d73c63e9cfff37d9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b29504290a067901d73c63e9cfff37d9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b29504290a067901d73c63e9cfff37d9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b29504290a067901d73c63e9cfff37d9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b29504290a067901d73c63e9cfff37d9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b29504290a067901d73c63e9cfff37d9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b29504290a067901d73c63e9cfff37d9,
        type_description_1,
        par_self,
        par_values
    );


    // Release cached frame.
    if ( frame_b29504290a067901d73c63e9cfff37d9 == cache_frame_b29504290a067901d73c63e9cfff37d9 )
    {
        Py_DECREF( frame_b29504290a067901d73c63e9cfff37d9 );
    }
    cache_frame_b29504290a067901d73c63e9cfff37d9 = NULL;

    assertFrameObject( frame_b29504290a067901d73c63e9cfff37d9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_42_write_signed_rational );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_values );
    Py_DECREF( par_values );
    par_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_42_write_signed_rational );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_locals {
    PyObject *var_frac;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_frac = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_b6e944fdb8211695df0188220a199269, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 715;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_frac;
            generator_heap->var_frac = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_frac );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = PyCell_GET( generator->m_closure[1] );
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__pack );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_dircall_arg2_1 = const_tuple_str_plain_2L_tuple;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__limit_rational );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__limit_rational );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_dircall_arg1_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_limit_rational" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( generator_heap->var_frac );
        tmp_args_element_name_1 = generator_heap->var_frac;
        tmp_args_element_name_2 = const_int_pos_1073741824;
        generator->m_frame->m_frame.f_lineno = 715;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_dircall_arg3_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_dircall_arg3_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Py_INCREF( tmp_dircall_arg2_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_expression_name_1 = impl___internal__$$$function_5_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 715;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 715;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_frac,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_frac );
    generator_heap->var_frac = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_frac );
    generator_heap->var_frac = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_a1bc24fc8989dafc486e36d582c6c442,
#endif
        codeobj_b6e944fdb8211695df0188220a199269,
        2,
        sizeof(struct PIL$TiffImagePlugin$$$function_42_write_signed_rational$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_43__ensure_read( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_size = python_pars[ 2 ];
    PyObject *var_ret = NULL;
    struct Nuitka_FrameObject *frame_37bce8d2a322291925eb48a1396ad929;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_37bce8d2a322291925eb48a1396ad929 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_37bce8d2a322291925eb48a1396ad929, codeobj_37bce8d2a322291925eb48a1396ad929, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_37bce8d2a322291925eb48a1396ad929 = cache_frame_37bce8d2a322291925eb48a1396ad929;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_37bce8d2a322291925eb48a1396ad929 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_37bce8d2a322291925eb48a1396ad929 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_1 = par_fp;
        CHECK_OBJECT( par_size );
        tmp_args_element_name_1 = par_size;
        frame_37bce8d2a322291925eb48a1396ad929->m_frame.f_lineno = 719;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 719;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_ret == NULL );
        var_ret = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_ret );
        tmp_len_arg_1 = var_ret;
        tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 720;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_size );
        tmp_compexpr_right_1 = par_size;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 720;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_len_arg_2;
            tmp_left_name_1 = const_str_digest_5c1b41e424a2246568f742b1a0036c97;
            tmp_left_name_2 = const_str_digest_10e0e22f3edc67c4907122668a340595;
            CHECK_OBJECT( par_size );
            tmp_tuple_element_1 = par_size;
            tmp_right_name_2 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( var_ret );
            tmp_len_arg_2 = var_ret;
            tmp_tuple_element_1 = BUILTIN_LEN( tmp_len_arg_2 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_2 );

                exception_lineno = 723;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_1 );
            tmp_right_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 722;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_make_exception_arg_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 721;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            frame_37bce8d2a322291925eb48a1396ad929->m_frame.f_lineno = 721;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 721;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37bce8d2a322291925eb48a1396ad929 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37bce8d2a322291925eb48a1396ad929 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_37bce8d2a322291925eb48a1396ad929, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_37bce8d2a322291925eb48a1396ad929->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_37bce8d2a322291925eb48a1396ad929, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_37bce8d2a322291925eb48a1396ad929,
        type_description_1,
        par_self,
        par_fp,
        par_size,
        var_ret
    );


    // Release cached frame.
    if ( frame_37bce8d2a322291925eb48a1396ad929 == cache_frame_37bce8d2a322291925eb48a1396ad929 )
    {
        Py_DECREF( frame_37bce8d2a322291925eb48a1396ad929 );
    }
    cache_frame_37bce8d2a322291925eb48a1396ad929 = NULL;

    assertFrameObject( frame_37bce8d2a322291925eb48a1396ad929 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_ret );
    tmp_return_value = var_ret;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_43__ensure_read );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)var_ret );
    Py_DECREF( var_ret );
    var_ret = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    Py_XDECREF( var_ret );
    var_ret = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_43__ensure_read );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_44_load( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *var_i = NULL;
    PyObject *var_tag = NULL;
    PyObject *var_typ = NULL;
    PyObject *var_count = NULL;
    PyObject *var_data = NULL;
    PyObject *var_tagname = NULL;
    PyObject *var_typname = NULL;
    PyObject *var_unit_size = NULL;
    PyObject *var_handler = NULL;
    PyObject *var_size = NULL;
    PyObject *var_here = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_msg = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    struct Nuitka_FrameObject *frame_6b83910b66967b3a1559d551a269f208;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    static struct Nuitka_FrameObject *cache_frame_6b83910b66967b3a1559d551a269f208 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6b83910b66967b3a1559d551a269f208, codeobj_6b83910b66967b3a1559d551a269f208, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6b83910b66967b3a1559d551a269f208 = cache_frame_6b83910b66967b3a1559d551a269f208;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6b83910b66967b3a1559d551a269f208 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6b83910b66967b3a1559d551a269f208 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 728;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_reset );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 728;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_2 = par_fp;
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 729;
        tmp_assattr_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 729;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__offset, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 729;
            type_description_1 = "ooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_1 = const_str_plain_H;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        CHECK_OBJECT( par_fp );
        tmp_args_element_name_3 = par_fp;
        tmp_args_element_name_4 = const_int_pos_2;
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 732;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain__ensure_read, call_args );
        }

        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 732;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_subscribed_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_xrange_low_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_xrange_low_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_iter_arg_1 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        Py_DECREF( tmp_xrange_low_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooooo";
                exception_lineno = 732;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_3;
            Py_INCREF( var_i );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__unpack );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 733;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_name_5 = const_str_plain_HHL4s;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        CHECK_OBJECT( par_fp );
        tmp_args_element_name_7 = par_fp;
        tmp_args_element_name_8 = const_int_pos_12;
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 734;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain__ensure_read, call_args );
        }

        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 734;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_4;
        }
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 733;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 733;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 733;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 4 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 733;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 4 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 733;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 2, 4 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 733;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_4, 3, 4 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 733;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_4;
            tmp_tuple_unpack_1__element_4 = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooo";
                    exception_lineno = 733;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooo";
            exception_lineno = 733;
            goto try_except_handler_5;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_4;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_tag;
            var_tag = tmp_assign_source_9;
            Py_INCREF( var_tag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_typ;
            var_typ = tmp_assign_source_10;
            Py_INCREF( var_typ );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_count;
            var_count = tmp_assign_source_11;
            Py_INCREF( var_count );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_4;
        {
            PyObject *old = var_data;
            var_data = tmp_assign_source_12;
            Py_INCREF( var_data );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_mvar_value_1;
        int tmp_truth_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 735;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 735;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_source_name_3;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_9;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 736;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }

            tmp_called_instance_5 = tmp_mvar_value_2;
            CHECK_OBJECT( var_tag );
            tmp_args_element_name_9 = var_tag;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 736;
            {
                PyObject *call_args[] = { tmp_args_element_name_9 };
                tmp_source_name_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_lookup, call_args );
            }

            if ( tmp_source_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 736;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_assign_source_13 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_name );
            Py_DECREF( tmp_source_name_3 );
            if ( tmp_assign_source_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 736;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_tagname;
                var_tagname = tmp_assign_source_13;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_args_element_name_11;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TYPES );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TYPES );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TYPES" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 737;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }

            tmp_called_instance_6 = tmp_mvar_value_3;
            CHECK_OBJECT( var_typ );
            tmp_args_element_name_10 = var_typ;
            tmp_args_element_name_11 = const_str_plain_unknown;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 737;
            {
                PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
                tmp_assign_source_14 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_get, call_args );
            }

            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 737;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_typname;
                var_typname = tmp_assign_source_14;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_kw_name_1;
            tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_3 != NULL );
            tmp_left_name_1 = const_str_digest_5dc413e42e09ea1ee700a04fe4511fc2;
            CHECK_OBJECT( var_tagname );
            tmp_tuple_element_2 = var_tagname;
            tmp_right_name_1 = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_2 = var_tag;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_2 );
            CHECK_OBJECT( var_typname );
            tmp_tuple_element_2 = var_typname;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 2, tmp_tuple_element_2 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_2 = var_typ;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 3, tmp_tuple_element_2 );
            tmp_tuple_element_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 738;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_args_name_1 = PyTuple_New( 1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            tmp_kw_name_1 = PyDict_Copy( const_dict_fb4ddbadafbecbaef28aef989e4b600e );
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 738;
            tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 738;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__load_dispatch );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_typ );
        tmp_subscript_name_2 = var_typ;
        tmp_iter_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_15 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_16 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 742;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
        if ( tmp_assign_source_17 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 742;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_17;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooo";
                    exception_lineno = 742;
                    goto try_except_handler_8;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooo";
            exception_lineno = 742;
            goto try_except_handler_8;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_7;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_6;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_6b83910b66967b3a1559d551a269f208, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != 0 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_6b83910b66967b3a1559d551a269f208, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 743;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_mvar_value_4;
            int tmp_truth_name_2;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 744;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_9;
            }

            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_mvar_value_4 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 744;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_12;
                PyObject *tmp_args_element_name_13;
                tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_4 != NULL );
                tmp_args_element_name_12 = const_str_digest_9dd2b23b42a751dfc44292a9dcc59aba;
                CHECK_OBJECT( var_typ );
                tmp_args_element_name_13 = var_typ;
                frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 745;
                {
                    PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                }

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 745;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_9;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            branch_no_3:;
        }
        goto try_continue_handler_9;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 741;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_6b83910b66967b3a1559d551a269f208->m_frame) frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooooooooo";
        goto try_except_handler_9;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_44_load );
    return NULL;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_3;
    // try continue handler code:
    try_continue_handler_9:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto loop_start_1;
    // End of try:
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_18 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_unit_size;
            var_unit_size = tmp_assign_source_18;
            Py_INCREF( var_unit_size );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_19 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_handler;
            var_handler = tmp_assign_source_19;
            Py_INCREF( var_handler );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( var_count );
        tmp_left_name_2 = var_count;
        CHECK_OBJECT( var_unit_size );
        tmp_right_name_2 = var_unit_size;
        tmp_assign_source_20 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_assign_source_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 747;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = var_size;
            var_size = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_size );
        tmp_compexpr_left_2 = var_size;
        tmp_compexpr_right_2 = const_int_pos_4;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 748;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_called_instance_7;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_7 = par_fp;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 749;
            tmp_assign_source_21 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_tell );
            if ( tmp_assign_source_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 749;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_here;
                var_here = tmp_assign_source_21;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_iter_arg_4;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_args_element_name_15;
            CHECK_OBJECT( par_self );
            tmp_called_instance_8 = par_self;
            tmp_args_element_name_14 = const_str_plain_L;
            CHECK_OBJECT( var_data );
            tmp_args_element_name_15 = var_data;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 750;
            {
                PyObject *call_args[] = { tmp_args_element_name_14, tmp_args_element_name_15 };
                tmp_iter_arg_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain__unpack, call_args );
            }

            if ( tmp_iter_arg_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 750;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_10;
            }
            tmp_assign_source_22 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
            Py_DECREF( tmp_iter_arg_4 );
            if ( tmp_assign_source_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 750;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_tuple_unpack_3__source_iter;
                tmp_tuple_unpack_3__source_iter = tmp_assign_source_22;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_unpack_7;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_7 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_7, 0, 1 );
            if ( tmp_assign_source_23 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooo";
                exception_lineno = 750;
                goto try_except_handler_11;
            }
            {
                PyObject *old = tmp_tuple_unpack_3__element_1;
                tmp_tuple_unpack_3__element_1 = tmp_assign_source_23;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_3;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooo";
                        exception_lineno = 750;
                        goto try_except_handler_11;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooooooooo";
                exception_lineno = 750;
                goto try_except_handler_11;
            }
        }
        goto try_end_6;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_10;
        // End of try:
        try_end_6:;
        goto try_end_7;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_3;
        // End of try:
        try_end_7:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        {
            PyObject *tmp_assign_source_24;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
            tmp_assign_source_24 = tmp_tuple_unpack_3__element_1;
            {
                PyObject *old = var_offset;
                var_offset = tmp_assign_source_24;
                Py_INCREF( var_offset );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_mvar_value_5;
            int tmp_truth_name_3;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 751;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }

            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_mvar_value_5 );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 751;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_5 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_5;
                PyObject *tmp_call_result_4;
                PyObject *tmp_args_name_2;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_4;
                PyObject *tmp_kw_name_2;
                tmp_called_name_5 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_5 != NULL );
                tmp_left_name_3 = const_str_digest_8da48267e4414d92e08b010db823b294;
                CHECK_OBJECT( var_here );
                tmp_tuple_element_4 = var_here;
                tmp_right_name_3 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_4 );
                PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_4 );
                CHECK_OBJECT( var_offset );
                tmp_tuple_element_4 = var_offset;
                Py_INCREF( tmp_tuple_element_4 );
                PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_4 );
                tmp_tuple_element_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                Py_DECREF( tmp_right_name_3 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 752;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                tmp_args_name_2 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
                tmp_kw_name_2 = PyDict_Copy( const_dict_fb4ddbadafbecbaef28aef989e4b600e );
                frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 752;
                tmp_call_result_4 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_2, tmp_kw_name_2 );
                Py_DECREF( tmp_args_name_2 );
                Py_DECREF( tmp_kw_name_2 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 752;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            branch_no_5:;
        }
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_16;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_9 = par_fp;
            CHECK_OBJECT( var_offset );
            tmp_args_element_name_16 = var_offset;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 754;
            {
                PyObject *call_args[] = { tmp_args_element_name_16 };
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_seek, call_args );
            }

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 754;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_instance_10;
            PyObject *tmp_mvar_value_6;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_args_element_name_18;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFile );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFile );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFile" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 755;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }

            tmp_called_instance_10 = tmp_mvar_value_6;
            CHECK_OBJECT( par_fp );
            tmp_args_element_name_17 = par_fp;
            CHECK_OBJECT( var_size );
            tmp_args_element_name_18 = var_size;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 755;
            {
                PyObject *call_args[] = { tmp_args_element_name_17, tmp_args_element_name_18 };
                tmp_assign_source_25 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain__safe_read, call_args );
            }

            if ( tmp_assign_source_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 755;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_data;
                assert( old != NULL );
                var_data = tmp_assign_source_25;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_11;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_19;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_11 = par_fp;
            CHECK_OBJECT( var_here );
            tmp_args_element_name_19 = var_here;
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 756;
            {
                PyObject *call_args[] = { tmp_args_element_name_19 };
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_seek, call_args );
            }

            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 756;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        goto branch_end_4;
        branch_no_4:;
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_start_name_1;
            PyObject *tmp_stop_name_1;
            PyObject *tmp_step_name_1;
            CHECK_OBJECT( var_data );
            tmp_subscribed_name_3 = var_data;
            tmp_start_name_1 = Py_None;
            CHECK_OBJECT( var_size );
            tmp_stop_name_1 = var_size;
            tmp_step_name_1 = Py_None;
            tmp_subscript_name_3 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
            assert( !(tmp_subscript_name_3 == NULL) );
            tmp_assign_source_26 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            Py_DECREF( tmp_subscript_name_3 );
            if ( tmp_assign_source_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 758;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_data;
                assert( old != NULL );
                var_data = tmp_assign_source_26;
                Py_DECREF( old );
            }

        }
        branch_end_4:;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_data );
        tmp_len_arg_1 = var_data;
        tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 760;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( var_size );
        tmp_compexpr_right_3 = var_size;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 760;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_call_result_7;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_left_name_4;
            PyObject *tmp_right_name_4;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_len_arg_2;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_warnings );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 761;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }

            tmp_source_name_5 = tmp_mvar_value_7;
            tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_warn );
            if ( tmp_called_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 761;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_left_name_4 = const_str_digest_11f5dbf60ebb415ec7395c7fe32c31a5;
            CHECK_OBJECT( var_size );
            tmp_tuple_element_5 = var_size;
            tmp_right_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_5 );
            CHECK_OBJECT( var_data );
            tmp_len_arg_2 = var_data;
            tmp_tuple_element_5 = BUILTIN_LEN( tmp_len_arg_2 );
            if ( tmp_tuple_element_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_right_name_4 );

                exception_lineno = 763;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_5 );
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_5 = var_tag;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_4, 2, tmp_tuple_element_5 );
            tmp_args_element_name_20 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
            Py_DECREF( tmp_right_name_4 );
            if ( tmp_args_element_name_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_6 );

                exception_lineno = 761;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 761;
            {
                PyObject *call_args[] = { tmp_args_element_name_20 };
                tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_20 );
            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 761;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_7 );
        }
        goto loop_start_1;
        branch_no_6:;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( var_data );
        tmp_operand_name_1 = var_data;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 766;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_7 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        goto loop_start_1;
        branch_no_7:;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_6;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( var_data );
        tmp_ass_subvalue_1 = var_data;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__tagdata );
        if ( tmp_ass_subscribed_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 769;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( var_tag );
        tmp_ass_subscript_1 = var_tag;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscribed_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 769;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT( var_typ );
        tmp_ass_subvalue_2 = var_typ;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tagtype );
        if ( tmp_ass_subscribed_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 770;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( var_tag );
        tmp_ass_subscript_2 = var_tag;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
        Py_DECREF( tmp_ass_subscribed_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 770;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_mvar_value_8;
        int tmp_truth_name_4;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 772;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_mvar_value_8 );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 772;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_8 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var_size );
            tmp_compexpr_left_4 = var_size;
            tmp_compexpr_right_4 = const_int_pos_32;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 773;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_call_result_8;
                PyObject *tmp_args_element_name_21;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                tmp_called_name_7 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_7 != NULL );
                tmp_left_name_5 = const_str_digest_60f4016fa916489e598e8b72100aa5b5;
                CHECK_OBJECT( var_size );
                tmp_right_name_5 = var_size;
                tmp_args_element_name_21 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
                if ( tmp_args_element_name_21 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 774;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 774;
                {
                    PyObject *call_args[] = { tmp_args_element_name_21 };
                    tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
                }

                Py_DECREF( tmp_args_element_name_21 );
                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 774;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            goto branch_end_9;
            branch_no_9:;
            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_call_result_9;
                PyObject *tmp_args_element_name_22;
                PyObject *tmp_args_element_name_23;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                tmp_called_name_8 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_8 != NULL );
                tmp_args_element_name_22 = const_str_digest_9e78b0491fb8e5d68c5f1c8254dd9c79;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_4 = par_self;
                CHECK_OBJECT( var_tag );
                tmp_subscript_name_4 = var_tag;
                tmp_args_element_name_23 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                if ( tmp_args_element_name_23 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 776;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 776;
                {
                    PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23 };
                    tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
                }

                Py_DECREF( tmp_args_element_name_23 );
                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 776;
                    type_description_1 = "ooooooooooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            branch_end_9:;
        }
        branch_no_8:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 732;
        type_description_1 = "ooooooooooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_2;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_iter_arg_5;
        PyObject *tmp_called_name_9;
        PyObject *tmp_source_name_8;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__unpack );
        if ( tmp_called_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_args_element_name_24 = const_str_plain_L;
        CHECK_OBJECT( par_self );
        tmp_called_instance_12 = par_self;
        CHECK_OBJECT( par_fp );
        tmp_args_element_name_26 = par_fp;
        tmp_args_element_name_27 = const_int_pos_4;
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 778;
        {
            PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27 };
            tmp_args_element_name_25 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain__ensure_read, call_args );
        }

        if ( tmp_args_element_name_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_9 );

            exception_lineno = 778;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_12;
        }
        frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 778;
        {
            PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25 };
            tmp_iter_arg_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
        }

        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_25 );
        if ( tmp_iter_arg_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_assign_source_27 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
        Py_DECREF( tmp_iter_arg_5 );
        if ( tmp_assign_source_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_12;
        }
        assert( tmp_tuple_unpack_4__source_iter == NULL );
        tmp_tuple_unpack_4__source_iter = tmp_assign_source_27;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_unpack_8;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_28 = UNPACK_NEXT( tmp_unpack_8, 0, 1 );
        if ( tmp_assign_source_28 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooo";
            exception_lineno = 778;
            goto try_except_handler_13;
        }
        assert( tmp_tuple_unpack_4__element_1 == NULL );
        tmp_tuple_unpack_4__element_1 = tmp_assign_source_28;
    }
    {
        PyObject *tmp_iterator_name_4;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooo";
                    exception_lineno = 778;
                    goto try_except_handler_13;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooo";
            exception_lineno = 778;
            goto try_except_handler_13;
        }
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
    Py_DECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto try_except_handler_12;
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
    Py_DECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
        tmp_assattr_name_2 = tmp_tuple_unpack_4__element_1;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_next, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_12;
        }
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto try_except_handler_2;
    // End of try:
    try_end_10:;
    goto try_end_11;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_12 == NULL )
    {
        exception_keeper_tb_12 = MAKE_TRACEBACK( frame_6b83910b66967b3a1559d551a269f208, exception_keeper_lineno_12 );
    }
    else if ( exception_keeper_lineno_12 != 0 )
    {
        exception_keeper_tb_12 = ADD_TRACEBACK( exception_keeper_tb_12, frame_6b83910b66967b3a1559d551a269f208, exception_keeper_lineno_12 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12 );
    PyException_SetTraceback( exception_keeper_value_12, (PyObject *)exception_keeper_tb_12 );
    PUBLISH_EXCEPTION( &exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_5 = PyExc_IOError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 779;
            type_description_1 = "ooooooooooooooo";
            goto try_except_handler_14;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_29;
            tmp_assign_source_29 = EXC_VALUE(PyThreadState_GET());
            assert( var_msg == NULL );
            Py_INCREF( tmp_assign_source_29 );
            var_msg = tmp_assign_source_29;
        }
        // Tried code:
        {
            PyObject *tmp_called_name_10;
            PyObject *tmp_source_name_9;
            PyObject *tmp_mvar_value_9;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_28;
            PyObject *tmp_unicode_arg_1;
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_warnings );

            if (unlikely( tmp_mvar_value_9 == NULL ))
            {
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
            }

            if ( tmp_mvar_value_9 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 780;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_15;
            }

            tmp_source_name_9 = tmp_mvar_value_9;
            tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_warn );
            if ( tmp_called_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 780;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_15;
            }
            CHECK_OBJECT( var_msg );
            tmp_unicode_arg_1 = var_msg;
            tmp_args_element_name_28 = PyObject_Unicode( tmp_unicode_arg_1 );
            if ( tmp_args_element_name_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_10 );

                exception_lineno = 780;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_15;
            }
            frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = 780;
            {
                PyObject *call_args[] = { tmp_args_element_name_28 };
                tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
            }

            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_args_element_name_28 );
            if ( tmp_call_result_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 780;
                type_description_1 = "ooooooooooooooo";
                goto try_except_handler_15;
            }
            Py_DECREF( tmp_call_result_10 );
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_15;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_44_load );
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        Py_XDECREF( var_msg );
        var_msg = NULL;

        goto try_return_handler_14;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( var_msg );
        var_msg = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_14;
        // End of try:
        goto branch_end_10;
        branch_no_10:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 731;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_6b83910b66967b3a1559d551a269f208->m_frame) frame_6b83910b66967b3a1559d551a269f208->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooooooooo";
        goto try_except_handler_14;
        branch_end_10:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_44_load );
    return NULL;
    // Return handler code:
    try_return_handler_14:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_11:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b83910b66967b3a1559d551a269f208 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b83910b66967b3a1559d551a269f208 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b83910b66967b3a1559d551a269f208 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6b83910b66967b3a1559d551a269f208, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6b83910b66967b3a1559d551a269f208->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6b83910b66967b3a1559d551a269f208, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6b83910b66967b3a1559d551a269f208,
        type_description_1,
        par_self,
        par_fp,
        var_i,
        var_tag,
        var_typ,
        var_count,
        var_data,
        var_tagname,
        var_typname,
        var_unit_size,
        var_handler,
        var_size,
        var_here,
        var_offset,
        var_msg
    );


    // Release cached frame.
    if ( frame_6b83910b66967b3a1559d551a269f208 == cache_frame_6b83910b66967b3a1559d551a269f208 )
    {
        Py_DECREF( frame_6b83910b66967b3a1559d551a269f208 );
    }
    cache_frame_6b83910b66967b3a1559d551a269f208 = NULL;

    assertFrameObject( frame_6b83910b66967b3a1559d551a269f208 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_44_load );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_tagname );
    var_tagname = NULL;

    Py_XDECREF( var_typname );
    var_typname = NULL;

    Py_XDECREF( var_unit_size );
    var_unit_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_here );
    var_here = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_tagname );
    var_tagname = NULL;

    Py_XDECREF( var_typname );
    var_typname = NULL;

    Py_XDECREF( var_unit_size );
    var_unit_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_here );
    var_here = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_44_load );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_45_save( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *var_entries = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_stripoffsets = NULL;
    PyObject *var_tag = NULL;
    PyObject *var_value = NULL;
    PyObject *var_typ = NULL;
    PyObject *var_values = NULL;
    PyObject *var_data = NULL;
    PyObject *var_tagname = NULL;
    PyObject *var_typname = NULL;
    PyObject *var_count = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__element_4 = NULL;
    PyObject *tmp_tuple_unpack_2__element_5 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__element_3 = NULL;
    PyObject *tmp_tuple_unpack_3__element_4 = NULL;
    PyObject *tmp_tuple_unpack_3__element_5 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__element_4 = NULL;
    PyObject *tmp_tuple_unpack_4__element_5 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3548084e462e583b5bdd1d2b003a978d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3548084e462e583b5bdd1d2b003a978d = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3548084e462e583b5bdd1d2b003a978d, codeobj_3548084e462e583b5bdd1d2b003a978d, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3548084e462e583b5bdd1d2b003a978d = cache_frame_3548084e462e583b5bdd1d2b003a978d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3548084e462e583b5bdd1d2b003a978d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3548084e462e583b5bdd1d2b003a978d ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_1 = par_fp;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 785;
        tmp_compexpr_left_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 785;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 785;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_right_name_1;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( par_fp );
            tmp_source_name_1 = par_fp;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 787;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__prefix );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 787;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 787;
            tmp_right_name_1 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_2, const_str_plain__pack, &PyTuple_GET_ITEM( const_tuple_str_plain_HL_int_pos_42_int_pos_8_tuple, 0 ) );

            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_left_name_1 );

                exception_lineno = 787;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 787;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 787;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 787;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_fp );
        tmp_source_name_3 = par_fp;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_write );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__pack );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = const_str_plain_H;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__tags_v2 );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_4 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 790;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 790;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 790;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_entries == NULL );
        var_entries = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_right_name_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_right_name_3;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_3 = par_fp;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 793;
        tmp_left_name_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_tell );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__tags_v2 );
        if ( tmp_len_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_4 = BUILTIN_LEN( tmp_len_arg_2 );
        Py_DECREF( tmp_len_arg_2 );
        if ( tmp_left_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_int_pos_12;
        tmp_right_name_2 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_4 );
        if ( tmp_right_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_3, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_3 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_4 = const_int_pos_4;
        tmp_assign_source_2 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_2, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 793;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_offset == NULL );
        var_offset = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        assert( var_stripoffsets == NULL );
        Py_INCREF( tmp_assign_source_3 );
        var_stripoffsets = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_7;
        tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_sorted );
        assert( tmp_called_name_4 != NULL );
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__tags_v2 );
        if ( tmp_called_instance_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 798;
        tmp_args_element_name_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_items );
        Py_DECREF( tmp_called_instance_4 );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 798;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_args_element_name_5 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_4;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 798;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 798;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 798;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooo";
                    exception_lineno = 798;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooo";
            exception_lineno = 798;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_tag;
            var_tag = tmp_assign_source_9;
            Py_INCREF( var_tag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_10;
            Py_INCREF( var_value );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( var_tag );
        tmp_compexpr_left_2 = var_tag;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 799;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_compexpr_right_2 = tmp_mvar_value_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 799;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_len_arg_3;
            CHECK_OBJECT( var_entries );
            tmp_len_arg_3 = var_entries;
            tmp_assign_source_11 = BUILTIN_LEN( tmp_len_arg_3 );
            assert( !(tmp_assign_source_11 == NULL) );
            {
                PyObject *old = var_stripoffsets;
                var_stripoffsets = tmp_assign_source_11;
                Py_XDECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_8;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_tagtype );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 801;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_tag );
        tmp_args_element_name_6 = var_tag;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 801;
        {
            PyObject *call_args[] = { tmp_args_element_name_6 };
            tmp_assign_source_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_called_instance_5 );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 801;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_typ;
            var_typ = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_mvar_value_2;
        int tmp_truth_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 802;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_2 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 802;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_left_name_5;
            PyObject *tmp_right_name_5;
            PyObject *tmp_tuple_element_1;
            tmp_called_name_5 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_5 != NULL );
            tmp_left_name_5 = const_str_digest_0c43fa8f0e7f9c1bc3c21f5c3151656f;
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_1 = var_tag;
            tmp_right_name_5 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_1 = var_typ;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( var_value );
            tmp_tuple_element_1 = var_value;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_5, 2, tmp_tuple_element_1 );
            tmp_args_element_name_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
            Py_DECREF( tmp_right_name_5 );
            if ( tmp_args_element_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 803;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 803;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_args_element_name_7 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 803;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_13;
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT( var_value );
        tmp_isinstance_inst_1 = var_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyTuple_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 804;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( var_value );
        tmp_assign_source_13 = var_value;
        Py_INCREF( tmp_assign_source_13 );
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( var_value );
        tmp_tuple_element_2 = var_value;
        tmp_assign_source_13 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_13, 0, tmp_tuple_element_2 );
        condexpr_end_1:;
        {
            PyObject *old = var_values;
            var_values = tmp_assign_source_13;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_9;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__write_dispatch );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 805;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_typ );
        tmp_subscript_name_1 = var_typ;
        tmp_dircall_arg1_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 805;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_tuple_element_3 = par_self;
        tmp_dircall_arg2_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_3 );
        CHECK_OBJECT( var_values );
        tmp_dircall_arg3_1 = var_values;
        Py_INCREF( tmp_dircall_arg3_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_14 = impl___internal__$$$function_5_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 805;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_data;
            var_data = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_mvar_value_3;
        int tmp_truth_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 806;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_mvar_value_3 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 806;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_5 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_source_name_10;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_8;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 807;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }

            tmp_called_instance_6 = tmp_mvar_value_4;
            CHECK_OBJECT( var_tag );
            tmp_args_element_name_8 = var_tag;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 807;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_source_name_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_lookup, call_args );
            }

            if ( tmp_source_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 807;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_15 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_name );
            Py_DECREF( tmp_source_name_10 );
            if ( tmp_assign_source_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 807;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_tagname;
                var_tagname = tmp_assign_source_15;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_args_element_name_10;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TYPES );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TYPES );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TYPES" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 808;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }

            tmp_called_instance_7 = tmp_mvar_value_5;
            CHECK_OBJECT( var_typ );
            tmp_args_element_name_9 = var_typ;
            tmp_args_element_name_10 = const_str_plain_unknown;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 808;
            {
                PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
                tmp_assign_source_16 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_get, call_args );
            }

            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 808;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_typname;
                var_typname = tmp_assign_source_16;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_left_name_6;
            PyObject *tmp_right_name_6;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_kw_name_1;
            tmp_called_name_6 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_6 != NULL );
            tmp_left_name_6 = const_str_digest_4d6f530e35101cfd8d26d52172fe8b24;
            CHECK_OBJECT( var_tagname );
            tmp_tuple_element_5 = var_tagname;
            tmp_right_name_6 = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_5 );
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_5 = var_tag;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_5 );
            CHECK_OBJECT( var_typname );
            tmp_tuple_element_5 = var_typname;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_6, 2, tmp_tuple_element_5 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_5 = var_typ;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_right_name_6, 3, tmp_tuple_element_5 );
            tmp_tuple_element_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
            Py_DECREF( tmp_right_name_6 );
            if ( tmp_tuple_element_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 809;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_args_name_1 = PyTuple_New( 1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_4 );
            tmp_kw_name_1 = PyDict_Copy( const_dict_fb4ddbadafbecbaef28aef989e4b600e );
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 809;
            tmp_call_result_4 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 809;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_len_arg_4;
            CHECK_OBJECT( var_data );
            tmp_len_arg_4 = var_data;
            tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_4 );
            if ( tmp_compexpr_left_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 811;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_compexpr_right_3 = const_int_pos_16;
            tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_left_3 );
            assert( !(tmp_res == -1) );
            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                PyObject *tmp_len_arg_5;
                tmp_called_name_7 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_7 != NULL );
                tmp_left_name_7 = const_str_digest_60f4016fa916489e598e8b72100aa5b5;
                CHECK_OBJECT( var_data );
                tmp_len_arg_5 = var_data;
                tmp_right_name_7 = BUILTIN_LEN( tmp_len_arg_5 );
                if ( tmp_right_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 812;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_args_element_name_11 = BINARY_OPERATION_REMAINDER( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_args_element_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 812;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 812;
                {
                    PyObject *call_args[] = { tmp_args_element_name_11 };
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
                }

                Py_DECREF( tmp_args_element_name_11 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 812;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            goto branch_end_5;
            branch_no_5:;
            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_12;
                PyObject *tmp_args_element_name_13;
                tmp_called_name_8 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_8 != NULL );
                tmp_args_element_name_12 = const_str_digest_9e78b0491fb8e5d68c5f1c8254dd9c79;
                CHECK_OBJECT( var_values );
                tmp_args_element_name_13 = var_values;
                frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 814;
                {
                    PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
                    tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
                }

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 814;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_end_5:;
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_list_element_1;
        PyObject *tmp_source_name_11;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_source_name_12;
        PyObject *tmp_mvar_value_7;
        CHECK_OBJECT( var_typ );
        tmp_compexpr_left_4 = var_typ;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 817;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_11 = tmp_mvar_value_6;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_ASCII );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_4 = PyList_New( 2 );
        PyList_SET_ITEM( tmp_compexpr_right_4, 0, tmp_list_element_1 );
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
        }

        if ( tmp_mvar_value_7 == NULL )
        {
            Py_DECREF( tmp_compexpr_right_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 817;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_12 = tmp_mvar_value_7;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_UNDEFINED );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_right_4 );

            exception_lineno = 817;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        PyList_SET_ITEM( tmp_compexpr_right_4, 1, tmp_list_element_1 );
        tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
        Py_DECREF( tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_7 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_len_arg_6;
            CHECK_OBJECT( var_data );
            tmp_len_arg_6 = var_data;
            tmp_assign_source_17 = BUILTIN_LEN( tmp_len_arg_6 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 818;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_count;
                var_count = tmp_assign_source_17;
                Py_XDECREF( old );
            }

        }
        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_len_arg_7;
            CHECK_OBJECT( var_values );
            tmp_len_arg_7 = var_values;
            tmp_assign_source_18 = BUILTIN_LEN( tmp_len_arg_7 );
            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 820;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_count;
                var_count = tmp_assign_source_18;
                Py_XDECREF( old );
            }

        }
        branch_end_6:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_len_arg_8;
        CHECK_OBJECT( var_data );
        tmp_len_arg_8 = var_data;
        tmp_compexpr_left_5 = BUILTIN_LEN( tmp_len_arg_8 );
        if ( tmp_compexpr_left_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 822;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_5 = const_int_pos_4;
        tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
        Py_DECREF( tmp_compexpr_left_5 );
        assert( !(tmp_res == -1) );
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_13;
            PyObject *tmp_call_result_7;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_called_instance_8;
            CHECK_OBJECT( var_entries );
            tmp_source_name_13 = var_entries;
            tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_append );
            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 823;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_6 = var_tag;
            tmp_args_element_name_14 = PyTuple_New( 5 );
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_element_name_14, 0, tmp_tuple_element_6 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_6 = var_typ;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_element_name_14, 1, tmp_tuple_element_6 );
            CHECK_OBJECT( var_count );
            tmp_tuple_element_6 = var_count;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_element_name_14, 2, tmp_tuple_element_6 );
            CHECK_OBJECT( var_data );
            tmp_called_instance_8 = var_data;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 823;
            tmp_tuple_element_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_ljust, &PyTuple_GET_ITEM( const_tuple_int_pos_4_bytes_chr_0_tuple, 0 ) );

            if ( tmp_tuple_element_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_9 );
                Py_DECREF( tmp_args_element_name_14 );

                exception_lineno = 823;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            PyTuple_SET_ITEM( tmp_args_element_name_14, 3, tmp_tuple_element_6 );
            tmp_tuple_element_6 = const_bytes_empty;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_element_name_14, 4, tmp_tuple_element_6 );
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 823;
            {
                PyObject *call_args[] = { tmp_args_element_name_14 };
                tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
            }

            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_element_name_14 );
            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 823;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_7 );
        }
        goto branch_end_7;
        branch_no_7:;
        {
            PyObject *tmp_called_name_10;
            PyObject *tmp_source_name_14;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_15;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_called_name_11;
            PyObject *tmp_source_name_15;
            PyObject *tmp_args_element_name_16;
            PyObject *tmp_args_element_name_17;
            CHECK_OBJECT( var_entries );
            tmp_source_name_14 = var_entries;
            tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_append );
            if ( tmp_called_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 825;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_7 = var_tag;
            tmp_args_element_name_15 = PyTuple_New( 5 );
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_element_name_15, 0, tmp_tuple_element_7 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_7 = var_typ;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_element_name_15, 1, tmp_tuple_element_7 );
            CHECK_OBJECT( var_count );
            tmp_tuple_element_7 = var_count;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_element_name_15, 2, tmp_tuple_element_7 );
            CHECK_OBJECT( par_self );
            tmp_source_name_15 = par_self;
            tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__pack );
            if ( tmp_called_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_10 );
                Py_DECREF( tmp_args_element_name_15 );

                exception_lineno = 825;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_args_element_name_16 = const_str_plain_L;
            if ( var_offset == NULL )
            {
                Py_DECREF( tmp_called_name_10 );
                Py_DECREF( tmp_args_element_name_15 );
                Py_DECREF( tmp_called_name_11 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "offset" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 825;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }

            tmp_args_element_name_17 = var_offset;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 825;
            {
                PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17 };
                tmp_tuple_element_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, call_args );
            }

            Py_DECREF( tmp_called_name_11 );
            if ( tmp_tuple_element_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_10 );
                Py_DECREF( tmp_args_element_name_15 );

                exception_lineno = 825;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            PyTuple_SET_ITEM( tmp_args_element_name_15, 3, tmp_tuple_element_7 );
            CHECK_OBJECT( var_data );
            tmp_tuple_element_7 = var_data;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_element_name_15, 4, tmp_tuple_element_7 );
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 825;
            {
                PyObject *call_args[] = { tmp_args_element_name_15 };
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
            }

            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_args_element_name_15 );
            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 825;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_left_name_8;
            PyObject *tmp_right_name_8;
            PyObject *tmp_left_name_9;
            PyObject *tmp_left_name_10;
            PyObject *tmp_left_name_11;
            PyObject *tmp_len_arg_9;
            PyObject *tmp_right_name_9;
            PyObject *tmp_right_name_10;
            PyObject *tmp_right_name_11;
            if ( var_offset == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "offset" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 827;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }

            tmp_left_name_8 = var_offset;
            CHECK_OBJECT( var_data );
            tmp_len_arg_9 = var_data;
            tmp_left_name_11 = BUILTIN_LEN( tmp_len_arg_9 );
            if ( tmp_left_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 827;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_right_name_9 = const_int_pos_1;
            tmp_left_name_10 = BINARY_OPERATION_ADD_LONG_LONG( tmp_left_name_11, tmp_right_name_9 );
            Py_DECREF( tmp_left_name_11 );
            assert( !(tmp_left_name_10 == NULL) );
            tmp_right_name_10 = const_int_pos_2;
            tmp_left_name_9 = BINARY_OPERATION_FLOORDIV( tmp_left_name_10, tmp_right_name_10 );
            Py_DECREF( tmp_left_name_10 );
            if ( tmp_left_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 827;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_right_name_11 = const_int_pos_2;
            tmp_right_name_8 = BINARY_OPERATION_MUL( tmp_left_name_9, tmp_right_name_11 );
            Py_DECREF( tmp_left_name_9 );
            if ( tmp_right_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 827;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_8, tmp_right_name_8 );
            Py_DECREF( tmp_right_name_8 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 827;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_19 = tmp_left_name_8;
            var_offset = tmp_assign_source_19;

        }
        branch_end_7:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 798;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        if ( var_stripoffsets == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stripoffsets" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 830;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_6 = var_stripoffsets;
        tmp_compexpr_right_6 = Py_None;
        tmp_condition_result_9 = ( tmp_compexpr_left_6 != tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        // Tried code:
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( var_entries );
            tmp_subscribed_name_2 = var_entries;
            if ( var_stripoffsets == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stripoffsets" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 831;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_subscript_name_2 = var_stripoffsets;
            tmp_iter_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_iter_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 831;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_assign_source_20 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
            Py_DECREF( tmp_iter_arg_3 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 831;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_2__source_iter == NULL );
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_20;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_3, 0, 5 );
            if ( tmp_assign_source_21 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_2__element_1 == NULL );
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_21;
        }
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_unpack_4;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_4, 1, 5 );
            if ( tmp_assign_source_22 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_2__element_2 == NULL );
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_22;
        }
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_unpack_5;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_5, 2, 5 );
            if ( tmp_assign_source_23 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_2__element_3 == NULL );
            tmp_tuple_unpack_2__element_3 = tmp_assign_source_23;
        }
        {
            PyObject *tmp_assign_source_24;
            PyObject *tmp_unpack_6;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_6 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_6, 3, 5 );
            if ( tmp_assign_source_24 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_2__element_4 == NULL );
            tmp_tuple_unpack_2__element_4 = tmp_assign_source_24;
        }
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_unpack_7;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_7 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_7, 4, 5 );
            if ( tmp_assign_source_25 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_2__element_5 == NULL );
            tmp_tuple_unpack_2__element_5 = tmp_assign_source_25;
        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooo";
                        exception_lineno = 831;
                        goto try_except_handler_6;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooooooo";
                exception_lineno = 831;
                goto try_except_handler_6;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_5;
        // End of try:
        try_end_4:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_3 );
        tmp_tuple_unpack_2__element_3 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_4 );
        tmp_tuple_unpack_2__element_4 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_5 );
        tmp_tuple_unpack_2__element_5 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_1;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        {
            PyObject *tmp_assign_source_26;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
            tmp_assign_source_26 = tmp_tuple_unpack_2__element_1;
            {
                PyObject *old = var_tag;
                var_tag = tmp_assign_source_26;
                Py_INCREF( var_tag );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_27;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
            tmp_assign_source_27 = tmp_tuple_unpack_2__element_2;
            {
                PyObject *old = var_typ;
                var_typ = tmp_assign_source_27;
                Py_INCREF( var_typ );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        {
            PyObject *tmp_assign_source_28;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
            tmp_assign_source_28 = tmp_tuple_unpack_2__element_3;
            {
                PyObject *old = var_count;
                var_count = tmp_assign_source_28;
                Py_INCREF( var_count );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_3 );
        tmp_tuple_unpack_2__element_3 = NULL;

        {
            PyObject *tmp_assign_source_29;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_4 );
            tmp_assign_source_29 = tmp_tuple_unpack_2__element_4;
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_29;
                Py_INCREF( var_value );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_4 );
        tmp_tuple_unpack_2__element_4 = NULL;

        {
            PyObject *tmp_assign_source_30;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_5 );
            tmp_assign_source_30 = tmp_tuple_unpack_2__element_5;
            {
                PyObject *old = var_data;
                var_data = tmp_assign_source_30;
                Py_INCREF( var_data );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_5 );
        tmp_tuple_unpack_2__element_5 = NULL;

        {
            nuitka_bool tmp_condition_result_10;
            int tmp_truth_name_3;
            CHECK_OBJECT( var_data );
            tmp_truth_name_3 = CHECK_IF_TRUE( var_data );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 832;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_3e8740f428c752cc4b75714a1531291f;
                frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 833;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_NotImplementedError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 833;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_9:;
        }
        {
            PyObject *tmp_assign_source_31;
            PyObject *tmp_called_name_12;
            PyObject *tmp_source_name_16;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_left_name_12;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_called_instance_9;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_right_name_12;
            CHECK_OBJECT( par_self );
            tmp_source_name_16 = par_self;
            tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__pack );
            if ( tmp_called_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_18 = const_str_plain_L;
            CHECK_OBJECT( par_self );
            tmp_called_instance_9 = par_self;
            tmp_args_element_name_20 = const_str_plain_L;
            CHECK_OBJECT( var_value );
            tmp_args_element_name_21 = var_value;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 835;
            {
                PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21 };
                tmp_subscribed_name_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain__unpack, call_args );
            }

            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_12 );

                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_3 = const_int_0;
            tmp_left_name_12 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_left_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_12 );

                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            if ( var_offset == NULL )
            {
                Py_DECREF( tmp_called_name_12 );
                Py_DECREF( tmp_left_name_12 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "offset" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_right_name_12 = var_offset;
            tmp_args_element_name_19 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_12, tmp_right_name_12 );
            Py_DECREF( tmp_left_name_12 );
            if ( tmp_args_element_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_12 );

                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 835;
            {
                PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19 };
                tmp_assign_source_31 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, call_args );
            }

            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_args_element_name_19 );
            if ( tmp_assign_source_31 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 835;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_value;
                assert( old != NULL );
                var_value = tmp_assign_source_31;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_tuple_element_8;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( var_tag );
            tmp_tuple_element_8 = var_tag;
            tmp_ass_subvalue_1 = PyTuple_New( 5 );
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_ass_subvalue_1, 0, tmp_tuple_element_8 );
            CHECK_OBJECT( var_typ );
            tmp_tuple_element_8 = var_typ;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_ass_subvalue_1, 1, tmp_tuple_element_8 );
            CHECK_OBJECT( var_count );
            tmp_tuple_element_8 = var_count;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_ass_subvalue_1, 2, tmp_tuple_element_8 );
            CHECK_OBJECT( var_value );
            tmp_tuple_element_8 = var_value;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_ass_subvalue_1, 3, tmp_tuple_element_8 );
            CHECK_OBJECT( var_data );
            tmp_tuple_element_8 = var_data;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_ass_subvalue_1, 4, tmp_tuple_element_8 );
            CHECK_OBJECT( var_entries );
            tmp_ass_subscribed_1 = var_entries;
            if ( var_stripoffsets == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_1 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stripoffsets" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 836;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_1 = var_stripoffsets;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 836;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT( var_entries );
        tmp_iter_arg_4 = var_entries;
        tmp_assign_source_32 = MAKE_ITERATOR( tmp_iter_arg_4 );
        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 839;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_2__for_iterator == NULL );
        tmp_for_loop_2__for_iterator = tmp_assign_source_32;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_33;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_33 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_33 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 839;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_33;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_iter_arg_5;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_iter_arg_5 = tmp_for_loop_2__iter_value;
        tmp_assign_source_34 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
        if ( tmp_assign_source_34 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 839;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__source_iter;
            tmp_tuple_unpack_3__source_iter = tmp_assign_source_34;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_unpack_8;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_8 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_35 = UNPACK_NEXT( tmp_unpack_8, 0, 5 );
        if ( tmp_assign_source_35 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_1;
            tmp_tuple_unpack_3__element_1 = tmp_assign_source_35;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_unpack_9;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_9 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_36 = UNPACK_NEXT( tmp_unpack_9, 1, 5 );
        if ( tmp_assign_source_36 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_2;
            tmp_tuple_unpack_3__element_2 = tmp_assign_source_36;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_unpack_10;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_10 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_37 = UNPACK_NEXT( tmp_unpack_10, 2, 5 );
        if ( tmp_assign_source_37 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_3;
            tmp_tuple_unpack_3__element_3 = tmp_assign_source_37;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_unpack_11;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_11 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_38 = UNPACK_NEXT( tmp_unpack_11, 3, 5 );
        if ( tmp_assign_source_38 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_4;
            tmp_tuple_unpack_3__element_4 = tmp_assign_source_38;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_unpack_12;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_12 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_39 = UNPACK_NEXT( tmp_unpack_12, 4, 5 );
        if ( tmp_assign_source_39 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_3__element_5;
            tmp_tuple_unpack_3__element_5 = tmp_assign_source_39;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_3;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooo";
                    exception_lineno = 839;
                    goto try_except_handler_9;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooo";
            exception_lineno = 839;
            goto try_except_handler_9;
        }
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_8;
    // End of try:
    try_end_6:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_3 );
    tmp_tuple_unpack_3__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_4 );
    tmp_tuple_unpack_3__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_3__element_5 );
    tmp_tuple_unpack_3__element_5 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_7;
    // End of try:
    try_end_7:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    {
        PyObject *tmp_assign_source_40;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
        tmp_assign_source_40 = tmp_tuple_unpack_3__element_1;
        {
            PyObject *old = var_tag;
            var_tag = tmp_assign_source_40;
            Py_INCREF( var_tag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    {
        PyObject *tmp_assign_source_41;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
        tmp_assign_source_41 = tmp_tuple_unpack_3__element_2;
        {
            PyObject *old = var_typ;
            var_typ = tmp_assign_source_41;
            Py_INCREF( var_typ );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    {
        PyObject *tmp_assign_source_42;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_3 );
        tmp_assign_source_42 = tmp_tuple_unpack_3__element_3;
        {
            PyObject *old = var_count;
            var_count = tmp_assign_source_42;
            Py_INCREF( var_count );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_3__element_3 );
    tmp_tuple_unpack_3__element_3 = NULL;

    {
        PyObject *tmp_assign_source_43;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_4 );
        tmp_assign_source_43 = tmp_tuple_unpack_3__element_4;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_43;
            Py_INCREF( var_value );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_3__element_4 );
    tmp_tuple_unpack_3__element_4 = NULL;

    {
        PyObject *tmp_assign_source_44;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_5 );
        tmp_assign_source_44 = tmp_tuple_unpack_3__element_5;
        {
            PyObject *old = var_data;
            var_data = tmp_assign_source_44;
            Py_INCREF( var_data );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_3__element_5 );
    tmp_tuple_unpack_3__element_5 = NULL;

    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 840;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_left_7 = tmp_mvar_value_8;
        tmp_compexpr_right_7 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 840;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_called_name_13;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_22;
            PyObject *tmp_args_element_name_23;
            PyObject *tmp_args_element_name_24;
            PyObject *tmp_args_element_name_25;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_args_element_name_26;
            PyObject *tmp_operand_name_2;
            tmp_called_name_13 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_13 != NULL );
            CHECK_OBJECT( var_tag );
            tmp_args_element_name_22 = var_tag;
            CHECK_OBJECT( var_typ );
            tmp_args_element_name_23 = var_typ;
            CHECK_OBJECT( var_count );
            tmp_args_element_name_24 = var_count;
            CHECK_OBJECT( var_value );
            tmp_operand_name_1 = var_value;
            tmp_args_element_name_25 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
            if ( tmp_args_element_name_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 841;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_7;
            }
            CHECK_OBJECT( var_data );
            tmp_operand_name_2 = var_data;
            tmp_args_element_name_26 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
            if ( tmp_args_element_name_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_25 );

                exception_lineno = 841;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_7;
            }
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 841;
            {
                PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26 };
                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_13, call_args );
            }

            Py_DECREF( tmp_args_element_name_25 );
            Py_DECREF( tmp_args_element_name_26 );
            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 841;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_7;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        branch_no_10:;
    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_17;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        PyObject *tmp_args_element_name_32;
        CHECK_OBJECT( par_fp );
        tmp_source_name_17 = par_fp;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_write );
        if ( tmp_called_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 842;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( par_self );
        tmp_called_instance_10 = par_self;
        tmp_args_element_name_28 = const_str_plain_HHL4s;
        CHECK_OBJECT( var_tag );
        tmp_args_element_name_29 = var_tag;
        CHECK_OBJECT( var_typ );
        tmp_args_element_name_30 = var_typ;
        CHECK_OBJECT( var_count );
        tmp_args_element_name_31 = var_count;
        CHECK_OBJECT( var_value );
        tmp_args_element_name_32 = var_value;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 842;
        {
            PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32 };
            tmp_args_element_name_27 = CALL_METHOD_WITH_ARGS5( tmp_called_instance_10, const_str_plain__pack, call_args );
        }

        if ( tmp_args_element_name_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );

            exception_lineno = 842;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_7;
        }
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 842;
        {
            PyObject *call_args[] = { tmp_args_element_name_27 };
            tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_27 );
        if ( tmp_call_result_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 842;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_10 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 839;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_call_result_11;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_11 = par_fp;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 845;
        tmp_call_result_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_digest_153d51c84a9c3251b131f695a1c80929_tuple, 0 ) );

        if ( tmp_call_result_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 845;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_11 );
    }
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_iter_arg_6;
        CHECK_OBJECT( var_entries );
        tmp_iter_arg_6 = var_entries;
        tmp_assign_source_45 = MAKE_ITERATOR( tmp_iter_arg_6 );
        if ( tmp_assign_source_45 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 848;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_3__for_iterator == NULL );
        tmp_for_loop_3__for_iterator = tmp_assign_source_45;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_46;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_46 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_46 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 848;
                goto try_except_handler_10;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_46;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_iter_arg_7;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_iter_arg_7 = tmp_for_loop_3__iter_value;
        tmp_assign_source_47 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_7 );
        if ( tmp_assign_source_47 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 848;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__source_iter;
            tmp_tuple_unpack_4__source_iter = tmp_assign_source_47;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_unpack_13;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_13 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_48 = UNPACK_NEXT( tmp_unpack_13, 0, 5 );
        if ( tmp_assign_source_48 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_1;
            tmp_tuple_unpack_4__element_1 = tmp_assign_source_48;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_unpack_14;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_14 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_49 = UNPACK_NEXT( tmp_unpack_14, 1, 5 );
        if ( tmp_assign_source_49 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_2;
            tmp_tuple_unpack_4__element_2 = tmp_assign_source_49;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_unpack_15;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_15 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_50 = UNPACK_NEXT( tmp_unpack_15, 2, 5 );
        if ( tmp_assign_source_50 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_3;
            tmp_tuple_unpack_4__element_3 = tmp_assign_source_50;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_unpack_16;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_16 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_51 = UNPACK_NEXT( tmp_unpack_16, 3, 5 );
        if ( tmp_assign_source_51 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_4;
            tmp_tuple_unpack_4__element_4 = tmp_assign_source_51;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_unpack_17;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_unpack_17 = tmp_tuple_unpack_4__source_iter;
        tmp_assign_source_52 = UNPACK_NEXT( tmp_unpack_17, 4, 5 );
        if ( tmp_assign_source_52 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_4__element_5;
            tmp_tuple_unpack_4__element_5 = tmp_assign_source_52;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_4;
        CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
        tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooo";
                    exception_lineno = 848;
                    goto try_except_handler_12;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooo";
            exception_lineno = 848;
            goto try_except_handler_12;
        }
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
    Py_DECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_11;
    // End of try:
    try_end_9:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_2 );
    tmp_tuple_unpack_4__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_3 );
    tmp_tuple_unpack_4__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_4 );
    tmp_tuple_unpack_4__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_4__element_5 );
    tmp_tuple_unpack_4__element_5 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto try_except_handler_10;
    // End of try:
    try_end_10:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
    Py_DECREF( tmp_tuple_unpack_4__source_iter );
    tmp_tuple_unpack_4__source_iter = NULL;

    {
        PyObject *tmp_assign_source_53;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
        tmp_assign_source_53 = tmp_tuple_unpack_4__element_1;
        {
            PyObject *old = var_tag;
            var_tag = tmp_assign_source_53;
            Py_INCREF( var_tag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_4__element_1 );
    tmp_tuple_unpack_4__element_1 = NULL;

    {
        PyObject *tmp_assign_source_54;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
        tmp_assign_source_54 = tmp_tuple_unpack_4__element_2;
        {
            PyObject *old = var_typ;
            var_typ = tmp_assign_source_54;
            Py_INCREF( var_typ );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_4__element_2 );
    tmp_tuple_unpack_4__element_2 = NULL;

    {
        PyObject *tmp_assign_source_55;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
        tmp_assign_source_55 = tmp_tuple_unpack_4__element_3;
        {
            PyObject *old = var_count;
            var_count = tmp_assign_source_55;
            Py_INCREF( var_count );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_4__element_3 );
    tmp_tuple_unpack_4__element_3 = NULL;

    {
        PyObject *tmp_assign_source_56;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_4 );
        tmp_assign_source_56 = tmp_tuple_unpack_4__element_4;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_56;
            Py_INCREF( var_value );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_4__element_4 );
    tmp_tuple_unpack_4__element_4 = NULL;

    {
        PyObject *tmp_assign_source_57;
        CHECK_OBJECT( tmp_tuple_unpack_4__element_5 );
        tmp_assign_source_57 = tmp_tuple_unpack_4__element_5;
        {
            PyObject *old = var_data;
            var_data = tmp_assign_source_57;
            Py_INCREF( var_data );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_4__element_5 );
    tmp_tuple_unpack_4__element_5 = NULL;

    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_33;
        CHECK_OBJECT( par_fp );
        tmp_called_instance_12 = par_fp;
        CHECK_OBJECT( var_data );
        tmp_args_element_name_33 = var_data;
        frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 849;
        {
            PyObject *call_args[] = { tmp_args_element_name_33 };
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_write, call_args );
        }

        if ( tmp_call_result_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 849;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_10;
        }
        Py_DECREF( tmp_call_result_12 );
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_left_name_13;
        PyObject *tmp_len_arg_10;
        PyObject *tmp_right_name_13;
        PyObject *tmp_op_bitand_res_1;
        int tmp_truth_name_4;
        CHECK_OBJECT( var_data );
        tmp_len_arg_10 = var_data;
        tmp_left_name_13 = BUILTIN_LEN( tmp_len_arg_10 );
        if ( tmp_left_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 850;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_right_name_13 = const_int_pos_1;
        tmp_op_bitand_res_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_13, tmp_right_name_13 );
        Py_DECREF( tmp_left_name_13 );
        if ( tmp_op_bitand_res_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 850;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_op_bitand_res_1 );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_op_bitand_res_1 );

            exception_lineno = 850;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_condition_result_12 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_op_bitand_res_1 );
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_instance_13;
            PyObject *tmp_call_result_13;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_13 = par_fp;
            frame_3548084e462e583b5bdd1d2b003a978d->m_frame.f_lineno = 851;
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_chr_0_tuple, 0 ) );

            if ( tmp_call_result_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 851;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_10;
            }
            Py_DECREF( tmp_call_result_13 );
        }
        branch_no_11:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 848;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_10;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_11;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( var_offset == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "offset" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 853;
        type_description_1 = "ooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_offset;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3548084e462e583b5bdd1d2b003a978d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3548084e462e583b5bdd1d2b003a978d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3548084e462e583b5bdd1d2b003a978d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3548084e462e583b5bdd1d2b003a978d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3548084e462e583b5bdd1d2b003a978d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3548084e462e583b5bdd1d2b003a978d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3548084e462e583b5bdd1d2b003a978d,
        type_description_1,
        par_self,
        par_fp,
        var_entries,
        var_offset,
        var_stripoffsets,
        var_tag,
        var_value,
        var_typ,
        var_values,
        var_data,
        var_tagname,
        var_typname,
        var_count
    );


    // Release cached frame.
    if ( frame_3548084e462e583b5bdd1d2b003a978d == cache_frame_3548084e462e583b5bdd1d2b003a978d )
    {
        Py_DECREF( frame_3548084e462e583b5bdd1d2b003a978d );
    }
    cache_frame_3548084e462e583b5bdd1d2b003a978d = NULL;

    assertFrameObject( frame_3548084e462e583b5bdd1d2b003a978d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_45_save );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)var_entries );
    Py_DECREF( var_entries );
    var_entries = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_stripoffsets );
    var_stripoffsets = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_tagname );
    var_tagname = NULL;

    Py_XDECREF( var_typname );
    var_typname = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    Py_XDECREF( var_entries );
    var_entries = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_stripoffsets );
    var_stripoffsets = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_tagname );
    var_tagname = NULL;

    Py_XDECREF( var_typname );
    var_typname = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_45_save );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_46___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_3e4237cb079ef39d375bd3fa69aa4fdf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3e4237cb079ef39d375bd3fa69aa4fdf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e4237cb079ef39d375bd3fa69aa4fdf, codeobj_3e4237cb079ef39d375bd3fa69aa4fdf, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3e4237cb079ef39d375bd3fa69aa4fdf = cache_frame_3e4237cb079ef39d375bd3fa69aa4fdf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e4237cb079ef39d375bd3fa69aa4fdf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e4237cb079ef39d375bd3fa69aa4fdf ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dircall_arg4_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 885;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 885;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_args );
        tmp_dircall_arg3_1 = par_args;
        CHECK_OBJECT( par_kwargs );
        tmp_dircall_arg4_1 = par_kwargs;
        Py_INCREF( tmp_dircall_arg3_1 );
        Py_INCREF( tmp_dircall_arg4_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
            tmp_call_result_1 = impl___internal__$$$function_9_complex_call_helper_pos_star_list_star_dict( dir_call_args );
        }
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 885;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__legacy_api, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 886;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e4237cb079ef39d375bd3fa69aa4fdf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e4237cb079ef39d375bd3fa69aa4fdf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e4237cb079ef39d375bd3fa69aa4fdf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e4237cb079ef39d375bd3fa69aa4fdf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e4237cb079ef39d375bd3fa69aa4fdf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e4237cb079ef39d375bd3fa69aa4fdf,
        type_description_1,
        par_self,
        par_args,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_3e4237cb079ef39d375bd3fa69aa4fdf == cache_frame_3e4237cb079ef39d375bd3fa69aa4fdf )
    {
        Py_DECREF( frame_3e4237cb079ef39d375bd3fa69aa4fdf );
    }
    cache_frame_3e4237cb079ef39d375bd3fa69aa4fdf = NULL;

    assertFrameObject( frame_3e4237cb079ef39d375bd3fa69aa4fdf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_46___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_46___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_47_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_9a1dcabb83b8619d0d5db8838b3810f2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9a1dcabb83b8619d0d5db8838b3810f2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9a1dcabb83b8619d0d5db8838b3810f2, codeobj_9a1dcabb83b8619d0d5db8838b3810f2, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_9a1dcabb83b8619d0d5db8838b3810f2 = cache_frame_9a1dcabb83b8619d0d5db8838b3810f2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9a1dcabb83b8619d0d5db8838b3810f2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9a1dcabb83b8619d0d5db8838b3810f2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 888;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9a1dcabb83b8619d0d5db8838b3810f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9a1dcabb83b8619d0d5db8838b3810f2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9a1dcabb83b8619d0d5db8838b3810f2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9a1dcabb83b8619d0d5db8838b3810f2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9a1dcabb83b8619d0d5db8838b3810f2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9a1dcabb83b8619d0d5db8838b3810f2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9a1dcabb83b8619d0d5db8838b3810f2,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_9a1dcabb83b8619d0d5db8838b3810f2 == cache_frame_9a1dcabb83b8619d0d5db8838b3810f2 )
    {
        Py_DECREF( frame_9a1dcabb83b8619d0d5db8838b3810f2 );
    }
    cache_frame_9a1dcabb83b8619d0d5db8838b3810f2 = NULL;

    assertFrameObject( frame_9a1dcabb83b8619d0d5db8838b3810f2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_47_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_47_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_48_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0b85bc72a84f799ffd774d4be80b51ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0b85bc72a84f799ffd774d4be80b51ef = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0b85bc72a84f799ffd774d4be80b51ef, codeobj_0b85bc72a84f799ffd774d4be80b51ef, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_0b85bc72a84f799ffd774d4be80b51ef = cache_frame_0b85bc72a84f799ffd774d4be80b51ef;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0b85bc72a84f799ffd774d4be80b51ef );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0b85bc72a84f799ffd774d4be80b51ef ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tagdata );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 889;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b85bc72a84f799ffd774d4be80b51ef );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b85bc72a84f799ffd774d4be80b51ef );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b85bc72a84f799ffd774d4be80b51ef );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0b85bc72a84f799ffd774d4be80b51ef, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0b85bc72a84f799ffd774d4be80b51ef->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0b85bc72a84f799ffd774d4be80b51ef, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0b85bc72a84f799ffd774d4be80b51ef,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0b85bc72a84f799ffd774d4be80b51ef == cache_frame_0b85bc72a84f799ffd774d4be80b51ef )
    {
        Py_DECREF( frame_0b85bc72a84f799ffd774d4be80b51ef );
    }
    cache_frame_0b85bc72a84f799ffd774d4be80b51ef = NULL;

    assertFrameObject( frame_0b85bc72a84f799ffd774d4be80b51ef );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_48_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_48_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_49_from_v2( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_original = python_pars[ 1 ];
    PyObject *var_ifd = NULL;
    struct Nuitka_FrameObject *frame_1ff42e346a2754cb0ad082098d047812;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_1ff42e346a2754cb0ad082098d047812 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1ff42e346a2754cb0ad082098d047812, codeobj_1ff42e346a2754cb0ad082098d047812, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1ff42e346a2754cb0ad082098d047812 = cache_frame_1ff42e346a2754cb0ad082098d047812;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1ff42e346a2754cb0ad082098d047812 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1ff42e346a2754cb0ad082098d047812 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_cls );
        tmp_called_name_1 = par_cls;
        tmp_dict_key_1 = const_str_plain_prefix;
        CHECK_OBJECT( par_original );
        tmp_source_name_1 = par_original;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_prefix );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 903;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_1ff42e346a2754cb0ad082098d047812->m_frame.f_lineno = 903;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 903;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_ifd == NULL );
        var_ifd = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_original );
        tmp_source_name_2 = par_original;
        tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 904;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_1 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__tagdata, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 904;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_original );
        tmp_source_name_3 = par_original;
        tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tagtype );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 905;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_2 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_tagtype, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 905;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_original );
        tmp_source_name_4 = par_original;
        tmp_assattr_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_next );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 906;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_3 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_next, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 906;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ff42e346a2754cb0ad082098d047812 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ff42e346a2754cb0ad082098d047812 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1ff42e346a2754cb0ad082098d047812, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1ff42e346a2754cb0ad082098d047812->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1ff42e346a2754cb0ad082098d047812, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1ff42e346a2754cb0ad082098d047812,
        type_description_1,
        par_cls,
        par_original,
        var_ifd
    );


    // Release cached frame.
    if ( frame_1ff42e346a2754cb0ad082098d047812 == cache_frame_1ff42e346a2754cb0ad082098d047812 )
    {
        Py_DECREF( frame_1ff42e346a2754cb0ad082098d047812 );
    }
    cache_frame_1ff42e346a2754cb0ad082098d047812 = NULL;

    assertFrameObject( frame_1ff42e346a2754cb0ad082098d047812 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_ifd );
    tmp_return_value = var_ifd;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_49_from_v2 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_original );
    Py_DECREF( par_original );
    par_original = NULL;

    CHECK_OBJECT( (PyObject *)var_ifd );
    Py_DECREF( var_ifd );
    var_ifd = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_original );
    Py_DECREF( par_original );
    par_original = NULL;

    Py_XDECREF( var_ifd );
    var_ifd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_49_from_v2 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_50_to_v2( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_ifd = NULL;
    struct Nuitka_FrameObject *frame_a5b7f302af9cbae27961f6342cc65451;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a5b7f302af9cbae27961f6342cc65451 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a5b7f302af9cbae27961f6342cc65451, codeobj_a5b7f302af9cbae27961f6342cc65451, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_a5b7f302af9cbae27961f6342cc65451 = cache_frame_a5b7f302af9cbae27961f6342cc65451;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a5b7f302af9cbae27961f6342cc65451 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a5b7f302af9cbae27961f6342cc65451 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 920;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_dict_key_1 = const_str_plain_prefix;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_prefix );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 920;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_a5b7f302af9cbae27961f6342cc65451->m_frame.f_lineno = 920;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 920;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_ifd == NULL );
        var_ifd = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_dict_seq_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_dict_seq_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
        if ( tmp_dict_seq_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 921;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_1 = TO_DICT( tmp_dict_seq_1, NULL );
        Py_DECREF( tmp_dict_seq_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 921;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_1 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__tagdata, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 921;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_dict_seq_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_dict_seq_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tagtype );
        if ( tmp_dict_seq_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 922;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_2 = TO_DICT( tmp_dict_seq_2, NULL );
        Py_DECREF( tmp_dict_seq_2 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 922;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_2 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_tagtype, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 922;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_dict_seq_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_dict_seq_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__tags_v2 );
        if ( tmp_dict_seq_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 923;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_3 = TO_DICT( tmp_dict_seq_3, NULL );
        Py_DECREF( tmp_dict_seq_3 );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 923;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_assattr_target_3 = var_ifd;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__tags_v2, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 923;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5b7f302af9cbae27961f6342cc65451 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5b7f302af9cbae27961f6342cc65451 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a5b7f302af9cbae27961f6342cc65451, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a5b7f302af9cbae27961f6342cc65451->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a5b7f302af9cbae27961f6342cc65451, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a5b7f302af9cbae27961f6342cc65451,
        type_description_1,
        par_self,
        var_ifd
    );


    // Release cached frame.
    if ( frame_a5b7f302af9cbae27961f6342cc65451 == cache_frame_a5b7f302af9cbae27961f6342cc65451 )
    {
        Py_DECREF( frame_a5b7f302af9cbae27961f6342cc65451 );
    }
    cache_frame_a5b7f302af9cbae27961f6342cc65451 = NULL;

    assertFrameObject( frame_a5b7f302af9cbae27961f6342cc65451 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_ifd );
    tmp_return_value = var_ifd;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_50_to_v2 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_ifd );
    Py_DECREF( var_ifd );
    var_ifd = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_ifd );
    var_ifd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_50_to_v2 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_51___contains__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_d778c9800471fd2e2a59d50a545b8ac4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d778c9800471fd2e2a59d50a545b8ac4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d778c9800471fd2e2a59d50a545b8ac4, codeobj_d778c9800471fd2e2a59d50a545b8ac4, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_d778c9800471fd2e2a59d50a545b8ac4 = cache_frame_d778c9800471fd2e2a59d50a545b8ac4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d778c9800471fd2e2a59d50a545b8ac4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d778c9800471fd2e2a59d50a545b8ac4 ) == 2 ); // Frame stack

    // Framed code:
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v1 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 927;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 927;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_2 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 927;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 927;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d778c9800471fd2e2a59d50a545b8ac4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d778c9800471fd2e2a59d50a545b8ac4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d778c9800471fd2e2a59d50a545b8ac4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d778c9800471fd2e2a59d50a545b8ac4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d778c9800471fd2e2a59d50a545b8ac4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d778c9800471fd2e2a59d50a545b8ac4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d778c9800471fd2e2a59d50a545b8ac4,
        type_description_1,
        par_self,
        par_tag
    );


    // Release cached frame.
    if ( frame_d778c9800471fd2e2a59d50a545b8ac4 == cache_frame_d778c9800471fd2e2a59d50a545b8ac4 )
    {
        Py_DECREF( frame_d778c9800471fd2e2a59d50a545b8ac4 );
    }
    cache_frame_d778c9800471fd2e2a59d50a545b8ac4 = NULL;

    assertFrameObject( frame_d778c9800471fd2e2a59d50a545b8ac4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_51___contains__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_51___contains__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_52___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0d462b9205720dd46676aaf6d3150b05;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0d462b9205720dd46676aaf6d3150b05 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0d462b9205720dd46676aaf6d3150b05, codeobj_0d462b9205720dd46676aaf6d3150b05, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_0d462b9205720dd46676aaf6d3150b05 = cache_frame_0d462b9205720dd46676aaf6d3150b05;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0d462b9205720dd46676aaf6d3150b05 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0d462b9205720dd46676aaf6d3150b05 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_len_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_set_arg_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_set_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tagdata );
        if ( tmp_set_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PySet_New( tmp_set_arg_1 );
        Py_DECREF( tmp_set_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_set_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tags_v1 );
        if ( tmp_set_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PySet_New( tmp_set_arg_2 );
        Py_DECREF( tmp_set_arg_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_len_arg_1 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 930;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d462b9205720dd46676aaf6d3150b05 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d462b9205720dd46676aaf6d3150b05 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d462b9205720dd46676aaf6d3150b05 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0d462b9205720dd46676aaf6d3150b05, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0d462b9205720dd46676aaf6d3150b05->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0d462b9205720dd46676aaf6d3150b05, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0d462b9205720dd46676aaf6d3150b05,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0d462b9205720dd46676aaf6d3150b05 == cache_frame_0d462b9205720dd46676aaf6d3150b05 )
    {
        Py_DECREF( frame_0d462b9205720dd46676aaf6d3150b05 );
    }
    cache_frame_0d462b9205720dd46676aaf6d3150b05 = NULL;

    assertFrameObject( frame_0d462b9205720dd46676aaf6d3150b05 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_52___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_52___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_53___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_312fd463751bf0babfc46d8761c6b6e6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_312fd463751bf0babfc46d8761c6b6e6 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_312fd463751bf0babfc46d8761c6b6e6, codeobj_312fd463751bf0babfc46d8761c6b6e6, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_312fd463751bf0babfc46d8761c6b6e6 = cache_frame_312fd463751bf0babfc46d8761c6b6e6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_312fd463751bf0babfc46d8761c6b6e6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_312fd463751bf0babfc46d8761c6b6e6 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_set_arg_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_set_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tagdata );
        if ( tmp_set_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PySet_New( tmp_set_arg_1 );
        Py_DECREF( tmp_set_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_set_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tags_v1 );
        if ( tmp_set_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PySet_New( tmp_set_arg_2 );
        Py_DECREF( tmp_set_arg_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_iter_arg_1 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_312fd463751bf0babfc46d8761c6b6e6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_312fd463751bf0babfc46d8761c6b6e6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_312fd463751bf0babfc46d8761c6b6e6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_312fd463751bf0babfc46d8761c6b6e6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_312fd463751bf0babfc46d8761c6b6e6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_312fd463751bf0babfc46d8761c6b6e6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_312fd463751bf0babfc46d8761c6b6e6,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_312fd463751bf0babfc46d8761c6b6e6 == cache_frame_312fd463751bf0babfc46d8761c6b6e6 )
    {
        Py_DECREF( frame_312fd463751bf0babfc46d8761c6b6e6 );
    }
    cache_frame_312fd463751bf0babfc46d8761c6b6e6 = NULL;

    assertFrameObject( frame_312fd463751bf0babfc46d8761c6b6e6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_53___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_53___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_54___setitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *var_legacy_api = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_b7f9cb64c295e170ed666b9321bd9b77;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_b7f9cb64c295e170ed666b9321bd9b77 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_false_true_tuple;
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_1 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b7f9cb64c295e170ed666b9321bd9b77, codeobj_b7f9cb64c295e170ed666b9321bd9b77, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b7f9cb64c295e170ed666b9321bd9b77 = cache_frame_b7f9cb64c295e170ed666b9321bd9b77;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b7f9cb64c295e170ed666b9321bd9b77 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b7f9cb64c295e170ed666b9321bd9b77 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooo";
                exception_lineno = 936;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_legacy_api;
            var_legacy_api = tmp_assign_source_3;
            Py_INCREF( var_legacy_api );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_tag );
        tmp_args_element_name_1 = par_tag;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_2 = par_value;
        CHECK_OBJECT( var_legacy_api );
        tmp_args_element_name_3 = var_legacy_api;
        frame_b7f9cb64c295e170ed666b9321bd9b77->m_frame.f_lineno = 937;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain__setitem, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 937;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 936;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7f9cb64c295e170ed666b9321bd9b77 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7f9cb64c295e170ed666b9321bd9b77 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b7f9cb64c295e170ed666b9321bd9b77, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b7f9cb64c295e170ed666b9321bd9b77->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b7f9cb64c295e170ed666b9321bd9b77, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b7f9cb64c295e170ed666b9321bd9b77,
        type_description_1,
        par_self,
        par_tag,
        par_value,
        var_legacy_api
    );


    // Release cached frame.
    if ( frame_b7f9cb64c295e170ed666b9321bd9b77 == cache_frame_b7f9cb64c295e170ed666b9321bd9b77 )
    {
        Py_DECREF( frame_b7f9cb64c295e170ed666b9321bd9b77 );
    }
    cache_frame_b7f9cb64c295e170ed666b9321bd9b77 = NULL;

    assertFrameObject( frame_b7f9cb64c295e170ed666b9321bd9b77 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_54___setitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_legacy_api );
    var_legacy_api = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_legacy_api );
    var_legacy_api = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_54___setitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_55___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tag = python_pars[ 1 ];
    PyObject *var_data = NULL;
    PyObject *var_typ = NULL;
    PyObject *var_size = NULL;
    PyObject *var_handler = NULL;
    PyObject *var_legacy = NULL;
    PyObject *var_val = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_faad67dff9a716b224fa6a9002d2041c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_faad67dff9a716b224fa6a9002d2041c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_faad67dff9a716b224fa6a9002d2041c, codeobj_faad67dff9a716b224fa6a9002d2041c, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_faad67dff9a716b224fa6a9002d2041c = cache_frame_faad67dff9a716b224fa6a9002d2041c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_faad67dff9a716b224fa6a9002d2041c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_faad67dff9a716b224fa6a9002d2041c ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_tag );
        tmp_compexpr_left_1 = par_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__tags_v1 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 940;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 940;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__tagdata );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 941;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_1 = par_tag;
            tmp_assign_source_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 941;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_data == NULL );
            var_data = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tagtype );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 942;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_tag );
            tmp_subscript_name_2 = par_tag;
            tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 942;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_typ == NULL );
            var_typ = tmp_assign_source_2;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__load_dispatch );
            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 943;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_typ );
            tmp_subscript_name_3 = var_typ;
            tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 943;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 943;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 943;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_5 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 943;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooo";
                        exception_lineno = 943;
                        goto try_except_handler_3;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 943;
                goto try_except_handler_3;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
            assert( var_size == NULL );
            Py_INCREF( tmp_assign_source_6 );
            var_size = tmp_assign_source_6;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
            assert( var_handler == NULL );
            Py_INCREF( tmp_assign_source_7 );
            var_handler = tmp_assign_source_7;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            tmp_iter_arg_2 = const_tuple_false_true_tuple;
            tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
            assert( !(tmp_assign_source_8 == NULL) );
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_8;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooo";
                    exception_lineno = 944;
                    goto try_except_handler_4;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_10 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_legacy;
                var_legacy = tmp_assign_source_10;
                Py_INCREF( var_legacy );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__setitem );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 945;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par_tag );
            tmp_args_element_name_1 = par_tag;
            CHECK_OBJECT( var_handler );
            tmp_called_name_2 = var_handler;
            CHECK_OBJECT( par_self );
            tmp_args_element_name_3 = par_self;
            CHECK_OBJECT( var_data );
            tmp_args_element_name_4 = var_data;
            CHECK_OBJECT( var_legacy );
            tmp_args_element_name_5 = var_legacy;
            frame_faad67dff9a716b224fa6a9002d2041c->m_frame.f_lineno = 945;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
            }

            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 945;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( var_legacy );
            tmp_args_element_name_6 = var_legacy;
            frame_faad67dff9a716b224fa6a9002d2041c->m_frame.f_lineno = 945;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_6 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 945;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 944;
            type_description_1 = "oooooooo";
            goto try_except_handler_4;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__tags_v1 );
        if ( tmp_subscribed_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 946;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_tag );
        tmp_subscript_name_4 = par_tag;
        tmp_assign_source_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscribed_name_4 );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 946;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_val == NULL );
        var_val = tmp_assign_source_11;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( var_val );
        tmp_isinstance_inst_1 = var_val;
        tmp_isinstance_cls_1 = const_tuple_type_tuple_type_bytes_tuple;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 947;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 947;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( var_val );
            tmp_tuple_element_1 = var_val;
            tmp_assign_source_12 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_assign_source_12, 0, tmp_tuple_element_1 );
            {
                PyObject *old = var_val;
                assert( old != NULL );
                var_val = tmp_assign_source_12;
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_faad67dff9a716b224fa6a9002d2041c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_faad67dff9a716b224fa6a9002d2041c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_faad67dff9a716b224fa6a9002d2041c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_faad67dff9a716b224fa6a9002d2041c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_faad67dff9a716b224fa6a9002d2041c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_faad67dff9a716b224fa6a9002d2041c,
        type_description_1,
        par_self,
        par_tag,
        var_data,
        var_typ,
        var_size,
        var_handler,
        var_legacy,
        var_val
    );


    // Release cached frame.
    if ( frame_faad67dff9a716b224fa6a9002d2041c == cache_frame_faad67dff9a716b224fa6a9002d2041c )
    {
        Py_DECREF( frame_faad67dff9a716b224fa6a9002d2041c );
    }
    cache_frame_faad67dff9a716b224fa6a9002d2041c = NULL;

    assertFrameObject( frame_faad67dff9a716b224fa6a9002d2041c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_val );
    tmp_return_value = var_val;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_55___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    Py_XDECREF( var_legacy );
    var_legacy = NULL;

    CHECK_OBJECT( (PyObject *)var_val );
    Py_DECREF( var_val );
    var_val = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tag );
    Py_DECREF( par_tag );
    par_tag = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_typ );
    var_typ = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    Py_XDECREF( var_legacy );
    var_legacy = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_55___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_56__open( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_ifh = NULL;
    PyObject *tmp_assign_unpack_2__assign_source = NULL;
    struct Nuitka_FrameObject *frame_09423594580680a7a194b3076286dbf6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_09423594580680a7a194b3076286dbf6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_09423594580680a7a194b3076286dbf6, codeobj_09423594580680a7a194b3076286dbf6, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_09423594580680a7a194b3076286dbf6 = cache_frame_09423594580680a7a194b3076286dbf6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_09423594580680a7a194b3076286dbf6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_09423594580680a7a194b3076286dbf6 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_fp );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 969;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_8_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_ifh == NULL );
        var_ifh = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 972;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( var_ifh );
        tmp_args_element_name_1 = var_ifh;
        frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 972;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 972;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_tag_v2, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 972;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_tag, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 975;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_ifd, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 975;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tag_v2 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 978;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_next );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 978;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_assign_unpack_2__assign_source == NULL );
        tmp_assign_unpack_2__assign_source = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
        tmp_assattr_name_4 = tmp_assign_unpack_2__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__TiffImageFile__first, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 978;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
        tmp_assattr_name_5 = tmp_assign_unpack_2__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__TiffImageFile__next, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 978;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_assign_unpack_2__assign_source );
    tmp_assign_unpack_2__assign_source = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_2__assign_source );
    Py_DECREF( tmp_assign_unpack_2__assign_source );
    tmp_assign_unpack_2__assign_source = NULL;

    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = const_int_neg_1;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__TiffImageFile__frame, tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 979;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_source_name_4;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_assattr_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fp );
        if ( tmp_assattr_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 980;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain__TiffImageFile__fp, tmp_assattr_name_7 );
        Py_DECREF( tmp_assattr_name_7 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 980;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_name_8 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain__frame_pos, tmp_assattr_name_8 );
        Py_DECREF( tmp_assattr_name_8 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 981;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_name_9 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_9 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain__n_frames, tmp_assattr_name_9 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 982;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_10;
        PyObject *tmp_assattr_target_10;
        tmp_assattr_name_10 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_10 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain__is_animated, tmp_assattr_name_10 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 983;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_mvar_value_2;
        int tmp_truth_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 985;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_2 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 985;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_call_result_1;
            tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_2 != NULL );
            frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 986;
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_digest_14efb3122da4b9eb7106a01cd1e50e56_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 986;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_5;
            tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_3 != NULL );
            tmp_args_element_name_2 = const_str_digest_d5a7e2f1ea88c24f4a48bac3a1863198;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__TiffImageFile__first );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 987;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 987;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 987;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_4 != NULL );
            tmp_args_element_name_4 = const_str_digest_f66f0d17188cd87dede8ac24ff663a3e;
            CHECK_OBJECT( var_ifh );
            tmp_args_element_name_5 = var_ifh;
            frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 988;
            {
                PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 988;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_09423594580680a7a194b3076286dbf6->m_frame.f_lineno = 991;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__seek, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 991;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09423594580680a7a194b3076286dbf6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09423594580680a7a194b3076286dbf6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_09423594580680a7a194b3076286dbf6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_09423594580680a7a194b3076286dbf6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_09423594580680a7a194b3076286dbf6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_09423594580680a7a194b3076286dbf6,
        type_description_1,
        par_self,
        var_ifh
    );


    // Release cached frame.
    if ( frame_09423594580680a7a194b3076286dbf6 == cache_frame_09423594580680a7a194b3076286dbf6 )
    {
        Py_DECREF( frame_09423594580680a7a194b3076286dbf6 );
    }
    cache_frame_09423594580680a7a194b3076286dbf6 = NULL;

    assertFrameObject( frame_09423594580680a7a194b3076286dbf6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_56__open );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_ifh );
    Py_DECREF( var_ifh );
    var_ifh = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_ifh );
    var_ifh = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_56__open );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_57_n_frames( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_current = NULL;
    struct Nuitka_FrameObject *frame_b8dda3ad7cb1be231c12f8823ec5b866;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b8dda3ad7cb1be231c12f8823ec5b866 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b8dda3ad7cb1be231c12f8823ec5b866, codeobj_b8dda3ad7cb1be231c12f8823ec5b866, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_b8dda3ad7cb1be231c12f8823ec5b866 = cache_frame_b8dda3ad7cb1be231c12f8823ec5b866;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b8dda3ad7cb1be231c12f8823ec5b866 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b8dda3ad7cb1be231c12f8823ec5b866 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__n_frames );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 995;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = 996;
            tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 996;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            assert( var_current == NULL );
            var_current = tmp_assign_source_1;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__seek );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 999;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = 999;
            tmp_left_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 999;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            tmp_right_name_1 = const_int_pos_1;
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 999;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = 999;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 999;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 998;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_57_n_frames );
        return NULL;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_b8dda3ad7cb1be231c12f8823ec5b866, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_b8dda3ad7cb1be231c12f8823ec5b866, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_EOFError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1000;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_left_name_2;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_right_name_2;
                PyObject *tmp_assattr_target_1;
                CHECK_OBJECT( par_self );
                tmp_called_instance_3 = par_self;
                frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = 1001;
                tmp_left_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_tell );
                if ( tmp_left_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1001;
                    type_description_1 = "oo";
                    goto try_except_handler_3;
                }
                tmp_right_name_2 = const_int_pos_1;
                tmp_assattr_name_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_left_name_2 );
                if ( tmp_assattr_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1001;
                    type_description_1 = "oo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_1 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__n_frames, tmp_assattr_name_1 );
                Py_DECREF( tmp_assattr_name_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1001;
                    type_description_1 = "oo";
                    goto try_except_handler_3;
                }
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 997;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame) frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oo";
            goto try_except_handler_3;
            branch_end_2:;
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_1:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_2;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_57_n_frames );
        return NULL;
        // End of try:
        try_end_2:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            CHECK_OBJECT( var_current );
            tmp_args_element_name_2 = var_current;
            frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame.f_lineno = 1002;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_seek, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1002;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__n_frames );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1003;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b8dda3ad7cb1be231c12f8823ec5b866 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b8dda3ad7cb1be231c12f8823ec5b866 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b8dda3ad7cb1be231c12f8823ec5b866 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b8dda3ad7cb1be231c12f8823ec5b866, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b8dda3ad7cb1be231c12f8823ec5b866->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b8dda3ad7cb1be231c12f8823ec5b866, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b8dda3ad7cb1be231c12f8823ec5b866,
        type_description_1,
        par_self,
        var_current
    );


    // Release cached frame.
    if ( frame_b8dda3ad7cb1be231c12f8823ec5b866 == cache_frame_b8dda3ad7cb1be231c12f8823ec5b866 )
    {
        Py_DECREF( frame_b8dda3ad7cb1be231c12f8823ec5b866 );
    }
    cache_frame_b8dda3ad7cb1be231c12f8823ec5b866 = NULL;

    assertFrameObject( frame_b8dda3ad7cb1be231c12f8823ec5b866 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_57_n_frames );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_current );
    var_current = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_current );
    var_current = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_57_n_frames );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_58_is_animated( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_current = NULL;
    struct Nuitka_FrameObject *frame_a947e9874296c004bdad2116ab6f31a3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a947e9874296c004bdad2116ab6f31a3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a947e9874296c004bdad2116ab6f31a3, codeobj_a947e9874296c004bdad2116ab6f31a3, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_a947e9874296c004bdad2116ab6f31a3 = cache_frame_a947e9874296c004bdad2116ab6f31a3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a947e9874296c004bdad2116ab6f31a3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a947e9874296c004bdad2116ab6f31a3 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__is_animated );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1007;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__n_frames );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1008;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_2 = Py_None;
            tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_compexpr_left_2 );
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_source_name_3;
                PyObject *tmp_assattr_target_1;
                CHECK_OBJECT( par_self );
                tmp_source_name_3 = par_self;
                tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__n_frames );
                if ( tmp_compexpr_left_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1009;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_compexpr_right_3 = const_int_pos_1;
                tmp_assattr_name_1 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                Py_DECREF( tmp_compexpr_left_3 );
                if ( tmp_assattr_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1009;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_1 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__is_animated, tmp_assattr_name_1 );
                Py_DECREF( tmp_assattr_name_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1009;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_assign_source_1;
                PyObject *tmp_called_instance_1;
                CHECK_OBJECT( par_self );
                tmp_called_instance_1 = par_self;
                frame_a947e9874296c004bdad2116ab6f31a3->m_frame.f_lineno = 1011;
                tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
                if ( tmp_assign_source_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1011;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                assert( var_current == NULL );
                var_current = tmp_assign_source_1;
            }
            // Tried code:
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_call_result_1;
                CHECK_OBJECT( par_self );
                tmp_called_instance_2 = par_self;
                frame_a947e9874296c004bdad2116ab6f31a3->m_frame.f_lineno = 1014;
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1014;
                    type_description_1 = "oo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            {
                PyObject *tmp_assattr_name_2;
                PyObject *tmp_assattr_target_2;
                tmp_assattr_name_2 = Py_True;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_2 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__is_animated, tmp_assattr_name_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1015;
                    type_description_1 = "oo";
                    goto try_except_handler_2;
                }
            }
            goto try_end_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_1 == NULL )
            {
                exception_keeper_tb_1 = MAKE_TRACEBACK( frame_a947e9874296c004bdad2116ab6f31a3, exception_keeper_lineno_1 );
            }
            else if ( exception_keeper_lineno_1 != 0 )
            {
                exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_a947e9874296c004bdad2116ab6f31a3, exception_keeper_lineno_1 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
            PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
            PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
                tmp_compexpr_right_4 = PyExc_EOFError;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1016;
                    type_description_1 = "oo";
                    goto try_except_handler_3;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assattr_name_3;
                    PyObject *tmp_assattr_target_3;
                    tmp_assattr_name_3 = Py_False;
                    CHECK_OBJECT( par_self );
                    tmp_assattr_target_3 = par_self;
                    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__is_animated, tmp_assattr_name_3 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1017;
                        type_description_1 = "oo";
                        goto try_except_handler_3;
                    }
                }
                goto branch_end_3;
                branch_no_3:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 1013;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_a947e9874296c004bdad2116ab6f31a3->m_frame) frame_a947e9874296c004bdad2116ab6f31a3->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oo";
                goto try_except_handler_3;
                branch_end_3:;
            }
            goto try_end_2;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto frame_exception_exit_1;
            // End of try:
            try_end_2:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            goto try_end_1;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_58_is_animated );
            return NULL;
            // End of try:
            try_end_1:;
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_1;
                CHECK_OBJECT( par_self );
                tmp_called_instance_3 = par_self;
                CHECK_OBJECT( var_current );
                tmp_args_element_name_1 = var_current;
                frame_a947e9874296c004bdad2116ab6f31a3->m_frame.f_lineno = 1019;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_seek, call_args );
                }

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1019;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            branch_end_2:;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__is_animated );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1020;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a947e9874296c004bdad2116ab6f31a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a947e9874296c004bdad2116ab6f31a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a947e9874296c004bdad2116ab6f31a3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a947e9874296c004bdad2116ab6f31a3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a947e9874296c004bdad2116ab6f31a3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a947e9874296c004bdad2116ab6f31a3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a947e9874296c004bdad2116ab6f31a3,
        type_description_1,
        par_self,
        var_current
    );


    // Release cached frame.
    if ( frame_a947e9874296c004bdad2116ab6f31a3 == cache_frame_a947e9874296c004bdad2116ab6f31a3 )
    {
        Py_DECREF( frame_a947e9874296c004bdad2116ab6f31a3 );
    }
    cache_frame_a947e9874296c004bdad2116ab6f31a3 = NULL;

    assertFrameObject( frame_a947e9874296c004bdad2116ab6f31a3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_58_is_animated );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_current );
    var_current = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_current );
    var_current = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_58_is_animated );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_59_seek( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_frame = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_37cc5b83577da51cce196080465f5610;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_37cc5b83577da51cce196080465f5610 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_37cc5b83577da51cce196080465f5610, codeobj_37cc5b83577da51cce196080465f5610, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_37cc5b83577da51cce196080465f5610 = cache_frame_37cc5b83577da51cce196080465f5610;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_37cc5b83577da51cce196080465f5610 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_37cc5b83577da51cce196080465f5610 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_frame );
        tmp_args_element_name_1 = par_frame;
        frame_37cc5b83577da51cce196080465f5610->m_frame.f_lineno = 1024;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__seek_check, call_args );
        }

        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1024;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1024;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT( par_frame );
        tmp_args_element_name_2 = par_frame;
        frame_37cc5b83577da51cce196080465f5610->m_frame.f_lineno = 1026;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__seek, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1026;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1030;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__decompression_bomb_check );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1030;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_size );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1030;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_37cc5b83577da51cce196080465f5610->m_frame.f_lineno = 1030;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1030;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_2;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_core );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_new );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_mode );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_size );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_37cc5b83577da51cce196080465f5610->m_frame.f_lineno = 1031;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_5 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_im, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1031;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37cc5b83577da51cce196080465f5610 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_37cc5b83577da51cce196080465f5610 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_37cc5b83577da51cce196080465f5610 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_37cc5b83577da51cce196080465f5610, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_37cc5b83577da51cce196080465f5610->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_37cc5b83577da51cce196080465f5610, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_37cc5b83577da51cce196080465f5610,
        type_description_1,
        par_self,
        par_frame
    );


    // Release cached frame.
    if ( frame_37cc5b83577da51cce196080465f5610 == cache_frame_37cc5b83577da51cce196080465f5610 )
    {
        Py_DECREF( frame_37cc5b83577da51cce196080465f5610 );
    }
    cache_frame_37cc5b83577da51cce196080465f5610 = NULL;

    assertFrameObject( frame_37cc5b83577da51cce196080465f5610 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_59_seek );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_frame );
    Py_DECREF( par_frame );
    par_frame = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_frame );
    Py_DECREF( par_frame );
    par_frame = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_59_seek );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_60__seek( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_frame = python_pars[ 1 ];
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    struct Nuitka_FrameObject *frame_08022af7f40313a8c4c985aee619a19b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_08022af7f40313a8c4c985aee619a19b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_08022af7f40313a8c4c985aee619a19b, codeobj_08022af7f40313a8c4c985aee619a19b, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_08022af7f40313a8c4c985aee619a19b = cache_frame_08022af7f40313a8c4c985aee619a19b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_08022af7f40313a8c4c985aee619a19b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_08022af7f40313a8c4c985aee619a19b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__TiffImageFile__fp );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1034;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_fp, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1034;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__frame_pos );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1035;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1035;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_frame );
        tmp_compexpr_right_1 = par_frame;
        tmp_operand_name_1 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1035;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1035;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_operand_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__TiffImageFile__next );
        if ( tmp_operand_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1036;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        Py_DECREF( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1036;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_b35b41cdf872120d59d03110260cc850;
            frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1037;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_EOFError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1037;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_mvar_value_1;
        int tmp_truth_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1038;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1038;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_source_name_5;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_6;
            tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_1 != NULL );
            tmp_left_name_1 = const_str_digest_d01e13759d1e788297ffbd672842812b;
            CHECK_OBJECT( par_frame );
            tmp_tuple_element_1 = par_frame;
            tmp_right_name_1 = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__TiffImageFile__frame );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 1041;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__TiffImageFile__next );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 1041;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_1, 2, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_fp );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 1041;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1041;
            tmp_tuple_element_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 1041;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_1, 3, tmp_tuple_element_1 );
            tmp_args_element_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1039;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1039;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1039;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_fp );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1044;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1044;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1044;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_fp );
        if ( tmp_source_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_seek );
        Py_DECREF( tmp_source_name_8 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__TiffImageFile__next );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1045;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1045;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_13;
        CHECK_OBJECT( par_self );
        tmp_source_name_12 = par_self;
        tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__frame_pos );
        if ( tmp_source_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1046;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_append );
        Py_DECREF( tmp_source_name_11 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1046;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_13 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__TiffImageFile__next );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 1046;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1046;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1046;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_mvar_value_2;
        int tmp_truth_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1047;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_mvar_value_2 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1047;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_14;
            tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_4 != NULL );
            tmp_left_name_2 = const_str_digest_37cb21a10952216801826b6d0e8eed45;
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_fp );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1048;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1048;
            tmp_right_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_tell );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_right_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1048;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1048;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1048;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1048;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        branch_no_4:;
    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_15;
        PyObject *tmp_source_name_16;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_source_name_17;
        CHECK_OBJECT( par_self );
        tmp_source_name_16 = par_self;
        tmp_source_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tag_v2 );
        if ( tmp_source_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1049;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_load );
        Py_DECREF( tmp_source_name_15 );
        if ( tmp_called_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1049;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_17 = par_self;
        tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_fp );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 1049;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1049;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
        }

        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_5 );
        if ( tmp_call_result_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1049;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_6 );
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_source_name_18;
        PyObject *tmp_source_name_19;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_19 = par_self;
        tmp_source_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_tag_v2 );
        if ( tmp_source_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_next );
        Py_DECREF( tmp_source_name_18 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__TiffImageFile__next, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_20;
        CHECK_OBJECT( par_self );
        tmp_source_name_20 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__TiffImageFile__frame );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1051;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_attr_1__start;
            tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_3 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_3 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_3, tmp_right_name_3 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1051;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_inplace_assign_attr_1__end;
            tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_3 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__TiffImageFile__frame, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1051;
            type_description_1 = "oo";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1035;
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_21;
        PyObject *tmp_source_name_22;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_23;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_22 = par_self;
        tmp_source_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_fp );
        if ( tmp_source_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1052;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_seek );
        Py_DECREF( tmp_source_name_21 );
        if ( tmp_called_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1052;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_23 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__frame_pos );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 1052;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_frame );
        tmp_subscript_name_1 = par_frame;
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 1052;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1052;
        {
            PyObject *call_args[] = { tmp_args_element_name_6 };
            tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
        }

        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1052;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_7 );
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_24;
        PyObject *tmp_source_name_25;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_source_name_26;
        CHECK_OBJECT( par_self );
        tmp_source_name_25 = par_self;
        tmp_source_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_tag_v2 );
        if ( tmp_source_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1053;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_load );
        Py_DECREF( tmp_source_name_24 );
        if ( tmp_called_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1053;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_26 = par_self;
        tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_fp );
        if ( tmp_args_element_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_7 );

            exception_lineno = 1053;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1053;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
        }

        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        if ( tmp_call_result_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1053;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_8 );
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_source_name_27;
        PyObject *tmp_source_name_28;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_28 = par_self;
        tmp_source_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_tag_v2 );
        if ( tmp_source_name_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_next );
        Py_DECREF( tmp_source_name_27 );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__TiffImageFile__next, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_8;
        PyObject *tmp_source_name_29;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_source_name_30;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v1" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }

        tmp_source_name_29 = tmp_mvar_value_3;
        tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_from_v2 );
        if ( tmp_called_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_30 = par_self;
        tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_tag_v2 );
        if ( tmp_args_element_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_8 );

            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1056;
        {
            PyObject *call_args[] = { tmp_args_element_name_8 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
        }

        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_8 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
        assert( tmp_assign_unpack_1__assign_source == NULL );
        tmp_assign_unpack_1__assign_source = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assattr_name_5 = tmp_assign_unpack_1__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_tag, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assattr_name_6 = tmp_assign_unpack_1__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_ifd, tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1056;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT( par_frame );
        tmp_assattr_name_7 = par_frame;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain__TiffImageFile__frame, tmp_assattr_name_7 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1057;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_9;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_08022af7f40313a8c4c985aee619a19b->m_frame.f_lineno = 1058;
        tmp_call_result_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain__setup );
        if ( tmp_call_result_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1058;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_9 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08022af7f40313a8c4c985aee619a19b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08022af7f40313a8c4c985aee619a19b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_08022af7f40313a8c4c985aee619a19b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_08022af7f40313a8c4c985aee619a19b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_08022af7f40313a8c4c985aee619a19b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_08022af7f40313a8c4c985aee619a19b,
        type_description_1,
        par_self,
        par_frame
    );


    // Release cached frame.
    if ( frame_08022af7f40313a8c4c985aee619a19b == cache_frame_08022af7f40313a8c4c985aee619a19b )
    {
        Py_DECREF( frame_08022af7f40313a8c4c985aee619a19b );
    }
    cache_frame_08022af7f40313a8c4c985aee619a19b = NULL;

    assertFrameObject( frame_08022af7f40313a8c4c985aee619a19b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_60__seek );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_frame );
    Py_DECREF( par_frame );
    par_frame = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_frame );
    Py_DECREF( par_frame );
    par_frame = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_60__seek );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_61_tell( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_e0a5956b232208871ef5771c8fbe1eac;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e0a5956b232208871ef5771c8fbe1eac = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e0a5956b232208871ef5771c8fbe1eac, codeobj_e0a5956b232208871ef5771c8fbe1eac, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_e0a5956b232208871ef5771c8fbe1eac = cache_frame_e0a5956b232208871ef5771c8fbe1eac;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e0a5956b232208871ef5771c8fbe1eac );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e0a5956b232208871ef5771c8fbe1eac ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__TiffImageFile__frame );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1062;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0a5956b232208871ef5771c8fbe1eac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0a5956b232208871ef5771c8fbe1eac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e0a5956b232208871ef5771c8fbe1eac );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e0a5956b232208871ef5771c8fbe1eac, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e0a5956b232208871ef5771c8fbe1eac->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e0a5956b232208871ef5771c8fbe1eac, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e0a5956b232208871ef5771c8fbe1eac,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_e0a5956b232208871ef5771c8fbe1eac == cache_frame_e0a5956b232208871ef5771c8fbe1eac )
    {
        Py_DECREF( frame_e0a5956b232208871ef5771c8fbe1eac );
    }
    cache_frame_e0a5956b232208871ef5771c8fbe1eac = NULL;

    assertFrameObject( frame_e0a5956b232208871ef5771c8fbe1eac );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_61_tell );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_61_tell );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_62_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_5ea41118e7c1019505b42897e95a9685;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5ea41118e7c1019505b42897e95a9685 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5ea41118e7c1019505b42897e95a9685, codeobj_5ea41118e7c1019505b42897e95a9685, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_5ea41118e7c1019505b42897e95a9685 = cache_frame_5ea41118e7c1019505b42897e95a9685;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5ea41118e7c1019505b42897e95a9685 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5ea41118e7c1019505b42897e95a9685 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__size );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1066;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ea41118e7c1019505b42897e95a9685 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ea41118e7c1019505b42897e95a9685 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ea41118e7c1019505b42897e95a9685 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5ea41118e7c1019505b42897e95a9685, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5ea41118e7c1019505b42897e95a9685->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5ea41118e7c1019505b42897e95a9685, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5ea41118e7c1019505b42897e95a9685,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_5ea41118e7c1019505b42897e95a9685 == cache_frame_5ea41118e7c1019505b42897e95a9685 )
    {
        Py_DECREF( frame_5ea41118e7c1019505b42897e95a9685 );
    }
    cache_frame_5ea41118e7c1019505b42897e95a9685 = NULL;

    assertFrameObject( frame_5ea41118e7c1019505b42897e95a9685 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_62_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_62_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_63_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_acb470d44072f1d55d1eb2629adf0c6a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_acb470d44072f1d55d1eb2629adf0c6a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_acb470d44072f1d55d1eb2629adf0c6a, codeobj_acb470d44072f1d55d1eb2629adf0c6a, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_acb470d44072f1d55d1eb2629adf0c6a = cache_frame_acb470d44072f1d55d1eb2629adf0c6a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_acb470d44072f1d55d1eb2629adf0c6a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_acb470d44072f1d55d1eb2629adf0c6a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_warnings );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1070;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1070;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_digest_4a4adbabf0cfc1e325ab1fe61f1e5dd5;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1073;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = tmp_mvar_value_2;
        frame_acb470d44072f1d55d1eb2629adf0c6a->m_frame.f_lineno = 1070;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1070;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_value );
        tmp_assattr_name_1 = par_value;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1075;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_acb470d44072f1d55d1eb2629adf0c6a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_acb470d44072f1d55d1eb2629adf0c6a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_acb470d44072f1d55d1eb2629adf0c6a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_acb470d44072f1d55d1eb2629adf0c6a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_acb470d44072f1d55d1eb2629adf0c6a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_acb470d44072f1d55d1eb2629adf0c6a,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_acb470d44072f1d55d1eb2629adf0c6a == cache_frame_acb470d44072f1d55d1eb2629adf0c6a )
    {
        Py_DECREF( frame_acb470d44072f1d55d1eb2629adf0c6a );
    }
    cache_frame_acb470d44072f1d55d1eb2629adf0c6a = NULL;

    assertFrameObject( frame_acb470d44072f1d55d1eb2629adf0c6a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_63_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_63_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_64_load( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_726f2dfc8f4541083282f444923c412b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_726f2dfc8f4541083282f444923c412b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_726f2dfc8f4541083282f444923c412b, codeobj_726f2dfc8f4541083282f444923c412b, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_726f2dfc8f4541083282f444923c412b = cache_frame_726f2dfc8f4541083282f444923c412b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_726f2dfc8f4541083282f444923c412b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_726f2dfc8f4541083282f444923c412b ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_use_load_libtiff );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1078;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1078;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_726f2dfc8f4541083282f444923c412b->m_frame.f_lineno = 1079;
            tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__load_libtiff );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1079;
                type_description_1 = "oN";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_type_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_object_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1080;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }

        tmp_type_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_object_name_1 = par_self;
        tmp_called_instance_2 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1080;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        frame_726f2dfc8f4541083282f444923c412b->m_frame.f_lineno = 1080;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_load );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1080;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_726f2dfc8f4541083282f444923c412b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_726f2dfc8f4541083282f444923c412b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_726f2dfc8f4541083282f444923c412b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_726f2dfc8f4541083282f444923c412b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_726f2dfc8f4541083282f444923c412b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_726f2dfc8f4541083282f444923c412b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_726f2dfc8f4541083282f444923c412b,
        type_description_1,
        par_self,
        NULL
    );


    // Release cached frame.
    if ( frame_726f2dfc8f4541083282f444923c412b == cache_frame_726f2dfc8f4541083282f444923c412b )
    {
        Py_DECREF( frame_726f2dfc8f4541083282f444923c412b );
    }
    cache_frame_726f2dfc8f4541083282f444923c412b = NULL;

    assertFrameObject( frame_726f2dfc8f4541083282f444923c412b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_64_load );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_64_load );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_65_load_end( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_847b9e04fc3f5623f77010a62056a35f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_847b9e04fc3f5623f77010a62056a35f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_847b9e04fc3f5623f77010a62056a35f, codeobj_847b9e04fc3f5623f77010a62056a35f, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_847b9e04fc3f5623f77010a62056a35f = cache_frame_847b9e04fc3f5623f77010a62056a35f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_847b9e04fc3f5623f77010a62056a35f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_847b9e04fc3f5623f77010a62056a35f ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__TiffImageFile__frame );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1085;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1085;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__TiffImageFile__next );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1085;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1085;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__close_exclusive_fp_after_loading, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1086;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_847b9e04fc3f5623f77010a62056a35f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_847b9e04fc3f5623f77010a62056a35f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_847b9e04fc3f5623f77010a62056a35f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_847b9e04fc3f5623f77010a62056a35f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_847b9e04fc3f5623f77010a62056a35f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_847b9e04fc3f5623f77010a62056a35f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_847b9e04fc3f5623f77010a62056a35f == cache_frame_847b9e04fc3f5623f77010a62056a35f )
    {
        Py_DECREF( frame_847b9e04fc3f5623f77010a62056a35f );
    }
    cache_frame_847b9e04fc3f5623f77010a62056a35f = NULL;

    assertFrameObject( frame_847b9e04fc3f5623f77010a62056a35f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_65_load_end );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_65_load_end );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_66__load_libtiff( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_pixel = NULL;
    PyObject *var_extents = NULL;
    PyObject *var_args = NULL;
    PyObject *var_fp = NULL;
    PyObject *var_decoder = NULL;
    PyObject *var_n = NULL;
    PyObject *var_err = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    struct Nuitka_FrameObject *frame_42adb49f00dcb5a9d82a072b42606ab4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    static struct Nuitka_FrameObject *cache_frame_42adb49f00dcb5a9d82a072b42606ab4 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_42adb49f00dcb5a9d82a072b42606ab4, codeobj_42adb49f00dcb5a9d82a072b42606ab4, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_42adb49f00dcb5a9d82a072b42606ab4 = cache_frame_42adb49f00dcb5a9d82a072b42606ab4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_42adb49f00dcb5a9d82a072b42606ab4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_42adb49f00dcb5a9d82a072b42606ab4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1092;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Image );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1092;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_args_element_name_1 = par_self;
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1092;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_load, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1092;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_pixel == NULL );
        var_pixel = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tile );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1094;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_e22ac7b852354d067e215f51ea4a3592;
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1095;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1095;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tile );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1096;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1096;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( var_pixel );
        tmp_return_value = var_pixel;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_2:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1099;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_load_prepare );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1099;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_tile );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1101;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_2 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1101;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        assert( !(tmp_res == -1) );
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_make_exception_arg_2;
            tmp_make_exception_arg_2 = const_str_digest_645a4bb1e5a365205de5623d4b842cfa;
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1102;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_2 };
                tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            assert( !(tmp_raise_type_2 == NULL) );
            exception_type = tmp_raise_type_2;
            exception_lineno = 1102;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tile );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1106;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_subscribed_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1106;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_2, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1106;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_extents == NULL );
        var_extents = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_right_name_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_source_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tile );
        if ( tmp_subscribed_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_0;
        tmp_subscribed_name_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_3, 0 );
        Py_DECREF( tmp_subscribed_name_4 );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_4 = const_int_pos_3;
        tmp_list_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_4, 3 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_list_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PySequence_List( tmp_list_arg_1 );
        Py_DECREF( tmp_list_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_tag_v2 );
        if ( tmp_source_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_offset );
        Py_DECREF( tmp_source_name_7 );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyList_New( 1 );
        PyList_SET_ITEM( tmp_right_name_1, 0, tmp_list_element_1 );
        tmp_assign_source_3 = BINARY_OPERATION_ADD_OBJECT_LIST( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1107;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_args == NULL );
        var_args = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_source_name_9;
        PyObject *tmp_source_name_10;
        PyObject *tmp_attribute_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_11;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_12;
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_fp );
        if ( tmp_source_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_attribute_name_1 = const_str_plain_fileno;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_9, tmp_attribute_name_1 );
        Py_DECREF( tmp_source_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_and_left_value_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
        if ( tmp_and_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_11 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_dup );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_12 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_fp );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1114;
        tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_fileno );
        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1114;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_and_right_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_and_right_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1114;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_4 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        Py_INCREF( tmp_and_left_value_1 );
        tmp_assign_source_4 = tmp_and_left_value_1;
        and_end_1:;
        assert( var_fp == NULL );
        var_fp = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_source_name_13;
        PyObject *tmp_source_name_14;
        PyObject *tmp_attribute_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_14 = par_self;
        tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_fp );
        if ( tmp_source_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1118;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_attribute_name_2 = const_str_plain_flush;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_13, tmp_attribute_name_2 );
        Py_DECREF( tmp_source_name_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1118;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_15;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_15 = par_self;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_fp );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1119;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1119;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_flush );
            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1119;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_4:;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_42adb49f00dcb5a9d82a072b42606ab4, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_42adb49f00dcb5a9d82a072b42606ab4, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_3 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_3 = PyExc_IOError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1120;
            type_description_1 = "oooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_assign_source_5;
            tmp_assign_source_5 = Py_False;
            {
                PyObject *old = var_fp;
                var_fp = tmp_assign_source_5;
                Py_INCREF( var_fp );
                Py_XDECREF( old );
            }

        }
        goto branch_end_5;
        branch_no_5:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1113;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame) frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooo";
        goto try_except_handler_3;
        branch_end_5:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_66__load_libtiff );
    return NULL;
    // End of try:
    try_end_1:;
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_truth_name_1;
        if ( var_fp == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fp" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1125;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( var_fp );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1125;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            int tmp_ass_subscript_res_1;
            if ( var_fp == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fp" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1126;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subvalue_1 = var_fp;
            CHECK_OBJECT( var_args );
            tmp_ass_subscribed_1 = var_args;
            tmp_ass_subscript_1 = const_int_pos_2;
            tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_1, tmp_ass_subscript_1, 2, tmp_ass_subvalue_1 );
            if ( tmp_ass_subscript_res_1 == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1126;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_16;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_17;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_arg_1;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_source_name_18;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1128;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_16 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__getdecoder );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1128;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_17 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_mode );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1128;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_4 = const_str_plain_libtiff;
        CHECK_OBJECT( var_args );
        tmp_tuple_arg_1 = var_args;
        tmp_args_element_name_5 = PySequence_Tuple( tmp_tuple_arg_1 );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 1128;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_18 = par_self;
        tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_decoderconfig );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_5 );

            exception_lineno = 1129;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1128;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1128;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_decoder == NULL );
        var_decoder = tmp_assign_source_6;
    }
    // Tried code:
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_19;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_source_name_20;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT( var_decoder );
        tmp_source_name_19 = var_decoder;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_setimage );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1131;
            type_description_1 = "oooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_20 = par_self;
        tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_im );
        if ( tmp_args_element_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 1131;
            type_description_1 = "oooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_extents );
        tmp_args_element_name_8 = var_extents;
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1131;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_7 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1131;
            type_description_1 = "oooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_42adb49f00dcb5a9d82a072b42606ab4, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_42adb49f00dcb5a9d82a072b42606ab4, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_4 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1132;
            type_description_1 = "oooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_raise_type_3;
            PyObject *tmp_make_exception_arg_3;
            tmp_make_exception_arg_3 = const_str_digest_9b4319a76efe1c901eb0d8c93992356a;
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1133;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_3 };
                tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            assert( !(tmp_raise_type_3 == NULL) );
            exception_type = tmp_raise_type_3;
            exception_lineno = 1133;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            goto try_except_handler_5;
        }
        goto branch_end_7;
        branch_no_7:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1130;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame) frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooo";
        goto try_except_handler_5;
        branch_end_7:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_66__load_libtiff );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_source_name_21;
        PyObject *tmp_source_name_22;
        PyObject *tmp_attribute_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_22 = par_self;
        tmp_source_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_fp );
        if ( tmp_source_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1135;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_name_3 = const_str_plain_getvalue;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_21, tmp_attribute_name_3 );
        Py_DECREF( tmp_source_name_21 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1135;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_mvar_value_4;
            int tmp_truth_name_2;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1145;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_mvar_value_4 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1145;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_call_result_4;
                tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_4 != NULL );
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1146;
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_digest_13586c50c32aa1b6d5c86580eca24f00_tuple, 0 ) );

                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1146;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            branch_no_9:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_23;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_24;
            CHECK_OBJECT( var_decoder );
            tmp_source_name_23 = var_decoder;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_decode );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1147;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_24 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_fp );
            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1147;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1147;
            tmp_args_element_name_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_getvalue );
            Py_DECREF( tmp_called_instance_5 );
            if ( tmp_args_element_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1147;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1147;
            {
                PyObject *call_args[] = { tmp_args_element_name_9 };
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_9 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1147;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_7 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1147;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_8 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1147;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1147;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooo";
                        exception_lineno = 1147;
                        goto try_except_handler_7;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 1147;
                goto try_except_handler_7;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        try_end_4:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto frame_exception_exit_1;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
            assert( var_n == NULL );
            Py_INCREF( tmp_assign_source_10 );
            var_n = tmp_assign_source_10;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
            assert( var_err == NULL );
            Py_INCREF( tmp_assign_source_11 );
            var_err = tmp_assign_source_11;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        goto branch_end_8;
        branch_no_8:;
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_source_name_25;
            PyObject *tmp_source_name_26;
            PyObject *tmp_attribute_name_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_26 = par_self;
            tmp_source_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_fp );
            if ( tmp_source_name_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1148;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_attribute_name_4 = const_str_plain_fileno;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_25, tmp_attribute_name_4 );
            Py_DECREF( tmp_source_name_25 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1148;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                nuitka_bool tmp_condition_result_11;
                PyObject *tmp_mvar_value_5;
                int tmp_truth_name_3;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1150;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_truth_name_3 = CHECK_IF_TRUE( tmp_mvar_value_5 );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1150;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_11 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                {
                    PyObject *tmp_called_name_6;
                    PyObject *tmp_call_result_5;
                    tmp_called_name_6 = LOOKUP_BUILTIN( const_str_plain_print );
                    assert( tmp_called_name_6 != NULL );
                    frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1151;
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_str_digest_cb85ff464770b2aa9e9d46bc6629552b_tuple, 0 ) );

                    if ( tmp_call_result_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1151;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_5 );
                }
                branch_no_11:;
            }
            {
                PyObject *tmp_called_instance_6;
                PyObject *tmp_source_name_27;
                PyObject *tmp_call_result_6;
                CHECK_OBJECT( par_self );
                tmp_source_name_27 = par_self;
                tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_fp );
                if ( tmp_called_instance_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1152;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1152;
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

                Py_DECREF( tmp_called_instance_6 );
                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1152;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_12;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_called_instance_7;
                CHECK_OBJECT( var_decoder );
                tmp_called_instance_7 = var_decoder;
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1154;
                tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_bytes_digest_1ad780dcba2661bd1452198fa75d5f92_tuple, 0 ) );

                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1154;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_8;
                }
                tmp_assign_source_12 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1154;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_2__source_iter == NULL );
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_12;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_13;
                PyObject *tmp_unpack_3;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
                if ( tmp_assign_source_13 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 1154;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_2__element_1 == NULL );
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_13;
            }
            {
                PyObject *tmp_assign_source_14;
                PyObject *tmp_unpack_4;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
                if ( tmp_assign_source_14 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 1154;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_2__element_2 == NULL );
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_14;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooo";
                            exception_lineno = 1154;
                            goto try_except_handler_9;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooo";
                    exception_lineno = 1154;
                    goto try_except_handler_9;
                }
            }
            goto try_end_6;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_8;
            // End of try:
            try_end_6:;
            goto try_end_7;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto frame_exception_exit_1;
            // End of try:
            try_end_7:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            {
                PyObject *tmp_assign_source_15;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                tmp_assign_source_15 = tmp_tuple_unpack_2__element_1;
                assert( var_n == NULL );
                Py_INCREF( tmp_assign_source_15 );
                var_n = tmp_assign_source_15;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            {
                PyObject *tmp_assign_source_16;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                tmp_assign_source_16 = tmp_tuple_unpack_2__element_2;
                assert( var_err == NULL );
                Py_INCREF( tmp_assign_source_16 );
                var_err = tmp_assign_source_16;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            goto branch_end_10;
            branch_no_10:;
            {
                nuitka_bool tmp_condition_result_12;
                PyObject *tmp_mvar_value_6;
                int tmp_truth_name_4;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1157;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_truth_name_4 = CHECK_IF_TRUE( tmp_mvar_value_6 );
                if ( tmp_truth_name_4 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1157;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_12 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_12;
                }
                else
                {
                    goto branch_no_12;
                }
                branch_yes_12:;
                {
                    PyObject *tmp_called_name_7;
                    PyObject *tmp_call_result_7;
                    tmp_called_name_7 = LOOKUP_BUILTIN( const_str_plain_print );
                    assert( tmp_called_name_7 != NULL );
                    frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1158;
                    tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_digest_16264c6cee55ce69ff1ca662f5af22ac_tuple, 0 ) );

                    if ( tmp_call_result_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1158;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_7 );
                }
                branch_no_12:;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_17;
                PyObject *tmp_iter_arg_3;
                PyObject *tmp_called_name_8;
                PyObject *tmp_source_name_28;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_called_instance_8;
                PyObject *tmp_source_name_29;
                CHECK_OBJECT( var_decoder );
                tmp_source_name_28 = var_decoder;
                tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_decode );
                if ( tmp_called_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1160;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_10;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_29 = par_self;
                tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_fp );
                if ( tmp_called_instance_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );

                    exception_lineno = 1160;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_10;
                }
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1160;
                tmp_args_element_name_10 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_read );
                Py_DECREF( tmp_called_instance_8 );
                if ( tmp_args_element_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );

                    exception_lineno = 1160;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_10;
                }
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1160;
                {
                    PyObject *call_args[] = { tmp_args_element_name_10 };
                    tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
                }

                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_element_name_10 );
                if ( tmp_iter_arg_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1160;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_10;
                }
                tmp_assign_source_17 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
                Py_DECREF( tmp_iter_arg_3 );
                if ( tmp_assign_source_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1160;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_10;
                }
                assert( tmp_tuple_unpack_3__source_iter == NULL );
                tmp_tuple_unpack_3__source_iter = tmp_assign_source_17;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_unpack_5;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
                if ( tmp_assign_source_18 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 1160;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_3__element_1 == NULL );
                tmp_tuple_unpack_3__element_1 = tmp_assign_source_18;
            }
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_unpack_6;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_19 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
                if ( tmp_assign_source_19 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 1160;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_3__element_2 == NULL );
                tmp_tuple_unpack_3__element_2 = tmp_assign_source_19;
            }
            {
                PyObject *tmp_iterator_name_3;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooo";
                            exception_lineno = 1160;
                            goto try_except_handler_11;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooo";
                    exception_lineno = 1160;
                    goto try_except_handler_11;
                }
            }
            goto try_end_8;
            // Exception handler code:
            try_except_handler_11:;
            exception_keeper_type_9 = exception_type;
            exception_keeper_value_9 = exception_value;
            exception_keeper_tb_9 = exception_tb;
            exception_keeper_lineno_9 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_9;
            exception_value = exception_keeper_value_9;
            exception_tb = exception_keeper_tb_9;
            exception_lineno = exception_keeper_lineno_9;

            goto try_except_handler_10;
            // End of try:
            try_end_8:;
            goto try_end_9;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto frame_exception_exit_1;
            // End of try:
            try_end_9:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            {
                PyObject *tmp_assign_source_20;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                tmp_assign_source_20 = tmp_tuple_unpack_3__element_1;
                assert( var_n == NULL );
                Py_INCREF( tmp_assign_source_20 );
                var_n = tmp_assign_source_20;
            }
            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            {
                PyObject *tmp_assign_source_21;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                tmp_assign_source_21 = tmp_tuple_unpack_3__element_2;
                assert( var_err == NULL );
                Py_INCREF( tmp_assign_source_21 );
                var_err = tmp_assign_source_21;
            }
            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            branch_end_10:;
        }
        branch_end_8:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_tile, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1162;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = const_int_0;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_readonly, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1163;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_source_name_30;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_30 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain__exclusive_fp );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1165;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_5 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1165;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_13 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            nuitka_bool tmp_condition_result_14;
            int tmp_and_left_truth_2;
            nuitka_bool tmp_and_left_value_2;
            nuitka_bool tmp_and_right_value_2;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_source_name_31;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_32;
            CHECK_OBJECT( par_self );
            tmp_source_name_31 = par_self;
            tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain__TiffImageFile__frame );
            if ( tmp_compexpr_left_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_5 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            Py_DECREF( tmp_compexpr_left_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_2 == 1 )
            {
                goto and_right_2;
            }
            else
            {
                goto and_left_2;
            }
            and_right_2:;
            CHECK_OBJECT( par_self );
            tmp_source_name_32 = par_self;
            tmp_operand_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain__TiffImageFile__next );
            if ( tmp_operand_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            Py_DECREF( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_14 = tmp_and_right_value_2;
            goto and_end_2;
            and_left_2:;
            tmp_condition_result_14 = tmp_and_left_value_2;
            and_end_2:;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_source_name_33;
                PyObject *tmp_call_result_8;
                CHECK_OBJECT( par_self );
                tmp_source_name_33 = par_self;
                tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_fp );
                if ( tmp_called_instance_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1167;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1167;
                tmp_call_result_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_close );
                Py_DECREF( tmp_called_instance_9 );
                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1167;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            {
                PyObject *tmp_assattr_name_3;
                PyObject *tmp_assattr_target_3;
                tmp_assattr_name_3 = Py_None;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_3 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_fp, tmp_assattr_name_3 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1168;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_14:;
        }
        branch_no_13:;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        if ( var_err == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1170;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_6 = var_err;
        tmp_compexpr_right_6 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1170;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_raise_type_4;
            PyObject *tmp_make_exception_arg_4;
            if ( var_err == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1171;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_make_exception_arg_4 = var_err;
            frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1171;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_4 };
                tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            assert( !(tmp_raise_type_4 == NULL) );
            exception_type = tmp_raise_type_4;
            exception_lineno = 1171;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_15:;
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_source_name_34;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_11;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1173;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_34 = tmp_mvar_value_7;
        tmp_called_instance_10 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_Image );
        if ( tmp_called_instance_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1173;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_args_element_name_11 = par_self;
        frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame.f_lineno = 1173;
        {
            PyObject *call_args[] = { tmp_args_element_name_11 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_load, call_args );
        }

        Py_DECREF( tmp_called_instance_10 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1173;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_42adb49f00dcb5a9d82a072b42606ab4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_42adb49f00dcb5a9d82a072b42606ab4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_42adb49f00dcb5a9d82a072b42606ab4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_42adb49f00dcb5a9d82a072b42606ab4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_42adb49f00dcb5a9d82a072b42606ab4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_42adb49f00dcb5a9d82a072b42606ab4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_42adb49f00dcb5a9d82a072b42606ab4,
        type_description_1,
        par_self,
        var_pixel,
        var_extents,
        var_args,
        var_fp,
        var_decoder,
        var_n,
        var_err
    );


    // Release cached frame.
    if ( frame_42adb49f00dcb5a9d82a072b42606ab4 == cache_frame_42adb49f00dcb5a9d82a072b42606ab4 )
    {
        Py_DECREF( frame_42adb49f00dcb5a9d82a072b42606ab4 );
    }
    cache_frame_42adb49f00dcb5a9d82a072b42606ab4 = NULL;

    assertFrameObject( frame_42adb49f00dcb5a9d82a072b42606ab4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_66__load_libtiff );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_pixel );
    Py_DECREF( var_pixel );
    var_pixel = NULL;

    Py_XDECREF( var_extents );
    var_extents = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_decoder );
    var_decoder = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_pixel );
    var_pixel = NULL;

    Py_XDECREF( var_extents );
    var_extents = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    Py_XDECREF( var_decoder );
    var_decoder = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_66__load_libtiff );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_67__setup( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_photo = NULL;
    PyObject *var_fillorder = NULL;
    PyObject *var_xsize = NULL;
    PyObject *var_ysize = NULL;
    PyObject *var_sampleFormat = NULL;
    PyObject *var_bps_tuple = NULL;
    PyObject *var_extra_tuple = NULL;
    PyObject *var_bps_count = NULL;
    PyObject *var_key = NULL;
    PyObject *var_rawmode = NULL;
    PyObject *var_xres = NULL;
    PyObject *var_yres = NULL;
    PyObject *var_resunit = NULL;
    PyObject *var_x = NULL;
    PyObject *var_y = NULL;
    PyObject *var_layer = NULL;
    PyObject *var_a = NULL;
    PyObject *var_offsets = NULL;
    PyObject *var_h = NULL;
    PyObject *var_w = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_stride = NULL;
    PyObject *var_tile_rawmode = NULL;
    PyObject *var_palette = NULL;
    PyObject *outline_0_var_b = NULL;
    PyObject *tmp_assign_unpack_2__assign_source = NULL;
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    struct Nuitka_FrameObject *frame_b8632c5f1f36afe4f972176d21c2e38f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    struct Nuitka_FrameObject *frame_9bbef538ef689fe1a54a30d7b09625e0_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    static struct Nuitka_FrameObject *cache_frame_9bbef538ef689fe1a54a30d7b09625e0_2 = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    static struct Nuitka_FrameObject *cache_frame_b8632c5f1f36afe4f972176d21c2e38f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b8632c5f1f36afe4f972176d21c2e38f, codeobj_b8632c5f1f36afe4f972176d21c2e38f, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b8632c5f1f36afe4f972176d21c2e38f = cache_frame_b8632c5f1f36afe4f972176d21c2e38f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b8632c5f1f36afe4f972176d21c2e38f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b8632c5f1f36afe4f972176d21c2e38f ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        tmp_compexpr_left_1 = const_int_pos_48129;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tag_v2 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1178;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1178;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_08d66d5d9d66e1ec869adfbc7b7b06ef;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1179;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1179;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COMPRESSION_INFO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tag_v2 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_get );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COMPRESSION );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COMPRESSION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_1 = tmp_mvar_value_2;
        tmp_args_element_name_2 = const_int_pos_1;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1182;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_subscript_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        if ( tmp_subscript_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__compression, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1182;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tag_v2 );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1183;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_get );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1183;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PLANAR_CONFIGURATION );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PLANAR_CONFIGURATION );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PLANAR_CONFIGURATION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1183;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_3 = tmp_mvar_value_3;
        tmp_args_element_name_4 = const_int_pos_1;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1183;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1183;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__planar_configuration, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1183;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_tag_v2 );
        if ( tmp_source_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1187;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_get );
        Py_DECREF( tmp_source_name_6 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1187;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PHOTOMETRIC_INTERPRETATION );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PHOTOMETRIC_INTERPRETATION );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PHOTOMETRIC_INTERPRETATION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1187;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_5 = tmp_mvar_value_4;
        tmp_args_element_name_6 = const_int_0;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1187;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1187;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_photo == NULL );
        var_photo = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_tag_v2 );
        if ( tmp_source_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1189;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_get );
        Py_DECREF( tmp_source_name_8 );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1189;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_FILLORDER );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FILLORDER );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FILLORDER" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1189;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_7 = tmp_mvar_value_5;
        tmp_args_element_name_8 = const_int_pos_1;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1189;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1189;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_fillorder == NULL );
        var_fillorder = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_mvar_value_6;
        int tmp_truth_name_1;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1191;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_6 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1191;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_call_result_1;
            tmp_called_name_5 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_5 != NULL );
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1192;
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_str_digest_6da32f2677f2876f0d19b8aec6191f27_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1192;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_source_name_10;
            tmp_called_name_6 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_6 != NULL );
            tmp_args_element_name_9 = const_str_digest_3d4a30aa5a8fdc78fc1a1b0c477075d3;
            CHECK_OBJECT( par_self );
            tmp_source_name_10 = par_self;
            tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__compression );
            if ( tmp_args_element_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1193;
            {
                PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_args_element_name_10 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_11;
            PyObject *tmp_args_element_name_12;
            tmp_called_name_7 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_7 != NULL );
            tmp_args_element_name_11 = const_str_digest_f0ccfa7d4f587eaaae592d8f3713f584;
            CHECK_OBJECT( var_photo );
            tmp_args_element_name_12 = var_photo;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1194;
            {
                PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1194;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_called_name_8;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_source_name_11;
            tmp_called_name_8 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_8 != NULL );
            tmp_args_element_name_13 = const_str_digest_1fa1460420b567cbdd4eb682ed941476;
            CHECK_OBJECT( par_self );
            tmp_source_name_11 = par_self;
            tmp_args_element_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__planar_configuration );
            if ( tmp_args_element_name_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1195;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1195;
            {
                PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
            }

            Py_DECREF( tmp_args_element_name_14 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1195;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        {
            PyObject *tmp_called_name_9;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_15;
            PyObject *tmp_args_element_name_16;
            tmp_called_name_9 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_9 != NULL );
            tmp_args_element_name_15 = const_str_digest_6e5675988a662f1b304b8bb0cfa4c595;
            CHECK_OBJECT( var_fillorder );
            tmp_args_element_name_16 = var_fillorder;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1196;
            {
                PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
            }

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1196;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        {
            PyObject *tmp_called_name_10;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_12;
            tmp_called_name_10 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_10 != NULL );
            tmp_args_element_name_17 = const_str_digest_6d48505254218ff69df3910d61a5a564;
            CHECK_OBJECT( par_self );
            tmp_source_name_12 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tag );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1197;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1197;
            tmp_args_element_name_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_int_pos_530_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_args_element_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1197;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1197;
            {
                PyObject *call_args[] = { tmp_args_element_name_17, tmp_args_element_name_18 };
                tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
            }

            Py_DECREF( tmp_args_element_name_18 );
            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1197;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_13;
        PyObject *tmp_source_name_14;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_mvar_value_7;
        CHECK_OBJECT( par_self );
        tmp_source_name_14 = par_self;
        tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_tag_v2 );
        if ( tmp_source_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1200;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_get );
        Py_DECREF( tmp_source_name_13 );
        if ( tmp_called_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1200;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEWIDTH );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IMAGEWIDTH );
        }

        if ( tmp_mvar_value_7 == NULL )
        {
            Py_DECREF( tmp_called_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IMAGEWIDTH" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1200;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_19 = tmp_mvar_value_7;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1200;
        {
            PyObject *call_args[] = { tmp_args_element_name_19 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
        }

        Py_DECREF( tmp_called_name_11 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1200;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_xsize == NULL );
        var_xsize = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_12;
        PyObject *tmp_source_name_15;
        PyObject *tmp_source_name_16;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_mvar_value_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_16 = par_self;
        tmp_source_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tag_v2 );
        if ( tmp_source_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1201;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_get );
        Py_DECREF( tmp_source_name_15 );
        if ( tmp_called_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1201;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGELENGTH );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IMAGELENGTH );
        }

        if ( tmp_mvar_value_8 == NULL )
        {
            Py_DECREF( tmp_called_name_12 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IMAGELENGTH" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1201;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_20 = tmp_mvar_value_8;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1201;
        {
            PyObject *call_args[] = { tmp_args_element_name_20 };
            tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
        }

        Py_DECREF( tmp_called_name_12 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1201;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_ysize == NULL );
        var_ysize = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( var_xsize );
        tmp_tuple_element_1 = var_xsize;
        tmp_assattr_name_3 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_3, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_ysize );
        tmp_tuple_element_1 = var_ysize;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_3, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__size, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1202;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_mvar_value_9;
        int tmp_truth_name_2;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1204;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_mvar_value_9 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1204;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_13;
            PyObject *tmp_call_result_7;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_args_element_name_22;
            PyObject *tmp_source_name_17;
            tmp_called_name_13 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_13 != NULL );
            tmp_args_element_name_21 = const_str_digest_ad2179cb5f897d35c7d5f7ba32d3e854;
            CHECK_OBJECT( par_self );
            tmp_source_name_17 = par_self;
            tmp_args_element_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_size );
            if ( tmp_args_element_name_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1205;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1205;
            {
                PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_22 };
                tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, call_args );
            }

            Py_DECREF( tmp_args_element_name_22 );
            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1205;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_7 );
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_18;
        PyObject *tmp_source_name_19;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_args_element_name_24;
        CHECK_OBJECT( par_self );
        tmp_source_name_19 = par_self;
        tmp_source_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_tag_v2 );
        if ( tmp_source_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1207;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_get );
        Py_DECREF( tmp_source_name_18 );
        if ( tmp_called_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1207;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAMPLEFORMAT );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SAMPLEFORMAT );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SAMPLEFORMAT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1207;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_23 = tmp_mvar_value_10;
        tmp_args_element_name_24 = const_tuple_int_pos_1_tuple;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1207;
        {
            PyObject *call_args[] = { tmp_args_element_name_23, tmp_args_element_name_24 };
            tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_called_name_14 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1207;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_sampleFormat == NULL );
        var_sampleFormat = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_outline_return_value_1;
        int tmp_truth_name_3;
        CHECK_OBJECT( var_sampleFormat );
        tmp_len_arg_1 = var_sampleFormat;
        tmp_compexpr_left_2 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1208;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        assert( !(tmp_res == -1) );
        tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_called_name_15;
            PyObject *tmp_args_element_name_25;
            tmp_called_name_15 = LOOKUP_BUILTIN( const_str_plain_min );
            assert( tmp_called_name_15 != NULL );
            CHECK_OBJECT( var_sampleFormat );
            tmp_args_element_name_25 = var_sampleFormat;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1209;
            {
                PyObject *call_args[] = { tmp_args_element_name_25 };
                tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
            }

            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1209;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_comparison_chain_1__operand_2 == NULL );
            tmp_comparison_chain_1__operand_2 = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_called_name_16;
            PyObject *tmp_args_element_name_26;
            tmp_called_name_16 = LOOKUP_BUILTIN( const_str_plain_max );
            assert( tmp_called_name_16 != NULL );
            CHECK_OBJECT( var_sampleFormat );
            tmp_args_element_name_26 = var_sampleFormat;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1209;
            {
                PyObject *call_args[] = { tmp_args_element_name_26 };
                tmp_compexpr_left_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
            }

            if ( tmp_compexpr_left_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1209;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_right_3 = tmp_comparison_chain_1__operand_2;
            tmp_assign_source_7 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_left_3 );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1209;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_comparison_chain_1__comparison_result == NULL );
            tmp_comparison_chain_1__comparison_result = tmp_assign_source_7;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_operand_name_1;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_operand_name_1 = tmp_comparison_chain_1__comparison_result;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1209;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_outline_return_value_1 = tmp_comparison_chain_1__comparison_result;
            Py_INCREF( tmp_outline_return_value_1 );
            goto try_return_handler_2;
            branch_no_5:;
        }
        {
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_left_4 = tmp_comparison_chain_1__operand_2;
            tmp_compexpr_right_4 = const_int_pos_1;
            tmp_outline_return_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_outline_return_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1209;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_2;
            }
            goto try_return_handler_2;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
        Py_DECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__comparison_result );
        Py_DECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        Py_XDECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
        return NULL;
        outline_result_1:;
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_outline_return_value_1 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_outline_return_value_1 );

            exception_lineno = 1209;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_outline_return_value_1 );
        tmp_condition_result_4 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_4 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_8;
            tmp_assign_source_8 = const_tuple_int_pos_1_tuple;
            {
                PyObject *old = var_sampleFormat;
                assert( old != NULL );
                var_sampleFormat = tmp_assign_source_8;
                Py_INCREF( var_sampleFormat );
                Py_DECREF( old );
            }

        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_17;
        PyObject *tmp_source_name_20;
        PyObject *tmp_source_name_21;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_args_element_name_28;
        CHECK_OBJECT( par_self );
        tmp_source_name_21 = par_self;
        tmp_source_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_tag_v2 );
        if ( tmp_source_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1217;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_get );
        Py_DECREF( tmp_source_name_20 );
        if ( tmp_called_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1217;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );
        }

        if ( tmp_mvar_value_11 == NULL )
        {
            Py_DECREF( tmp_called_name_17 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BITSPERSAMPLE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1217;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_27 = tmp_mvar_value_11;
        tmp_args_element_name_28 = const_tuple_int_pos_1_tuple;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1217;
        {
            PyObject *call_args[] = { tmp_args_element_name_27, tmp_args_element_name_28 };
            tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_17, call_args );
        }

        Py_DECREF( tmp_called_name_17 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1217;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_bps_tuple == NULL );
        var_bps_tuple = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_name_18;
        PyObject *tmp_source_name_22;
        PyObject *tmp_source_name_23;
        PyObject *tmp_args_element_name_29;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_args_element_name_30;
        CHECK_OBJECT( par_self );
        tmp_source_name_23 = par_self;
        tmp_source_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tag_v2 );
        if ( tmp_source_name_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1218;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_get );
        Py_DECREF( tmp_source_name_22 );
        if ( tmp_called_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1218;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_EXTRASAMPLES );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_EXTRASAMPLES );
        }

        if ( tmp_mvar_value_12 == NULL )
        {
            Py_DECREF( tmp_called_name_18 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "EXTRASAMPLES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1218;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_29 = tmp_mvar_value_12;
        tmp_args_element_name_30 = const_tuple_empty;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1218;
        {
            PyObject *call_args[] = { tmp_args_element_name_29, tmp_args_element_name_30 };
            tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_18, call_args );
        }

        Py_DECREF( tmp_called_name_18 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1218;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_extra_tuple == NULL );
        var_extra_tuple = tmp_assign_source_10;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        CHECK_OBJECT( var_photo );
        tmp_compexpr_left_5 = var_photo;
        tmp_compexpr_right_5 = const_tuple_int_pos_2_int_pos_6_int_pos_8_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_5, tmp_compexpr_left_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1219;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_11;
            tmp_assign_source_11 = const_int_pos_3;
            assert( var_bps_count == NULL );
            Py_INCREF( tmp_assign_source_11 );
            var_bps_count = tmp_assign_source_11;
        }
        goto branch_end_6;
        branch_no_6:;
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            CHECK_OBJECT( var_photo );
            tmp_compexpr_left_6 = var_photo;
            tmp_compexpr_right_6 = const_int_pos_5;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1221;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_assign_source_12;
                tmp_assign_source_12 = const_int_pos_4;
                assert( var_bps_count == NULL );
                Py_INCREF( tmp_assign_source_12 );
                var_bps_count = tmp_assign_source_12;
            }
            goto branch_end_7;
            branch_no_7:;
            {
                PyObject *tmp_assign_source_13;
                tmp_assign_source_13 = const_int_pos_1;
                assert( var_bps_count == NULL );
                Py_INCREF( tmp_assign_source_13 );
                var_bps_count = tmp_assign_source_13;
            }
            branch_end_7:;
        }
        branch_end_6:;
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_len_arg_2;
        if ( var_bps_count == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bps_count" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1225;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_name_1 = var_bps_count;
        CHECK_OBJECT( var_extra_tuple );
        tmp_len_arg_2 = var_extra_tuple;
        tmp_right_name_1 = BUILTIN_LEN( tmp_len_arg_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1225;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_result = BINARY_OPERATION_ADD_LONG_LONG_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1225;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_14 = tmp_left_name_1;
        var_bps_count = tmp_assign_source_14;

    }
    {
        nuitka_bool tmp_condition_result_8;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_len_arg_4;
        CHECK_OBJECT( var_bps_count );
        tmp_compexpr_left_7 = var_bps_count;
        CHECK_OBJECT( var_bps_tuple );
        tmp_len_arg_3 = var_bps_tuple;
        tmp_compexpr_right_7 = BUILTIN_LEN( tmp_len_arg_3 );
        if ( tmp_compexpr_right_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1228;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        Py_DECREF( tmp_compexpr_right_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1228;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( var_bps_tuple );
        tmp_len_arg_4 = var_bps_tuple;
        tmp_compexpr_left_8 = BUILTIN_LEN( tmp_len_arg_4 );
        if ( tmp_compexpr_left_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1228;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_8 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        Py_DECREF( tmp_compexpr_left_8 );
        assert( !(tmp_res == -1) );
        tmp_and_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_8 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_8 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( var_bps_tuple );
            tmp_left_name_2 = var_bps_tuple;
            CHECK_OBJECT( var_bps_count );
            tmp_right_name_2 = var_bps_count;
            tmp_assign_source_15 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_assign_source_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1229;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_bps_tuple;
                assert( old != NULL );
                var_bps_tuple = tmp_assign_source_15;
                Py_DECREF( old );
            }

        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_24;
        PyObject *tmp_source_name_25;
        CHECK_OBJECT( par_self );
        tmp_source_name_25 = par_self;
        tmp_source_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_tag_v2 );
        if ( tmp_source_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1232;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_prefix );
        Py_DECREF( tmp_source_name_24 );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1232;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = PyTuple_New( 6 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_photo );
        tmp_tuple_element_2 = var_photo;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( var_sampleFormat );
        tmp_tuple_element_2 = var_sampleFormat;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 2, tmp_tuple_element_2 );
        CHECK_OBJECT( var_fillorder );
        tmp_tuple_element_2 = var_fillorder;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 3, tmp_tuple_element_2 );
        CHECK_OBJECT( var_bps_tuple );
        tmp_tuple_element_2 = var_bps_tuple;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 4, tmp_tuple_element_2 );
        CHECK_OBJECT( var_extra_tuple );
        tmp_tuple_element_2 = var_extra_tuple;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_16, 5, tmp_tuple_element_2 );
        assert( var_key == NULL );
        var_key = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_mvar_value_13;
        int tmp_truth_name_4;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1234;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_mvar_value_13 );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1234;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_called_name_19;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_31;
            PyObject *tmp_args_element_name_32;
            tmp_called_name_19 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_19 != NULL );
            tmp_args_element_name_31 = const_str_digest_7c5fe682ce2af83dee8766437ee37737;
            CHECK_OBJECT( var_key );
            tmp_args_element_name_32 = var_key;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1235;
            {
                PyObject *call_args[] = { tmp_args_element_name_31, tmp_args_element_name_32 };
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_19, call_args );
            }

            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1235;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_no_9:;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_subscript_name_2;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_OPEN_INFO );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_OPEN_INFO );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "OPEN_INFO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1237;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_subscribed_name_2 = tmp_mvar_value_14;
        CHECK_OBJECT( var_key );
        tmp_subscript_name_2 = var_key;
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1237;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_17 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1237;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_17;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_18 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooo";
            exception_lineno = 1237;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_18;
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_19 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_19 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooo";
            exception_lineno = 1237;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_19;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooooooooooooo";
                    exception_lineno = 1237;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooooooooooooo";
            exception_lineno = 1237;
            goto try_except_handler_5;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assattr_name_4 = tmp_tuple_unpack_1__element_1;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_mode, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1237;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_4 == NULL )
    {
        exception_keeper_tb_4 = MAKE_TRACEBACK( frame_b8632c5f1f36afe4f972176d21c2e38f, exception_keeper_lineno_4 );
    }
    else if ( exception_keeper_lineno_4 != 0 )
    {
        exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_b8632c5f1f36afe4f972176d21c2e38f, exception_keeper_lineno_4 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
    PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        tmp_compexpr_left_9 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_9 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_9, tmp_compexpr_right_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1238;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_mvar_value_15;
            int tmp_truth_name_5;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_15 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1239;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }

            tmp_truth_name_5 = CHECK_IF_TRUE( tmp_mvar_value_15 );
            if ( tmp_truth_name_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1239;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_11 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_called_name_20;
                PyObject *tmp_call_result_9;
                tmp_called_name_20 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_20 != NULL );
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1240;
                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, &PyTuple_GET_ITEM( const_tuple_str_digest_eb377a8c11b610eba35f02ef754812b7_tuple, 0 ) );

                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1240;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            branch_no_11:;
        }
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_make_exception_arg_2;
            tmp_make_exception_arg_2 = const_str_digest_ce68b0ecc72c28e379f99ada6da92ef1;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1241;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_2 };
                tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_SyntaxError, call_args );
            }

            assert( !(tmp_raise_type_2 == NULL) );
            exception_type = tmp_raise_type_2;
            exception_lineno = 1241;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        goto branch_end_10;
        branch_no_10:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1236;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame) frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooooooooooooooooooo";
        goto try_except_handler_6;
        branch_end_10:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
    return NULL;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_20 = tmp_tuple_unpack_1__element_2;
        assert( var_rawmode == NULL );
        Py_INCREF( tmp_assign_source_20 );
        var_rawmode = tmp_assign_source_20;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_mvar_value_16;
        int tmp_truth_name_6;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_16 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1243;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_6 = CHECK_IF_TRUE( tmp_mvar_value_16 );
        if ( tmp_truth_name_6 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1243;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_called_name_21;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_args_element_name_34;
            tmp_called_name_21 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_21 != NULL );
            tmp_args_element_name_33 = const_str_digest_296ec732f3454a5d77ec38d29513baeb;
            CHECK_OBJECT( var_rawmode );
            tmp_args_element_name_34 = var_rawmode;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1244;
            {
                PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34 };
                tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_21, call_args );
            }

            if ( tmp_call_result_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1244;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_10 );
        }
        {
            PyObject *tmp_called_name_22;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_35;
            PyObject *tmp_args_element_name_36;
            PyObject *tmp_source_name_26;
            tmp_called_name_22 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_22 != NULL );
            tmp_args_element_name_35 = const_str_digest_ed43c790b6a538123a07bb78b3d563cf;
            CHECK_OBJECT( par_self );
            tmp_source_name_26 = par_self;
            tmp_args_element_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_mode );
            if ( tmp_args_element_name_36 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1245;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1245;
            {
                PyObject *call_args[] = { tmp_args_element_name_35, tmp_args_element_name_36 };
                tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_22, call_args );
            }

            Py_DECREF( tmp_args_element_name_36 );
            if ( tmp_call_result_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1245;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_11 );
        }
        branch_no_12:;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_source_name_27;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_28;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_27 = par_self;
        tmp_ass_subvalue_1 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain__compression );
        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1247;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_28 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_info );
        if ( tmp_ass_subscribed_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_ass_subvalue_1 );

            exception_lineno = 1247;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = const_str_plain_compression;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscribed_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1247;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_name_23;
        PyObject *tmp_source_name_29;
        PyObject *tmp_source_name_30;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_args_element_name_38;
        CHECK_OBJECT( par_self );
        tmp_source_name_30 = par_self;
        tmp_source_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_tag_v2 );
        if ( tmp_source_name_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1249;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_get );
        Py_DECREF( tmp_source_name_29 );
        if ( tmp_called_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1249;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );
        }

        if ( tmp_mvar_value_17 == NULL )
        {
            Py_DECREF( tmp_called_name_23 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "X_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_37 = tmp_mvar_value_17;
        tmp_args_element_name_38 = const_int_pos_1;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1249;
        {
            PyObject *call_args[] = { tmp_args_element_name_37, tmp_args_element_name_38 };
            tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_23, call_args );
        }

        Py_DECREF( tmp_called_name_23 );
        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1249;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_xres == NULL );
        var_xres = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_name_24;
        PyObject *tmp_source_name_31;
        PyObject *tmp_source_name_32;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_args_element_name_40;
        CHECK_OBJECT( par_self );
        tmp_source_name_32 = par_self;
        tmp_source_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_tag_v2 );
        if ( tmp_source_name_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1250;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_get );
        Py_DECREF( tmp_source_name_31 );
        if ( tmp_called_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1250;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );
        }

        if ( tmp_mvar_value_18 == NULL )
        {
            Py_DECREF( tmp_called_name_24 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Y_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1250;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_39 = tmp_mvar_value_18;
        tmp_args_element_name_40 = const_int_pos_1;
        frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1250;
        {
            PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40 };
            tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_24, call_args );
        }

        Py_DECREF( tmp_called_name_24 );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1250;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_yres == NULL );
        var_yres = tmp_assign_source_22;
    }
    {
        nuitka_bool tmp_condition_result_13;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        int tmp_truth_name_7;
        int tmp_truth_name_8;
        CHECK_OBJECT( var_xres );
        tmp_truth_name_7 = CHECK_IF_TRUE( var_xres );
        if ( tmp_truth_name_7 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1252;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_3 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( var_yres );
        tmp_truth_name_8 = CHECK_IF_TRUE( var_yres );
        if ( tmp_truth_name_8 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1252;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_13 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_13 = tmp_and_left_value_3;
        and_end_3:;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_called_name_25;
            PyObject *tmp_source_name_33;
            PyObject *tmp_source_name_34;
            PyObject *tmp_args_element_name_41;
            PyObject *tmp_mvar_value_19;
            CHECK_OBJECT( par_self );
            tmp_source_name_34 = par_self;
            tmp_source_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_tag_v2 );
            if ( tmp_source_name_33 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1253;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_get );
            Py_DECREF( tmp_source_name_33 );
            if ( tmp_called_name_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1253;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );

            if (unlikely( tmp_mvar_value_19 == NULL ))
            {
                tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );
            }

            if ( tmp_mvar_value_19 == NULL )
            {
                Py_DECREF( tmp_called_name_25 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RESOLUTION_UNIT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1253;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_41 = tmp_mvar_value_19;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1253;
            {
                PyObject *call_args[] = { tmp_args_element_name_41 };
                tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, call_args );
            }

            Py_DECREF( tmp_called_name_25 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1253;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_resunit == NULL );
            var_resunit = tmp_assign_source_23;
        }
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            CHECK_OBJECT( var_resunit );
            tmp_compexpr_left_10 = var_resunit;
            tmp_compexpr_right_10 = const_int_pos_2;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1254;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_ass_subvalue_2;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_ass_subscribed_2;
                PyObject *tmp_source_name_35;
                PyObject *tmp_ass_subscript_2;
                CHECK_OBJECT( var_xres );
                tmp_tuple_element_3 = var_xres;
                tmp_ass_subvalue_2 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_ass_subvalue_2, 0, tmp_tuple_element_3 );
                CHECK_OBJECT( var_yres );
                tmp_tuple_element_3 = var_yres;
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_ass_subvalue_2, 1, tmp_tuple_element_3 );
                CHECK_OBJECT( par_self );
                tmp_source_name_35 = par_self;
                tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_info );
                if ( tmp_ass_subscribed_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_2 );

                    exception_lineno = 1255;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_ass_subscript_2 = const_str_plain_dpi;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
                Py_DECREF( tmp_ass_subscribed_2 );
                Py_DECREF( tmp_ass_subvalue_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1255;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_14;
            branch_no_14:;
            {
                nuitka_bool tmp_condition_result_15;
                PyObject *tmp_compexpr_left_11;
                PyObject *tmp_compexpr_right_11;
                CHECK_OBJECT( var_resunit );
                tmp_compexpr_left_11 = var_resunit;
                tmp_compexpr_right_11 = const_int_pos_3;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1256;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_15;
                }
                else
                {
                    goto branch_no_15;
                }
                branch_yes_15:;
                {
                    PyObject *tmp_ass_subvalue_3;
                    PyObject *tmp_tuple_element_4;
                    PyObject *tmp_left_name_3;
                    PyObject *tmp_right_name_3;
                    PyObject *tmp_left_name_4;
                    PyObject *tmp_right_name_4;
                    PyObject *tmp_ass_subscribed_3;
                    PyObject *tmp_source_name_36;
                    PyObject *tmp_ass_subscript_3;
                    CHECK_OBJECT( var_xres );
                    tmp_left_name_3 = var_xres;
                    tmp_right_name_3 = const_float_2_54;
                    tmp_tuple_element_4 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
                    if ( tmp_tuple_element_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1257;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_ass_subvalue_3 = PyTuple_New( 2 );
                    PyTuple_SET_ITEM( tmp_ass_subvalue_3, 0, tmp_tuple_element_4 );
                    CHECK_OBJECT( var_yres );
                    tmp_left_name_4 = var_yres;
                    tmp_right_name_4 = const_float_2_54;
                    tmp_tuple_element_4 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_4 );
                    if ( tmp_tuple_element_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_ass_subvalue_3 );

                        exception_lineno = 1257;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    PyTuple_SET_ITEM( tmp_ass_subvalue_3, 1, tmp_tuple_element_4 );
                    CHECK_OBJECT( par_self );
                    tmp_source_name_36 = par_self;
                    tmp_ass_subscribed_3 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_info );
                    if ( tmp_ass_subscribed_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_ass_subvalue_3 );

                        exception_lineno = 1257;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_ass_subscript_3 = const_str_plain_dpi;
                    tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
                    Py_DECREF( tmp_ass_subscribed_3 );
                    Py_DECREF( tmp_ass_subvalue_3 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1257;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                }
                goto branch_end_15;
                branch_no_15:;
                {
                    nuitka_bool tmp_condition_result_16;
                    PyObject *tmp_compexpr_left_12;
                    PyObject *tmp_compexpr_right_12;
                    CHECK_OBJECT( var_resunit );
                    tmp_compexpr_left_12 = var_resunit;
                    tmp_compexpr_right_12 = Py_None;
                    tmp_condition_result_16 = ( tmp_compexpr_left_12 == tmp_compexpr_right_12 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_16;
                    }
                    else
                    {
                        goto branch_no_16;
                    }
                    branch_yes_16:;
                    {
                        PyObject *tmp_ass_subvalue_4;
                        PyObject *tmp_tuple_element_5;
                        PyObject *tmp_ass_subscribed_4;
                        PyObject *tmp_source_name_37;
                        PyObject *tmp_ass_subscript_4;
                        CHECK_OBJECT( var_xres );
                        tmp_tuple_element_5 = var_xres;
                        tmp_ass_subvalue_4 = PyTuple_New( 2 );
                        Py_INCREF( tmp_tuple_element_5 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_4, 0, tmp_tuple_element_5 );
                        CHECK_OBJECT( var_yres );
                        tmp_tuple_element_5 = var_yres;
                        Py_INCREF( tmp_tuple_element_5 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_4, 1, tmp_tuple_element_5 );
                        CHECK_OBJECT( par_self );
                        tmp_source_name_37 = par_self;
                        tmp_ass_subscribed_4 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_info );
                        if ( tmp_ass_subscribed_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_ass_subvalue_4 );

                            exception_lineno = 1259;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_ass_subscript_4 = const_str_plain_dpi;
                        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
                        Py_DECREF( tmp_ass_subscribed_4 );
                        Py_DECREF( tmp_ass_subvalue_4 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1259;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                    }
                    {
                        PyObject *tmp_ass_subvalue_5;
                        PyObject *tmp_tuple_element_6;
                        PyObject *tmp_ass_subscribed_5;
                        PyObject *tmp_source_name_38;
                        PyObject *tmp_ass_subscript_5;
                        CHECK_OBJECT( var_xres );
                        tmp_tuple_element_6 = var_xres;
                        tmp_ass_subvalue_5 = PyTuple_New( 2 );
                        Py_INCREF( tmp_tuple_element_6 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_5, 0, tmp_tuple_element_6 );
                        CHECK_OBJECT( var_yres );
                        tmp_tuple_element_6 = var_yres;
                        Py_INCREF( tmp_tuple_element_6 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_5, 1, tmp_tuple_element_6 );
                        CHECK_OBJECT( par_self );
                        tmp_source_name_38 = par_self;
                        tmp_ass_subscribed_5 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_info );
                        if ( tmp_ass_subscribed_5 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_ass_subvalue_5 );

                            exception_lineno = 1262;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_ass_subscript_5 = const_str_plain_resolution;
                        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
                        Py_DECREF( tmp_ass_subscribed_5 );
                        Py_DECREF( tmp_ass_subvalue_5 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1262;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                    }
                    goto branch_end_16;
                    branch_no_16:;
                    {
                        PyObject *tmp_ass_subvalue_6;
                        PyObject *tmp_tuple_element_7;
                        PyObject *tmp_ass_subscribed_6;
                        PyObject *tmp_source_name_39;
                        PyObject *tmp_ass_subscript_6;
                        CHECK_OBJECT( var_xres );
                        tmp_tuple_element_7 = var_xres;
                        tmp_ass_subvalue_6 = PyTuple_New( 2 );
                        Py_INCREF( tmp_tuple_element_7 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_6, 0, tmp_tuple_element_7 );
                        CHECK_OBJECT( var_yres );
                        tmp_tuple_element_7 = var_yres;
                        Py_INCREF( tmp_tuple_element_7 );
                        PyTuple_SET_ITEM( tmp_ass_subvalue_6, 1, tmp_tuple_element_7 );
                        CHECK_OBJECT( par_self );
                        tmp_source_name_39 = par_self;
                        tmp_ass_subscribed_6 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_info );
                        if ( tmp_ass_subscribed_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_ass_subvalue_6 );

                            exception_lineno = 1264;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_ass_subscript_6 = const_str_plain_resolution;
                        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
                        Py_DECREF( tmp_ass_subscribed_6 );
                        Py_DECREF( tmp_ass_subvalue_6 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1264;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                    }
                    branch_end_16:;
                }
                branch_end_15:;
            }
            branch_end_14:;
        }
        branch_no_13:;
    }
    {
        PyObject *tmp_assign_source_24;
        tmp_assign_source_24 = const_int_0;
        assert( var_x == NULL );
        Py_INCREF( tmp_assign_source_24 );
        var_x = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = const_int_0;
        assert( var_y == NULL );
        Py_INCREF( tmp_assign_source_25 );
        var_y = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        tmp_assign_source_26 = const_int_0;
        assert( var_layer == NULL );
        Py_INCREF( tmp_assign_source_26 );
        var_layer = tmp_assign_source_26;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_tile, tmp_assattr_name_5 );
        Py_DECREF( tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1268;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        PyObject *tmp_source_name_40;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_READ_LIBTIFF );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_READ_LIBTIFF );
        }

        if ( tmp_mvar_value_20 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "READ_LIBTIFF" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1269;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_or_left_value_1 = tmp_mvar_value_20;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1269;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_40 = par_self;
        tmp_compexpr_left_13 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain__compression );
        if ( tmp_compexpr_left_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1269;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_13 = const_str_plain_raw;
        tmp_or_right_value_1 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
        Py_DECREF( tmp_compexpr_left_13 );
        if ( tmp_or_right_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1269;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_6 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        Py_INCREF( tmp_or_left_value_1 );
        tmp_assattr_name_6 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_use_load_libtiff, tmp_assattr_name_6 );
        Py_DECREF( tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1269;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_source_name_41;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_41 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_use_load_libtiff );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1270;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_9 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_9 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1270;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_17 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_17;
        }
        else
        {
            goto branch_no_17;
        }
        branch_yes_17:;
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            CHECK_OBJECT( var_fillorder );
            tmp_compexpr_left_14 = var_fillorder;
            tmp_compexpr_right_14 = const_int_pos_2;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1283;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            {
                PyObject *tmp_assign_source_27;
                PyObject *tmp_left_name_5;
                PyObject *tmp_left_name_6;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_subscript_name_3;
                PyObject *tmp_right_name_5;
                PyObject *tmp_right_name_6;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                CHECK_OBJECT( var_key );
                tmp_subscribed_name_3 = var_key;
                tmp_subscript_name_3 = const_slice_none_int_pos_3_none;
                tmp_left_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
                if ( tmp_left_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1285;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_5 = const_tuple_int_pos_1_tuple;
                tmp_left_name_5 = BINARY_OPERATION_ADD_OBJECT_TUPLE( tmp_left_name_6, tmp_right_name_5 );
                Py_DECREF( tmp_left_name_6 );
                if ( tmp_left_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1285;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_key );
                tmp_subscribed_name_4 = var_key;
                tmp_subscript_name_4 = const_slice_int_pos_4_none_none;
                tmp_right_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                if ( tmp_right_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_left_name_5 );

                    exception_lineno = 1285;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_27 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_5, tmp_right_name_6 );
                Py_DECREF( tmp_left_name_5 );
                Py_DECREF( tmp_right_name_6 );
                if ( tmp_assign_source_27 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1285;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_key;
                    assert( old != NULL );
                    var_key = tmp_assign_source_27;
                    Py_DECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_19;
                PyObject *tmp_mvar_value_21;
                int tmp_truth_name_10;
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

                if (unlikely( tmp_mvar_value_21 == NULL ))
                {
                    tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
                }

                if ( tmp_mvar_value_21 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1286;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_truth_name_10 = CHECK_IF_TRUE( tmp_mvar_value_21 );
                if ( tmp_truth_name_10 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1286;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_19 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_19;
                }
                else
                {
                    goto branch_no_19;
                }
                branch_yes_19:;
                {
                    PyObject *tmp_called_name_26;
                    PyObject *tmp_call_result_12;
                    PyObject *tmp_args_element_name_42;
                    PyObject *tmp_args_element_name_43;
                    tmp_called_name_26 = LOOKUP_BUILTIN( const_str_plain_print );
                    assert( tmp_called_name_26 != NULL );
                    tmp_args_element_name_42 = const_str_digest_7c5fe682ce2af83dee8766437ee37737;
                    CHECK_OBJECT( var_key );
                    tmp_args_element_name_43 = var_key;
                    frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1287;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43 };
                        tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_26, call_args );
                    }

                    if ( tmp_call_result_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1287;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_12 );
                }
                branch_no_19:;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_28;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_subscribed_name_5;
                PyObject *tmp_mvar_value_22;
                PyObject *tmp_subscript_name_5;
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_OPEN_INFO );

                if (unlikely( tmp_mvar_value_22 == NULL ))
                {
                    tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_OPEN_INFO );
                }

                if ( tmp_mvar_value_22 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "OPEN_INFO" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1291;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_7;
                }

                tmp_subscribed_name_5 = tmp_mvar_value_22;
                CHECK_OBJECT( var_key );
                tmp_subscript_name_5 = var_key;
                tmp_iter_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1291;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_7;
                }
                tmp_assign_source_28 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_28 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1291;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_7;
                }
                assert( tmp_tuple_unpack_2__source_iter == NULL );
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_28;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_29;
                PyObject *tmp_unpack_3;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_29 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
                if ( tmp_assign_source_29 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooooooooooooooooo";
                    exception_lineno = 1291;
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_2__element_1 == NULL );
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_29;
            }
            {
                PyObject *tmp_assign_source_30;
                PyObject *tmp_unpack_4;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_30 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
                if ( tmp_assign_source_30 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooooooooooooooooo";
                    exception_lineno = 1291;
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_2__element_2 == NULL );
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_30;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooooooooooooooooo";
                            exception_lineno = 1291;
                            goto try_except_handler_8;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooooooooooooo";
                    exception_lineno = 1291;
                    goto try_except_handler_8;
                }
            }
            goto try_end_4;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_6 = exception_type;
            exception_keeper_value_6 = exception_value;
            exception_keeper_tb_6 = exception_tb;
            exception_keeper_lineno_6 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_6;
            exception_value = exception_keeper_value_6;
            exception_tb = exception_keeper_tb_6;
            exception_lineno = exception_keeper_lineno_6;

            goto try_except_handler_7;
            // End of try:
            try_end_4:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            {
                PyObject *tmp_assattr_name_7;
                PyObject *tmp_assattr_target_7;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                tmp_assattr_name_7 = tmp_tuple_unpack_2__element_1;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_7 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_mode, tmp_assattr_name_7 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1291;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_7;
                }
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto frame_exception_exit_1;
            // End of try:
            try_end_5:;
            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            {
                PyObject *tmp_assign_source_31;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                tmp_assign_source_31 = tmp_tuple_unpack_2__element_2;
                {
                    PyObject *old = var_rawmode;
                    assert( old != NULL );
                    var_rawmode = tmp_assign_source_31;
                    Py_INCREF( var_rawmode );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            branch_no_18:;
        }
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_15;
            PyObject *tmp_compexpr_right_15;
            CHECK_OBJECT( var_rawmode );
            tmp_compexpr_left_15 = var_rawmode;
            tmp_compexpr_right_15 = const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1296;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_assign_source_32;
                tmp_assign_source_32 = const_str_digest_5bd3d01c7dc605096daa21ce0c6f6373;
                {
                    PyObject *old = var_rawmode;
                    assert( old != NULL );
                    var_rawmode = tmp_assign_source_32;
                    Py_INCREF( var_rawmode );
                    Py_DECREF( old );
                }

            }
            branch_no_20:;
        }
        {
            nuitka_bool tmp_condition_result_21;
            PyObject *tmp_compexpr_left_16;
            PyObject *tmp_compexpr_right_16;
            tmp_compexpr_left_16 = const_str_digest_eee6dafc42cb49d0eae4d764c3b1a861;
            if ( var_rawmode == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rawmode" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1298;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_16 = var_rawmode;
            tmp_res = PySequence_Contains( tmp_compexpr_right_16, tmp_compexpr_left_16 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1298;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_21 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_21;
            }
            else
            {
                goto branch_no_21;
            }
            branch_yes_21:;
            {
                PyObject *tmp_assign_source_33;
                PyObject *tmp_called_instance_2;
                if ( var_rawmode == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rawmode" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1299;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_2 = var_rawmode;
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1299;
                tmp_assign_source_33 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_477e8c2da119e7c6fbe7290e4e284d85_tuple, 0 ) );

                if ( tmp_assign_source_33 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1299;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_rawmode;
                    var_rawmode = tmp_assign_source_33;
                    Py_XDECREF( old );
                }

            }
            branch_no_21:;
        }
        {
            nuitka_bool tmp_condition_result_22;
            PyObject *tmp_compexpr_left_17;
            PyObject *tmp_compexpr_right_17;
            tmp_compexpr_left_17 = const_str_digest_207b218ded9f77d80f4f9fbc4fd25802;
            if ( var_rawmode == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rawmode" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1300;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_17 = var_rawmode;
            tmp_res = PySequence_Contains( tmp_compexpr_right_17, tmp_compexpr_left_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1300;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_22 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_22;
            }
            else
            {
                goto branch_no_22;
            }
            branch_yes_22:;
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_called_instance_3;
                if ( var_rawmode == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rawmode" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1301;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_3 = var_rawmode;
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1301;
                tmp_assign_source_34 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_d2e5efd12c666b95f5125ddb1882618e_tuple, 0 ) );

                if ( tmp_assign_source_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1301;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_rawmode;
                    var_rawmode = tmp_assign_source_34;
                    Py_XDECREF( old );
                }

            }
            branch_no_22:;
        }
        {
            PyObject *tmp_assign_source_35;
            PyObject *tmp_tuple_element_8;
            PyObject *tmp_source_name_42;
            if ( var_rawmode == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rawmode" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1305;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_8 = var_rawmode;
            tmp_assign_source_35 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_assign_source_35, 0, tmp_tuple_element_8 );
            CHECK_OBJECT( par_self );
            tmp_source_name_42 = par_self;
            tmp_tuple_element_8 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain__compression );
            if ( tmp_tuple_element_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_assign_source_35 );

                exception_lineno = 1305;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_assign_source_35, 1, tmp_tuple_element_8 );
            tmp_tuple_element_8 = Py_False;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_assign_source_35, 2, tmp_tuple_element_8 );
            assert( var_a == NULL );
            var_a = tmp_assign_source_35;
        }
        {
            PyObject *tmp_called_name_27;
            PyObject *tmp_source_name_43;
            PyObject *tmp_source_name_44;
            PyObject *tmp_call_result_13;
            PyObject *tmp_args_element_name_44;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_source_name_45;
            PyObject *tmp_tuple_element_10;
            CHECK_OBJECT( par_self );
            tmp_source_name_44 = par_self;
            tmp_source_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_tile );
            if ( tmp_source_name_43 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1306;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_append );
            Py_DECREF( tmp_source_name_43 );
            if ( tmp_called_name_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1306;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_45 = par_self;
            tmp_tuple_element_9 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain__compression );
            if ( tmp_tuple_element_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_27 );

                exception_lineno = 1307;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_44 = PyTuple_New( 4 );
            PyTuple_SET_ITEM( tmp_args_element_name_44, 0, tmp_tuple_element_9 );
            tmp_tuple_element_10 = const_int_0;
            tmp_tuple_element_9 = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_tuple_element_9, 0, tmp_tuple_element_10 );
            tmp_tuple_element_10 = const_int_0;
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_tuple_element_9, 1, tmp_tuple_element_10 );
            CHECK_OBJECT( var_xsize );
            tmp_tuple_element_10 = var_xsize;
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_tuple_element_9, 2, tmp_tuple_element_10 );
            CHECK_OBJECT( var_ysize );
            tmp_tuple_element_10 = var_ysize;
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_tuple_element_9, 3, tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_args_element_name_44, 1, tmp_tuple_element_9 );
            tmp_tuple_element_9 = const_int_0;
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_element_name_44, 2, tmp_tuple_element_9 );
            CHECK_OBJECT( var_a );
            tmp_tuple_element_9 = var_a;
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_element_name_44, 3, tmp_tuple_element_9 );
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1306;
            {
                PyObject *call_args[] = { tmp_args_element_name_44 };
                tmp_call_result_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, call_args );
            }

            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_args_element_name_44 );
            if ( tmp_call_result_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1306;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_13 );
        }
        goto branch_end_17;
        branch_no_17:;
        {
            nuitka_bool tmp_condition_result_23;
            int tmp_or_left_truth_2;
            nuitka_bool tmp_or_left_value_2;
            nuitka_bool tmp_or_right_value_2;
            PyObject *tmp_compexpr_left_18;
            PyObject *tmp_compexpr_right_18;
            PyObject *tmp_mvar_value_23;
            PyObject *tmp_source_name_46;
            PyObject *tmp_compexpr_left_19;
            PyObject *tmp_compexpr_right_19;
            PyObject *tmp_mvar_value_24;
            PyObject *tmp_source_name_47;
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

            if (unlikely( tmp_mvar_value_23 == NULL ))
            {
                tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
            }

            if ( tmp_mvar_value_23 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_18 = tmp_mvar_value_23;
            CHECK_OBJECT( par_self );
            tmp_source_name_46 = par_self;
            tmp_compexpr_right_18 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_tag_v2 );
            if ( tmp_compexpr_right_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = PySequence_Contains( tmp_compexpr_right_18, tmp_compexpr_left_18 );
            Py_DECREF( tmp_compexpr_right_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_value_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_2 == 1 )
            {
                goto or_left_2;
            }
            else
            {
                goto or_right_2;
            }
            or_right_2:;
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TILEOFFSETS );

            if (unlikely( tmp_mvar_value_24 == NULL ))
            {
                tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TILEOFFSETS );
            }

            if ( tmp_mvar_value_24 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TILEOFFSETS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_19 = tmp_mvar_value_24;
            CHECK_OBJECT( par_self );
            tmp_source_name_47 = par_self;
            tmp_compexpr_right_19 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_tag_v2 );
            if ( tmp_compexpr_right_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = PySequence_Contains( tmp_compexpr_right_19, tmp_compexpr_left_19 );
            Py_DECREF( tmp_compexpr_right_19 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1311;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_23 = tmp_or_right_value_2;
            goto or_end_2;
            or_left_2:;
            tmp_condition_result_23 = tmp_or_left_value_2;
            or_end_2:;
            if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_23;
            }
            else
            {
                goto branch_no_23;
            }
            branch_yes_23:;
            {
                nuitka_bool tmp_condition_result_24;
                PyObject *tmp_compexpr_left_20;
                PyObject *tmp_compexpr_right_20;
                PyObject *tmp_mvar_value_25;
                PyObject *tmp_source_name_48;
                tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

                if (unlikely( tmp_mvar_value_25 == NULL ))
                {
                    tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
                }

                if ( tmp_mvar_value_25 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1313;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_20 = tmp_mvar_value_25;
                CHECK_OBJECT( par_self );
                tmp_source_name_48 = par_self;
                tmp_compexpr_right_20 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_tag_v2 );
                if ( tmp_compexpr_right_20 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1313;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = PySequence_Contains( tmp_compexpr_right_20, tmp_compexpr_left_20 );
                Py_DECREF( tmp_compexpr_right_20 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1313;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_24 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_24;
                }
                else
                {
                    goto branch_no_24;
                }
                branch_yes_24:;
                {
                    PyObject *tmp_assign_source_36;
                    PyObject *tmp_subscribed_name_6;
                    PyObject *tmp_source_name_49;
                    PyObject *tmp_subscript_name_6;
                    PyObject *tmp_mvar_value_26;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_49 = par_self;
                    tmp_subscribed_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_tag_v2 );
                    if ( tmp_subscribed_name_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1314;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

                    if (unlikely( tmp_mvar_value_26 == NULL ))
                    {
                        tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
                    }

                    if ( tmp_mvar_value_26 == NULL )
                    {
                        Py_DECREF( tmp_subscribed_name_6 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1314;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_subscript_name_6 = tmp_mvar_value_26;
                    tmp_assign_source_36 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
                    Py_DECREF( tmp_subscribed_name_6 );
                    if ( tmp_assign_source_36 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1314;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_offsets == NULL );
                    var_offsets = tmp_assign_source_36;
                }
                {
                    PyObject *tmp_assign_source_37;
                    PyObject *tmp_called_name_28;
                    PyObject *tmp_source_name_50;
                    PyObject *tmp_source_name_51;
                    PyObject *tmp_args_element_name_45;
                    PyObject *tmp_mvar_value_27;
                    PyObject *tmp_args_element_name_46;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_51 = par_self;
                    tmp_source_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_tag_v2 );
                    if ( tmp_source_name_50 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1315;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_called_name_28 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_get );
                    Py_DECREF( tmp_source_name_50 );
                    if ( tmp_called_name_28 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1315;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ROWSPERSTRIP );

                    if (unlikely( tmp_mvar_value_27 == NULL ))
                    {
                        tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ROWSPERSTRIP );
                    }

                    if ( tmp_mvar_value_27 == NULL )
                    {
                        Py_DECREF( tmp_called_name_28 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ROWSPERSTRIP" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1315;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_args_element_name_45 = tmp_mvar_value_27;
                    CHECK_OBJECT( var_ysize );
                    tmp_args_element_name_46 = var_ysize;
                    frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1315;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46 };
                        tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_28, call_args );
                    }

                    Py_DECREF( tmp_called_name_28 );
                    if ( tmp_assign_source_37 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1315;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_h == NULL );
                    var_h = tmp_assign_source_37;
                }
                {
                    PyObject *tmp_assign_source_38;
                    PyObject *tmp_subscribed_name_7;
                    PyObject *tmp_source_name_52;
                    PyObject *tmp_subscript_name_7;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_52 = par_self;
                    tmp_subscribed_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_size );
                    if ( tmp_subscribed_name_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1316;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_subscript_name_7 = const_int_0;
                    tmp_assign_source_38 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 0 );
                    Py_DECREF( tmp_subscribed_name_7 );
                    if ( tmp_assign_source_38 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1316;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_w == NULL );
                    var_w = tmp_assign_source_38;
                }
                goto branch_end_24;
                branch_no_24:;
                {
                    PyObject *tmp_assign_source_39;
                    PyObject *tmp_subscribed_name_8;
                    PyObject *tmp_source_name_53;
                    PyObject *tmp_subscript_name_8;
                    PyObject *tmp_mvar_value_28;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_53 = par_self;
                    tmp_subscribed_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_tag_v2 );
                    if ( tmp_subscribed_name_8 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1319;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TILEOFFSETS );

                    if (unlikely( tmp_mvar_value_28 == NULL ))
                    {
                        tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TILEOFFSETS );
                    }

                    if ( tmp_mvar_value_28 == NULL )
                    {
                        Py_DECREF( tmp_subscribed_name_8 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TILEOFFSETS" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1319;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_subscript_name_8 = tmp_mvar_value_28;
                    tmp_assign_source_39 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
                    Py_DECREF( tmp_subscribed_name_8 );
                    if ( tmp_assign_source_39 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1319;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_offsets == NULL );
                    var_offsets = tmp_assign_source_39;
                }
                {
                    PyObject *tmp_assign_source_40;
                    PyObject *tmp_called_instance_4;
                    PyObject *tmp_source_name_54;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_54 = par_self;
                    tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_tag_v2 );
                    if ( tmp_called_instance_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1320;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1320;
                    tmp_assign_source_40 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_int_pos_322_tuple, 0 ) );

                    Py_DECREF( tmp_called_instance_4 );
                    if ( tmp_assign_source_40 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1320;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_w == NULL );
                    var_w = tmp_assign_source_40;
                }
                {
                    PyObject *tmp_assign_source_41;
                    PyObject *tmp_called_instance_5;
                    PyObject *tmp_source_name_55;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_55 = par_self;
                    tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_tag_v2 );
                    if ( tmp_called_instance_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1321;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1321;
                    tmp_assign_source_41 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_int_pos_323_tuple, 0 ) );

                    Py_DECREF( tmp_called_instance_5 );
                    if ( tmp_assign_source_41 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1321;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_h == NULL );
                    var_h = tmp_assign_source_41;
                }
                branch_end_24:;
            }
            {
                PyObject *tmp_assign_source_42;
                PyObject *tmp_iter_arg_3;
                CHECK_OBJECT( var_offsets );
                tmp_iter_arg_3 = var_offsets;
                tmp_assign_source_42 = MAKE_ITERATOR( tmp_iter_arg_3 );
                if ( tmp_assign_source_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1323;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( tmp_for_loop_1__for_iterator == NULL );
                tmp_for_loop_1__for_iterator = tmp_assign_source_42;
            }
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_43;
                CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                tmp_assign_source_43 = ITERATOR_NEXT( tmp_next_source_1 );
                if ( tmp_assign_source_43 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_1;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "ooooooooooooooooooooooooo";
                        exception_lineno = 1323;
                        goto try_except_handler_9;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_1__iter_value;
                    tmp_for_loop_1__iter_value = tmp_assign_source_43;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_44;
                CHECK_OBJECT( tmp_for_loop_1__iter_value );
                tmp_assign_source_44 = tmp_for_loop_1__iter_value;
                {
                    PyObject *old = var_offset;
                    var_offset = tmp_assign_source_44;
                    Py_INCREF( var_offset );
                    Py_XDECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_25;
                PyObject *tmp_compexpr_left_21;
                PyObject *tmp_compexpr_right_21;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                if ( var_x == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "x" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1324;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_left_name_7 = var_x;
                CHECK_OBJECT( var_w );
                tmp_right_name_7 = var_w;
                tmp_compexpr_left_21 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_7, tmp_right_name_7 );
                if ( tmp_compexpr_left_21 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1324;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_xsize );
                tmp_compexpr_right_21 = var_xsize;
                tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_21, tmp_compexpr_right_21 );
                Py_DECREF( tmp_compexpr_left_21 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1324;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_25;
                }
                else
                {
                    goto branch_no_25;
                }
                branch_yes_25:;
                {
                    PyObject *tmp_assign_source_45;
                    PyObject *tmp_left_name_8;
                    PyObject *tmp_left_name_9;
                    PyObject *tmp_right_name_8;
                    PyObject *tmp_sum_sequence_1;
                    PyObject *tmp_right_name_9;
                    CHECK_OBJECT( var_w );
                    tmp_left_name_9 = var_w;
                    CHECK_OBJECT( var_bps_tuple );
                    tmp_sum_sequence_1 = var_bps_tuple;
                    tmp_right_name_8 = BUILTIN_SUM1( tmp_sum_sequence_1 );
                    if ( tmp_right_name_8 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1325;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_left_name_8 = BINARY_OPERATION_MUL( tmp_left_name_9, tmp_right_name_8 );
                    Py_DECREF( tmp_right_name_8 );
                    if ( tmp_left_name_8 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1325;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_right_name_9 = const_int_pos_8;
                    tmp_assign_source_45 = BINARY_OPERATION_TRUEDIV( tmp_left_name_8, tmp_right_name_9 );
                    Py_DECREF( tmp_left_name_8 );
                    if ( tmp_assign_source_45 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1325;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    {
                        PyObject *old = var_stride;
                        var_stride = tmp_assign_source_45;
                        Py_XDECREF( old );
                    }

                }
                goto branch_end_25;
                branch_no_25:;
                {
                    PyObject *tmp_assign_source_46;
                    tmp_assign_source_46 = const_int_0;
                    {
                        PyObject *old = var_stride;
                        var_stride = tmp_assign_source_46;
                        Py_INCREF( var_stride );
                        Py_XDECREF( old );
                    }

                }
                branch_end_25:;
            }
            {
                PyObject *tmp_assign_source_47;
                CHECK_OBJECT( var_rawmode );
                tmp_assign_source_47 = var_rawmode;
                {
                    PyObject *old = var_tile_rawmode;
                    var_tile_rawmode = tmp_assign_source_47;
                    Py_INCREF( var_tile_rawmode );
                    Py_XDECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_26;
                PyObject *tmp_compexpr_left_22;
                PyObject *tmp_compexpr_right_22;
                PyObject *tmp_source_name_56;
                CHECK_OBJECT( par_self );
                tmp_source_name_56 = par_self;
                tmp_compexpr_left_22 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain__planar_configuration );
                if ( tmp_compexpr_left_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1330;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_compexpr_right_22 = const_int_pos_2;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_22, tmp_compexpr_right_22 );
                Py_DECREF( tmp_compexpr_left_22 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1330;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_26;
                }
                else
                {
                    goto branch_no_26;
                }
                branch_yes_26:;
                {
                    PyObject *tmp_assign_source_48;
                    PyObject *tmp_subscribed_name_9;
                    PyObject *tmp_subscript_name_9;
                    CHECK_OBJECT( var_rawmode );
                    tmp_subscribed_name_9 = var_rawmode;
                    if ( var_layer == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "layer" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1332;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }

                    tmp_subscript_name_9 = var_layer;
                    tmp_assign_source_48 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
                    if ( tmp_assign_source_48 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1332;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    {
                        PyObject *old = var_tile_rawmode;
                        assert( old != NULL );
                        var_tile_rawmode = tmp_assign_source_48;
                        Py_DECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_49;
                    PyObject *tmp_left_name_10;
                    PyObject *tmp_right_name_10;
                    CHECK_OBJECT( var_stride );
                    tmp_left_name_10 = var_stride;
                    CHECK_OBJECT( var_bps_count );
                    tmp_right_name_10 = var_bps_count;
                    tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceTrueDivide, &tmp_left_name_10, tmp_right_name_10 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1334;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_assign_source_49 = tmp_left_name_10;
                    var_stride = tmp_assign_source_49;

                }
                branch_no_26:;
            }
            {
                PyObject *tmp_assign_source_50;
                PyObject *tmp_tuple_element_11;
                PyObject *tmp_int_arg_1;
                CHECK_OBJECT( var_tile_rawmode );
                tmp_tuple_element_11 = var_tile_rawmode;
                tmp_assign_source_50 = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_11 );
                PyTuple_SET_ITEM( tmp_assign_source_50, 0, tmp_tuple_element_11 );
                if ( var_stride == NULL )
                {
                    Py_DECREF( tmp_assign_source_50 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stride" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1336;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_int_arg_1 = var_stride;
                tmp_tuple_element_11 = PyNumber_Int( tmp_int_arg_1 );
                if ( tmp_tuple_element_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_assign_source_50 );

                    exception_lineno = 1336;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                PyTuple_SET_ITEM( tmp_assign_source_50, 1, tmp_tuple_element_11 );
                tmp_tuple_element_11 = const_int_pos_1;
                Py_INCREF( tmp_tuple_element_11 );
                PyTuple_SET_ITEM( tmp_assign_source_50, 2, tmp_tuple_element_11 );
                {
                    PyObject *old = var_a;
                    var_a = tmp_assign_source_50;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_called_name_29;
                PyObject *tmp_source_name_57;
                PyObject *tmp_source_name_58;
                PyObject *tmp_call_result_14;
                PyObject *tmp_args_element_name_47;
                PyObject *tmp_tuple_element_12;
                PyObject *tmp_source_name_59;
                PyObject *tmp_tuple_element_13;
                PyObject *tmp_called_name_30;
                PyObject *tmp_args_element_name_48;
                PyObject *tmp_left_name_11;
                PyObject *tmp_right_name_11;
                PyObject *tmp_args_element_name_49;
                PyObject *tmp_called_name_31;
                PyObject *tmp_args_element_name_50;
                PyObject *tmp_left_name_12;
                PyObject *tmp_right_name_12;
                PyObject *tmp_args_element_name_51;
                CHECK_OBJECT( par_self );
                tmp_source_name_58 = par_self;
                tmp_source_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_tile );
                if ( tmp_source_name_57 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1337;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_append );
                Py_DECREF( tmp_source_name_57 );
                if ( tmp_called_name_29 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1337;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_59 = par_self;
                tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain__compression );
                if ( tmp_tuple_element_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_29 );

                    exception_lineno = 1338;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_args_element_name_47 = PyTuple_New( 4 );
                PyTuple_SET_ITEM( tmp_args_element_name_47, 0, tmp_tuple_element_12 );
                if ( var_x == NULL )
                {
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "x" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_tuple_element_13 = var_x;
                tmp_tuple_element_12 = PyTuple_New( 4 );
                Py_INCREF( tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_tuple_element_12, 0, tmp_tuple_element_13 );
                if ( var_y == NULL )
                {
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "y" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_tuple_element_13 = var_y;
                Py_INCREF( tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_tuple_element_12, 1, tmp_tuple_element_13 );
                tmp_called_name_30 = LOOKUP_BUILTIN( const_str_plain_min );
                assert( tmp_called_name_30 != NULL );
                if ( var_x == NULL )
                {
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "x" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_left_name_11 = var_x;
                CHECK_OBJECT( var_w );
                tmp_right_name_11 = var_w;
                tmp_args_element_name_48 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_11, tmp_right_name_11 );
                if ( tmp_args_element_name_48 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_xsize );
                tmp_args_element_name_49 = var_xsize;
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1339;
                {
                    PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49 };
                    tmp_tuple_element_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_30, call_args );
                }

                Py_DECREF( tmp_args_element_name_48 );
                if ( tmp_tuple_element_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                PyTuple_SET_ITEM( tmp_tuple_element_12, 2, tmp_tuple_element_13 );
                tmp_called_name_31 = LOOKUP_BUILTIN( const_str_plain_min );
                assert( tmp_called_name_31 != NULL );
                if ( var_y == NULL )
                {
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "y" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_left_name_12 = var_y;
                CHECK_OBJECT( var_h );
                tmp_right_name_12 = var_h;
                tmp_args_element_name_50 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_12, tmp_right_name_12 );
                if ( tmp_args_element_name_50 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_ysize );
                tmp_args_element_name_51 = var_ysize;
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1339;
                {
                    PyObject *call_args[] = { tmp_args_element_name_50, tmp_args_element_name_51 };
                    tmp_tuple_element_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_31, call_args );
                }

                Py_DECREF( tmp_args_element_name_50 );
                if ( tmp_tuple_element_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_29 );
                    Py_DECREF( tmp_args_element_name_47 );
                    Py_DECREF( tmp_tuple_element_12 );

                    exception_lineno = 1339;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                PyTuple_SET_ITEM( tmp_tuple_element_12, 3, tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_args_element_name_47, 1, tmp_tuple_element_12 );
                CHECK_OBJECT( var_offset );
                tmp_tuple_element_12 = var_offset;
                Py_INCREF( tmp_tuple_element_12 );
                PyTuple_SET_ITEM( tmp_args_element_name_47, 2, tmp_tuple_element_12 );
                CHECK_OBJECT( var_a );
                tmp_tuple_element_12 = var_a;
                Py_INCREF( tmp_tuple_element_12 );
                PyTuple_SET_ITEM( tmp_args_element_name_47, 3, tmp_tuple_element_12 );
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1337;
                {
                    PyObject *call_args[] = { tmp_args_element_name_47 };
                    tmp_call_result_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, call_args );
                }

                Py_DECREF( tmp_called_name_29 );
                Py_DECREF( tmp_args_element_name_47 );
                if ( tmp_call_result_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1337;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                Py_DECREF( tmp_call_result_14 );
            }
            {
                PyObject *tmp_assign_source_51;
                PyObject *tmp_left_name_13;
                PyObject *tmp_right_name_13;
                if ( var_x == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "x" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1341;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_left_name_13 = var_x;
                CHECK_OBJECT( var_w );
                tmp_right_name_13 = var_w;
                tmp_assign_source_51 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_13, tmp_right_name_13 );
                if ( tmp_assign_source_51 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1341;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                {
                    PyObject *old = var_x;
                    var_x = tmp_assign_source_51;
                    Py_XDECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_27;
                PyObject *tmp_compexpr_left_23;
                PyObject *tmp_compexpr_right_23;
                PyObject *tmp_subscribed_name_10;
                PyObject *tmp_source_name_60;
                PyObject *tmp_subscript_name_10;
                CHECK_OBJECT( var_x );
                tmp_compexpr_left_23 = var_x;
                CHECK_OBJECT( par_self );
                tmp_source_name_60 = par_self;
                tmp_subscribed_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_size );
                if ( tmp_subscribed_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1342;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_subscript_name_10 = const_int_0;
                tmp_compexpr_right_23 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_10, tmp_subscript_name_10, 0 );
                Py_DECREF( tmp_subscribed_name_10 );
                if ( tmp_compexpr_right_23 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1342;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_23, tmp_compexpr_right_23 );
                Py_DECREF( tmp_compexpr_right_23 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1342;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_condition_result_27 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_27;
                }
                else
                {
                    goto branch_no_27;
                }
                branch_yes_27:;
                // Tried code:
                {
                    PyObject *tmp_assign_source_52;
                    PyObject *tmp_iter_arg_4;
                    PyObject *tmp_tuple_element_14;
                    PyObject *tmp_left_name_14;
                    PyObject *tmp_right_name_14;
                    tmp_tuple_element_14 = const_int_0;
                    tmp_iter_arg_4 = PyTuple_New( 2 );
                    Py_INCREF( tmp_tuple_element_14 );
                    PyTuple_SET_ITEM( tmp_iter_arg_4, 0, tmp_tuple_element_14 );
                    if ( var_y == NULL )
                    {
                        Py_DECREF( tmp_iter_arg_4 );
                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "y" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1343;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_10;
                    }

                    tmp_left_name_14 = var_y;
                    CHECK_OBJECT( var_h );
                    tmp_right_name_14 = var_h;
                    tmp_tuple_element_14 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_14, tmp_right_name_14 );
                    if ( tmp_tuple_element_14 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_iter_arg_4 );

                        exception_lineno = 1343;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_10;
                    }
                    PyTuple_SET_ITEM( tmp_iter_arg_4, 1, tmp_tuple_element_14 );
                    tmp_assign_source_52 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                    Py_DECREF( tmp_iter_arg_4 );
                    if ( tmp_assign_source_52 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1343;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_10;
                    }
                    {
                        PyObject *old = tmp_tuple_unpack_3__source_iter;
                        tmp_tuple_unpack_3__source_iter = tmp_assign_source_52;
                        Py_XDECREF( old );
                    }

                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_53;
                    PyObject *tmp_unpack_5;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_53 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
                    if ( tmp_assign_source_53 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooo";
                        exception_lineno = 1343;
                        goto try_except_handler_11;
                    }
                    {
                        PyObject *old = tmp_tuple_unpack_3__element_1;
                        tmp_tuple_unpack_3__element_1 = tmp_assign_source_53;
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_54;
                    PyObject *tmp_unpack_6;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_54 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
                    if ( tmp_assign_source_54 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooo";
                        exception_lineno = 1343;
                        goto try_except_handler_11;
                    }
                    {
                        PyObject *old = tmp_tuple_unpack_3__element_2;
                        tmp_tuple_unpack_3__element_2 = tmp_assign_source_54;
                        Py_XDECREF( old );
                    }

                }
                goto try_end_6;
                // Exception handler code:
                try_except_handler_11:;
                exception_keeper_type_8 = exception_type;
                exception_keeper_value_8 = exception_value;
                exception_keeper_tb_8 = exception_tb;
                exception_keeper_lineno_8 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_8;
                exception_value = exception_keeper_value_8;
                exception_tb = exception_keeper_tb_8;
                exception_lineno = exception_keeper_lineno_8;

                goto try_except_handler_10;
                // End of try:
                try_end_6:;
                goto try_end_7;
                // Exception handler code:
                try_except_handler_10:;
                exception_keeper_type_9 = exception_type;
                exception_keeper_value_9 = exception_value;
                exception_keeper_tb_9 = exception_tb;
                exception_keeper_lineno_9 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_9;
                exception_value = exception_keeper_value_9;
                exception_tb = exception_keeper_tb_9;
                exception_lineno = exception_keeper_lineno_9;

                goto try_except_handler_9;
                // End of try:
                try_end_7:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_55;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                    tmp_assign_source_55 = tmp_tuple_unpack_3__element_1;
                    {
                        PyObject *old = var_x;
                        assert( old != NULL );
                        var_x = tmp_assign_source_55;
                        Py_INCREF( var_x );
                        Py_DECREF( old );
                    }

                }
                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_56;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                    tmp_assign_source_56 = tmp_tuple_unpack_3__element_2;
                    {
                        PyObject *old = var_y;
                        var_y = tmp_assign_source_56;
                        Py_INCREF( var_y );
                        Py_XDECREF( old );
                    }

                }
                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                {
                    nuitka_bool tmp_condition_result_28;
                    PyObject *tmp_compexpr_left_24;
                    PyObject *tmp_compexpr_right_24;
                    PyObject *tmp_subscribed_name_11;
                    PyObject *tmp_source_name_61;
                    PyObject *tmp_subscript_name_11;
                    CHECK_OBJECT( var_y );
                    tmp_compexpr_left_24 = var_y;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_61 = par_self;
                    tmp_subscribed_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_size );
                    if ( tmp_subscribed_name_11 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1344;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_subscript_name_11 = const_int_pos_1;
                    tmp_compexpr_right_24 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_11, tmp_subscript_name_11, 1 );
                    Py_DECREF( tmp_subscribed_name_11 );
                    if ( tmp_compexpr_right_24 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1344;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_24, tmp_compexpr_right_24 );
                    Py_DECREF( tmp_compexpr_right_24 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1344;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto try_except_handler_9;
                    }
                    tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_28;
                    }
                    else
                    {
                        goto branch_no_28;
                    }
                    branch_yes_28:;
                    {
                        PyObject *tmp_assign_source_57;
                        tmp_assign_source_57 = const_int_0;
                        {
                            PyObject *old = tmp_assign_unpack_2__assign_source;
                            tmp_assign_unpack_2__assign_source = tmp_assign_source_57;
                            Py_INCREF( tmp_assign_unpack_2__assign_source );
                            Py_XDECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_assign_source_58;
                        CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
                        tmp_assign_source_58 = tmp_assign_unpack_2__assign_source;
                        {
                            PyObject *old = var_x;
                            assert( old != NULL );
                            var_x = tmp_assign_source_58;
                            Py_INCREF( var_x );
                            Py_DECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_assign_source_59;
                        CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
                        tmp_assign_source_59 = tmp_assign_unpack_2__assign_source;
                        {
                            PyObject *old = var_y;
                            assert( old != NULL );
                            var_y = tmp_assign_source_59;
                            Py_INCREF( var_y );
                            Py_DECREF( old );
                        }

                    }
                    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_2__assign_source );
                    Py_DECREF( tmp_assign_unpack_2__assign_source );
                    tmp_assign_unpack_2__assign_source = NULL;

                    {
                        PyObject *tmp_assign_source_60;
                        PyObject *tmp_left_name_15;
                        PyObject *tmp_right_name_15;
                        if ( var_layer == NULL )
                        {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "layer" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1346;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto try_except_handler_9;
                        }

                        tmp_left_name_15 = var_layer;
                        tmp_right_name_15 = const_int_pos_1;
                        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE( &tmp_left_name_15, tmp_right_name_15 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1346;
                            type_description_1 = "ooooooooooooooooooooooooo";
                            goto try_except_handler_9;
                        }
                        tmp_assign_source_60 = tmp_left_name_15;
                        var_layer = tmp_assign_source_60;

                    }
                    branch_no_28:;
                }
                branch_no_27:;
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1323;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto try_except_handler_9;
            }
            goto loop_start_1;
            loop_end_1:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto frame_exception_exit_1;
            // End of try:
            try_end_8:;
            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            goto branch_end_23;
            branch_no_23:;
            {
                nuitka_bool tmp_condition_result_29;
                PyObject *tmp_mvar_value_29;
                int tmp_truth_name_11;
                tmp_mvar_value_29 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

                if (unlikely( tmp_mvar_value_29 == NULL ))
                {
                    tmp_mvar_value_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
                }

                if ( tmp_mvar_value_29 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1348;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_truth_name_11 = CHECK_IF_TRUE( tmp_mvar_value_29 );
                if ( tmp_truth_name_11 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1348;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_29 = tmp_truth_name_11 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_29;
                }
                else
                {
                    goto branch_no_29;
                }
                branch_yes_29:;
                {
                    PyObject *tmp_called_name_32;
                    PyObject *tmp_call_result_15;
                    tmp_called_name_32 = LOOKUP_BUILTIN( const_str_plain_print );
                    assert( tmp_called_name_32 != NULL );
                    frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1349;
                    tmp_call_result_15 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, &PyTuple_GET_ITEM( const_tuple_str_digest_76f5c36365dd76a7a65d25e7f8001de7_tuple, 0 ) );

                    if ( tmp_call_result_15 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1349;
                        type_description_1 = "ooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_15 );
                }
                branch_no_29:;
            }
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_make_exception_arg_3;
                tmp_make_exception_arg_3 = const_str_digest_36d7cd1b9db6c846ee4976d560207cd3;
                frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1350;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_3 };
                    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_SyntaxError, call_args );
                }

                assert( !(tmp_raise_type_3 == NULL) );
                exception_type = tmp_raise_type_3;
                exception_lineno = 1350;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_end_23:;
        }
        branch_end_17:;
    }
    {
        nuitka_bool tmp_condition_result_30;
        PyObject *tmp_compexpr_left_25;
        PyObject *tmp_compexpr_right_25;
        PyObject *tmp_mvar_value_30;
        PyObject *tmp_source_name_62;
        tmp_mvar_value_30 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );

        if (unlikely( tmp_mvar_value_30 == NULL ))
        {
            tmp_mvar_value_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );
        }

        if ( tmp_mvar_value_30 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ICCPROFILE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1353;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_25 = tmp_mvar_value_30;
        CHECK_OBJECT( par_self );
        tmp_source_name_62 = par_self;
        tmp_compexpr_right_25 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_tag_v2 );
        if ( tmp_compexpr_right_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1353;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_25, tmp_compexpr_left_25 );
        Py_DECREF( tmp_compexpr_right_25 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1353;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_30 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_30;
        }
        else
        {
            goto branch_no_30;
        }
        branch_yes_30:;
        {
            PyObject *tmp_ass_subvalue_7;
            PyObject *tmp_subscribed_name_12;
            PyObject *tmp_source_name_63;
            PyObject *tmp_subscript_name_12;
            PyObject *tmp_mvar_value_31;
            PyObject *tmp_ass_subscribed_7;
            PyObject *tmp_source_name_64;
            PyObject *tmp_ass_subscript_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_63 = par_self;
            tmp_subscribed_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_tag_v2 );
            if ( tmp_subscribed_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1354;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );

            if (unlikely( tmp_mvar_value_31 == NULL ))
            {
                tmp_mvar_value_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );
            }

            if ( tmp_mvar_value_31 == NULL )
            {
                Py_DECREF( tmp_subscribed_name_12 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ICCPROFILE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1354;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_subscript_name_12 = tmp_mvar_value_31;
            tmp_ass_subvalue_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_12 );
            Py_DECREF( tmp_subscribed_name_12 );
            if ( tmp_ass_subvalue_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1354;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_64 = par_self;
            tmp_ass_subscribed_7 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_info );
            if ( tmp_ass_subscribed_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_ass_subvalue_7 );

                exception_lineno = 1354;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_ass_subscript_7 = const_str_plain_icc_profile;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
            Py_DECREF( tmp_ass_subscribed_7 );
            Py_DECREF( tmp_ass_subvalue_7 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1354;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_30:;
    }
    {
        nuitka_bool tmp_condition_result_31;
        PyObject *tmp_compexpr_left_26;
        PyObject *tmp_compexpr_right_26;
        PyObject *tmp_source_name_65;
        CHECK_OBJECT( par_self );
        tmp_source_name_65 = par_self;
        tmp_compexpr_left_26 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_mode );
        if ( tmp_compexpr_left_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1358;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_26 = const_str_plain_P;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_26, tmp_compexpr_right_26 );
        Py_DECREF( tmp_compexpr_left_26 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1358;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_31 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_31;
        }
        else
        {
            goto branch_no_31;
        }
        branch_yes_31:;
        {
            PyObject *tmp_assign_source_61;
            // Tried code:
            {
                PyObject *tmp_assign_source_62;
                PyObject *tmp_iter_arg_5;
                PyObject *tmp_subscribed_name_13;
                PyObject *tmp_source_name_66;
                PyObject *tmp_subscript_name_13;
                PyObject *tmp_mvar_value_32;
                CHECK_OBJECT( par_self );
                tmp_source_name_66 = par_self;
                tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_tag_v2 );
                if ( tmp_subscribed_name_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_mvar_value_32 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COLORMAP );

                if (unlikely( tmp_mvar_value_32 == NULL ))
                {
                    tmp_mvar_value_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COLORMAP );
                }

                if ( tmp_mvar_value_32 == NULL )
                {
                    Py_DECREF( tmp_subscribed_name_13 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COLORMAP" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1359;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_12;
                }

                tmp_subscript_name_13 = tmp_mvar_value_32;
                tmp_iter_arg_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_13 );
                Py_DECREF( tmp_subscribed_name_13 );
                if ( tmp_iter_arg_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_62 = MAKE_ITERATOR( tmp_iter_arg_5 );
                Py_DECREF( tmp_iter_arg_5 );
                if ( tmp_assign_source_62 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_1 = "ooooooooooooooooooooooooo";
                    goto try_except_handler_12;
                }
                assert( tmp_listcomp_1__$0 == NULL );
                tmp_listcomp_1__$0 = tmp_assign_source_62;
            }
            {
                PyObject *tmp_assign_source_63;
                tmp_assign_source_63 = PyList_New( 0 );
                assert( tmp_listcomp_1__contraction == NULL );
                tmp_listcomp_1__contraction = tmp_assign_source_63;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_9bbef538ef689fe1a54a30d7b09625e0_2, codeobj_9bbef538ef689fe1a54a30d7b09625e0, module_PIL$TiffImagePlugin, sizeof(void *) );
            frame_9bbef538ef689fe1a54a30d7b09625e0_2 = cache_frame_9bbef538ef689fe1a54a30d7b09625e0_2;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_9bbef538ef689fe1a54a30d7b09625e0_2 ) == 2 ); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_2:;
            {
                PyObject *tmp_next_source_2;
                PyObject *tmp_assign_source_64;
                CHECK_OBJECT( tmp_listcomp_1__$0 );
                tmp_next_source_2 = tmp_listcomp_1__$0;
                tmp_assign_source_64 = ITERATOR_NEXT( tmp_next_source_2 );
                if ( tmp_assign_source_64 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_2;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_2 = "o";
                        exception_lineno = 1359;
                        goto try_except_handler_13;
                    }
                }

                {
                    PyObject *old = tmp_listcomp_1__iter_value_0;
                    tmp_listcomp_1__iter_value_0 = tmp_assign_source_64;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_65;
                CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
                tmp_assign_source_65 = tmp_listcomp_1__iter_value_0;
                {
                    PyObject *old = outline_0_var_b;
                    outline_0_var_b = tmp_assign_source_65;
                    Py_INCREF( outline_0_var_b );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_append_list_1;
                PyObject *tmp_append_value_1;
                PyObject *tmp_called_name_33;
                PyObject *tmp_mvar_value_33;
                PyObject *tmp_args_element_name_52;
                PyObject *tmp_left_name_16;
                PyObject *tmp_right_name_16;
                CHECK_OBJECT( tmp_listcomp_1__contraction );
                tmp_append_list_1 = tmp_listcomp_1__contraction;
                tmp_mvar_value_33 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_o8 );

                if (unlikely( tmp_mvar_value_33 == NULL ))
                {
                    tmp_mvar_value_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_o8 );
                }

                if ( tmp_mvar_value_33 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "o8" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1359;
                    type_description_2 = "o";
                    goto try_except_handler_13;
                }

                tmp_called_name_33 = tmp_mvar_value_33;
                CHECK_OBJECT( outline_0_var_b );
                tmp_left_name_16 = outline_0_var_b;
                tmp_right_name_16 = const_int_pos_256;
                tmp_args_element_name_52 = BINARY_OPERATION_FLOORDIV( tmp_left_name_16, tmp_right_name_16 );
                if ( tmp_args_element_name_52 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_2 = "o";
                    goto try_except_handler_13;
                }
                frame_9bbef538ef689fe1a54a30d7b09625e0_2->m_frame.f_lineno = 1359;
                {
                    PyObject *call_args[] = { tmp_args_element_name_52 };
                    tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, call_args );
                }

                Py_DECREF( tmp_args_element_name_52 );
                if ( tmp_append_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_2 = "o";
                    goto try_except_handler_13;
                }
                assert( PyList_Check( tmp_append_list_1 ) );
                tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
                Py_DECREF( tmp_append_value_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1359;
                    type_description_2 = "o";
                    goto try_except_handler_13;
                }
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1359;
                type_description_2 = "o";
                goto try_except_handler_13;
            }
            goto loop_start_2;
            loop_end_2:;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_assign_source_61 = tmp_listcomp_1__contraction;
            Py_INCREF( tmp_assign_source_61 );
            goto try_return_handler_13;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
            return NULL;
            // Return handler code:
            try_return_handler_13:;
            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            goto frame_return_exit_1;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto frame_exception_exit_2;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_1;

            frame_return_exit_1:;
#if 0
            RESTORE_FRAME_EXCEPTION( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_12;

            frame_exception_exit_2:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_9bbef538ef689fe1a54a30d7b09625e0_2, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_9bbef538ef689fe1a54a30d7b09625e0_2->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_9bbef538ef689fe1a54a30d7b09625e0_2, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_9bbef538ef689fe1a54a30d7b09625e0_2,
                type_description_2,
                outline_0_var_b
            );


            // Release cached frame.
            if ( frame_9bbef538ef689fe1a54a30d7b09625e0_2 == cache_frame_9bbef538ef689fe1a54a30d7b09625e0_2 )
            {
                Py_DECREF( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );
            }
            cache_frame_9bbef538ef689fe1a54a30d7b09625e0_2 = NULL;

            assertFrameObject( frame_9bbef538ef689fe1a54a30d7b09625e0_2 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_1;

            frame_no_exception_1:;
            goto skip_nested_handling_1;
            nested_frame_exit_1:;
            type_description_1 = "ooooooooooooooooooooooooo";
            goto try_except_handler_12;
            skip_nested_handling_1:;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
            return NULL;
            // Return handler code:
            try_return_handler_12:;
            Py_XDECREF( outline_0_var_b );
            outline_0_var_b = NULL;

            goto outline_result_2;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( outline_0_var_b );
            outline_0_var_b = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_12;
            exception_value = exception_keeper_value_12;
            exception_tb = exception_keeper_tb_12;
            exception_lineno = exception_keeper_lineno_12;

            goto outline_exception_1;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
            return NULL;
            outline_exception_1:;
            exception_lineno = 1359;
            goto frame_exception_exit_1;
            outline_result_2:;
            assert( var_palette == NULL );
            var_palette = tmp_assign_source_61;
        }
        {
            PyObject *tmp_assattr_name_8;
            PyObject *tmp_called_name_34;
            PyObject *tmp_source_name_67;
            PyObject *tmp_mvar_value_34;
            PyObject *tmp_args_element_name_53;
            PyObject *tmp_args_element_name_54;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_name_55;
            PyObject *tmp_assattr_target_8;
            tmp_mvar_value_34 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImagePalette );

            if (unlikely( tmp_mvar_value_34 == NULL ))
            {
                tmp_mvar_value_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImagePalette );
            }

            if ( tmp_mvar_value_34 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImagePalette" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1360;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_67 = tmp_mvar_value_34;
            tmp_called_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_raw );
            if ( tmp_called_name_34 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1360;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_53 = const_str_digest_ee4a3fba8fc3306e6cef526eeff90632;
            tmp_called_instance_6 = const_bytes_empty;
            CHECK_OBJECT( var_palette );
            tmp_args_element_name_55 = var_palette;
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1360;
            {
                PyObject *call_args[] = { tmp_args_element_name_55 };
                tmp_args_element_name_54 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_join, call_args );
            }

            if ( tmp_args_element_name_54 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_34 );

                exception_lineno = 1360;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame.f_lineno = 1360;
            {
                PyObject *call_args[] = { tmp_args_element_name_53, tmp_args_element_name_54 };
                tmp_assattr_name_8 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_34, call_args );
            }

            Py_DECREF( tmp_called_name_34 );
            Py_DECREF( tmp_args_element_name_54 );
            if ( tmp_assattr_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1360;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_8 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain_palette, tmp_assattr_name_8 );
            Py_DECREF( tmp_assattr_name_8 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1360;
                type_description_1 = "ooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_31:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b8632c5f1f36afe4f972176d21c2e38f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b8632c5f1f36afe4f972176d21c2e38f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b8632c5f1f36afe4f972176d21c2e38f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b8632c5f1f36afe4f972176d21c2e38f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b8632c5f1f36afe4f972176d21c2e38f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b8632c5f1f36afe4f972176d21c2e38f,
        type_description_1,
        par_self,
        var_photo,
        var_fillorder,
        var_xsize,
        var_ysize,
        var_sampleFormat,
        var_bps_tuple,
        var_extra_tuple,
        var_bps_count,
        var_key,
        var_rawmode,
        var_xres,
        var_yres,
        var_resunit,
        var_x,
        var_y,
        var_layer,
        var_a,
        var_offsets,
        var_h,
        var_w,
        var_offset,
        var_stride,
        var_tile_rawmode,
        var_palette
    );


    // Release cached frame.
    if ( frame_b8632c5f1f36afe4f972176d21c2e38f == cache_frame_b8632c5f1f36afe4f972176d21c2e38f )
    {
        Py_DECREF( frame_b8632c5f1f36afe4f972176d21c2e38f );
    }
    cache_frame_b8632c5f1f36afe4f972176d21c2e38f = NULL;

    assertFrameObject( frame_b8632c5f1f36afe4f972176d21c2e38f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_photo );
    Py_DECREF( var_photo );
    var_photo = NULL;

    CHECK_OBJECT( (PyObject *)var_fillorder );
    Py_DECREF( var_fillorder );
    var_fillorder = NULL;

    CHECK_OBJECT( (PyObject *)var_xsize );
    Py_DECREF( var_xsize );
    var_xsize = NULL;

    CHECK_OBJECT( (PyObject *)var_ysize );
    Py_DECREF( var_ysize );
    var_ysize = NULL;

    CHECK_OBJECT( (PyObject *)var_sampleFormat );
    Py_DECREF( var_sampleFormat );
    var_sampleFormat = NULL;

    CHECK_OBJECT( (PyObject *)var_bps_tuple );
    Py_DECREF( var_bps_tuple );
    var_bps_tuple = NULL;

    CHECK_OBJECT( (PyObject *)var_extra_tuple );
    Py_DECREF( var_extra_tuple );
    var_extra_tuple = NULL;

    CHECK_OBJECT( (PyObject *)var_bps_count );
    Py_DECREF( var_bps_count );
    var_bps_count = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_rawmode );
    var_rawmode = NULL;

    CHECK_OBJECT( (PyObject *)var_xres );
    Py_DECREF( var_xres );
    var_xres = NULL;

    CHECK_OBJECT( (PyObject *)var_yres );
    Py_DECREF( var_yres );
    var_yres = NULL;

    Py_XDECREF( var_resunit );
    var_resunit = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    Py_XDECREF( var_layer );
    var_layer = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_offsets );
    var_offsets = NULL;

    Py_XDECREF( var_h );
    var_h = NULL;

    Py_XDECREF( var_w );
    var_w = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_stride );
    var_stride = NULL;

    Py_XDECREF( var_tile_rawmode );
    var_tile_rawmode = NULL;

    Py_XDECREF( var_palette );
    var_palette = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_photo );
    var_photo = NULL;

    Py_XDECREF( var_fillorder );
    var_fillorder = NULL;

    Py_XDECREF( var_xsize );
    var_xsize = NULL;

    Py_XDECREF( var_ysize );
    var_ysize = NULL;

    Py_XDECREF( var_sampleFormat );
    var_sampleFormat = NULL;

    Py_XDECREF( var_bps_tuple );
    var_bps_tuple = NULL;

    Py_XDECREF( var_extra_tuple );
    var_extra_tuple = NULL;

    Py_XDECREF( var_bps_count );
    var_bps_count = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_rawmode );
    var_rawmode = NULL;

    Py_XDECREF( var_xres );
    var_xres = NULL;

    Py_XDECREF( var_yres );
    var_yres = NULL;

    Py_XDECREF( var_resunit );
    var_resunit = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    Py_XDECREF( var_layer );
    var_layer = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_offsets );
    var_offsets = NULL;

    Py_XDECREF( var_h );
    var_h = NULL;

    Py_XDECREF( var_w );
    var_w = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_stride );
    var_stride = NULL;

    Py_XDECREF( var_tile_rawmode );
    var_tile_rawmode = NULL;

    Py_XDECREF( var_palette );
    var_palette = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_67__setup );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_68__close__fp( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f06f48873dfc793a4b11d897a07834fd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_f06f48873dfc793a4b11d897a07834fd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f06f48873dfc793a4b11d897a07834fd, codeobj_f06f48873dfc793a4b11d897a07834fd, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_f06f48873dfc793a4b11d897a07834fd = cache_frame_f06f48873dfc793a4b11d897a07834fd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f06f48873dfc793a4b11d897a07834fd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f06f48873dfc793a4b11d897a07834fd ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__TiffImageFile__fp );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1364;
            type_description_1 = "o";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_fp );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_1 );

            exception_lineno = 1364;
            type_description_1 = "o";
            goto try_except_handler_3;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1364;
            type_description_1 = "o";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__TiffImageFile__fp );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1365;
                type_description_1 = "o";
                goto try_except_handler_3;
            }
            frame_f06f48873dfc793a4b11d897a07834fd->m_frame.f_lineno = 1365;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_close );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1365;
                type_description_1 = "o";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f06f48873dfc793a4b11d897a07834fd, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f06f48873dfc793a4b11d897a07834fd, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1366;
            type_description_1 = "o";
            goto try_except_handler_4;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1366;
            type_description_1 = "o";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1363;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_f06f48873dfc793a4b11d897a07834fd->m_frame) frame_f06f48873dfc793a4b11d897a07834fd->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "o";
        goto try_except_handler_4;
        branch_no_2:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_68__close__fp );
    return NULL;
    // End of try:
    try_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_f06f48873dfc793a4b11d897a07834fd, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_f06f48873dfc793a4b11d897a07834fd, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__TiffImageFile__fp, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1369;
            type_description_1 = "o";
            goto try_except_handler_5;
        }
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1363;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f06f48873dfc793a4b11d897a07834fd->m_frame) frame_f06f48873dfc793a4b11d897a07834fd->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "o";
    goto try_except_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_68__close__fp );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__TiffImageFile__fp, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1369;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f06f48873dfc793a4b11d897a07834fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f06f48873dfc793a4b11d897a07834fd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f06f48873dfc793a4b11d897a07834fd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f06f48873dfc793a4b11d897a07834fd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f06f48873dfc793a4b11d897a07834fd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f06f48873dfc793a4b11d897a07834fd,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f06f48873dfc793a4b11d897a07834fd == cache_frame_f06f48873dfc793a4b11d897a07834fd )
    {
        Py_DECREF( frame_f06f48873dfc793a4b11d897a07834fd );
    }
    cache_frame_f06f48873dfc793a4b11d897a07834fd = NULL;

    assertFrameObject( frame_f06f48873dfc793a4b11d897a07834fd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_68__close__fp );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_68__close__fp );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_69__save( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_im = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_filename = python_pars[ 2 ];
    PyObject *var_rawmode = NULL;
    PyObject *var_prefix = NULL;
    PyObject *var_photo = NULL;
    PyObject *var_format = NULL;
    PyObject *var_bits = NULL;
    PyObject *var_extra = NULL;
    PyObject *var_ifd = NULL;
    PyObject *var_compression = NULL;
    PyObject *var_libtiff = NULL;
    PyObject *var_info = NULL;
    PyObject *var_key = NULL;
    PyObject *var_name = NULL;
    PyObject *var_dpi = NULL;
    PyObject *var_lut = NULL;
    PyObject *var_stride = NULL;
    PyObject *var__fp = NULL;
    PyObject *var_blocklist = NULL;
    PyObject *var_atts = NULL;
    PyObject *var_legacy_ifd = NULL;
    PyObject *var_tag = NULL;
    PyObject *var_value = NULL;
    PyObject *var_a = NULL;
    PyObject *var_e = NULL;
    PyObject *var_l = NULL;
    PyObject *var_s = NULL;
    PyObject *var_d = NULL;
    PyObject *var_offset = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_for_loop_4__for_iterator = NULL;
    PyObject *tmp_for_loop_4__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    struct Nuitka_FrameObject *frame_6cda4f89e1245682282b8adef14ab664;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *tmp_dictset_value;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    static struct Nuitka_FrameObject *cache_frame_6cda4f89e1245682282b8adef14ab664 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6cda4f89e1245682282b8adef14ab664, codeobj_6cda4f89e1245682282b8adef14ab664, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6cda4f89e1245682282b8adef14ab664 = cache_frame_6cda4f89e1245682282b8adef14ab664;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6cda4f89e1245682282b8adef14ab664 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6cda4f89e1245682282b8adef14ab664 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAVE_INFO );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SAVE_INFO );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SAVE_INFO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1408;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }

        tmp_subscribed_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_im );
        tmp_source_name_1 = par_im;
        tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mode );
        if ( tmp_subscript_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1408;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1408;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1408;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 6 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 6 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2, 6 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_4, 3, 6 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_5, 4, 6 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_5 == NULL );
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_6, 5, 6 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_6 == NULL );
        tmp_tuple_unpack_1__element_6 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 1408;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 6)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1408;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1409;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_2;
            tmp_left_name_1 = const_str_digest_41f30dfb874731c8b680e9e93c9f8eb7;
            CHECK_OBJECT( par_im );
            tmp_source_name_2 = par_im;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_mode );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1410;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1410;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1410;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1410;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1407;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_6cda4f89e1245682282b8adef14ab664->m_frame) frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_5;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        assert( var_rawmode == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_rawmode = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        assert( var_prefix == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_prefix = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_3;
        assert( var_photo == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_photo = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_4;
        assert( var_format == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_format = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_5;
        assert( var_bits == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_bits = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_6 );
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_6;
        assert( var_extra == NULL );
        Py_INCREF( tmp_assign_source_13 );
        var_extra = tmp_assign_source_13;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1412;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        tmp_dict_key_1 = const_str_plain_prefix;
        CHECK_OBJECT( var_prefix );
        tmp_dict_value_1 = var_prefix;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1412;
        tmp_assign_source_14 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1412;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_ifd == NULL );
        var_ifd = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_im );
        tmp_source_name_4 = par_im;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_encoderinfo );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1414;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1414;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_plain_compression;
        CHECK_OBJECT( par_im );
        tmp_source_name_5 = par_im;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_info );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1414;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1414;
        tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_compression_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1414;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1414;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1414;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_compression == NULL );
        var_compression = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_compression );
        tmp_compexpr_left_2 = var_compression;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_16;
            tmp_assign_source_16 = const_str_plain_raw;
            {
                PyObject *old = var_compression;
                assert( old != NULL );
                var_compression = tmp_assign_source_16;
                Py_INCREF( var_compression );
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_17;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_WRITE_LIBTIFF );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_WRITE_LIBTIFF );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "WRITE_LIBTIFF" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1418;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_or_left_value_1 = tmp_mvar_value_3;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1418;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_compression );
        tmp_compexpr_left_3 = var_compression;
        tmp_compexpr_right_3 = const_str_plain_raw;
        tmp_or_right_value_1 = RICH_COMPARE_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_or_right_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1418;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_17 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        Py_INCREF( tmp_or_left_value_1 );
        tmp_assign_source_17 = tmp_or_left_value_1;
        or_end_1:;
        assert( var_libtiff == NULL );
        var_libtiff = tmp_assign_source_17;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_mvar_value_4;
        CHECK_OBJECT( par_im );
        tmp_getattr_target_1 = par_im;
        tmp_getattr_attr_1 = const_str_plain__planar_configuration;
        tmp_getattr_default_1 = const_int_pos_1;
        tmp_ass_subvalue_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1421;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_1 = var_ifd;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PLANAR_CONFIGURATION );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PLANAR_CONFIGURATION );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PLANAR_CONFIGURATION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1421;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_1 = tmp_mvar_value_4;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1421;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        PyObject *tmp_mvar_value_5;
        CHECK_OBJECT( par_im );
        tmp_source_name_6 = par_im;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_size );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1423;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_0;
        tmp_ass_subvalue_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_ass_subvalue_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1423;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_2 = var_ifd;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEWIDTH );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IMAGEWIDTH );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IMAGEWIDTH" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1423;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_2 = tmp_mvar_value_5;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
        Py_DECREF( tmp_ass_subvalue_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1423;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        PyObject *tmp_mvar_value_6;
        CHECK_OBJECT( par_im );
        tmp_source_name_7 = par_im;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_size );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1424;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_pos_1;
        tmp_ass_subvalue_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 1 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_ass_subvalue_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1424;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_3 = var_ifd;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGELENGTH );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IMAGELENGTH );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IMAGELENGTH" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1424;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_3 = tmp_mvar_value_6;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
        Py_DECREF( tmp_ass_subvalue_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1424;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_8;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_call_arg_element_2;
        CHECK_OBJECT( par_im );
        tmp_source_name_8 = par_im;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_encoderinfo );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1427;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_call_arg_element_1 = const_str_plain_tiffinfo;
        tmp_call_arg_element_2 = PyDict_New();
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1427;
        {
            PyObject *call_args[] = { tmp_call_arg_element_1, tmp_call_arg_element_2 };
            tmp_assign_source_18 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_called_instance_2 );
        Py_DECREF( tmp_call_arg_element_2 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1427;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_info == NULL );
        var_info = tmp_assign_source_18;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_mvar_value_7;
        int tmp_truth_name_1;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1428;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_7 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1428;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_list_arg_1;
            tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_print );
            assert( tmp_called_name_3 != NULL );
            tmp_left_name_2 = const_str_digest_0871b631df963d776df1d930042146d9;
            CHECK_OBJECT( var_info );
            tmp_list_arg_1 = var_info;
            tmp_right_name_2 = PySequence_List( tmp_list_arg_1 );
            if ( tmp_right_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1429;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_mvar_value_8;
        CHECK_OBJECT( var_info );
        tmp_isinstance_inst_1 = var_info;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v1" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1430;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_1 = tmp_mvar_value_8;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1430;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_called_instance_3;
            CHECK_OBJECT( var_info );
            tmp_called_instance_3 = var_info;
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1431;
            tmp_assign_source_19 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_to_v2 );
            if ( tmp_assign_source_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1431;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_info;
                assert( old != NULL );
                var_info = tmp_assign_source_19;
                Py_DECREF( old );
            }

        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( var_info );
        tmp_iter_arg_2 = var_info;
        tmp_assign_source_20 = MAKE_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1432;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_20;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_21 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_21 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1432;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_21;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_22;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_22 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_22;
            Py_INCREF( var_key );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        CHECK_OBJECT( var_info );
        tmp_called_instance_4 = var_info;
        CHECK_OBJECT( var_key );
        tmp_args_element_name_4 = var_key;
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1433;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_ass_subvalue_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_get, call_args );
        }

        if ( tmp_ass_subvalue_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1433;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_4 = var_ifd;
        CHECK_OBJECT( var_key );
        tmp_ass_subscript_4 = var_key;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
        Py_DECREF( tmp_ass_subvalue_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1433;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
    }
    // Tried code:
    {
        PyObject *tmp_ass_subvalue_5;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_9;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_ass_subscribed_5;
        PyObject *tmp_source_name_10;
        PyObject *tmp_ass_subscript_5;
        CHECK_OBJECT( var_info );
        tmp_source_name_9 = var_info;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_tagtype );
        if ( tmp_subscribed_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1435;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_key );
        tmp_subscript_name_4 = var_key;
        tmp_ass_subvalue_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscribed_name_4 );
        if ( tmp_ass_subvalue_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1435;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_ifd );
        tmp_source_name_10 = var_ifd;
        tmp_ass_subscribed_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tagtype );
        if ( tmp_ass_subscribed_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_ass_subvalue_5 );

            exception_lineno = 1435;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_key );
        tmp_ass_subscript_5 = var_key;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_5, tmp_ass_subscript_5, tmp_ass_subvalue_5 );
        Py_DECREF( tmp_ass_subscribed_5 );
        Py_DECREF( tmp_ass_subvalue_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1435;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != 0 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_4 = PyExc_Exception;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1436;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1436;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1434;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_6cda4f89e1245682282b8adef14ab664->m_frame) frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_8;
        branch_no_5:;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_4;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
    return NULL;
    // End of try:
    try_end_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1432;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_source_name_11;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT( par_im );
        tmp_source_name_11 = par_im;
        tmp_attribute_name_1 = const_str_plain_tag_v2;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_11, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1441;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_mvar_value_9;
            PyObject *tmp_mvar_value_10;
            PyObject *tmp_mvar_value_11;
            PyObject *tmp_mvar_value_12;
            PyObject *tmp_mvar_value_13;
            PyObject *tmp_mvar_value_14;
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );

            if (unlikely( tmp_mvar_value_9 == NULL ))
            {
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );
            }

            if ( tmp_mvar_value_9 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RESOLUTION_UNIT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1443;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_9;
            tmp_iter_arg_3 = PyTuple_New( 6 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 0, tmp_tuple_element_1 );
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );

            if (unlikely( tmp_mvar_value_10 == NULL ))
            {
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );
            }

            if ( tmp_mvar_value_10 == NULL )
            {
                Py_DECREF( tmp_iter_arg_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "X_RESOLUTION" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1443;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_10;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 1, tmp_tuple_element_1 );
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );

            if (unlikely( tmp_mvar_value_11 == NULL ))
            {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );
            }

            if ( tmp_mvar_value_11 == NULL )
            {
                Py_DECREF( tmp_iter_arg_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Y_RESOLUTION" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1443;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_11;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 2, tmp_tuple_element_1 );
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IPTC_NAA_CHUNK );

            if (unlikely( tmp_mvar_value_12 == NULL ))
            {
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IPTC_NAA_CHUNK );
            }

            if ( tmp_mvar_value_12 == NULL )
            {
                Py_DECREF( tmp_iter_arg_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IPTC_NAA_CHUNK" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1444;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_12;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 3, tmp_tuple_element_1 );
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PHOTOSHOP_CHUNK );

            if (unlikely( tmp_mvar_value_13 == NULL ))
            {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PHOTOSHOP_CHUNK );
            }

            if ( tmp_mvar_value_13 == NULL )
            {
                Py_DECREF( tmp_iter_arg_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PHOTOSHOP_CHUNK" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1444;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_13;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 4, tmp_tuple_element_1 );
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_XMP );

            if (unlikely( tmp_mvar_value_14 == NULL ))
            {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_XMP );
            }

            if ( tmp_mvar_value_14 == NULL )
            {
                Py_DECREF( tmp_iter_arg_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "XMP" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1444;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_14;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_iter_arg_3, 5, tmp_tuple_element_1 );
            tmp_assign_source_23 = MAKE_ITERATOR( tmp_iter_arg_3 );
            Py_DECREF( tmp_iter_arg_3 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1443;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_2__for_iterator == NULL );
            tmp_for_loop_2__for_iterator = tmp_assign_source_23;
        }
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_24;
            CHECK_OBJECT( tmp_for_loop_2__for_iterator );
            tmp_next_source_2 = tmp_for_loop_2__for_iterator;
            tmp_assign_source_24 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_24 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 1443;
                    goto try_except_handler_9;
                }
            }

            {
                PyObject *old = tmp_for_loop_2__iter_value;
                tmp_for_loop_2__iter_value = tmp_assign_source_24;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_25;
            CHECK_OBJECT( tmp_for_loop_2__iter_value );
            tmp_assign_source_25 = tmp_for_loop_2__iter_value;
            {
                PyObject *old = var_key;
                var_key = tmp_assign_source_25;
                Py_INCREF( var_key );
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_source_name_12;
            CHECK_OBJECT( var_key );
            tmp_compexpr_left_5 = var_key;
            CHECK_OBJECT( par_im );
            tmp_source_name_12 = par_im;
            tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_tag_v2 );
            if ( tmp_compexpr_right_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1445;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_res = PySequence_Contains( tmp_compexpr_right_5, tmp_compexpr_left_5 );
            Py_DECREF( tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1445;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_7 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_ass_subvalue_6;
                PyObject *tmp_subscribed_name_5;
                PyObject *tmp_source_name_13;
                PyObject *tmp_subscript_name_5;
                PyObject *tmp_ass_subscribed_6;
                PyObject *tmp_ass_subscript_6;
                CHECK_OBJECT( par_im );
                tmp_source_name_13 = par_im;
                tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_tag_v2 );
                if ( tmp_subscribed_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1446;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_key );
                tmp_subscript_name_5 = var_key;
                tmp_ass_subvalue_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
                Py_DECREF( tmp_subscribed_name_5 );
                if ( tmp_ass_subvalue_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1446;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_ifd );
                tmp_ass_subscribed_6 = var_ifd;
                CHECK_OBJECT( var_key );
                tmp_ass_subscript_6 = var_key;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_6, tmp_ass_subscript_6, tmp_ass_subvalue_6 );
                Py_DECREF( tmp_ass_subvalue_6 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1446;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
            }
            {
                PyObject *tmp_ass_subvalue_7;
                PyObject *tmp_subscribed_name_6;
                PyObject *tmp_source_name_14;
                PyObject *tmp_source_name_15;
                PyObject *tmp_subscript_name_6;
                PyObject *tmp_ass_subscribed_7;
                PyObject *tmp_source_name_16;
                PyObject *tmp_ass_subscript_7;
                CHECK_OBJECT( par_im );
                tmp_source_name_15 = par_im;
                tmp_source_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_tag_v2 );
                if ( tmp_source_name_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1447;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_subscribed_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_tagtype );
                Py_DECREF( tmp_source_name_14 );
                if ( tmp_subscribed_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1447;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_key );
                tmp_subscript_name_6 = var_key;
                tmp_ass_subvalue_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
                Py_DECREF( tmp_subscribed_name_6 );
                if ( tmp_ass_subvalue_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1447;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_ifd );
                tmp_source_name_16 = var_ifd;
                tmp_ass_subscribed_7 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_tagtype );
                if ( tmp_ass_subscribed_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_7 );

                    exception_lineno = 1447;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_key );
                tmp_ass_subscript_7 = var_key;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_7, tmp_ass_subscript_7, tmp_ass_subvalue_7 );
                Py_DECREF( tmp_ass_subscribed_7 );
                Py_DECREF( tmp_ass_subvalue_7 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1447;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_9;
                }
            }
            branch_no_7:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1443;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        goto loop_start_2;
        loop_end_2:;
        goto try_end_7;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto frame_exception_exit_1;
        // End of try:
        try_end_7:;
        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        branch_no_6:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_source_name_17;
        tmp_compexpr_left_6 = const_str_plain_icc_profile;
        CHECK_OBJECT( par_im );
        tmp_source_name_17 = par_im;
        tmp_compexpr_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_info );
        if ( tmp_compexpr_right_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1451;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_6, tmp_compexpr_left_6 );
        Py_DECREF( tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1451;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_ass_subvalue_8;
            PyObject *tmp_subscribed_name_7;
            PyObject *tmp_source_name_18;
            PyObject *tmp_subscript_name_7;
            PyObject *tmp_ass_subscribed_8;
            PyObject *tmp_ass_subscript_8;
            PyObject *tmp_mvar_value_15;
            CHECK_OBJECT( par_im );
            tmp_source_name_18 = par_im;
            tmp_subscribed_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_info );
            if ( tmp_subscribed_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1452;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_7 = const_str_plain_icc_profile;
            tmp_ass_subvalue_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
            Py_DECREF( tmp_subscribed_name_7 );
            if ( tmp_ass_subvalue_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1452;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_8 = var_ifd;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE );
            }

            if ( tmp_mvar_value_15 == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_8 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ICCPROFILE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1452;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_8 = tmp_mvar_value_15;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_8, tmp_ass_subscript_8, tmp_ass_subvalue_8 );
            Py_DECREF( tmp_ass_subvalue_8 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1452;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_iter_arg_4;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_mvar_value_16;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_mvar_value_21;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_mvar_value_22;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_mvar_value_23;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_mvar_value_24;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_mvar_value_25;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEDESCRIPTION );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IMAGEDESCRIPTION );
        }

        if ( tmp_mvar_value_16 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IMAGEDESCRIPTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1454;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = tmp_mvar_value_16;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_str_plain_description;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_3 );
        tmp_iter_arg_4 = PyTuple_New( 10 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 0, tmp_tuple_element_2 );
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );
        }

        if ( tmp_mvar_value_17 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "X_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1455;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = tmp_mvar_value_17;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_plain_resolution;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 1, tmp_tuple_element_2 );
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );
        }

        if ( tmp_mvar_value_18 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Y_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1456;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_5 = tmp_mvar_value_18;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_str_plain_resolution;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 2, tmp_tuple_element_2 );
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );
        }

        if ( tmp_mvar_value_19 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "X_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1457;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = tmp_mvar_value_19;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_str_plain_x_resolution;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 3, tmp_tuple_element_2 );
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );
        }

        if ( tmp_mvar_value_20 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Y_RESOLUTION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1458;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_7 = tmp_mvar_value_20;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_str_plain_y_resolution;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 4, tmp_tuple_element_2 );
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );

        if (unlikely( tmp_mvar_value_21 == NULL ))
        {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );
        }

        if ( tmp_mvar_value_21 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RESOLUTION_UNIT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1459;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_8 = tmp_mvar_value_21;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_str_plain_resolution_unit;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 5, tmp_tuple_element_2 );
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SOFTWARE );

        if (unlikely( tmp_mvar_value_22 == NULL ))
        {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SOFTWARE );
        }

        if ( tmp_mvar_value_22 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SOFTWARE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1460;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_9 = tmp_mvar_value_22;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_str_plain_software;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 6, tmp_tuple_element_2 );
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DATE_TIME );

        if (unlikely( tmp_mvar_value_23 == NULL ))
        {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DATE_TIME );
        }

        if ( tmp_mvar_value_23 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DATE_TIME" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1461;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_10 = tmp_mvar_value_23;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_str_plain_date_time;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 7, tmp_tuple_element_2 );
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ARTIST );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ARTIST );
        }

        if ( tmp_mvar_value_24 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ARTIST" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1462;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_11 = tmp_mvar_value_24;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_str_plain_artist;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 8, tmp_tuple_element_2 );
        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COPYRIGHT );

        if (unlikely( tmp_mvar_value_25 == NULL ))
        {
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COPYRIGHT );
        }

        if ( tmp_mvar_value_25 == NULL )
        {
            Py_DECREF( tmp_iter_arg_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COPYRIGHT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1463;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_12 = tmp_mvar_value_25;
        tmp_tuple_element_2 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 0, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_str_plain_copyright;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_tuple_element_2, 1, tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_iter_arg_4, 9, tmp_tuple_element_2 );
        tmp_assign_source_26 = MAKE_ITERATOR( tmp_iter_arg_4 );
        Py_DECREF( tmp_iter_arg_4 );
        if ( tmp_assign_source_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1454;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_3__for_iterator == NULL );
        tmp_for_loop_3__for_iterator = tmp_assign_source_26;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_27;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_27 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_27 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1454;
                goto try_except_handler_10;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_27;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_iter_arg_5;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_iter_arg_5 = tmp_for_loop_3__iter_value;
        tmp_assign_source_28 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
        if ( tmp_assign_source_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1454;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_28;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_unpack_7;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_7 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_29 = UNPACK_NEXT( tmp_unpack_7, 0, 2 );
        if ( tmp_assign_source_29 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1454;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_29;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_unpack_8;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_8 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_30 = UNPACK_NEXT( tmp_unpack_8, 1, 2 );
        if ( tmp_assign_source_30 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1454;
            goto try_except_handler_12;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_30;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 1454;
                    goto try_except_handler_12;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 1454;
            goto try_except_handler_12;
        }
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_11;
    // End of try:
    try_end_8:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto try_except_handler_10;
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_31;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_31 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_31;
            Py_INCREF( var_key );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_32;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_32 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_name;
            var_name = tmp_assign_source_32;
            Py_INCREF( var_name );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_source_name_19;
        CHECK_OBJECT( var_name );
        tmp_compexpr_left_7 = var_name;
        CHECK_OBJECT( par_im );
        tmp_source_name_19 = par_im;
        tmp_compexpr_right_7 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_encoderinfo );
        if ( tmp_compexpr_right_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1464;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_7, tmp_compexpr_left_7 );
        Py_DECREF( tmp_compexpr_right_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1464;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_10;
        }
        tmp_condition_result_9 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_ass_subvalue_9;
            PyObject *tmp_subscribed_name_8;
            PyObject *tmp_source_name_20;
            PyObject *tmp_subscript_name_8;
            PyObject *tmp_ass_subscribed_9;
            PyObject *tmp_ass_subscript_9;
            CHECK_OBJECT( par_im );
            tmp_source_name_20 = par_im;
            tmp_subscribed_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_encoderinfo );
            if ( tmp_subscribed_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1465;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }
            CHECK_OBJECT( var_name );
            tmp_subscript_name_8 = var_name;
            tmp_ass_subvalue_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
            Py_DECREF( tmp_subscribed_name_8 );
            if ( tmp_ass_subvalue_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1465;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_9 = var_ifd;
            CHECK_OBJECT( var_key );
            tmp_ass_subscript_9 = var_key;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_9, tmp_ass_subscript_9, tmp_ass_subvalue_9 );
            Py_DECREF( tmp_ass_subvalue_9 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1465;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }
        }
        branch_no_9:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1454;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_10;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_10;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_21;
        CHECK_OBJECT( par_im );
        tmp_source_name_21 = par_im;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_encoderinfo );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1467;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1467;
        tmp_assign_source_33 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_dpi_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_5 );
        if ( tmp_assign_source_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1467;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_dpi == NULL );
        var_dpi = tmp_assign_source_33;
    }
    {
        nuitka_bool tmp_condition_result_10;
        int tmp_truth_name_2;
        CHECK_OBJECT( var_dpi );
        tmp_truth_name_2 = CHECK_IF_TRUE( var_dpi );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1468;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_ass_subvalue_10;
            PyObject *tmp_ass_subscribed_10;
            PyObject *tmp_ass_subscript_10;
            PyObject *tmp_mvar_value_26;
            tmp_ass_subvalue_10 = const_int_pos_2;
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_10 = var_ifd;
            tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );

            if (unlikely( tmp_mvar_value_26 == NULL ))
            {
                tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT );
            }

            if ( tmp_mvar_value_26 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RESOLUTION_UNIT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1469;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_10 = tmp_mvar_value_26;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_10, tmp_ass_subscript_10, tmp_ass_subvalue_10 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1469;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_ass_subvalue_11;
            PyObject *tmp_subscribed_name_9;
            PyObject *tmp_subscript_name_9;
            PyObject *tmp_ass_subscribed_11;
            PyObject *tmp_ass_subscript_11;
            PyObject *tmp_mvar_value_27;
            CHECK_OBJECT( var_dpi );
            tmp_subscribed_name_9 = var_dpi;
            tmp_subscript_name_9 = const_int_0;
            tmp_ass_subvalue_11 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_9, tmp_subscript_name_9, 0 );
            if ( tmp_ass_subvalue_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1470;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_11 = var_ifd;
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );

            if (unlikely( tmp_mvar_value_27 == NULL ))
            {
                tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION );
            }

            if ( tmp_mvar_value_27 == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_11 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "X_RESOLUTION" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1470;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_11 = tmp_mvar_value_27;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_11, tmp_ass_subscript_11, tmp_ass_subvalue_11 );
            Py_DECREF( tmp_ass_subvalue_11 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1470;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_ass_subvalue_12;
            PyObject *tmp_subscribed_name_10;
            PyObject *tmp_subscript_name_10;
            PyObject *tmp_ass_subscribed_12;
            PyObject *tmp_ass_subscript_12;
            PyObject *tmp_mvar_value_28;
            CHECK_OBJECT( var_dpi );
            tmp_subscribed_name_10 = var_dpi;
            tmp_subscript_name_10 = const_int_pos_1;
            tmp_ass_subvalue_12 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_10, tmp_subscript_name_10, 1 );
            if ( tmp_ass_subvalue_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1471;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_12 = var_ifd;
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );

            if (unlikely( tmp_mvar_value_28 == NULL ))
            {
                tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION );
            }

            if ( tmp_mvar_value_28 == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_12 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Y_RESOLUTION" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1471;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_12 = tmp_mvar_value_28;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_12, tmp_ass_subscript_12, tmp_ass_subvalue_12 );
            Py_DECREF( tmp_ass_subvalue_12 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1471;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        CHECK_OBJECT( var_bits );
        tmp_compexpr_left_8 = var_bits;
        tmp_compexpr_right_8 = const_tuple_int_pos_1_tuple;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1473;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_ass_subvalue_13;
            PyObject *tmp_ass_subscribed_13;
            PyObject *tmp_ass_subscript_13;
            PyObject *tmp_mvar_value_29;
            CHECK_OBJECT( var_bits );
            tmp_ass_subvalue_13 = var_bits;
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_13 = var_ifd;
            tmp_mvar_value_29 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );

            if (unlikely( tmp_mvar_value_29 == NULL ))
            {
                tmp_mvar_value_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );
            }

            if ( tmp_mvar_value_29 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BITSPERSAMPLE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1474;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_13 = tmp_mvar_value_29;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_13, tmp_ass_subscript_13, tmp_ass_subvalue_13 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1474;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            PyObject *tmp_len_arg_1;
            CHECK_OBJECT( var_bits );
            tmp_len_arg_1 = var_bits;
            tmp_compexpr_left_9 = BUILTIN_LEN( tmp_len_arg_1 );
            if ( tmp_compexpr_left_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1475;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_9 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
            Py_DECREF( tmp_compexpr_left_9 );
            assert( !(tmp_res == -1) );
            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            {
                PyObject *tmp_ass_subvalue_14;
                PyObject *tmp_len_arg_2;
                PyObject *tmp_ass_subscribed_14;
                PyObject *tmp_ass_subscript_14;
                PyObject *tmp_mvar_value_30;
                CHECK_OBJECT( var_bits );
                tmp_len_arg_2 = var_bits;
                tmp_ass_subvalue_14 = BUILTIN_LEN( tmp_len_arg_2 );
                if ( tmp_ass_subvalue_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1476;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_ifd );
                tmp_ass_subscribed_14 = var_ifd;
                tmp_mvar_value_30 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAMPLESPERPIXEL );

                if (unlikely( tmp_mvar_value_30 == NULL ))
                {
                    tmp_mvar_value_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SAMPLESPERPIXEL );
                }

                if ( tmp_mvar_value_30 == NULL )
                {
                    Py_DECREF( tmp_ass_subvalue_14 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SAMPLESPERPIXEL" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1476;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_ass_subscript_14 = tmp_mvar_value_30;
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_14, tmp_ass_subscript_14, tmp_ass_subvalue_14 );
                Py_DECREF( tmp_ass_subvalue_14 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1476;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_12:;
        }
        branch_no_11:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        CHECK_OBJECT( var_extra );
        tmp_compexpr_left_10 = var_extra;
        tmp_compexpr_right_10 = Py_None;
        tmp_condition_result_13 = ( tmp_compexpr_left_10 != tmp_compexpr_right_10 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_ass_subvalue_15;
            PyObject *tmp_ass_subscribed_15;
            PyObject *tmp_ass_subscript_15;
            PyObject *tmp_mvar_value_31;
            CHECK_OBJECT( var_extra );
            tmp_ass_subvalue_15 = var_extra;
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_15 = var_ifd;
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_EXTRASAMPLES );

            if (unlikely( tmp_mvar_value_31 == NULL ))
            {
                tmp_mvar_value_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_EXTRASAMPLES );
            }

            if ( tmp_mvar_value_31 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "EXTRASAMPLES" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1478;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_15 = tmp_mvar_value_31;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_15, tmp_ass_subscript_15, tmp_ass_subvalue_15 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1478;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_13:;
    }
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        CHECK_OBJECT( var_format );
        tmp_compexpr_left_11 = var_format;
        tmp_compexpr_right_11 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1479;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        {
            PyObject *tmp_ass_subvalue_16;
            PyObject *tmp_ass_subscribed_16;
            PyObject *tmp_ass_subscript_16;
            PyObject *tmp_mvar_value_32;
            CHECK_OBJECT( var_format );
            tmp_ass_subvalue_16 = var_format;
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_16 = var_ifd;
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAMPLEFORMAT );

            if (unlikely( tmp_mvar_value_32 == NULL ))
            {
                tmp_mvar_value_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SAMPLEFORMAT );
            }

            if ( tmp_mvar_value_32 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SAMPLEFORMAT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1480;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_16 = tmp_mvar_value_32;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_16, tmp_ass_subscript_16, tmp_ass_subvalue_16 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1480;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_14:;
    }
    {
        PyObject *tmp_ass_subvalue_17;
        PyObject *tmp_ass_subscribed_17;
        PyObject *tmp_ass_subscript_17;
        PyObject *tmp_mvar_value_33;
        CHECK_OBJECT( var_photo );
        tmp_ass_subvalue_17 = var_photo;
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_17 = var_ifd;
        tmp_mvar_value_33 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PHOTOMETRIC_INTERPRETATION );

        if (unlikely( tmp_mvar_value_33 == NULL ))
        {
            tmp_mvar_value_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PHOTOMETRIC_INTERPRETATION );
        }

        if ( tmp_mvar_value_33 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PHOTOMETRIC_INTERPRETATION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1482;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_17 = tmp_mvar_value_33;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_17, tmp_ass_subscript_17, tmp_ass_subvalue_17 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1482;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_source_name_22;
        CHECK_OBJECT( par_im );
        tmp_source_name_22 = par_im;
        tmp_compexpr_left_12 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_mode );
        if ( tmp_compexpr_left_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1484;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_12 = const_str_plain_P;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
        Py_DECREF( tmp_compexpr_left_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1484;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_assign_source_34;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_23;
            CHECK_OBJECT( par_im );
            tmp_source_name_23 = par_im;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_im );
            if ( tmp_called_instance_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1485;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1485;
            tmp_assign_source_34 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_getpalette, &PyTuple_GET_ITEM( const_tuple_str_plain_RGB_str_digest_ee4a3fba8fc3306e6cef526eeff90632_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_6 );
            if ( tmp_assign_source_34 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1485;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_lut == NULL );
            var_lut = tmp_assign_source_34;
        }
        {
            PyObject *tmp_ass_subvalue_18;
            PyObject *tmp_tuple_arg_1;
            PyObject *tmp_ass_subscribed_18;
            PyObject *tmp_ass_subscript_18;
            PyObject *tmp_mvar_value_34;
            {
                PyObject *tmp_assign_source_35;
                PyObject *tmp_iter_arg_6;
                CHECK_OBJECT( var_lut );
                tmp_iter_arg_6 = var_lut;
                tmp_assign_source_35 = MAKE_ITERATOR( tmp_iter_arg_6 );
                if ( tmp_assign_source_35 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1486;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( tmp_genexpr_1__$0 == NULL );
                tmp_genexpr_1__$0 = tmp_assign_source_35;
            }
            // Tried code:
            tmp_tuple_arg_1 = PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_maker();

            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


            goto try_return_handler_13;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
            return NULL;
            // Return handler code:
            try_return_handler_13:;
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            goto outline_result_1;
            // End of try:
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
            return NULL;
            outline_result_1:;
            tmp_ass_subvalue_18 = PySequence_Tuple( tmp_tuple_arg_1 );
            Py_DECREF( tmp_tuple_arg_1 );
            if ( tmp_ass_subvalue_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1486;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_ifd );
            tmp_ass_subscribed_18 = var_ifd;
            tmp_mvar_value_34 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COLORMAP );

            if (unlikely( tmp_mvar_value_34 == NULL ))
            {
                tmp_mvar_value_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COLORMAP );
            }

            if ( tmp_mvar_value_34 == NULL )
            {
                Py_DECREF( tmp_ass_subvalue_18 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COLORMAP" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1486;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subscript_18 = tmp_mvar_value_34;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_18, tmp_ass_subscript_18, tmp_ass_subvalue_18 );
            Py_DECREF( tmp_ass_subvalue_18 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1486;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_15:;
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_left_name_3;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_left_name_4;
        PyObject *tmp_left_name_5;
        PyObject *tmp_left_name_6;
        PyObject *tmp_subscribed_name_11;
        PyObject *tmp_source_name_24;
        PyObject *tmp_subscript_name_11;
        PyObject *tmp_right_name_4;
        PyObject *tmp_subscribed_name_12;
        PyObject *tmp_subscript_name_12;
        PyObject *tmp_right_name_5;
        PyObject *tmp_right_name_6;
        CHECK_OBJECT( var_bits );
        tmp_len_arg_3 = var_bits;
        tmp_left_name_3 = BUILTIN_LEN( tmp_len_arg_3 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_im );
        tmp_source_name_24 = par_im;
        tmp_subscribed_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_size );
        if ( tmp_subscribed_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_11 = const_int_0;
        tmp_left_name_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_11, tmp_subscript_name_11, 0 );
        Py_DECREF( tmp_subscribed_name_11 );
        if ( tmp_left_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_bits );
        tmp_subscribed_name_12 = var_bits;
        tmp_subscript_name_12 = const_int_0;
        tmp_right_name_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_12, tmp_subscript_name_12, 0 );
        if ( tmp_right_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );
            Py_DECREF( tmp_left_name_6 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_5 = BINARY_OPERATION_MUL( tmp_left_name_6, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_6 );
        Py_DECREF( tmp_right_name_4 );
        if ( tmp_left_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_5 = const_int_pos_7;
        tmp_left_name_4 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_5, tmp_right_name_5 );
        Py_DECREF( tmp_left_name_5 );
        if ( tmp_left_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_6 = const_int_pos_8;
        tmp_right_name_3 = BINARY_OPERATION_FLOORDIV( tmp_left_name_4, tmp_right_name_6 );
        Py_DECREF( tmp_left_name_4 );
        if ( tmp_right_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_36 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        Py_DECREF( tmp_right_name_3 );
        if ( tmp_assign_source_36 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1488;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_stride == NULL );
        var_stride = tmp_assign_source_36;
    }
    {
        PyObject *tmp_ass_subvalue_19;
        PyObject *tmp_subscribed_name_13;
        PyObject *tmp_source_name_25;
        PyObject *tmp_subscript_name_13;
        PyObject *tmp_ass_subscribed_19;
        PyObject *tmp_ass_subscript_19;
        PyObject *tmp_mvar_value_35;
        CHECK_OBJECT( par_im );
        tmp_source_name_25 = par_im;
        tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_size );
        if ( tmp_subscribed_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1489;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_13 = const_int_pos_1;
        tmp_ass_subvalue_19 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_13, tmp_subscript_name_13, 1 );
        Py_DECREF( tmp_subscribed_name_13 );
        if ( tmp_ass_subvalue_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1489;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_19 = var_ifd;
        tmp_mvar_value_35 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ROWSPERSTRIP );

        if (unlikely( tmp_mvar_value_35 == NULL ))
        {
            tmp_mvar_value_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ROWSPERSTRIP );
        }

        if ( tmp_mvar_value_35 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_19 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ROWSPERSTRIP" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1489;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_19 = tmp_mvar_value_35;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_19, tmp_ass_subscript_19, tmp_ass_subvalue_19 );
        Py_DECREF( tmp_ass_subvalue_19 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1489;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_20;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_7;
        PyObject *tmp_subscribed_name_14;
        PyObject *tmp_source_name_26;
        PyObject *tmp_subscript_name_14;
        PyObject *tmp_ass_subscribed_20;
        PyObject *tmp_ass_subscript_20;
        PyObject *tmp_mvar_value_36;
        CHECK_OBJECT( var_stride );
        tmp_left_name_7 = var_stride;
        CHECK_OBJECT( par_im );
        tmp_source_name_26 = par_im;
        tmp_subscribed_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_size );
        if ( tmp_subscribed_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1490;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_14 = const_int_pos_1;
        tmp_right_name_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_14, tmp_subscript_name_14, 1 );
        Py_DECREF( tmp_subscribed_name_14 );
        if ( tmp_right_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1490;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_20 = BINARY_OPERATION_MUL( tmp_left_name_7, tmp_right_name_7 );
        Py_DECREF( tmp_right_name_7 );
        if ( tmp_ass_subvalue_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1490;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_20 = var_ifd;
        tmp_mvar_value_36 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPBYTECOUNTS );

        if (unlikely( tmp_mvar_value_36 == NULL ))
        {
            tmp_mvar_value_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPBYTECOUNTS );
        }

        if ( tmp_mvar_value_36 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_20 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPBYTECOUNTS" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1490;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_20 = tmp_mvar_value_36;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_20, tmp_ass_subscript_20, tmp_ass_subvalue_20 );
        Py_DECREF( tmp_ass_subvalue_20 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1490;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_21;
        PyObject *tmp_ass_subscribed_21;
        PyObject *tmp_ass_subscript_21;
        PyObject *tmp_mvar_value_37;
        tmp_ass_subvalue_21 = const_int_0;
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_21 = var_ifd;
        tmp_mvar_value_37 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

        if (unlikely( tmp_mvar_value_37 == NULL ))
        {
            tmp_mvar_value_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
        }

        if ( tmp_mvar_value_37 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1491;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_21 = tmp_mvar_value_37;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_21, tmp_ass_subscript_21, tmp_ass_subvalue_21 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1491;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_22;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_mvar_value_38;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_ass_subscribed_22;
        PyObject *tmp_ass_subscript_22;
        PyObject *tmp_mvar_value_39;
        tmp_mvar_value_38 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO_REV );

        if (unlikely( tmp_mvar_value_38 == NULL ))
        {
            tmp_mvar_value_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO_REV );
        }

        if ( tmp_mvar_value_38 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COMPRESSION_INFO_REV" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1493;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = tmp_mvar_value_38;
        CHECK_OBJECT( var_compression );
        tmp_args_element_name_5 = var_compression;
        tmp_args_element_name_6 = const_int_pos_1;
        frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1493;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_ass_subvalue_22 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_get, call_args );
        }

        if ( tmp_ass_subvalue_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1493;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ifd );
        tmp_ass_subscribed_22 = var_ifd;
        tmp_mvar_value_39 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION );

        if (unlikely( tmp_mvar_value_39 == NULL ))
        {
            tmp_mvar_value_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COMPRESSION );
        }

        if ( tmp_mvar_value_39 == NULL )
        {
            Py_DECREF( tmp_ass_subvalue_22 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "COMPRESSION" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1493;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_22 = tmp_mvar_value_39;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_22, tmp_ass_subscript_22, tmp_ass_subvalue_22 );
        Py_DECREF( tmp_ass_subvalue_22 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1493;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_16;
        int tmp_truth_name_3;
        CHECK_OBJECT( var_libtiff );
        tmp_truth_name_3 = CHECK_IF_TRUE( var_libtiff );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1495;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_16 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_16;
        }
        else
        {
            goto branch_no_16;
        }
        branch_yes_16:;
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_mvar_value_40;
            int tmp_truth_name_4;
            tmp_mvar_value_40 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_40 == NULL ))
            {
                tmp_mvar_value_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_40 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1496;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_4 = CHECK_IF_TRUE( tmp_mvar_value_40 );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1496;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_17 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_call_result_2;
                tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_4 != NULL );
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1497;
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_str_digest_54d886f81e8101b01b7b58bef7c08e77_tuple, 0 ) );

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1497;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            {
                PyObject *tmp_called_name_5;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_left_name_8;
                PyObject *tmp_right_name_8;
                PyObject *tmp_called_name_6;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_called_instance_8;
                tmp_called_name_5 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_5 != NULL );
                tmp_left_name_8 = const_str_digest_0ba47df103c88e4b97bc17b69694639a;
                tmp_called_name_6 = LOOKUP_BUILTIN( const_str_plain_sorted );
                assert( tmp_called_name_6 != NULL );
                CHECK_OBJECT( var_ifd );
                tmp_called_instance_8 = var_ifd;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1498;
                tmp_args_element_name_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_items );
                if ( tmp_args_element_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1498;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1498;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8 };
                    tmp_right_name_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_args_element_name_8 );
                if ( tmp_right_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1498;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_8, tmp_right_name_8 );
                Py_DECREF( tmp_right_name_8 );
                if ( tmp_args_element_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1498;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1498;
                {
                    PyObject *call_args[] = { tmp_args_element_name_7 };
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                }

                Py_DECREF( tmp_args_element_name_7 );
                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1498;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            branch_no_17:;
        }
        {
            PyObject *tmp_assign_source_37;
            tmp_assign_source_37 = const_int_0;
            assert( var__fp == NULL );
            Py_INCREF( tmp_assign_source_37 );
            var__fp = tmp_assign_source_37;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_source_name_27;
            PyObject *tmp_attribute_name_2;
            CHECK_OBJECT( par_fp );
            tmp_source_name_27 = par_fp;
            tmp_attribute_name_2 = const_str_plain_fileno;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_27, tmp_attribute_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1500;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            // Tried code:
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_call_result_4;
                CHECK_OBJECT( par_fp );
                tmp_called_instance_9 = par_fp;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1502;
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1502;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_14;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            {
                PyObject *tmp_assign_source_38;
                PyObject *tmp_called_name_7;
                PyObject *tmp_source_name_28;
                PyObject *tmp_mvar_value_41;
                PyObject *tmp_args_element_name_9;
                PyObject *tmp_called_instance_10;
                tmp_mvar_value_41 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_41 == NULL ))
                {
                    tmp_mvar_value_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_41 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1503;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_14;
                }

                tmp_source_name_28 = tmp_mvar_value_41;
                tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_dup );
                if ( tmp_called_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1503;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_14;
                }
                CHECK_OBJECT( par_fp );
                tmp_called_instance_10 = par_fp;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1503;
                tmp_args_element_name_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_fileno );
                if ( tmp_args_element_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_7 );

                    exception_lineno = 1503;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_14;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1503;
                {
                    PyObject *call_args[] = { tmp_args_element_name_9 };
                    tmp_assign_source_38 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
                }

                Py_DECREF( tmp_called_name_7 );
                Py_DECREF( tmp_args_element_name_9 );
                if ( tmp_assign_source_38 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1503;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_14;
                }
                {
                    PyObject *old = var__fp;
                    assert( old != NULL );
                    var__fp = tmp_assign_source_38;
                    Py_DECREF( old );
                }

            }
            goto try_end_11;
            // Exception handler code:
            try_except_handler_14:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_3 );
            exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_3 );
            exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_3 );

            if ( exception_keeper_tb_12 == NULL )
            {
                exception_keeper_tb_12 = MAKE_TRACEBACK( frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_12 );
            }
            else if ( exception_keeper_lineno_12 != 0 )
            {
                exception_keeper_tb_12 = ADD_TRACEBACK( exception_keeper_tb_12, frame_6cda4f89e1245682282b8adef14ab664, exception_keeper_lineno_12 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12 );
            PyException_SetTraceback( exception_keeper_value_12, (PyObject *)exception_keeper_tb_12 );
            PUBLISH_EXCEPTION( &exception_keeper_type_12, &exception_keeper_value_12, &exception_keeper_tb_12 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_19;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_compexpr_left_13;
                PyObject *tmp_compexpr_right_13;
                PyObject *tmp_source_name_29;
                PyObject *tmp_mvar_value_42;
                tmp_compexpr_left_13 = EXC_TYPE(PyThreadState_GET());
                tmp_mvar_value_42 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_io );

                if (unlikely( tmp_mvar_value_42 == NULL ))
                {
                    tmp_mvar_value_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
                }

                if ( tmp_mvar_value_42 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1504;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_15;
                }

                tmp_source_name_29 = tmp_mvar_value_42;
                tmp_compexpr_right_13 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_UnsupportedOperation );
                if ( tmp_compexpr_right_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1504;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_15;
                }
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_13, tmp_compexpr_right_13 );
                Py_DECREF( tmp_compexpr_right_13 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1504;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_15;
                }
                tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1504;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_15;
                }
                tmp_condition_result_19 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_19;
                }
                else
                {
                    goto branch_no_19;
                }
                branch_yes_19:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 1501;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_6cda4f89e1245682282b8adef14ab664->m_frame) frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_15;
                branch_no_19:;
            }
            goto try_end_12;
            // Exception handler code:
            try_except_handler_15:;
            exception_keeper_type_13 = exception_type;
            exception_keeper_value_13 = exception_value;
            exception_keeper_tb_13 = exception_tb;
            exception_keeper_lineno_13 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
            // Re-raise.
            exception_type = exception_keeper_type_13;
            exception_value = exception_keeper_value_13;
            exception_tb = exception_keeper_tb_13;
            exception_lineno = exception_keeper_lineno_13;

            goto frame_exception_exit_1;
            // End of try:
            try_end_12:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
            goto try_end_11;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
            return NULL;
            // End of try:
            try_end_11:;
            branch_no_18:;
        }
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_list_element_1;
            PyObject *tmp_mvar_value_43;
            PyObject *tmp_mvar_value_44;
            tmp_mvar_value_43 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );

            if (unlikely( tmp_mvar_value_43 == NULL ))
            {
                tmp_mvar_value_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS );
            }

            if ( tmp_mvar_value_43 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPOFFSETS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1509;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_list_element_1 = tmp_mvar_value_43;
            tmp_assign_source_39 = PyList_New( 2 );
            Py_INCREF( tmp_list_element_1 );
            PyList_SET_ITEM( tmp_assign_source_39, 0, tmp_list_element_1 );
            tmp_mvar_value_44 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPBYTECOUNTS );

            if (unlikely( tmp_mvar_value_44 == NULL ))
            {
                tmp_mvar_value_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STRIPBYTECOUNTS );
            }

            if ( tmp_mvar_value_44 == NULL )
            {
                Py_DECREF( tmp_assign_source_39 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STRIPBYTECOUNTS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1509;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_list_element_1 = tmp_mvar_value_44;
            Py_INCREF( tmp_list_element_1 );
            PyList_SET_ITEM( tmp_assign_source_39, 1, tmp_list_element_1 );
            assert( var_blocklist == NULL );
            var_blocklist = tmp_assign_source_39;
        }
        {
            PyObject *tmp_assign_source_40;
            tmp_assign_source_40 = PyDict_New();
            assert( var_atts == NULL );
            var_atts = tmp_assign_source_40;
        }
        {
            PyObject *tmp_subscribed_name_15;
            PyObject *tmp_subscript_name_15;
            PyObject *tmp_mvar_value_45;
            CHECK_OBJECT( var_bits );
            tmp_subscribed_name_15 = var_bits;
            tmp_subscript_name_15 = const_int_0;
            tmp_dictset_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_15, tmp_subscript_name_15, 0 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1512;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_atts );
            tmp_dictset_dict = var_atts;
            tmp_mvar_value_45 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );

            if (unlikely( tmp_mvar_value_45 == NULL ))
            {
                tmp_mvar_value_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE );
            }

            if ( tmp_mvar_value_45 == NULL )
            {
                Py_DECREF( tmp_dictset_value );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BITSPERSAMPLE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1512;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_dictset_key = tmp_mvar_value_45;
            tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1512;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assign_source_41;
            tmp_assign_source_41 = PyDict_New();
            assert( var_legacy_ifd == NULL );
            var_legacy_ifd = tmp_assign_source_41;
        }
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_source_name_30;
            PyObject *tmp_attribute_name_3;
            CHECK_OBJECT( par_im );
            tmp_source_name_30 = par_im;
            tmp_attribute_name_3 = const_str_plain_tag;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_30, tmp_attribute_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1517;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_assign_source_42;
                PyObject *tmp_called_instance_11;
                PyObject *tmp_source_name_31;
                CHECK_OBJECT( par_im );
                tmp_source_name_31 = par_im;
                tmp_called_instance_11 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_tag );
                if ( tmp_called_instance_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1518;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1518;
                tmp_assign_source_42 = CALL_METHOD_NO_ARGS( tmp_called_instance_11, const_str_plain_to_v2 );
                Py_DECREF( tmp_called_instance_11 );
                if ( tmp_assign_source_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1518;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_legacy_ifd;
                    assert( old != NULL );
                    var_legacy_ifd = tmp_assign_source_42;
                    Py_DECREF( old );
                }

            }
            branch_no_20:;
        }
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_iter_arg_7;
            PyObject *tmp_called_name_8;
            PyObject *tmp_source_name_32;
            PyObject *tmp_mvar_value_46;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_called_instance_12;
            PyObject *tmp_args_element_name_11;
            PyObject *tmp_called_instance_13;
            PyObject *tmp_getattr_target_2;
            PyObject *tmp_getattr_attr_2;
            PyObject *tmp_getattr_default_2;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_called_instance_14;
            tmp_mvar_value_46 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_itertools );

            if (unlikely( tmp_mvar_value_46 == NULL ))
            {
                tmp_mvar_value_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
            }

            if ( tmp_mvar_value_46 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "itertools" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_32 = tmp_mvar_value_46;
            tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_chain );
            if ( tmp_called_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_ifd );
            tmp_called_instance_12 = var_ifd;
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1519;
            tmp_args_element_name_10 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_items );
            if ( tmp_args_element_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );

                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_im );
            tmp_getattr_target_2 = par_im;
            tmp_getattr_attr_2 = const_str_plain_tag_v2;
            tmp_getattr_default_2 = PyDict_New();
            tmp_called_instance_13 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
            Py_DECREF( tmp_getattr_default_2 );
            if ( tmp_called_instance_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_element_name_10 );

                exception_lineno = 1520;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1520;
            tmp_args_element_name_11 = CALL_METHOD_NO_ARGS( tmp_called_instance_13, const_str_plain_items );
            Py_DECREF( tmp_called_instance_13 );
            if ( tmp_args_element_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_element_name_10 );

                exception_lineno = 1520;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_legacy_ifd );
            tmp_called_instance_14 = var_legacy_ifd;
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1521;
            tmp_args_element_name_12 = CALL_METHOD_NO_ARGS( tmp_called_instance_14, const_str_plain_items );
            if ( tmp_args_element_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_element_name_10 );
                Py_DECREF( tmp_args_element_name_11 );

                exception_lineno = 1521;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1519;
            {
                PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
                tmp_iter_arg_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, call_args );
            }

            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_args_element_name_10 );
            Py_DECREF( tmp_args_element_name_11 );
            Py_DECREF( tmp_args_element_name_12 );
            if ( tmp_iter_arg_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_43 = MAKE_ITERATOR( tmp_iter_arg_7 );
            Py_DECREF( tmp_iter_arg_7 );
            if ( tmp_assign_source_43 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_4__for_iterator == NULL );
            tmp_for_loop_4__for_iterator = tmp_assign_source_43;
        }
        // Tried code:
        loop_start_4:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_44;
            CHECK_OBJECT( tmp_for_loop_4__for_iterator );
            tmp_next_source_4 = tmp_for_loop_4__for_iterator;
            tmp_assign_source_44 = ITERATOR_NEXT( tmp_next_source_4 );
            if ( tmp_assign_source_44 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_4;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 1519;
                    goto try_except_handler_16;
                }
            }

            {
                PyObject *old = tmp_for_loop_4__iter_value;
                tmp_for_loop_4__iter_value = tmp_assign_source_44;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_45;
            PyObject *tmp_iter_arg_8;
            CHECK_OBJECT( tmp_for_loop_4__iter_value );
            tmp_iter_arg_8 = tmp_for_loop_4__iter_value;
            tmp_assign_source_45 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_8 );
            if ( tmp_assign_source_45 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1519;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_17;
            }
            {
                PyObject *old = tmp_tuple_unpack_3__source_iter;
                tmp_tuple_unpack_3__source_iter = tmp_assign_source_45;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_unpack_9;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_9 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_46 = UNPACK_NEXT( tmp_unpack_9, 0, 2 );
            if ( tmp_assign_source_46 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1519;
                goto try_except_handler_18;
            }
            {
                PyObject *old = tmp_tuple_unpack_3__element_1;
                tmp_tuple_unpack_3__element_1 = tmp_assign_source_46;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_47;
            PyObject *tmp_unpack_10;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_10 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_47 = UNPACK_NEXT( tmp_unpack_10, 1, 2 );
            if ( tmp_assign_source_47 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1519;
                goto try_except_handler_18;
            }
            {
                PyObject *old = tmp_tuple_unpack_3__element_2;
                tmp_tuple_unpack_3__element_2 = tmp_assign_source_47;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_3;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        exception_lineno = 1519;
                        goto try_except_handler_18;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1519;
                goto try_except_handler_18;
            }
        }
        goto try_end_13;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto try_except_handler_17;
        // End of try:
        try_end_13:;
        goto try_end_14;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto try_except_handler_16;
        // End of try:
        try_end_14:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        {
            PyObject *tmp_assign_source_48;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
            tmp_assign_source_48 = tmp_tuple_unpack_3__element_1;
            {
                PyObject *old = var_tag;
                var_tag = tmp_assign_source_48;
                Py_INCREF( var_tag );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        {
            PyObject *tmp_assign_source_49;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
            tmp_assign_source_49 = tmp_tuple_unpack_3__element_2;
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_49;
                Py_INCREF( var_value );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_21;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            PyObject *tmp_source_name_33;
            PyObject *tmp_mvar_value_47;
            CHECK_OBJECT( var_tag );
            tmp_compexpr_left_14 = var_tag;
            tmp_mvar_value_47 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_47 == NULL ))
            {
                tmp_mvar_value_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_47 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1526;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }

            tmp_source_name_33 = tmp_mvar_value_47;
            tmp_compexpr_right_14 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_LIBTIFF_CORE );
            if ( tmp_compexpr_right_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1526;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_res = PySequence_Contains( tmp_compexpr_right_14, tmp_compexpr_left_14 );
            Py_DECREF( tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1526;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_condition_result_21 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_21;
            }
            else
            {
                goto branch_no_21;
            }
            branch_yes_21:;
            {
                nuitka_bool tmp_condition_result_22;
                PyObject *tmp_compexpr_left_15;
                PyObject *tmp_compexpr_right_15;
                PyObject *tmp_source_name_34;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_mvar_value_48;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_source_name_35;
                PyObject *tmp_mvar_value_49;
                tmp_mvar_value_48 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                if (unlikely( tmp_mvar_value_48 == NULL ))
                {
                    tmp_mvar_value_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                }

                if ( tmp_mvar_value_48 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_called_instance_15 = tmp_mvar_value_48;
                CHECK_OBJECT( var_tag );
                tmp_args_element_name_13 = var_tag;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1527;
                {
                    PyObject *call_args[] = { tmp_args_element_name_13 };
                    tmp_source_name_34 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_lookup, call_args );
                }

                if ( tmp_source_name_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_compexpr_left_15 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_type );
                Py_DECREF( tmp_source_name_34 );
                if ( tmp_compexpr_left_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_mvar_value_49 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                if (unlikely( tmp_mvar_value_49 == NULL ))
                {
                    tmp_mvar_value_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                }

                if ( tmp_mvar_value_49 == NULL )
                {
                    Py_DECREF( tmp_compexpr_left_15 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_source_name_35 = tmp_mvar_value_49;
                tmp_compexpr_right_15 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_UNDEFINED );
                if ( tmp_compexpr_right_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_15 );

                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
                Py_DECREF( tmp_compexpr_left_15 );
                Py_DECREF( tmp_compexpr_right_15 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1527;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_22;
                }
                else
                {
                    goto branch_no_22;
                }
                branch_yes_22:;
                goto loop_start_4;
                branch_no_22:;
            }
            {
                nuitka_bool tmp_condition_result_23;
                int tmp_or_left_truth_2;
                nuitka_bool tmp_or_left_value_2;
                nuitka_bool tmp_or_right_value_2;
                PyObject *tmp_compexpr_left_16;
                PyObject *tmp_compexpr_right_16;
                PyObject *tmp_called_name_9;
                PyObject *tmp_source_name_36;
                PyObject *tmp_source_name_37;
                PyObject *tmp_mvar_value_50;
                PyObject *tmp_args_element_name_14;
                PyObject *tmp_called_name_10;
                PyObject *tmp_mvar_value_51;
                PyObject *tmp_called_instance_16;
                PyObject *tmp_source_name_38;
                PyObject *tmp_mvar_value_52;
                PyObject *tmp_operand_name_3;
                int tmp_or_left_truth_3;
                PyObject *tmp_or_left_value_3;
                PyObject *tmp_or_right_value_3;
                PyObject *tmp_isinstance_inst_2;
                PyObject *tmp_isinstance_cls_2;
                int tmp_and_left_truth_1;
                PyObject *tmp_and_left_value_1;
                PyObject *tmp_and_right_value_1;
                PyObject *tmp_operand_name_4;
                PyObject *tmp_mvar_value_53;
                PyObject *tmp_isinstance_inst_3;
                PyObject *tmp_isinstance_cls_3;
                PyObject *tmp_mvar_value_54;
                tmp_mvar_value_50 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_distutils );

                if (unlikely( tmp_mvar_value_50 == NULL ))
                {
                    tmp_mvar_value_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_distutils );
                }

                if ( tmp_mvar_value_50 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "distutils" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_source_name_37 = tmp_mvar_value_50;
                tmp_source_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_version );
                if ( tmp_source_name_36 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_StrictVersion );
                Py_DECREF( tmp_source_name_36 );
                if ( tmp_called_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_mvar_value_51 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__libtiff_version );

                if (unlikely( tmp_mvar_value_51 == NULL ))
                {
                    tmp_mvar_value_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__libtiff_version );
                }

                if ( tmp_mvar_value_51 == NULL )
                {
                    Py_DECREF( tmp_called_name_9 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_libtiff_version" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_called_name_10 = tmp_mvar_value_51;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1529;
                tmp_args_element_name_14 = CALL_FUNCTION_NO_ARGS( tmp_called_name_10 );
                if ( tmp_args_element_name_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_9 );

                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1529;
                {
                    PyObject *call_args[] = { tmp_args_element_name_14 };
                    tmp_compexpr_left_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                }

                Py_DECREF( tmp_called_name_9 );
                Py_DECREF( tmp_args_element_name_14 );
                if ( tmp_compexpr_left_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_mvar_value_52 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_distutils );

                if (unlikely( tmp_mvar_value_52 == NULL ))
                {
                    tmp_mvar_value_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_distutils );
                }

                if ( tmp_mvar_value_52 == NULL )
                {
                    Py_DECREF( tmp_compexpr_left_16 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "distutils" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1530;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_source_name_38 = tmp_mvar_value_52;
                tmp_called_instance_16 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_version );
                if ( tmp_called_instance_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_16 );

                    exception_lineno = 1530;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1530;
                tmp_compexpr_right_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_StrictVersion, &PyTuple_GET_ITEM( const_tuple_str_digest_ec008b11def3fee25602c86081895340_tuple, 0 ) );

                Py_DECREF( tmp_called_instance_16 );
                if ( tmp_compexpr_right_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_16 );

                    exception_lineno = 1530;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
                Py_DECREF( tmp_compexpr_left_16 );
                Py_DECREF( tmp_compexpr_right_16 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1529;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_or_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_or_left_truth_2 == 1 )
                {
                    goto or_left_2;
                }
                else
                {
                    goto or_right_2;
                }
                or_right_2:;
                CHECK_OBJECT( var_value );
                tmp_isinstance_inst_2 = var_value;
                tmp_isinstance_cls_2 = const_tuple_type_int_type_float_type_str_type_bytes_tuple;
                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1531;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_or_left_value_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
                if ( tmp_or_left_truth_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                if ( tmp_or_left_truth_3 == 1 )
                {
                    goto or_left_3;
                }
                else
                {
                    goto or_right_3;
                }
                or_right_3:;
                tmp_mvar_value_53 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

                if (unlikely( tmp_mvar_value_53 == NULL ))
                {
                    tmp_mvar_value_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
                }

                if ( tmp_mvar_value_53 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_operand_name_4 = tmp_mvar_value_53;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_and_left_value_1 = ( tmp_res == 0 ) ? Py_True : Py_False;
                tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
                if ( tmp_and_left_truth_1 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                if ( tmp_and_left_truth_1 == 1 )
                {
                    goto and_right_1;
                }
                else
                {
                    goto and_left_1;
                }
                and_right_1:;
                CHECK_OBJECT( var_value );
                tmp_isinstance_inst_3 = var_value;
                tmp_mvar_value_54 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_unicode );

                if (unlikely( tmp_mvar_value_54 == NULL ))
                {
                    tmp_mvar_value_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
                }

                if ( tmp_mvar_value_54 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "unicode" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_isinstance_cls_3 = tmp_mvar_value_54;
                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1532;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_and_right_value_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_or_right_value_3 = tmp_and_right_value_1;
                goto and_end_1;
                and_left_1:;
                tmp_or_right_value_3 = tmp_and_left_value_1;
                and_end_1:;
                tmp_operand_name_3 = tmp_or_right_value_3;
                goto or_end_3;
                or_left_3:;
                tmp_operand_name_3 = tmp_or_left_value_3;
                or_end_3:;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1531;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_or_right_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_condition_result_23 = tmp_or_right_value_2;
                goto or_end_2;
                or_left_2:;
                tmp_condition_result_23 = tmp_or_left_value_2;
                or_end_2:;
                if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_23;
                }
                else
                {
                    goto branch_no_23;
                }
                branch_yes_23:;
                goto loop_start_4;
                branch_no_23:;
            }
            branch_no_21:;
        }
        {
            nuitka_bool tmp_condition_result_24;
            int tmp_and_left_truth_2;
            nuitka_bool tmp_and_left_value_2;
            nuitka_bool tmp_and_right_value_2;
            PyObject *tmp_key_name_1;
            PyObject *tmp_dict_name_1;
            PyObject *tmp_compexpr_left_17;
            PyObject *tmp_compexpr_right_17;
            CHECK_OBJECT( var_tag );
            tmp_key_name_1 = var_tag;
            CHECK_OBJECT( var_atts );
            tmp_dict_name_1 = var_atts;
            tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1534;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_and_left_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_2 == 1 )
            {
                goto and_right_2;
            }
            else
            {
                goto and_left_2;
            }
            and_right_2:;
            CHECK_OBJECT( var_tag );
            tmp_compexpr_left_17 = var_tag;
            CHECK_OBJECT( var_blocklist );
            tmp_compexpr_right_17 = var_blocklist;
            tmp_res = PySequence_Contains( tmp_compexpr_right_17, tmp_compexpr_left_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1534;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_and_right_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_24 = tmp_and_right_value_2;
            goto and_end_2;
            and_left_2:;
            tmp_condition_result_24 = tmp_and_left_value_2;
            and_end_2:;
            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_24;
            }
            else
            {
                goto branch_no_24;
            }
            branch_yes_24:;
            {
                nuitka_bool tmp_condition_result_25;
                PyObject *tmp_isinstance_inst_4;
                PyObject *tmp_isinstance_cls_4;
                nuitka_bool tmp_condition_result_26;
                PyObject *tmp_mvar_value_55;
                int tmp_truth_name_5;
                PyObject *tmp_mvar_value_56;
                CHECK_OBJECT( var_value );
                tmp_isinstance_inst_4 = var_value;
                tmp_mvar_value_55 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

                if (unlikely( tmp_mvar_value_55 == NULL ))
                {
                    tmp_mvar_value_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
                }

                if ( tmp_mvar_value_55 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1535;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_truth_name_5 = CHECK_IF_TRUE( tmp_mvar_value_55 );
                if ( tmp_truth_name_5 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1535;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_condition_result_26 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_1;
                }
                else
                {
                    goto condexpr_false_1;
                }
                condexpr_true_1:;
                tmp_isinstance_cls_4 = (PyObject *)&PyUnicode_Type;
                goto condexpr_end_1;
                condexpr_false_1:;
                tmp_mvar_value_56 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_unicode );

                if (unlikely( tmp_mvar_value_56 == NULL ))
                {
                    tmp_mvar_value_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_unicode );
                }

                if ( tmp_mvar_value_56 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "unicode" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1535;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_isinstance_cls_4 = tmp_mvar_value_56;
                condexpr_end_1:;
                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1535;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_25;
                }
                else
                {
                    goto branch_no_25;
                }
                branch_yes_25:;
                {
                    PyObject *tmp_left_name_9;
                    PyObject *tmp_called_instance_17;
                    PyObject *tmp_right_name_9;
                    CHECK_OBJECT( var_value );
                    tmp_called_instance_17 = var_value;
                    frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1536;
                    tmp_left_name_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_17, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_str_plain_replace_tuple, 0 ) );

                    if ( tmp_left_name_9 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1536;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    tmp_right_name_9 = const_bytes_chr_0;
                    tmp_dictset_value = BINARY_OPERATION_ADD_OBJECT_BYTES( tmp_left_name_9, tmp_right_name_9 );
                    Py_DECREF( tmp_left_name_9 );
                    if ( tmp_dictset_value == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1536;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    CHECK_OBJECT( var_atts );
                    tmp_dictset_dict = var_atts;
                    CHECK_OBJECT( var_tag );
                    tmp_dictset_key = var_tag;
                    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
                    Py_DECREF( tmp_dictset_value );
                    if ( tmp_res != 0 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1536;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                }
                goto branch_end_25;
                branch_no_25:;
                {
                    nuitka_bool tmp_condition_result_27;
                    PyObject *tmp_isinstance_inst_5;
                    PyObject *tmp_isinstance_cls_5;
                    PyObject *tmp_mvar_value_57;
                    CHECK_OBJECT( var_value );
                    tmp_isinstance_inst_5 = var_value;
                    tmp_mvar_value_57 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational );

                    if (unlikely( tmp_mvar_value_57 == NULL ))
                    {
                        tmp_mvar_value_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IFDRational );
                    }

                    if ( tmp_mvar_value_57 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IFDRational" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1537;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }

                    tmp_isinstance_cls_5 = tmp_mvar_value_57;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1537;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    tmp_condition_result_27 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_26;
                    }
                    else
                    {
                        goto branch_no_26;
                    }
                    branch_yes_26:;
                    {
                        PyObject *tmp_float_arg_1;
                        CHECK_OBJECT( var_value );
                        tmp_float_arg_1 = var_value;
                        tmp_dictset_value = TO_FLOAT( tmp_float_arg_1 );
                        if ( tmp_dictset_value == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1538;
                            type_description_1 = "oooooooooooooooooooooooooooooo";
                            goto try_except_handler_16;
                        }
                        CHECK_OBJECT( var_atts );
                        tmp_dictset_dict = var_atts;
                        CHECK_OBJECT( var_tag );
                        tmp_dictset_key = var_tag;
                        tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
                        Py_DECREF( tmp_dictset_value );
                        if ( tmp_res != 0 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1538;
                            type_description_1 = "oooooooooooooooooooooooooooooo";
                            goto try_except_handler_16;
                        }
                    }
                    goto branch_end_26;
                    branch_no_26:;
                    CHECK_OBJECT( var_value );
                    tmp_dictset_value = var_value;
                    CHECK_OBJECT( var_atts );
                    tmp_dictset_dict = var_atts;
                    CHECK_OBJECT( var_tag );
                    tmp_dictset_key = var_tag;
                    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
                    if ( tmp_res != 0 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1540;
                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    branch_end_26:;
                }
                branch_end_25:;
            }
            branch_no_24:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1519;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_16;
        }
        goto loop_start_4;
        loop_end_4:;
        goto try_end_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_4__iter_value );
        tmp_for_loop_4__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
        Py_DECREF( tmp_for_loop_4__for_iterator );
        tmp_for_loop_4__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto frame_exception_exit_1;
        // End of try:
        try_end_15:;
        Py_XDECREF( tmp_for_loop_4__iter_value );
        tmp_for_loop_4__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_4__for_iterator );
        Py_DECREF( tmp_for_loop_4__for_iterator );
        tmp_for_loop_4__for_iterator = NULL;

        {
            nuitka_bool tmp_condition_result_28;
            PyObject *tmp_mvar_value_58;
            int tmp_truth_name_6;
            tmp_mvar_value_58 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG );

            if (unlikely( tmp_mvar_value_58 == NULL ))
            {
                tmp_mvar_value_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEBUG );
            }

            if ( tmp_mvar_value_58 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEBUG" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1542;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_6 = CHECK_IF_TRUE( tmp_mvar_value_58 );
            if ( tmp_truth_name_6 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1542;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_28 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_27;
            }
            else
            {
                goto branch_no_27;
            }
            branch_yes_27:;
            {
                PyObject *tmp_called_name_11;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_left_name_10;
                PyObject *tmp_right_name_10;
                PyObject *tmp_called_name_12;
                PyObject *tmp_args_element_name_16;
                PyObject *tmp_called_instance_18;
                tmp_called_name_11 = LOOKUP_BUILTIN( const_str_plain_print );
                assert( tmp_called_name_11 != NULL );
                tmp_left_name_10 = const_str_digest_9d8621449487ac5dc0f624c7fe4f607c;
                tmp_called_name_12 = LOOKUP_BUILTIN( const_str_plain_sorted );
                assert( tmp_called_name_12 != NULL );
                CHECK_OBJECT( var_atts );
                tmp_called_instance_18 = var_atts;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1543;
                tmp_args_element_name_16 = CALL_METHOD_NO_ARGS( tmp_called_instance_18, const_str_plain_items );
                if ( tmp_args_element_name_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1543;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1543;
                {
                    PyObject *call_args[] = { tmp_args_element_name_16 };
                    tmp_right_name_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
                }

                Py_DECREF( tmp_args_element_name_16 );
                if ( tmp_right_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1543;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_15 = BINARY_OPERATION_REMAINDER( tmp_left_name_10, tmp_right_name_10 );
                Py_DECREF( tmp_right_name_10 );
                if ( tmp_args_element_name_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1543;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1543;
                {
                    PyObject *call_args[] = { tmp_args_element_name_15 };
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
                }

                Py_DECREF( tmp_args_element_name_15 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1543;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            branch_no_27:;
        }
        {
            nuitka_bool tmp_condition_result_29;
            PyObject *tmp_compexpr_left_18;
            PyObject *tmp_compexpr_right_18;
            PyObject *tmp_source_name_39;
            CHECK_OBJECT( par_im );
            tmp_source_name_39 = par_im;
            tmp_compexpr_left_18 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_mode );
            if ( tmp_compexpr_left_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1549;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_18 = const_tuple_8b55c0686e2d1ff60c7f8a942ca30637_tuple;
            tmp_res = PySequence_Contains( tmp_compexpr_right_18, tmp_compexpr_left_18 );
            Py_DECREF( tmp_compexpr_left_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1549;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_29 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_28;
            }
            else
            {
                goto branch_no_28;
            }
            branch_yes_28:;
            {
                PyObject *tmp_assign_source_50;
                tmp_assign_source_50 = const_str_digest_5bd3d01c7dc605096daa21ce0c6f6373;
                {
                    PyObject *old = var_rawmode;
                    assert( old != NULL );
                    var_rawmode = tmp_assign_source_50;
                    Py_INCREF( var_rawmode );
                    Py_DECREF( old );
                }

            }
            branch_no_28:;
        }
        {
            PyObject *tmp_assign_source_51;
            PyObject *tmp_tuple_element_13;
            CHECK_OBJECT( var_rawmode );
            tmp_tuple_element_13 = var_rawmode;
            tmp_assign_source_51 = PyTuple_New( 5 );
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_assign_source_51, 0, tmp_tuple_element_13 );
            CHECK_OBJECT( var_compression );
            tmp_tuple_element_13 = var_compression;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_assign_source_51, 1, tmp_tuple_element_13 );
            if ( var__fp == NULL )
            {
                Py_DECREF( tmp_assign_source_51 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_fp" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1552;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_13 = var__fp;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_assign_source_51, 2, tmp_tuple_element_13 );
            CHECK_OBJECT( par_filename );
            tmp_tuple_element_13 = par_filename;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_assign_source_51, 3, tmp_tuple_element_13 );
            CHECK_OBJECT( var_atts );
            tmp_tuple_element_13 = var_atts;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_assign_source_51, 4, tmp_tuple_element_13 );
            assert( var_a == NULL );
            var_a = tmp_assign_source_51;
        }
        {
            PyObject *tmp_assign_source_52;
            PyObject *tmp_called_name_13;
            PyObject *tmp_source_name_40;
            PyObject *tmp_mvar_value_59;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_source_name_41;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_source_name_42;
            tmp_mvar_value_59 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

            if (unlikely( tmp_mvar_value_59 == NULL ))
            {
                tmp_mvar_value_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
            }

            if ( tmp_mvar_value_59 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1553;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_40 = tmp_mvar_value_59;
            tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain__getencoder );
            if ( tmp_called_name_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1553;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_im );
            tmp_source_name_41 = par_im;
            tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_mode );
            if ( tmp_args_element_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_13 );

                exception_lineno = 1553;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_18 = const_str_plain_libtiff;
            CHECK_OBJECT( var_a );
            tmp_args_element_name_19 = var_a;
            CHECK_OBJECT( par_im );
            tmp_source_name_42 = par_im;
            tmp_args_element_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_encoderconfig );
            if ( tmp_args_element_name_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_13 );
                Py_DECREF( tmp_args_element_name_17 );

                exception_lineno = 1553;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1553;
            {
                PyObject *call_args[] = { tmp_args_element_name_17, tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20 };
                tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_13, call_args );
            }

            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_element_name_17 );
            Py_DECREF( tmp_args_element_name_20 );
            if ( tmp_assign_source_52 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1553;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_e == NULL );
            var_e = tmp_assign_source_52;
        }
        {
            PyObject *tmp_called_name_14;
            PyObject *tmp_source_name_43;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_source_name_44;
            PyObject *tmp_args_element_name_22;
            PyObject *tmp_left_name_11;
            PyObject *tmp_right_name_11;
            PyObject *tmp_source_name_45;
            CHECK_OBJECT( var_e );
            tmp_source_name_43 = var_e;
            tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_setimage );
            if ( tmp_called_name_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1554;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_im );
            tmp_source_name_44 = par_im;
            tmp_args_element_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_im );
            if ( tmp_args_element_name_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_14 );

                exception_lineno = 1554;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_11 = const_tuple_int_0_int_0_tuple;
            CHECK_OBJECT( par_im );
            tmp_source_name_45 = par_im;
            tmp_right_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_size );
            if ( tmp_right_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_14 );
                Py_DECREF( tmp_args_element_name_21 );

                exception_lineno = 1554;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_22 = BINARY_OPERATION_ADD_TUPLE_OBJECT( tmp_left_name_11, tmp_right_name_11 );
            Py_DECREF( tmp_right_name_11 );
            if ( tmp_args_element_name_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_14 );
                Py_DECREF( tmp_args_element_name_21 );

                exception_lineno = 1554;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1554;
            {
                PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_22 };
                tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
            }

            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_args_element_name_21 );
            Py_DECREF( tmp_args_element_name_22 );
            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1554;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        loop_start_5:;
        // Tried code:
        {
            PyObject *tmp_assign_source_53;
            PyObject *tmp_iter_arg_9;
            PyObject *tmp_called_instance_19;
            CHECK_OBJECT( var_e );
            tmp_called_instance_19 = var_e;
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1557;
            tmp_iter_arg_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_int_pos_16384_tuple, 0 ) );

            if ( tmp_iter_arg_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1557;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_19;
            }
            tmp_assign_source_53 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_9 );
            Py_DECREF( tmp_iter_arg_9 );
            if ( tmp_assign_source_53 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1557;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_19;
            }
            {
                PyObject *old = tmp_tuple_unpack_4__source_iter;
                tmp_tuple_unpack_4__source_iter = tmp_assign_source_53;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_unpack_11;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_11 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_54 = UNPACK_NEXT( tmp_unpack_11, 0, 3 );
            if ( tmp_assign_source_54 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1557;
                goto try_except_handler_20;
            }
            {
                PyObject *old = tmp_tuple_unpack_4__element_1;
                tmp_tuple_unpack_4__element_1 = tmp_assign_source_54;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_55;
            PyObject *tmp_unpack_12;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_12 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_55 = UNPACK_NEXT( tmp_unpack_12, 1, 3 );
            if ( tmp_assign_source_55 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1557;
                goto try_except_handler_20;
            }
            {
                PyObject *old = tmp_tuple_unpack_4__element_2;
                tmp_tuple_unpack_4__element_2 = tmp_assign_source_55;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_56;
            PyObject *tmp_unpack_13;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_13 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_56 = UNPACK_NEXT( tmp_unpack_13, 2, 3 );
            if ( tmp_assign_source_56 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1557;
                goto try_except_handler_20;
            }
            {
                PyObject *old = tmp_tuple_unpack_4__element_3;
                tmp_tuple_unpack_4__element_3 = tmp_assign_source_56;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_4;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooooooooooooooooooo";
                        exception_lineno = 1557;
                        goto try_except_handler_20;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 1557;
                goto try_except_handler_20;
            }
        }
        goto try_end_16;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
        Py_DECREF( tmp_tuple_unpack_4__source_iter );
        tmp_tuple_unpack_4__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto try_except_handler_19;
        // End of try:
        try_end_16:;
        goto try_end_17;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_4__element_1 );
        tmp_tuple_unpack_4__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_4__element_2 );
        tmp_tuple_unpack_4__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_4__element_3 );
        tmp_tuple_unpack_4__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto frame_exception_exit_1;
        // End of try:
        try_end_17:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
        Py_DECREF( tmp_tuple_unpack_4__source_iter );
        tmp_tuple_unpack_4__source_iter = NULL;

        {
            PyObject *tmp_assign_source_57;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
            tmp_assign_source_57 = tmp_tuple_unpack_4__element_1;
            {
                PyObject *old = var_l;
                var_l = tmp_assign_source_57;
                Py_INCREF( var_l );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_4__element_1 );
        tmp_tuple_unpack_4__element_1 = NULL;

        {
            PyObject *tmp_assign_source_58;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
            tmp_assign_source_58 = tmp_tuple_unpack_4__element_2;
            {
                PyObject *old = var_s;
                var_s = tmp_assign_source_58;
                Py_INCREF( var_s );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_4__element_2 );
        tmp_tuple_unpack_4__element_2 = NULL;

        {
            PyObject *tmp_assign_source_59;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
            tmp_assign_source_59 = tmp_tuple_unpack_4__element_3;
            {
                PyObject *old = var_d;
                var_d = tmp_assign_source_59;
                Py_INCREF( var_d );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_4__element_3 );
        tmp_tuple_unpack_4__element_3 = NULL;

        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_operand_name_5;
            if ( var__fp == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "_fp" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1558;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_operand_name_5 = var__fp;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1558;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_30 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_29;
            }
            else
            {
                goto branch_no_29;
            }
            branch_yes_29:;
            {
                PyObject *tmp_called_instance_20;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_23;
                CHECK_OBJECT( par_fp );
                tmp_called_instance_20 = par_fp;
                CHECK_OBJECT( var_d );
                tmp_args_element_name_23 = var_d;
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1559;
                {
                    PyObject *call_args[] = { tmp_args_element_name_23 };
                    tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_write, call_args );
                }

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1559;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_29:;
        }
        {
            nuitka_bool tmp_condition_result_31;
            int tmp_truth_name_7;
            CHECK_OBJECT( var_s );
            tmp_truth_name_7 = CHECK_IF_TRUE( var_s );
            if ( tmp_truth_name_7 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1560;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_31 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_30;
            }
            else
            {
                goto branch_no_30;
            }
            branch_yes_30:;
            goto loop_end_5;
            branch_no_30:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1555;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        goto loop_start_5;
        loop_end_5:;
        {
            nuitka_bool tmp_condition_result_32;
            PyObject *tmp_compexpr_left_19;
            PyObject *tmp_compexpr_right_19;
            CHECK_OBJECT( var_s );
            tmp_compexpr_left_19 = var_s;
            tmp_compexpr_right_19 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_19, tmp_compexpr_right_19 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1562;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_32 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_31;
            }
            else
            {
                goto branch_no_31;
            }
            branch_yes_31:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                PyObject *tmp_left_name_12;
                PyObject *tmp_right_name_12;
                tmp_left_name_12 = const_str_digest_d3a7496dc9671c04c9e24180d49c8edb;
                CHECK_OBJECT( var_s );
                tmp_right_name_12 = var_s;
                tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_12, tmp_right_name_12 );
                if ( tmp_make_exception_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1563;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1563;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_IOError, call_args );
                }

                Py_DECREF( tmp_make_exception_arg_2 );
                assert( !(tmp_raise_type_2 == NULL) );
                exception_type = tmp_raise_type_2;
                exception_lineno = 1563;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_31:;
        }
        goto branch_end_16;
        branch_no_16:;
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_called_instance_21;
            PyObject *tmp_args_element_name_24;
            CHECK_OBJECT( var_ifd );
            tmp_called_instance_21 = var_ifd;
            CHECK_OBJECT( par_fp );
            tmp_args_element_name_24 = par_fp;
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1566;
            {
                PyObject *call_args[] = { tmp_args_element_name_24 };
                tmp_assign_source_60 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain_save, call_args );
            }

            if ( tmp_assign_source_60 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1566;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_offset == NULL );
            var_offset = tmp_assign_source_60;
        }
        {
            PyObject *tmp_called_name_15;
            PyObject *tmp_source_name_46;
            PyObject *tmp_mvar_value_60;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_25;
            PyObject *tmp_args_element_name_26;
            PyObject *tmp_args_element_name_27;
            PyObject *tmp_list_element_2;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_left_name_13;
            PyObject *tmp_right_name_13;
            PyObject *tmp_source_name_47;
            PyObject *tmp_tuple_element_15;
            tmp_mvar_value_60 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFile );

            if (unlikely( tmp_mvar_value_60 == NULL ))
            {
                tmp_mvar_value_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFile );
            }

            if ( tmp_mvar_value_60 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFile" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1568;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_46 = tmp_mvar_value_60;
            tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain__save );
            if ( tmp_called_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1568;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_im );
            tmp_args_element_name_25 = par_im;
            CHECK_OBJECT( par_fp );
            tmp_args_element_name_26 = par_fp;
            tmp_tuple_element_14 = const_str_plain_raw;
            tmp_list_element_2 = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_14 );
            PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_14 );
            tmp_left_name_13 = const_tuple_int_0_int_0_tuple;
            CHECK_OBJECT( par_im );
            tmp_source_name_47 = par_im;
            tmp_right_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_size );
            if ( tmp_right_name_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_15 );
                Py_DECREF( tmp_list_element_2 );

                exception_lineno = 1569;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_tuple_element_14 = BINARY_OPERATION_ADD_TUPLE_OBJECT( tmp_left_name_13, tmp_right_name_13 );
            Py_DECREF( tmp_right_name_13 );
            if ( tmp_tuple_element_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_15 );
                Py_DECREF( tmp_list_element_2 );

                exception_lineno = 1569;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_14 );
            CHECK_OBJECT( var_offset );
            tmp_tuple_element_14 = var_offset;
            Py_INCREF( tmp_tuple_element_14 );
            PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_14 );
            CHECK_OBJECT( var_rawmode );
            tmp_tuple_element_15 = var_rawmode;
            tmp_tuple_element_14 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_tuple_element_14, 0, tmp_tuple_element_15 );
            CHECK_OBJECT( var_stride );
            tmp_tuple_element_15 = var_stride;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_tuple_element_14, 1, tmp_tuple_element_15 );
            tmp_tuple_element_15 = const_int_pos_1;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_tuple_element_14, 2, tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_list_element_2, 3, tmp_tuple_element_14 );
            tmp_args_element_name_27 = PyList_New( 1 );
            PyList_SET_ITEM( tmp_args_element_name_27, 0, tmp_list_element_2 );
            frame_6cda4f89e1245682282b8adef14ab664->m_frame.f_lineno = 1568;
            {
                PyObject *call_args[] = { tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27 };
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, call_args );
            }

            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_element_name_27 );
            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1568;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_end_16:;
    }
    {
        nuitka_bool tmp_condition_result_33;
        PyObject *tmp_compexpr_left_20;
        PyObject *tmp_compexpr_right_20;
        PyObject *tmp_source_name_48;
        tmp_compexpr_left_20 = const_str_plain__debug_multipage;
        CHECK_OBJECT( par_im );
        tmp_source_name_48 = par_im;
        tmp_compexpr_right_20 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_encoderinfo );
        if ( tmp_compexpr_right_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1573;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_20, tmp_compexpr_left_20 );
        Py_DECREF( tmp_compexpr_right_20 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1573;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_33 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_32;
        }
        else
        {
            goto branch_no_32;
        }
        branch_yes_32:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( var_ifd );
            tmp_assattr_name_1 = var_ifd;
            CHECK_OBJECT( par_im );
            tmp_assattr_target_1 = par_im;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__debug_multipage, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_32:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cda4f89e1245682282b8adef14ab664 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cda4f89e1245682282b8adef14ab664 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6cda4f89e1245682282b8adef14ab664, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6cda4f89e1245682282b8adef14ab664->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6cda4f89e1245682282b8adef14ab664, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6cda4f89e1245682282b8adef14ab664,
        type_description_1,
        par_im,
        par_fp,
        par_filename,
        var_rawmode,
        var_prefix,
        var_photo,
        var_format,
        var_bits,
        var_extra,
        var_ifd,
        var_compression,
        var_libtiff,
        var_info,
        var_key,
        var_name,
        var_dpi,
        var_lut,
        var_stride,
        var__fp,
        var_blocklist,
        var_atts,
        var_legacy_ifd,
        var_tag,
        var_value,
        var_a,
        var_e,
        var_l,
        var_s,
        var_d,
        var_offset
    );


    // Release cached frame.
    if ( frame_6cda4f89e1245682282b8adef14ab664 == cache_frame_6cda4f89e1245682282b8adef14ab664 )
    {
        Py_DECREF( frame_6cda4f89e1245682282b8adef14ab664 );
    }
    cache_frame_6cda4f89e1245682282b8adef14ab664 = NULL;

    assertFrameObject( frame_6cda4f89e1245682282b8adef14ab664 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_im );
    Py_DECREF( par_im );
    par_im = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( var_rawmode );
    var_rawmode = NULL;

    CHECK_OBJECT( (PyObject *)var_prefix );
    Py_DECREF( var_prefix );
    var_prefix = NULL;

    CHECK_OBJECT( (PyObject *)var_photo );
    Py_DECREF( var_photo );
    var_photo = NULL;

    CHECK_OBJECT( (PyObject *)var_format );
    Py_DECREF( var_format );
    var_format = NULL;

    CHECK_OBJECT( (PyObject *)var_bits );
    Py_DECREF( var_bits );
    var_bits = NULL;

    CHECK_OBJECT( (PyObject *)var_extra );
    Py_DECREF( var_extra );
    var_extra = NULL;

    CHECK_OBJECT( (PyObject *)var_ifd );
    Py_DECREF( var_ifd );
    var_ifd = NULL;

    CHECK_OBJECT( (PyObject *)var_compression );
    Py_DECREF( var_compression );
    var_compression = NULL;

    CHECK_OBJECT( (PyObject *)var_libtiff );
    Py_DECREF( var_libtiff );
    var_libtiff = NULL;

    CHECK_OBJECT( (PyObject *)var_info );
    Py_DECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    CHECK_OBJECT( (PyObject *)var_dpi );
    Py_DECREF( var_dpi );
    var_dpi = NULL;

    Py_XDECREF( var_lut );
    var_lut = NULL;

    CHECK_OBJECT( (PyObject *)var_stride );
    Py_DECREF( var_stride );
    var_stride = NULL;

    Py_XDECREF( var__fp );
    var__fp = NULL;

    Py_XDECREF( var_blocklist );
    var_blocklist = NULL;

    Py_XDECREF( var_atts );
    var_atts = NULL;

    Py_XDECREF( var_legacy_ifd );
    var_legacy_ifd = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_im );
    Py_DECREF( par_im );
    par_im = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( var_rawmode );
    var_rawmode = NULL;

    Py_XDECREF( var_prefix );
    var_prefix = NULL;

    Py_XDECREF( var_photo );
    var_photo = NULL;

    Py_XDECREF( var_format );
    var_format = NULL;

    Py_XDECREF( var_bits );
    var_bits = NULL;

    Py_XDECREF( var_extra );
    var_extra = NULL;

    Py_XDECREF( var_ifd );
    var_ifd = NULL;

    Py_XDECREF( var_compression );
    var_compression = NULL;

    Py_XDECREF( var_libtiff );
    var_libtiff = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_dpi );
    var_dpi = NULL;

    Py_XDECREF( var_lut );
    var_lut = NULL;

    Py_XDECREF( var_stride );
    var_stride = NULL;

    Py_XDECREF( var__fp );
    var__fp = NULL;

    Py_XDECREF( var_blocklist );
    var_blocklist = NULL;

    Py_XDECREF( var_atts );
    var_atts = NULL;

    Py_XDECREF( var_legacy_ifd );
    var_legacy_ifd = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_a );
    var_a = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_69__save );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_locals *generator_heap = (struct PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_edeb7491728c796e25e023bbafd1ac75, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 1486;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_v );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_right_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_i8 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_i8 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "i8" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 1486;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( generator_heap->var_v );
        tmp_args_element_name_1 = generator_heap->var_v;
        generator->m_frame->m_frame.f_lineno = 1486;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1486;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_right_name_1 = const_int_pos_256;
        tmp_expression_name_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1486;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_left_name_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_right_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_left_name_1, sizeof(PyObject *), &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_right_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1486;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 1486;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_v );
    generator_heap->var_v = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_context,
        module_PIL$TiffImagePlugin,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_7120d4204cc4762ca7a220b081a44610,
#endif
        codeobj_edeb7491728c796e25e023bbafd1ac75,
        1,
        sizeof(struct PIL$TiffImagePlugin$$$function_69__save$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_70___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fn = python_pars[ 1 ];
    PyObject *par_new = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_c06d2b45287a725176290b1facdbaab6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_c06d2b45287a725176290b1facdbaab6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c06d2b45287a725176290b1facdbaab6, codeobj_c06d2b45287a725176290b1facdbaab6, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c06d2b45287a725176290b1facdbaab6 = cache_frame_c06d2b45287a725176290b1facdbaab6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c06d2b45287a725176290b1facdbaab6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c06d2b45287a725176290b1facdbaab6 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT( par_fn );
        tmp_source_name_1 = par_fn;
        tmp_attribute_name_1 = const_str_plain_read;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_1, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1604;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( par_fn );
            tmp_assattr_name_1 = par_fn;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_f, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1605;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = Py_False;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_close_fp, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1606;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_assattr_target_3;
            CHECK_OBJECT( par_fn );
            tmp_assattr_name_3 = par_fn;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_3 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_name, tmp_assattr_name_3 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1608;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            tmp_assattr_name_4 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_4 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_close_fp, tmp_assattr_name_4 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1609;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            nuitka_bool tmp_condition_result_2;
            int tmp_truth_name_1;
            PyObject *tmp_assattr_target_5;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_io );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1611;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_open );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1611;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( par_fn );
            tmp_args_element_name_1 = par_fn;
            CHECK_OBJECT( par_new );
            tmp_truth_name_1 = CHECK_IF_TRUE( par_new );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1611;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_1;
            }
            else
            {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            tmp_args_element_name_2 = const_str_digest_6500339fb9ac37f5860ed740a1224c1b;
            goto condexpr_end_1;
            condexpr_false_1:;
            tmp_args_element_name_2 = const_str_digest_e8f5d73778524447b7d7037d41e7364f;
            condexpr_end_1:;
            frame_c06d2b45287a725176290b1facdbaab6->m_frame.f_lineno = 1611;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assattr_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            if ( tmp_assattr_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1611;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_5 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_f, tmp_assattr_name_5 );
            Py_DECREF( tmp_assattr_name_5 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1611;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_c06d2b45287a725176290b1facdbaab6, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_c06d2b45287a725176290b1facdbaab6, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_1 = PyExc_IOError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1612;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_6;
                PyObject *tmp_called_instance_1;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_assattr_target_6;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_io );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1613;
                    type_description_1 = "ooo";
                    goto try_except_handler_3;
                }

                tmp_called_instance_1 = tmp_mvar_value_2;
                CHECK_OBJECT( par_fn );
                tmp_args_element_name_3 = par_fn;
                tmp_args_element_name_4 = const_str_digest_6500339fb9ac37f5860ed740a1224c1b;
                frame_c06d2b45287a725176290b1facdbaab6->m_frame.f_lineno = 1613;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                    tmp_assattr_name_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_open, call_args );
                }

                if ( tmp_assattr_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_6 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_f, tmp_assattr_name_6 );
                Py_DECREF( tmp_assattr_name_6 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooo";
                    goto try_except_handler_3;
                }
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1610;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_c06d2b45287a725176290b1facdbaab6->m_frame) frame_c06d2b45287a725176290b1facdbaab6->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooo";
            goto try_except_handler_3;
            branch_end_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_70___init__ );
        return NULL;
        // End of try:
        try_end_1:;
        branch_end_1:;
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_assattr_target_7;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1614;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_c06d2b45287a725176290b1facdbaab6->m_frame.f_lineno = 1614;
        tmp_assattr_name_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_assattr_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1614;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_beginning, tmp_assattr_name_7 );
        Py_DECREF( tmp_assattr_name_7 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1614;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        frame_c06d2b45287a725176290b1facdbaab6->m_frame.f_lineno = 1615;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_setup );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1615;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c06d2b45287a725176290b1facdbaab6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c06d2b45287a725176290b1facdbaab6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c06d2b45287a725176290b1facdbaab6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c06d2b45287a725176290b1facdbaab6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c06d2b45287a725176290b1facdbaab6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c06d2b45287a725176290b1facdbaab6,
        type_description_1,
        par_self,
        par_fn,
        par_new
    );


    // Release cached frame.
    if ( frame_c06d2b45287a725176290b1facdbaab6 == cache_frame_c06d2b45287a725176290b1facdbaab6 )
    {
        Py_DECREF( frame_c06d2b45287a725176290b1facdbaab6 );
    }
    cache_frame_c06d2b45287a725176290b1facdbaab6 = NULL;

    assertFrameObject( frame_c06d2b45287a725176290b1facdbaab6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_70___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fn );
    Py_DECREF( par_fn );
    par_fn = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fn );
    Py_DECREF( par_fn );
    par_fn = NULL;

    CHECK_OBJECT( (PyObject *)par_new );
    Py_DECREF( par_new );
    par_new = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_70___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_71_setup( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_IIMM = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    struct Nuitka_FrameObject *frame_f9524a3076e2e7138f609e6c4ad55b8c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f9524a3076e2e7138f609e6c4ad55b8c = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f9524a3076e2e7138f609e6c4ad55b8c, codeobj_f9524a3076e2e7138f609e6c4ad55b8c, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_f9524a3076e2e7138f609e6c4ad55b8c = cache_frame_f9524a3076e2e7138f609e6c4ad55b8c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f9524a3076e2e7138f609e6c4ad55b8c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f9524a3076e2e7138f609e6c4ad55b8c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_beginning );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SEEK_SET );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1619;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1619;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_whereToWriteNewIFDOffset, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1621;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = const_int_0;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_offsetOfNewPage, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1622;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1624;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1624;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_4_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1624;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_assign_unpack_1__assign_source == NULL );
        tmp_assign_unpack_1__assign_source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assattr_name_3 = tmp_assign_unpack_1__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_IIMM, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1624;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assign_source_2 = tmp_assign_unpack_1__assign_source;
        assert( var_IIMM == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_IIMM = tmp_assign_source_2;
    }
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( var_IIMM );
        tmp_operand_name_1 = var_IIMM;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1625;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            tmp_assattr_name_4 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_4 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_isFirst, tmp_assattr_name_4 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1627;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_isFirst, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1630;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_IIMM );
        tmp_compexpr_left_1 = var_IIMM;
        tmp_compexpr_right_1 = const_bytes_digest_c7f4479c7a292e25e55012a1d7bbd1a2;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1631;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1632;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_setEndian, &PyTuple_GET_ITEM( const_tuple_str_chr_60_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1632;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( var_IIMM );
            tmp_compexpr_left_2 = var_IIMM;
            tmp_compexpr_right_2 = const_bytes_digest_3d83999277d9e5cf3228587a8fa3a8ce;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1633;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT( par_self );
                tmp_called_instance_3 = par_self;
                frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1634;
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_setEndian, &PyTuple_GET_ITEM( const_tuple_str_chr_62_tuple, 0 ) );

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1634;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_a4988b6127c542f882d25584d33116d8;
                frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1636;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 1636;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            branch_end_3:;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1638;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_skipIFDs );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1638;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame.f_lineno = 1639;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_goToEnd );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1639;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9524a3076e2e7138f609e6c4ad55b8c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9524a3076e2e7138f609e6c4ad55b8c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f9524a3076e2e7138f609e6c4ad55b8c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f9524a3076e2e7138f609e6c4ad55b8c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f9524a3076e2e7138f609e6c4ad55b8c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f9524a3076e2e7138f609e6c4ad55b8c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f9524a3076e2e7138f609e6c4ad55b8c,
        type_description_1,
        par_self,
        var_IIMM
    );


    // Release cached frame.
    if ( frame_f9524a3076e2e7138f609e6c4ad55b8c == cache_frame_f9524a3076e2e7138f609e6c4ad55b8c )
    {
        Py_DECREF( frame_f9524a3076e2e7138f609e6c4ad55b8c );
    }
    cache_frame_f9524a3076e2e7138f609e6c4ad55b8c = NULL;

    assertFrameObject( frame_f9524a3076e2e7138f609e6c4ad55b8c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_71_setup );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_IIMM );
    Py_DECREF( var_IIMM );
    var_IIMM = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_IIMM );
    var_IIMM = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_71_setup );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_72_finalize( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_IIMM = NULL;
    PyObject *var_IFDoffset = NULL;
    struct Nuitka_FrameObject *frame_336f27bae7a685b3eca6c53d34597a82;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_336f27bae7a685b3eca6c53d34597a82 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_336f27bae7a685b3eca6c53d34597a82, codeobj_336f27bae7a685b3eca6c53d34597a82, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_336f27bae7a685b3eca6c53d34597a82 = cache_frame_336f27bae7a685b3eca6c53d34597a82;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_336f27bae7a685b3eca6c53d34597a82 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_336f27bae7a685b3eca6c53d34597a82 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_isFirst );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1642;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1642;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1646;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_seek );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1646;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_offsetOfNewPage );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1646;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1646;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1646;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1648;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1648;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_4_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1648;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_IIMM == NULL );
        var_IIMM = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( var_IIMM );
        tmp_operand_name_1 = var_IIMM;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1649;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( var_IIMM );
        tmp_compexpr_left_1 = var_IIMM;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_IIMM );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1654;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1654;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_ee0894063643bd57726272cee14acd50;
            frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1655;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1655;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1658;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_readLong );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1658;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_IFDoffset == NULL );
        var_IFDoffset = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT( var_IFDoffset );
        tmp_left_name_1 = var_IFDoffset;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_offsetOfNewPage );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1659;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1659;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = tmp_left_name_1;
        var_IFDoffset = tmp_assign_source_3;

    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_f );
        if ( tmp_source_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1660;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_seek );
        Py_DECREF( tmp_source_name_8 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1660;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_whereToWriteNewIFDOffset );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1660;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1660;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1660;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        CHECK_OBJECT( var_IFDoffset );
        tmp_args_element_name_3 = var_IFDoffset;
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1661;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_writeLong, call_args );
        }

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1661;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_f );
        if ( tmp_called_instance_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1662;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_IFDoffset );
        tmp_args_element_name_4 = var_IFDoffset;
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1662;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_seek, call_args );
        }

        Py_DECREF( tmp_called_instance_4 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1662;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_336f27bae7a685b3eca6c53d34597a82->m_frame.f_lineno = 1663;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_fixIFD );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1663;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_336f27bae7a685b3eca6c53d34597a82 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_336f27bae7a685b3eca6c53d34597a82 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_336f27bae7a685b3eca6c53d34597a82 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_336f27bae7a685b3eca6c53d34597a82, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_336f27bae7a685b3eca6c53d34597a82->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_336f27bae7a685b3eca6c53d34597a82, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_336f27bae7a685b3eca6c53d34597a82,
        type_description_1,
        par_self,
        var_IIMM,
        var_IFDoffset
    );


    // Release cached frame.
    if ( frame_336f27bae7a685b3eca6c53d34597a82 == cache_frame_336f27bae7a685b3eca6c53d34597a82 )
    {
        Py_DECREF( frame_336f27bae7a685b3eca6c53d34597a82 );
    }
    cache_frame_336f27bae7a685b3eca6c53d34597a82 = NULL;

    assertFrameObject( frame_336f27bae7a685b3eca6c53d34597a82 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_72_finalize );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_IIMM );
    var_IIMM = NULL;

    Py_XDECREF( var_IFDoffset );
    var_IFDoffset = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_IIMM );
    var_IIMM = NULL;

    Py_XDECREF( var_IFDoffset );
    var_IFDoffset = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_72_finalize );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_73_newFrame( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_7b4bb5730ac50485820f76a51668d633;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7b4bb5730ac50485820f76a51668d633 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7b4bb5730ac50485820f76a51668d633, codeobj_7b4bb5730ac50485820f76a51668d633, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_7b4bb5730ac50485820f76a51668d633 = cache_frame_7b4bb5730ac50485820f76a51668d633;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7b4bb5730ac50485820f76a51668d633 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7b4bb5730ac50485820f76a51668d633 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_7b4bb5730ac50485820f76a51668d633->m_frame.f_lineno = 1667;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_finalize );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1667;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_7b4bb5730ac50485820f76a51668d633->m_frame.f_lineno = 1668;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_setup );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7b4bb5730ac50485820f76a51668d633 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7b4bb5730ac50485820f76a51668d633 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7b4bb5730ac50485820f76a51668d633, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7b4bb5730ac50485820f76a51668d633->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7b4bb5730ac50485820f76a51668d633, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7b4bb5730ac50485820f76a51668d633,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_7b4bb5730ac50485820f76a51668d633 == cache_frame_7b4bb5730ac50485820f76a51668d633 )
    {
        Py_DECREF( frame_7b4bb5730ac50485820f76a51668d633 );
    }
    cache_frame_7b4bb5730ac50485820f76a51668d633 = NULL;

    assertFrameObject( frame_7b4bb5730ac50485820f76a51668d633 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_73_newFrame );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_73_newFrame );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_74___enter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_self );
    tmp_return_value = par_self;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_74___enter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_74___enter__ );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_75___exit__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_exc_type = python_pars[ 1 ];
    PyObject *par_exc_value = python_pars[ 2 ];
    PyObject *par_traceback = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_b130e0032423f55156640809853856ee;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b130e0032423f55156640809853856ee = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b130e0032423f55156640809853856ee, codeobj_b130e0032423f55156640809853856ee, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b130e0032423f55156640809853856ee = cache_frame_b130e0032423f55156640809853856ee;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b130e0032423f55156640809853856ee );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b130e0032423f55156640809853856ee ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_close_fp );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1674;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1674;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_b130e0032423f55156640809853856ee->m_frame.f_lineno = 1675;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_close );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1675;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b130e0032423f55156640809853856ee );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b130e0032423f55156640809853856ee );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b130e0032423f55156640809853856ee, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b130e0032423f55156640809853856ee->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b130e0032423f55156640809853856ee, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b130e0032423f55156640809853856ee,
        type_description_1,
        par_self,
        par_exc_type,
        par_exc_value,
        par_traceback
    );


    // Release cached frame.
    if ( frame_b130e0032423f55156640809853856ee == cache_frame_b130e0032423f55156640809853856ee )
    {
        Py_DECREF( frame_b130e0032423f55156640809853856ee );
    }
    cache_frame_b130e0032423f55156640809853856ee = NULL;

    assertFrameObject( frame_b130e0032423f55156640809853856ee );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_75___exit__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_type );
    Py_DECREF( par_exc_type );
    par_exc_type = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_value );
    Py_DECREF( par_exc_value );
    par_exc_value = NULL;

    CHECK_OBJECT( (PyObject *)par_traceback );
    Py_DECREF( par_traceback );
    par_traceback = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_type );
    Py_DECREF( par_exc_type );
    par_exc_type = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_value );
    Py_DECREF( par_exc_value );
    par_exc_value = NULL;

    CHECK_OBJECT( (PyObject *)par_traceback );
    Py_DECREF( par_traceback );
    par_traceback = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_75___exit__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_76_tell( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_fdc6c6e8844de9ab475a66708690dcde;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_fdc6c6e8844de9ab475a66708690dcde = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fdc6c6e8844de9ab475a66708690dcde, codeobj_fdc6c6e8844de9ab475a66708690dcde, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_fdc6c6e8844de9ab475a66708690dcde = cache_frame_fdc6c6e8844de9ab475a66708690dcde;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fdc6c6e8844de9ab475a66708690dcde );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fdc6c6e8844de9ab475a66708690dcde ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1679;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_fdc6c6e8844de9ab475a66708690dcde->m_frame.f_lineno = 1679;
        tmp_left_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1679;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_offsetOfNewPage );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 1679;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1679;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdc6c6e8844de9ab475a66708690dcde );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdc6c6e8844de9ab475a66708690dcde );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fdc6c6e8844de9ab475a66708690dcde );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fdc6c6e8844de9ab475a66708690dcde, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fdc6c6e8844de9ab475a66708690dcde->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fdc6c6e8844de9ab475a66708690dcde, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fdc6c6e8844de9ab475a66708690dcde,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_fdc6c6e8844de9ab475a66708690dcde == cache_frame_fdc6c6e8844de9ab475a66708690dcde )
    {
        Py_DECREF( frame_fdc6c6e8844de9ab475a66708690dcde );
    }
    cache_frame_fdc6c6e8844de9ab475a66708690dcde = NULL;

    assertFrameObject( frame_fdc6c6e8844de9ab475a66708690dcde );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_76_tell );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_76_tell );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_77_seek( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_offset = python_pars[ 1 ];
    PyObject *par_whence = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_164e78496ac14e9b1d5386aa73ca2a62;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_164e78496ac14e9b1d5386aa73ca2a62 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_164e78496ac14e9b1d5386aa73ca2a62, codeobj_164e78496ac14e9b1d5386aa73ca2a62, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_164e78496ac14e9b1d5386aa73ca2a62 = cache_frame_164e78496ac14e9b1d5386aa73ca2a62;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_164e78496ac14e9b1d5386aa73ca2a62 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_164e78496ac14e9b1d5386aa73ca2a62 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_whence );
        tmp_compexpr_left_1 = par_whence;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1682;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_SEEK_SET );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1682;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1682;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( par_offset );
            tmp_left_name_1 = par_offset;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_offsetOfNewPage );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1683;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1683;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_1 = tmp_left_name_1;
            par_offset = tmp_assign_source_1;

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1685;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_offset );
        tmp_args_element_name_1 = par_offset;
        CHECK_OBJECT( par_whence );
        tmp_args_element_name_2 = par_whence;
        frame_164e78496ac14e9b1d5386aa73ca2a62->m_frame.f_lineno = 1685;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_seek, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1685;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_164e78496ac14e9b1d5386aa73ca2a62->m_frame.f_lineno = 1686;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1686;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_164e78496ac14e9b1d5386aa73ca2a62 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_164e78496ac14e9b1d5386aa73ca2a62 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_164e78496ac14e9b1d5386aa73ca2a62 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_164e78496ac14e9b1d5386aa73ca2a62, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_164e78496ac14e9b1d5386aa73ca2a62->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_164e78496ac14e9b1d5386aa73ca2a62, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_164e78496ac14e9b1d5386aa73ca2a62,
        type_description_1,
        par_self,
        par_offset,
        par_whence
    );


    // Release cached frame.
    if ( frame_164e78496ac14e9b1d5386aa73ca2a62 == cache_frame_164e78496ac14e9b1d5386aa73ca2a62 )
    {
        Py_DECREF( frame_164e78496ac14e9b1d5386aa73ca2a62 );
    }
    cache_frame_164e78496ac14e9b1d5386aa73ca2a62 = NULL;

    assertFrameObject( frame_164e78496ac14e9b1d5386aa73ca2a62 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_77_seek );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_offset );
    Py_DECREF( par_offset );
    par_offset = NULL;

    CHECK_OBJECT( (PyObject *)par_whence );
    Py_DECREF( par_whence );
    par_whence = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_offset );
    par_offset = NULL;

    CHECK_OBJECT( (PyObject *)par_whence );
    Py_DECREF( par_whence );
    par_whence = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_77_seek );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_78_goToEnd( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_pos = NULL;
    PyObject *var_padBytes = NULL;
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    struct Nuitka_FrameObject *frame_078177cbaf4ee42129545a54c84dce8c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_078177cbaf4ee42129545a54c84dce8c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_078177cbaf4ee42129545a54c84dce8c, codeobj_078177cbaf4ee42129545a54c84dce8c, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_078177cbaf4ee42129545a54c84dce8c = cache_frame_078177cbaf4ee42129545a54c84dce8c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_078177cbaf4ee42129545a54c84dce8c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_078177cbaf4ee42129545a54c84dce8c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1689;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1689;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_int_0;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1689;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_SEEK_END );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1689;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_078177cbaf4ee42129545a54c84dce8c->m_frame.f_lineno = 1689;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1689;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1690;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_078177cbaf4ee42129545a54c84dce8c->m_frame.f_lineno = 1690;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1690;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_pos == NULL );
        var_pos = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        tmp_left_name_1 = const_int_pos_16;
        CHECK_OBJECT( var_pos );
        tmp_left_name_2 = var_pos;
        tmp_right_name_2 = const_int_pos_16;
        tmp_right_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1693;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1693;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_padBytes == NULL );
        var_padBytes = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_outline_return_value_1;
        int tmp_truth_name_1;
        {
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT( var_padBytes );
            tmp_assign_source_3 = var_padBytes;
            assert( tmp_comparison_chain_1__operand_2 == NULL );
            Py_INCREF( tmp_assign_source_3 );
            tmp_comparison_chain_1__operand_2 = tmp_assign_source_3;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = const_int_0;
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_right_1 = tmp_comparison_chain_1__operand_2;
            tmp_assign_source_4 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1694;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            assert( tmp_comparison_chain_1__comparison_result == NULL );
            tmp_comparison_chain_1__comparison_result = tmp_assign_source_4;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_operand_name_1 = tmp_comparison_chain_1__comparison_result;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1694;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_outline_return_value_1 = tmp_comparison_chain_1__comparison_result;
            Py_INCREF( tmp_outline_return_value_1 );
            goto try_return_handler_2;
            branch_no_2:;
        }
        {
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_left_2 = tmp_comparison_chain_1__operand_2;
            tmp_compexpr_right_2 = const_int_pos_16;
            tmp_outline_return_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_outline_return_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1694;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            goto try_return_handler_2;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_78_goToEnd );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
        Py_DECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__comparison_result );
        Py_DECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
        Py_DECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        Py_XDECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_78_goToEnd );
        return NULL;
        outline_result_1:;
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_outline_return_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_outline_return_value_1 );

            exception_lineno = 1694;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_outline_return_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_bytes_arg_1;
            PyObject *tmp_bytearray_arg_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_f );
            if ( tmp_source_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1695;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_write );
            Py_DECREF( tmp_source_name_5 );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1695;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_padBytes );
            tmp_bytearray_arg_1 = var_padBytes;
            tmp_bytes_arg_1 = BUILTIN_BYTEARRAY1( tmp_bytearray_arg_1 );
            if ( tmp_bytes_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 1695;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_3 = BUILTIN_BYTES1( tmp_bytes_arg_1 );
            Py_DECREF( tmp_bytes_arg_1 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 1695;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_078177cbaf4ee42129545a54c84dce8c->m_frame.f_lineno = 1695;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1695;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_f );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_078177cbaf4ee42129545a54c84dce8c->m_frame.f_lineno = 1696;
        tmp_assattr_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_offsetOfNewPage, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1696;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_078177cbaf4ee42129545a54c84dce8c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_078177cbaf4ee42129545a54c84dce8c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_078177cbaf4ee42129545a54c84dce8c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_078177cbaf4ee42129545a54c84dce8c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_078177cbaf4ee42129545a54c84dce8c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_078177cbaf4ee42129545a54c84dce8c,
        type_description_1,
        par_self,
        var_pos,
        var_padBytes
    );


    // Release cached frame.
    if ( frame_078177cbaf4ee42129545a54c84dce8c == cache_frame_078177cbaf4ee42129545a54c84dce8c )
    {
        Py_DECREF( frame_078177cbaf4ee42129545a54c84dce8c );
    }
    cache_frame_078177cbaf4ee42129545a54c84dce8c = NULL;

    assertFrameObject( frame_078177cbaf4ee42129545a54c84dce8c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_78_goToEnd );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_pos );
    Py_DECREF( var_pos );
    var_pos = NULL;

    CHECK_OBJECT( (PyObject *)var_padBytes );
    Py_DECREF( var_padBytes );
    var_padBytes = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_pos );
    var_pos = NULL;

    Py_XDECREF( var_padBytes );
    var_padBytes = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_78_goToEnd );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_79_setEndian( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_endian = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_2856c68ddb52c15f325b6454ff818552;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2856c68ddb52c15f325b6454ff818552 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2856c68ddb52c15f325b6454ff818552, codeobj_2856c68ddb52c15f325b6454ff818552, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_2856c68ddb52c15f325b6454ff818552 = cache_frame_2856c68ddb52c15f325b6454ff818552;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2856c68ddb52c15f325b6454ff818552 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2856c68ddb52c15f325b6454ff818552 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_endian );
        tmp_assattr_name_1 = par_endian;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_endian, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1699;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_endian );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1700;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_str_plain_L;
        tmp_assattr_name_2 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1700;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_longFmt, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1700;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_left_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_endian );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1701;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_str_plain_H;
        tmp_assattr_name_3 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1701;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_shortFmt, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1701;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_left_name_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_left_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_endian );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1702;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_str_plain_HHL;
        tmp_assattr_name_4 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1702;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_tagFormat, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1702;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2856c68ddb52c15f325b6454ff818552 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2856c68ddb52c15f325b6454ff818552 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2856c68ddb52c15f325b6454ff818552, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2856c68ddb52c15f325b6454ff818552->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2856c68ddb52c15f325b6454ff818552, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2856c68ddb52c15f325b6454ff818552,
        type_description_1,
        par_self,
        par_endian
    );


    // Release cached frame.
    if ( frame_2856c68ddb52c15f325b6454ff818552 == cache_frame_2856c68ddb52c15f325b6454ff818552 )
    {
        Py_DECREF( frame_2856c68ddb52c15f325b6454ff818552 );
    }
    cache_frame_2856c68ddb52c15f325b6454ff818552 = NULL;

    assertFrameObject( frame_2856c68ddb52c15f325b6454ff818552 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_79_setEndian );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endian );
    Py_DECREF( par_endian );
    par_endian = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endian );
    Py_DECREF( par_endian );
    par_endian = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_79_setEndian );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_80_skipIFDs( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_IFDoffset = NULL;
    PyObject *var_numTags = NULL;
    struct Nuitka_FrameObject *frame_267cb1a2ac702db4ed0b705f1221373a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_267cb1a2ac702db4ed0b705f1221373a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_267cb1a2ac702db4ed0b705f1221373a, codeobj_267cb1a2ac702db4ed0b705f1221373a, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_267cb1a2ac702db4ed0b705f1221373a = cache_frame_267cb1a2ac702db4ed0b705f1221373a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_267cb1a2ac702db4ed0b705f1221373a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_267cb1a2ac702db4ed0b705f1221373a ) == 2 ); // Frame stack

    // Framed code:
    loop_start_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_267cb1a2ac702db4ed0b705f1221373a->m_frame.f_lineno = 1706;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_readLong );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1706;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_IFDoffset;
            var_IFDoffset = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_IFDoffset );
        tmp_compexpr_left_1 = var_IFDoffset;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1707;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1708;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_267cb1a2ac702db4ed0b705f1221373a->m_frame.f_lineno = 1708;
            tmp_left_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1708;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_int_pos_4;
            tmp_assattr_name_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assattr_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1708;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_whereToWriteNewIFDOffset, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1708;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1711;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_IFDoffset );
        tmp_args_element_name_1 = var_IFDoffset;
        frame_267cb1a2ac702db4ed0b705f1221373a->m_frame.f_lineno = 1711;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_seek, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1711;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_267cb1a2ac702db4ed0b705f1221373a->m_frame.f_lineno = 1712;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_readShort );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1712;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_numTags;
            var_numTags = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_f );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_seek );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_numTags );
        tmp_left_name_2 = var_numTags;
        tmp_right_name_2 = const_int_pos_12;
        tmp_args_element_name_2 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_1;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_SEEK_CUR );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_267cb1a2ac702db4ed0b705f1221373a->m_frame.f_lineno = 1713;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1713;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1705;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_267cb1a2ac702db4ed0b705f1221373a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_267cb1a2ac702db4ed0b705f1221373a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_267cb1a2ac702db4ed0b705f1221373a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_267cb1a2ac702db4ed0b705f1221373a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_267cb1a2ac702db4ed0b705f1221373a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_267cb1a2ac702db4ed0b705f1221373a,
        type_description_1,
        par_self,
        var_IFDoffset,
        var_numTags
    );


    // Release cached frame.
    if ( frame_267cb1a2ac702db4ed0b705f1221373a == cache_frame_267cb1a2ac702db4ed0b705f1221373a )
    {
        Py_DECREF( frame_267cb1a2ac702db4ed0b705f1221373a );
    }
    cache_frame_267cb1a2ac702db4ed0b705f1221373a = NULL;

    assertFrameObject( frame_267cb1a2ac702db4ed0b705f1221373a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_80_skipIFDs );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_IFDoffset );
    Py_DECREF( var_IFDoffset );
    var_IFDoffset = NULL;

    Py_XDECREF( var_numTags );
    var_numTags = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_IFDoffset );
    var_IFDoffset = NULL;

    Py_XDECREF( var_numTags );
    var_numTags = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_80_skipIFDs );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_81_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_2ae5a0740f159777a3ce3a976648fe63;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2ae5a0740f159777a3ce3a976648fe63 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2ae5a0740f159777a3ce3a976648fe63, codeobj_2ae5a0740f159777a3ce3a976648fe63, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_2ae5a0740f159777a3ce3a976648fe63 = cache_frame_2ae5a0740f159777a3ce3a976648fe63;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2ae5a0740f159777a3ce3a976648fe63 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2ae5a0740f159777a3ce3a976648fe63 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1716;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_1 = par_data;
        frame_2ae5a0740f159777a3ce3a976648fe63->m_frame.f_lineno = 1716;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_write, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1716;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5a0740f159777a3ce3a976648fe63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5a0740f159777a3ce3a976648fe63 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5a0740f159777a3ce3a976648fe63 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2ae5a0740f159777a3ce3a976648fe63, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2ae5a0740f159777a3ce3a976648fe63->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2ae5a0740f159777a3ce3a976648fe63, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2ae5a0740f159777a3ce3a976648fe63,
        type_description_1,
        par_self,
        par_data
    );


    // Release cached frame.
    if ( frame_2ae5a0740f159777a3ce3a976648fe63 == cache_frame_2ae5a0740f159777a3ce3a976648fe63 )
    {
        Py_DECREF( frame_2ae5a0740f159777a3ce3a976648fe63 );
    }
    cache_frame_2ae5a0740f159777a3ce3a976648fe63 = NULL;

    assertFrameObject( frame_2ae5a0740f159777a3ce3a976648fe63 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_81_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_81_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_82_readShort( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_82996f6194c95ad02d897b5cb9f54f52;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_82996f6194c95ad02d897b5cb9f54f52 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_82996f6194c95ad02d897b5cb9f54f52, codeobj_82996f6194c95ad02d897b5cb9f54f52, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_82996f6194c95ad02d897b5cb9f54f52 = cache_frame_82996f6194c95ad02d897b5cb9f54f52;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_82996f6194c95ad02d897b5cb9f54f52 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_82996f6194c95ad02d897b5cb9f54f52 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_shortFmt );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_82996f6194c95ad02d897b5cb9f54f52->m_frame.f_lineno = 1719;
        tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_2_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_82996f6194c95ad02d897b5cb9f54f52->m_frame.f_lineno = 1719;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1719;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oo";
            exception_lineno = 1719;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oo";
                    exception_lineno = 1719;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oo";
            exception_lineno = 1719;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82996f6194c95ad02d897b5cb9f54f52 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_82996f6194c95ad02d897b5cb9f54f52 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_82996f6194c95ad02d897b5cb9f54f52, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_82996f6194c95ad02d897b5cb9f54f52->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_82996f6194c95ad02d897b5cb9f54f52, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_82996f6194c95ad02d897b5cb9f54f52,
        type_description_1,
        par_self,
        var_value
    );


    // Release cached frame.
    if ( frame_82996f6194c95ad02d897b5cb9f54f52 == cache_frame_82996f6194c95ad02d897b5cb9f54f52 )
    {
        Py_DECREF( frame_82996f6194c95ad02d897b5cb9f54f52 );
    }
    cache_frame_82996f6194c95ad02d897b5cb9f54f52 = NULL;

    assertFrameObject( frame_82996f6194c95ad02d897b5cb9f54f52 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_3 = tmp_tuple_unpack_1__element_1;
        assert( var_value == NULL );
        Py_INCREF( tmp_assign_source_3 );
        var_value = tmp_assign_source_3;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( var_value );
    tmp_return_value = var_value;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_82_readShort );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_82_readShort );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_83_readLong( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_6cb860ca7c8db47431876b8f94c14c0c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_6cb860ca7c8db47431876b8f94c14c0c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6cb860ca7c8db47431876b8f94c14c0c, codeobj_6cb860ca7c8db47431876b8f94c14c0c, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
    frame_6cb860ca7c8db47431876b8f94c14c0c = cache_frame_6cb860ca7c8db47431876b8f94c14c0c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6cb860ca7c8db47431876b8f94c14c0c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6cb860ca7c8db47431876b8f94c14c0c ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_longFmt );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_6cb860ca7c8db47431876b8f94c14c0c->m_frame.f_lineno = 1723;
        tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_4_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_6cb860ca7c8db47431876b8f94c14c0c->m_frame.f_lineno = 1723;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1723;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oo";
            exception_lineno = 1723;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oo";
                    exception_lineno = 1723;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 1)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oo";
            exception_lineno = 1723;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cb860ca7c8db47431876b8f94c14c0c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6cb860ca7c8db47431876b8f94c14c0c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6cb860ca7c8db47431876b8f94c14c0c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6cb860ca7c8db47431876b8f94c14c0c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6cb860ca7c8db47431876b8f94c14c0c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6cb860ca7c8db47431876b8f94c14c0c,
        type_description_1,
        par_self,
        var_value
    );


    // Release cached frame.
    if ( frame_6cb860ca7c8db47431876b8f94c14c0c == cache_frame_6cb860ca7c8db47431876b8f94c14c0c )
    {
        Py_DECREF( frame_6cb860ca7c8db47431876b8f94c14c0c );
    }
    cache_frame_6cb860ca7c8db47431876b8f94c14c0c = NULL;

    assertFrameObject( frame_6cb860ca7c8db47431876b8f94c14c0c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_3 = tmp_tuple_unpack_1__element_1;
        assert( var_value == NULL );
        Py_INCREF( tmp_assign_source_3 );
        var_value = tmp_assign_source_3;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    CHECK_OBJECT( var_value );
    tmp_return_value = var_value;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_83_readLong );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_83_readLong );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_bytesWritten = NULL;
    struct Nuitka_FrameObject *frame_4a5d34f527e95c432e45aa6b4807c32e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_4a5d34f527e95c432e45aa6b4807c32e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a5d34f527e95c432e45aa6b4807c32e, codeobj_4a5d34f527e95c432e45aa6b4807c32e, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4a5d34f527e95c432e45aa6b4807c32e = cache_frame_4a5d34f527e95c432e45aa6b4807c32e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a5d34f527e95c432e45aa6b4807c32e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a5d34f527e95c432e45aa6b4807c32e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_int_neg_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_SEEK_CUR );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_4a5d34f527e95c432e45aa6b4807c32e->m_frame.f_lineno = 1727;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1727;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_f );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_2;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pack );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_longFmt );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_5 = par_value;
        frame_4a5d34f527e95c432e45aa6b4807c32e->m_frame.f_lineno = 1728;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_4a5d34f527e95c432e45aa6b4807c32e->m_frame.f_lineno = 1728;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_bytesWritten == NULL );
        var_bytesWritten = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_1 = var_bytesWritten;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_2 = var_bytesWritten;
        tmp_compexpr_right_2 = const_int_pos_4;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1729;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_9d800b28b537f147be4f7e1d30bcd4d4;
            CHECK_OBJECT( var_bytesWritten );
            tmp_right_name_1 = var_bytesWritten;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1730;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_4a5d34f527e95c432e45aa6b4807c32e->m_frame.f_lineno = 1730;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1730;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a5d34f527e95c432e45aa6b4807c32e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a5d34f527e95c432e45aa6b4807c32e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a5d34f527e95c432e45aa6b4807c32e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a5d34f527e95c432e45aa6b4807c32e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a5d34f527e95c432e45aa6b4807c32e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a5d34f527e95c432e45aa6b4807c32e,
        type_description_1,
        par_self,
        par_value,
        var_bytesWritten
    );


    // Release cached frame.
    if ( frame_4a5d34f527e95c432e45aa6b4807c32e == cache_frame_4a5d34f527e95c432e45aa6b4807c32e )
    {
        Py_DECREF( frame_4a5d34f527e95c432e45aa6b4807c32e );
    }
    cache_frame_4a5d34f527e95c432e45aa6b4807c32e = NULL;

    assertFrameObject( frame_4a5d34f527e95c432e45aa6b4807c32e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_bytesWritten );
    Py_DECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_85_rewriteLastShort( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_bytesWritten = NULL;
    struct Nuitka_FrameObject *frame_9c0321c0f03ab889f2e725dcee3d6bc2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_9c0321c0f03ab889f2e725dcee3d6bc2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9c0321c0f03ab889f2e725dcee3d6bc2, codeobj_9c0321c0f03ab889f2e725dcee3d6bc2, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9c0321c0f03ab889f2e725dcee3d6bc2 = cache_frame_9c0321c0f03ab889f2e725dcee3d6bc2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9c0321c0f03ab889f2e725dcee3d6bc2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9c0321c0f03ab889f2e725dcee3d6bc2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_int_neg_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_SEEK_CUR );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_9c0321c0f03ab889f2e725dcee3d6bc2->m_frame.f_lineno = 1734;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_f );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_2;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pack );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_shortFmt );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_5 = par_value;
        frame_9c0321c0f03ab889f2e725dcee3d6bc2->m_frame.f_lineno = 1735;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_9c0321c0f03ab889f2e725dcee3d6bc2->m_frame.f_lineno = 1735;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_bytesWritten == NULL );
        var_bytesWritten = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_1 = var_bytesWritten;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_2 = var_bytesWritten;
        tmp_compexpr_right_2 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1736;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_92d80fefc28a8052fcffa77414112c77;
            CHECK_OBJECT( var_bytesWritten );
            tmp_right_name_1 = var_bytesWritten;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1737;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_9c0321c0f03ab889f2e725dcee3d6bc2->m_frame.f_lineno = 1737;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1737;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9c0321c0f03ab889f2e725dcee3d6bc2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9c0321c0f03ab889f2e725dcee3d6bc2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9c0321c0f03ab889f2e725dcee3d6bc2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9c0321c0f03ab889f2e725dcee3d6bc2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9c0321c0f03ab889f2e725dcee3d6bc2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9c0321c0f03ab889f2e725dcee3d6bc2,
        type_description_1,
        par_self,
        par_value,
        var_bytesWritten
    );


    // Release cached frame.
    if ( frame_9c0321c0f03ab889f2e725dcee3d6bc2 == cache_frame_9c0321c0f03ab889f2e725dcee3d6bc2 )
    {
        Py_DECREF( frame_9c0321c0f03ab889f2e725dcee3d6bc2 );
    }
    cache_frame_9c0321c0f03ab889f2e725dcee3d6bc2 = NULL;

    assertFrameObject( frame_9c0321c0f03ab889f2e725dcee3d6bc2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_85_rewriteLastShort );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_bytesWritten );
    Py_DECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_85_rewriteLastShort );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_86_rewriteLastLong( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_bytesWritten = NULL;
    struct Nuitka_FrameObject *frame_ed60a787d3aca02854acb57ad82f7fb9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_ed60a787d3aca02854acb57ad82f7fb9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ed60a787d3aca02854acb57ad82f7fb9, codeobj_ed60a787d3aca02854acb57ad82f7fb9, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ed60a787d3aca02854acb57ad82f7fb9 = cache_frame_ed60a787d3aca02854acb57ad82f7fb9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ed60a787d3aca02854acb57ad82f7fb9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ed60a787d3aca02854acb57ad82f7fb9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_int_neg_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_SEEK_CUR );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_ed60a787d3aca02854acb57ad82f7fb9->m_frame.f_lineno = 1741;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_f );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_2;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pack );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_longFmt );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_5 = par_value;
        frame_ed60a787d3aca02854acb57ad82f7fb9->m_frame.f_lineno = 1742;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_ed60a787d3aca02854acb57ad82f7fb9->m_frame.f_lineno = 1742;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1742;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_bytesWritten == NULL );
        var_bytesWritten = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_1 = var_bytesWritten;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_2 = var_bytesWritten;
        tmp_compexpr_right_2 = const_int_pos_4;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1743;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_9d800b28b537f147be4f7e1d30bcd4d4;
            CHECK_OBJECT( var_bytesWritten );
            tmp_right_name_1 = var_bytesWritten;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1744;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_ed60a787d3aca02854acb57ad82f7fb9->m_frame.f_lineno = 1744;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1744;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed60a787d3aca02854acb57ad82f7fb9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed60a787d3aca02854acb57ad82f7fb9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ed60a787d3aca02854acb57ad82f7fb9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ed60a787d3aca02854acb57ad82f7fb9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ed60a787d3aca02854acb57ad82f7fb9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ed60a787d3aca02854acb57ad82f7fb9,
        type_description_1,
        par_self,
        par_value,
        var_bytesWritten
    );


    // Release cached frame.
    if ( frame_ed60a787d3aca02854acb57ad82f7fb9 == cache_frame_ed60a787d3aca02854acb57ad82f7fb9 )
    {
        Py_DECREF( frame_ed60a787d3aca02854acb57ad82f7fb9 );
    }
    cache_frame_ed60a787d3aca02854acb57ad82f7fb9 = NULL;

    assertFrameObject( frame_ed60a787d3aca02854acb57ad82f7fb9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_86_rewriteLastLong );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_bytesWritten );
    Py_DECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_86_rewriteLastLong );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_87_writeShort( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_bytesWritten = NULL;
    struct Nuitka_FrameObject *frame_20bfb7154e4fda4fb602e7a2fadf65f5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_20bfb7154e4fda4fb602e7a2fadf65f5 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_20bfb7154e4fda4fb602e7a2fadf65f5, codeobj_20bfb7154e4fda4fb602e7a2fadf65f5, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_20bfb7154e4fda4fb602e7a2fadf65f5 = cache_frame_20bfb7154e4fda4fb602e7a2fadf65f5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_20bfb7154e4fda4fb602e7a2fadf65f5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_20bfb7154e4fda4fb602e7a2fadf65f5 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pack );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_shortFmt );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_3 = par_value;
        frame_20bfb7154e4fda4fb602e7a2fadf65f5->m_frame.f_lineno = 1748;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_20bfb7154e4fda4fb602e7a2fadf65f5->m_frame.f_lineno = 1748;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1748;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_bytesWritten == NULL );
        var_bytesWritten = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_1 = var_bytesWritten;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_2 = var_bytesWritten;
        tmp_compexpr_right_2 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1749;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_92d80fefc28a8052fcffa77414112c77;
            CHECK_OBJECT( var_bytesWritten );
            tmp_right_name_1 = var_bytesWritten;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1750;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_20bfb7154e4fda4fb602e7a2fadf65f5->m_frame.f_lineno = 1750;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1750;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20bfb7154e4fda4fb602e7a2fadf65f5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20bfb7154e4fda4fb602e7a2fadf65f5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_20bfb7154e4fda4fb602e7a2fadf65f5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_20bfb7154e4fda4fb602e7a2fadf65f5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_20bfb7154e4fda4fb602e7a2fadf65f5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20bfb7154e4fda4fb602e7a2fadf65f5,
        type_description_1,
        par_self,
        par_value,
        var_bytesWritten
    );


    // Release cached frame.
    if ( frame_20bfb7154e4fda4fb602e7a2fadf65f5 == cache_frame_20bfb7154e4fda4fb602e7a2fadf65f5 )
    {
        Py_DECREF( frame_20bfb7154e4fda4fb602e7a2fadf65f5 );
    }
    cache_frame_20bfb7154e4fda4fb602e7a2fadf65f5 = NULL;

    assertFrameObject( frame_20bfb7154e4fda4fb602e7a2fadf65f5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_87_writeShort );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_bytesWritten );
    Py_DECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_87_writeShort );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_88_writeLong( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_bytesWritten = NULL;
    struct Nuitka_FrameObject *frame_e506afd6b88e1ef3346114190f1afafc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_e506afd6b88e1ef3346114190f1afafc = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e506afd6b88e1ef3346114190f1afafc, codeobj_e506afd6b88e1ef3346114190f1afafc, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e506afd6b88e1ef3346114190f1afafc = cache_frame_e506afd6b88e1ef3346114190f1afafc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e506afd6b88e1ef3346114190f1afafc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e506afd6b88e1ef3346114190f1afafc ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pack );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_longFmt );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_3 = par_value;
        frame_e506afd6b88e1ef3346114190f1afafc->m_frame.f_lineno = 1754;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_e506afd6b88e1ef3346114190f1afafc->m_frame.f_lineno = 1754;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1754;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_bytesWritten == NULL );
        var_bytesWritten = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_1 = var_bytesWritten;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_bytesWritten );
        tmp_compexpr_left_2 = var_bytesWritten;
        tmp_compexpr_right_2 = const_int_pos_4;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1755;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_left_name_1 = const_str_digest_9d800b28b537f147be4f7e1d30bcd4d4;
            CHECK_OBJECT( var_bytesWritten );
            tmp_right_name_1 = var_bytesWritten;
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1756;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_e506afd6b88e1ef3346114190f1afafc->m_frame.f_lineno = 1756;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1756;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e506afd6b88e1ef3346114190f1afafc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e506afd6b88e1ef3346114190f1afafc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e506afd6b88e1ef3346114190f1afafc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e506afd6b88e1ef3346114190f1afafc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e506afd6b88e1ef3346114190f1afafc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e506afd6b88e1ef3346114190f1afafc,
        type_description_1,
        par_self,
        par_value,
        var_bytesWritten
    );


    // Release cached frame.
    if ( frame_e506afd6b88e1ef3346114190f1afafc == cache_frame_e506afd6b88e1ef3346114190f1afafc )
    {
        Py_DECREF( frame_e506afd6b88e1ef3346114190f1afafc );
    }
    cache_frame_e506afd6b88e1ef3346114190f1afafc = NULL;

    assertFrameObject( frame_e506afd6b88e1ef3346114190f1afafc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_88_writeLong );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_bytesWritten );
    Py_DECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_bytesWritten );
    var_bytesWritten = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_88_writeLong );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_89_close( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0d6b4fb5870d5a5567f1835676abd3dc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0d6b4fb5870d5a5567f1835676abd3dc = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0d6b4fb5870d5a5567f1835676abd3dc, codeobj_0d6b4fb5870d5a5567f1835676abd3dc, module_PIL$TiffImagePlugin, sizeof(void *) );
    frame_0d6b4fb5870d5a5567f1835676abd3dc = cache_frame_0d6b4fb5870d5a5567f1835676abd3dc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0d6b4fb5870d5a5567f1835676abd3dc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0d6b4fb5870d5a5567f1835676abd3dc ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_0d6b4fb5870d5a5567f1835676abd3dc->m_frame.f_lineno = 1760;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_finalize );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1760;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1761;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_0d6b4fb5870d5a5567f1835676abd3dc->m_frame.f_lineno = 1761;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_close );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1761;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d6b4fb5870d5a5567f1835676abd3dc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d6b4fb5870d5a5567f1835676abd3dc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0d6b4fb5870d5a5567f1835676abd3dc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0d6b4fb5870d5a5567f1835676abd3dc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0d6b4fb5870d5a5567f1835676abd3dc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0d6b4fb5870d5a5567f1835676abd3dc,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0d6b4fb5870d5a5567f1835676abd3dc == cache_frame_0d6b4fb5870d5a5567f1835676abd3dc )
    {
        Py_DECREF( frame_0d6b4fb5870d5a5567f1835676abd3dc );
    }
    cache_frame_0d6b4fb5870d5a5567f1835676abd3dc = NULL;

    assertFrameObject( frame_0d6b4fb5870d5a5567f1835676abd3dc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_89_close );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_89_close );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_90_fixIFD( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_numTags = NULL;
    PyObject *var_i = NULL;
    PyObject *var_tag = NULL;
    PyObject *var_fieldType = NULL;
    PyObject *var_count = NULL;
    PyObject *var_fieldSize = NULL;
    PyObject *var_totalSize = NULL;
    PyObject *var_isLocal = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_curPos = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_741ddc383480035d74106484182f19b9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_741ddc383480035d74106484182f19b9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_741ddc383480035d74106484182f19b9, codeobj_741ddc383480035d74106484182f19b9, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_741ddc383480035d74106484182f19b9 = cache_frame_741ddc383480035d74106484182f19b9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_741ddc383480035d74106484182f19b9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_741ddc383480035d74106484182f19b9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1764;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_readShort );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1764;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_numTags == NULL );
        var_numTags = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT( var_numTags );
        tmp_xrange_low_1 = var_numTags;
        tmp_iter_arg_1 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1766;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1766;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooo";
                exception_lineno = 1766;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_4;
            Py_INCREF( var_i );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1767;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_unpack );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1767;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tagFormat );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1767;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1768;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1768;
        tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_8_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1768;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1767;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1767;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_5 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1767;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1767;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1767;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1767;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1767;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooo";
            exception_lineno = 1767;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_tag;
            var_tag = tmp_assign_source_9;
            Py_INCREF( var_tag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_fieldType;
            var_fieldType = tmp_assign_source_10;
            Py_INCREF( var_fieldType );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_count;
            var_count = tmp_assign_source_11;
            Py_INCREF( var_count );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fieldSizes );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1770;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_fieldType );
        tmp_subscript_name_1 = var_fieldType;
        tmp_assign_source_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1770;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_fieldSize;
            var_fieldSize = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( var_fieldSize );
        tmp_left_name_1 = var_fieldSize;
        CHECK_OBJECT( var_count );
        tmp_right_name_1 = var_count;
        tmp_assign_source_13 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1771;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_totalSize;
            var_totalSize = tmp_assign_source_13;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_totalSize );
        tmp_compexpr_left_1 = var_totalSize;
        tmp_compexpr_right_1 = const_int_pos_4;
        tmp_assign_source_14 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1772;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_isLocal;
            var_isLocal = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( var_isLocal );
        tmp_operand_name_1 = var_isLocal;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1773;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_called_instance_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1774;
            tmp_assign_source_15 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_readLong );
            if ( tmp_assign_source_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1774;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_offset;
                var_offset = tmp_assign_source_15;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT( var_offset );
            tmp_left_name_2 = var_offset;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_right_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_offsetOfNewPage );
            if ( tmp_right_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1775;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1775;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_16 = tmp_left_name_2;
            var_offset = tmp_assign_source_16;

        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            CHECK_OBJECT( var_offset );
            tmp_args_element_name_3 = var_offset;
            frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1776;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_rewriteLastLong, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1776;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( var_tag );
        tmp_compexpr_left_2 = var_tag;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_Tags );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1778;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1778;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_f );
            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1779;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1779;
            tmp_assign_source_17 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_tell );
            Py_DECREF( tmp_called_instance_5 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1779;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_curPos;
                var_curPos = tmp_assign_source_17;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            int tmp_truth_name_1;
            CHECK_OBJECT( var_isLocal );
            tmp_truth_name_1 = CHECK_IF_TRUE( var_isLocal );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1781;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_kw_name_1;
                PyObject *tmp_dict_key_1;
                PyObject *tmp_dict_value_1;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_dict_key_2;
                PyObject *tmp_dict_value_2;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_fixOffsets );
                if ( tmp_called_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1782;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT( var_count );
                tmp_tuple_element_1 = var_count;
                tmp_args_name_1 = PyTuple_New( 1 );
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
                tmp_dict_key_1 = const_str_plain_isShort;
                CHECK_OBJECT( var_fieldSize );
                tmp_compexpr_left_3 = var_fieldSize;
                tmp_compexpr_right_3 = const_int_pos_2;
                tmp_dict_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_dict_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_2 );
                    Py_DECREF( tmp_args_name_1 );

                    exception_lineno = 1782;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_kw_name_1 = _PyDict_NewPresized( 2 );
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
                Py_DECREF( tmp_dict_value_1 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_2 = const_str_plain_isLong;
                CHECK_OBJECT( var_fieldSize );
                tmp_compexpr_left_4 = var_fieldSize;
                tmp_compexpr_right_4 = const_int_pos_4;
                tmp_dict_value_2 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                if ( tmp_dict_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_2 );
                    Py_DECREF( tmp_args_name_1 );
                    Py_DECREF( tmp_kw_name_1 );

                    exception_lineno = 1783;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
                Py_DECREF( tmp_dict_value_2 );
                assert( !(tmp_res != 0) );
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1782;
                tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_name_1 );
                Py_DECREF( tmp_kw_name_1 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1782;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_9;
                PyObject *tmp_source_name_10;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_10 = par_self;
                tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_f );
                if ( tmp_source_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1784;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_seek );
                Py_DECREF( tmp_source_name_9 );
                if ( tmp_called_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1784;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT( var_curPos );
                tmp_left_name_3 = var_curPos;
                tmp_right_name_3 = const_int_pos_4;
                tmp_args_element_name_4 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_3, tmp_right_name_3 );
                if ( tmp_args_element_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_3 );

                    exception_lineno = 1784;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1784;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                }

                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_element_name_4 );
                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1784;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_source_name_11;
                PyObject *tmp_source_name_12;
                PyObject *tmp_call_result_4;
                PyObject *tmp_args_element_name_5;
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_f );
                if ( tmp_source_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1786;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_seek );
                Py_DECREF( tmp_source_name_11 );
                if ( tmp_called_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1786;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                if ( var_offset == NULL )
                {
                    Py_DECREF( tmp_called_name_4 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "offset" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1786;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }

                tmp_args_element_name_5 = var_offset;
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1786;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_called_name_4 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1786;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            {
                PyObject *tmp_called_name_5;
                PyObject *tmp_source_name_13;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_name_2;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_kw_name_2;
                PyObject *tmp_dict_key_3;
                PyObject *tmp_dict_value_3;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                PyObject *tmp_dict_key_4;
                PyObject *tmp_dict_value_4;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                CHECK_OBJECT( par_self );
                tmp_source_name_13 = par_self;
                tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_fixOffsets );
                if ( tmp_called_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1787;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT( var_count );
                tmp_tuple_element_2 = var_count;
                tmp_args_name_2 = PyTuple_New( 1 );
                Py_INCREF( tmp_tuple_element_2 );
                PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
                tmp_dict_key_3 = const_str_plain_isShort;
                CHECK_OBJECT( var_fieldSize );
                tmp_compexpr_left_5 = var_fieldSize;
                tmp_compexpr_right_5 = const_int_pos_2;
                tmp_dict_value_3 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                if ( tmp_dict_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_5 );
                    Py_DECREF( tmp_args_name_2 );

                    exception_lineno = 1787;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_kw_name_2 = _PyDict_NewPresized( 2 );
                tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
                Py_DECREF( tmp_dict_value_3 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_4 = const_str_plain_isLong;
                CHECK_OBJECT( var_fieldSize );
                tmp_compexpr_left_6 = var_fieldSize;
                tmp_compexpr_right_6 = const_int_pos_4;
                tmp_dict_value_4 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_dict_value_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_5 );
                    Py_DECREF( tmp_args_name_2 );
                    Py_DECREF( tmp_kw_name_2 );

                    exception_lineno = 1788;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
                Py_DECREF( tmp_dict_value_4 );
                assert( !(tmp_res != 0) );
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1787;
                tmp_call_result_5 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_2, tmp_kw_name_2 );
                Py_DECREF( tmp_called_name_5 );
                Py_DECREF( tmp_args_name_2 );
                Py_DECREF( tmp_kw_name_2 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1787;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            {
                PyObject *tmp_called_instance_6;
                PyObject *tmp_source_name_14;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_6;
                CHECK_OBJECT( par_self );
                tmp_source_name_14 = par_self;
                tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_f );
                if ( tmp_called_instance_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1789;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                CHECK_OBJECT( var_curPos );
                tmp_args_element_name_6 = var_curPos;
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1789;
                {
                    PyObject *call_args[] = { tmp_args_element_name_6 };
                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_seek, call_args );
                }

                Py_DECREF( tmp_called_instance_6 );
                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1789;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_end_3:;
        }
        {
            PyObject *tmp_assign_source_18;
            tmp_assign_source_18 = Py_None;
            {
                PyObject *old = tmp_assign_unpack_1__assign_source;
                tmp_assign_unpack_1__assign_source = tmp_assign_source_18;
                Py_INCREF( tmp_assign_unpack_1__assign_source );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_19;
            CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
            tmp_assign_source_19 = tmp_assign_unpack_1__assign_source;
            {
                PyObject *old = var_offset;
                var_offset = tmp_assign_source_19;
                Py_INCREF( var_offset );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_20;
            CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
            tmp_assign_source_20 = tmp_assign_unpack_1__assign_source;
            {
                PyObject *old = var_curPos;
                assert( old != NULL );
                var_curPos = tmp_assign_source_20;
                Py_INCREF( var_curPos );
                Py_DECREF( old );
            }

        }
        CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
        Py_DECREF( tmp_assign_unpack_1__assign_source );
        tmp_assign_unpack_1__assign_source = NULL;

        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_truth_name_2;
            CHECK_OBJECT( var_isLocal );
            tmp_truth_name_2 = CHECK_IF_TRUE( var_isLocal );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1793;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_15;
                PyObject *tmp_source_name_16;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_source_name_17;
                PyObject *tmp_mvar_value_2;
                CHECK_OBJECT( par_self );
                tmp_source_name_16 = par_self;
                tmp_source_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_f );
                if ( tmp_source_name_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1795;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_seek );
                Py_DECREF( tmp_source_name_15 );
                if ( tmp_called_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1795;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_args_element_name_7 = const_int_pos_4;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_2 == NULL )
                {
                    Py_DECREF( tmp_called_name_6 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1795;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }

                tmp_source_name_17 = tmp_mvar_value_2;
                tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_SEEK_CUR );
                if ( tmp_args_element_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_6 );

                    exception_lineno = 1795;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                frame_741ddc383480035d74106484182f19b9->m_frame.f_lineno = 1795;
                {
                    PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
                    tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_8 );
                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1795;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_4:;
        }
        branch_end_2:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1766;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_741ddc383480035d74106484182f19b9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_741ddc383480035d74106484182f19b9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_741ddc383480035d74106484182f19b9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_741ddc383480035d74106484182f19b9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_741ddc383480035d74106484182f19b9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_741ddc383480035d74106484182f19b9,
        type_description_1,
        par_self,
        var_numTags,
        var_i,
        var_tag,
        var_fieldType,
        var_count,
        var_fieldSize,
        var_totalSize,
        var_isLocal,
        var_offset,
        var_curPos
    );


    // Release cached frame.
    if ( frame_741ddc383480035d74106484182f19b9 == cache_frame_741ddc383480035d74106484182f19b9 )
    {
        Py_DECREF( frame_741ddc383480035d74106484182f19b9 );
    }
    cache_frame_741ddc383480035d74106484182f19b9 = NULL;

    assertFrameObject( frame_741ddc383480035d74106484182f19b9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_90_fixIFD );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_numTags );
    Py_DECREF( var_numTags );
    var_numTags = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_fieldType );
    var_fieldType = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    Py_XDECREF( var_fieldSize );
    var_fieldSize = NULL;

    Py_XDECREF( var_totalSize );
    var_totalSize = NULL;

    Py_XDECREF( var_isLocal );
    var_isLocal = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_curPos );
    var_curPos = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_numTags );
    var_numTags = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_fieldType );
    var_fieldType = NULL;

    Py_XDECREF( var_count );
    var_count = NULL;

    Py_XDECREF( var_fieldSize );
    var_fieldSize = NULL;

    Py_XDECREF( var_totalSize );
    var_totalSize = NULL;

    Py_XDECREF( var_isLocal );
    var_isLocal = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_curPos );
    var_curPos = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_90_fixIFD );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_91_fixOffsets( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_count = python_pars[ 1 ];
    PyObject *par_isShort = python_pars[ 2 ];
    PyObject *par_isLong = python_pars[ 3 ];
    PyObject *var_i = NULL;
    PyObject *var_offset = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_f8e19cb72f58afe34bd7fbae29d60efd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_f8e19cb72f58afe34bd7fbae29d60efd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f8e19cb72f58afe34bd7fbae29d60efd, codeobj_f8e19cb72f58afe34bd7fbae29d60efd, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f8e19cb72f58afe34bd7fbae29d60efd = cache_frame_f8e19cb72f58afe34bd7fbae29d60efd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f8e19cb72f58afe34bd7fbae29d60efd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f8e19cb72f58afe34bd7fbae29d60efd ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( par_isShort );
        tmp_operand_name_1 = par_isShort;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1798;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_isLong );
        tmp_operand_name_2 = par_isLong;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1798;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_42b66323a5674c6af016df2810648dca;
            frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1799;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 1799;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT( par_count );
        tmp_xrange_low_1 = par_count;
        tmp_iter_arg_1 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1801;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1801;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 1801;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_3;
            Py_INCREF( var_i );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_isShort );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_isShort );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1802;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1802;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_readShort );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1802;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1802;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_readLong );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1802;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        condexpr_end_1:;
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( var_offset );
        tmp_left_name_1 = var_offset;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_offsetOfNewPage );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1803;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1803;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_5 = tmp_left_name_1;
        var_offset = tmp_assign_source_5;

    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_isShort );
        tmp_truth_name_2 = CHECK_IF_TRUE( par_isShort );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1804;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( var_offset );
        tmp_compexpr_left_1 = var_offset;
        tmp_compexpr_right_1 = const_int_pos_65536;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1804;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_3 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_count );
            tmp_compexpr_left_2 = par_count;
            tmp_compexpr_right_2 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1806;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                tmp_make_exception_arg_2 = const_str_digest_216bbff8b717a029efaf28eba2ad0c36;
                frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1807;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_RuntimeError, call_args );
                }

                assert( !(tmp_raise_type_2 == NULL) );
                exception_type = tmp_raise_type_2;
                exception_lineno = 1807;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            CHECK_OBJECT( var_offset );
            tmp_args_element_name_1 = var_offset;
            frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1811;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_rewriteLastShortToLong, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1811;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_mvar_value_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f );
            if ( tmp_source_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1812;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_seek );
            Py_DECREF( tmp_source_name_2 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1812;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_args_element_name_2 = const_int_neg_10;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1812;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_source_name_4 = tmp_mvar_value_1;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_SEEK_CUR );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1812;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1812;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1812;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_writeShort );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1813;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_called_name_2 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1813;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_source_name_6 = tmp_mvar_value_2;
            tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_LONG );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 1813;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1813;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1813;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_7;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_9;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_f );
            if ( tmp_source_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1814;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_seek );
            Py_DECREF( tmp_source_name_7 );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1814;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_args_element_name_5 = const_int_pos_8;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_3 == NULL )
            {
                Py_DECREF( tmp_called_name_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1814;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_source_name_9 = tmp_mvar_value_3;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_SEEK_CUR );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 1814;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1814;
            {
                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1814;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_3;
            CHECK_OBJECT( par_isShort );
            tmp_truth_name_3 = CHECK_IF_TRUE( par_isShort );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1815;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_5 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_7;
                CHECK_OBJECT( par_self );
                tmp_called_instance_4 = par_self;
                CHECK_OBJECT( var_offset );
                tmp_args_element_name_7 = var_offset;
                frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1816;
                {
                    PyObject *call_args[] = { tmp_args_element_name_7 };
                    tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_rewriteLastShort, call_args );
                }

                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1816;
                    type_description_1 = "oooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            goto branch_end_4;
            branch_no_4:;
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_8;
                CHECK_OBJECT( par_self );
                tmp_called_instance_5 = par_self;
                CHECK_OBJECT( var_offset );
                tmp_args_element_name_8 = var_offset;
                frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame.f_lineno = 1818;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8 };
                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_rewriteLastLong, call_args );
                }

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1818;
                    type_description_1 = "oooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_end_4:;
        }
        branch_end_2:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1801;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f8e19cb72f58afe34bd7fbae29d60efd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f8e19cb72f58afe34bd7fbae29d60efd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f8e19cb72f58afe34bd7fbae29d60efd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f8e19cb72f58afe34bd7fbae29d60efd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f8e19cb72f58afe34bd7fbae29d60efd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f8e19cb72f58afe34bd7fbae29d60efd,
        type_description_1,
        par_self,
        par_count,
        par_isShort,
        par_isLong,
        var_i,
        var_offset
    );


    // Release cached frame.
    if ( frame_f8e19cb72f58afe34bd7fbae29d60efd == cache_frame_f8e19cb72f58afe34bd7fbae29d60efd )
    {
        Py_DECREF( frame_f8e19cb72f58afe34bd7fbae29d60efd );
    }
    cache_frame_f8e19cb72f58afe34bd7fbae29d60efd = NULL;

    assertFrameObject( frame_f8e19cb72f58afe34bd7fbae29d60efd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_91_fixOffsets );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    CHECK_OBJECT( (PyObject *)par_isShort );
    Py_DECREF( par_isShort );
    par_isShort = NULL;

    CHECK_OBJECT( (PyObject *)par_isLong );
    Py_DECREF( par_isLong );
    par_isLong = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    CHECK_OBJECT( (PyObject *)par_isShort );
    Py_DECREF( par_isShort );
    par_isShort = NULL;

    CHECK_OBJECT( (PyObject *)par_isLong );
    Py_DECREF( par_isLong );
    par_isLong = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_91_fixOffsets );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$TiffImagePlugin$$$function_92__save_all( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_im = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_filename = python_pars[ 2 ];
    PyObject *var_encoderinfo = NULL;
    PyObject *var_encoderconfig = NULL;
    PyObject *var_append_images = NULL;
    PyObject *var_cur_idx = NULL;
    PyObject *var_tf = NULL;
    PyObject *var_ims = NULL;
    PyObject *var_nfr = NULL;
    PyObject *var_idx = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_cbccd8829ad9c2a0cbafe9ed5793eaa1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    static struct Nuitka_FrameObject *cache_frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, codeobj_cbccd8829ad9c2a0cbafe9ed5793eaa1, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 = cache_frame_cbccd8829ad9c2a0cbafe9ed5793eaa1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_im );
        tmp_source_name_1 = par_im;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_encoderinfo );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1822;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1822;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_copy );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1822;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_encoderinfo == NULL );
        var_encoderinfo = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_im );
        tmp_source_name_2 = par_im;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_encoderconfig );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1823;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_encoderconfig == NULL );
        var_encoderconfig = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_call_arg_element_2;
        CHECK_OBJECT( var_encoderinfo );
        tmp_called_instance_2 = var_encoderinfo;
        tmp_call_arg_element_1 = const_str_plain_append_images;
        tmp_call_arg_element_2 = PyList_New( 0 );
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1824;
        {
            PyObject *call_args[] = { tmp_call_arg_element_1, tmp_call_arg_element_2 };
            tmp_list_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_call_arg_element_2 );
        if ( tmp_list_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1824;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = PySequence_List( tmp_list_arg_1 );
        Py_DECREF( tmp_list_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1824;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_append_images == NULL );
        var_append_images = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_attribute_name_1;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( par_im );
        tmp_source_name_3 = par_im;
        tmp_attribute_name_1 = const_str_plain_n_frames;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_3, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1825;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1825;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_append_images );
        tmp_operand_name_2 = var_append_images;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1825;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__save );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_save" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1826;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_im );
            tmp_args_element_name_1 = par_im;
            CHECK_OBJECT( par_fp );
            tmp_args_element_name_2 = par_fp;
            CHECK_OBJECT( par_filename );
            tmp_args_element_name_3 = par_filename;
            frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1826;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
            }

            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1826;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( par_im );
        tmp_called_instance_3 = par_im;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1828;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_tell );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1828;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_cur_idx == NULL );
        var_cur_idx = tmp_assign_source_4;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_AppendingTiffWriter );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_AppendingTiffWriter );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "AppendingTiffWriter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( par_fp );
        tmp_args_element_name_4 = par_fp;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1830;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_4 = tmp_with_1__source;
        tmp_called_name_3 = LOOKUP_SPECIAL( tmp_source_name_4, const_str_plain___enter__ );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1830;
        tmp_assign_source_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_3 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_5 = tmp_with_1__source;
        tmp_assign_source_7 = LOOKUP_SPECIAL( tmp_source_name_5, const_str_plain___exit__ );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_assign_source_8;
        tmp_assign_source_8 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_9 = tmp_with_1__enter;
        assert( var_tf == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_tf = tmp_assign_source_9;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_im );
        tmp_list_element_1 = par_im;
        tmp_left_name_1 = PyList_New( 1 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
        CHECK_OBJECT( var_append_images );
        tmp_right_name_1 = var_append_images;
        tmp_iter_arg_1 = BINARY_OPERATION_ADD_LIST_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1831;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1831;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_5;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_10;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_11 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooo";
                exception_lineno = 1831;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_12 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_ims;
            var_ims = tmp_assign_source_12;
            Py_INCREF( var_ims );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_encoderinfo );
        tmp_assattr_name_1 = var_encoderinfo;
        CHECK_OBJECT( var_ims );
        tmp_assattr_target_1 = var_ims;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_encoderinfo, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1832;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( var_encoderconfig );
        tmp_assattr_name_2 = var_encoderconfig;
        CHECK_OBJECT( var_ims );
        tmp_assattr_target_2 = var_ims;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_encoderconfig, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1833;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_attribute_name_2;
        CHECK_OBJECT( var_ims );
        tmp_source_name_6 = var_ims;
        tmp_attribute_name_2 = const_str_plain_n_frames;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_6, tmp_attribute_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1834;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1834;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_13;
            tmp_assign_source_13 = const_int_pos_1;
            {
                PyObject *old = var_nfr;
                var_nfr = tmp_assign_source_13;
                Py_INCREF( var_nfr );
                Py_XDECREF( old );
            }

        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( var_ims );
            tmp_source_name_7 = var_ims;
            tmp_assign_source_14 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_n_frames );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1837;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = var_nfr;
                var_nfr = tmp_assign_source_14;
                Py_XDECREF( old );
            }

        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT( var_nfr );
        tmp_xrange_low_1 = var_nfr;
        tmp_iter_arg_2 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1839;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1839;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooo";
                exception_lineno = 1839;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_17 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_17;
            Py_INCREF( var_idx );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( var_ims );
        tmp_called_instance_4 = var_ims;
        CHECK_OBJECT( var_idx );
        tmp_args_element_name_5 = var_idx;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1840;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_seek, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1840;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( var_ims );
        tmp_called_instance_5 = var_ims;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1841;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_load );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1841;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__save );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_save" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1842;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_7;
        }

        tmp_called_name_4 = tmp_mvar_value_3;
        CHECK_OBJECT( var_ims );
        tmp_args_element_name_6 = var_ims;
        CHECK_OBJECT( var_tf );
        tmp_args_element_name_7 = var_tf;
        CHECK_OBJECT( par_filename );
        tmp_args_element_name_8 = par_filename;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1842;
        {
            PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
        }

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1842;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( var_tf );
        tmp_called_instance_6 = var_tf;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1843;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_newFrame );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1843;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1839;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_6;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1831;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_5;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1830;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_assign_source_18;
            tmp_assign_source_18 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_18;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_4;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_args_element_name_11;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_9 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_10 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_11 = EXC_TRACEBACK(PyThreadState_GET());
            frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1830;
            {
                PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11 };
                tmp_operand_name_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1830;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_8;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
            Py_DECREF( tmp_operand_name_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1830;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_8;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1830;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame) frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_8;
            branch_no_4:;
        }
        goto branch_end_3;
        branch_no_3:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1830;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame) frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_8;
        branch_end_3:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_4;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_92__save_all );
    return NULL;
    // End of try:
    try_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_5;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_with_1__indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_5 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1830;
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_5 );
                Py_XDECREF( exception_keeper_value_5 );
                Py_XDECREF( exception_keeper_tb_5 );

                exception_lineno = 1830;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        branch_no_5:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_3;
    // End of try:
    try_end_5:;
    {
        nuitka_bool tmp_condition_result_6;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_6 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_6;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1830;
            tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1830;
                type_description_1 = "ooooooooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        branch_no_6:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_2;
    // End of try:
    try_end_6:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_7 == NULL )
    {
        exception_keeper_tb_7 = MAKE_TRACEBACK( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_keeper_lineno_7 );
    }
    else if ( exception_keeper_lineno_7 != 0 )
    {
        exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_keeper_lineno_7 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
    PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    // Tried code:
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT( par_im );
        tmp_called_instance_7 = par_im;
        CHECK_OBJECT( var_cur_idx );
        tmp_args_element_name_12 = var_cur_idx;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1845;
        {
            PyObject *call_args[] = { tmp_args_element_name_12 };
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_seek, call_args );
        }

        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1845;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_9;
        }
        Py_DECREF( tmp_call_result_7 );
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1829;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame) frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooooooooooo";
    goto try_except_handler_9;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_92__save_all );
    return NULL;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_7:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_13;
        CHECK_OBJECT( par_im );
        tmp_called_instance_8 = par_im;
        CHECK_OBJECT( var_cur_idx );
        tmp_args_element_name_13 = var_cur_idx;
        frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame.f_lineno = 1845;
        {
            PyObject *call_args[] = { tmp_args_element_name_13 };
            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_seek, call_args );
        }

        if ( tmp_call_result_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1845;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_8 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cbccd8829ad9c2a0cbafe9ed5793eaa1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cbccd8829ad9c2a0cbafe9ed5793eaa1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cbccd8829ad9c2a0cbafe9ed5793eaa1,
        type_description_1,
        par_im,
        par_fp,
        par_filename,
        var_encoderinfo,
        var_encoderconfig,
        var_append_images,
        var_cur_idx,
        var_tf,
        var_ims,
        var_nfr,
        var_idx
    );


    // Release cached frame.
    if ( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 == cache_frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 )
    {
        Py_DECREF( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );
    }
    cache_frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 = NULL;

    assertFrameObject( frame_cbccd8829ad9c2a0cbafe9ed5793eaa1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_92__save_all );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_im );
    Py_DECREF( par_im );
    par_im = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    CHECK_OBJECT( (PyObject *)var_encoderinfo );
    Py_DECREF( var_encoderinfo );
    var_encoderinfo = NULL;

    CHECK_OBJECT( (PyObject *)var_encoderconfig );
    Py_DECREF( var_encoderconfig );
    var_encoderconfig = NULL;

    CHECK_OBJECT( (PyObject *)var_append_images );
    Py_DECREF( var_append_images );
    var_append_images = NULL;

    Py_XDECREF( var_cur_idx );
    var_cur_idx = NULL;

    Py_XDECREF( var_tf );
    var_tf = NULL;

    Py_XDECREF( var_ims );
    var_ims = NULL;

    Py_XDECREF( var_nfr );
    var_nfr = NULL;

    Py_XDECREF( var_idx );
    var_idx = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_im );
    Py_DECREF( par_im );
    par_im = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_filename );
    Py_DECREF( par_filename );
    par_filename = NULL;

    Py_XDECREF( var_encoderinfo );
    var_encoderinfo = NULL;

    Py_XDECREF( var_encoderconfig );
    var_encoderconfig = NULL;

    Py_XDECREF( var_append_images );
    var_append_images = NULL;

    Py_XDECREF( var_cur_idx );
    var_cur_idx = NULL;

    Py_XDECREF( var_tf );
    var_tf = NULL;

    Py_XDECREF( var_ims );
    var_ims = NULL;

    Py_XDECREF( var_nfr );
    var_nfr = NULL;

    Py_XDECREF( var_idx );
    var_idx = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin$$$function_92__save_all );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_10___eq__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_10___eq__,
        const_str_plain___eq__,
#if PYTHON_VERSION >= 300
        const_str_digest_52368654d670f3e38c52128c5b7acf14,
#endif
        codeobj_a6b7d6f1fc8c98e9a6c227da842fcb5f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_11__delegate,
        const_str_plain__delegate,
#if PYTHON_VERSION >= 300
        const_str_digest_fb9886489ecbc572ce067549d373a925,
#endif
        codeobj_b06de1521e8626708430cb3d8bc83282,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_11__delegate$$$function_1_delegate,
        const_str_plain_delegate,
#if PYTHON_VERSION >= 300
        const_str_digest_2a66c5c8df4a8d058612c351b526d38e,
#endif
        codeobj_f4fc4ec5ab0aa4e9c041063b94979b8b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_12___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_12___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_2ee6e2c0785e264d7b99ca6b70edc256,
#endif
        codeobj_ef2bd1a8914c793343d87e28cdbe4e51,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_33a666ca376c265b06b92e0797b8830b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_13_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_13_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_30cb60b67765334b2b295f3024c62ea3,
#endif
        codeobj_2ed633868cc02c462b5110fe63984608,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_14_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_14_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_30cb60b67765334b2b295f3024c62ea3,
#endif
        codeobj_b4d1665cd192f0f66496d609206d92c0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_15_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_15_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_30cb60b67765334b2b295f3024c62ea3,
#endif
        codeobj_7931ebd4c5e42ec165d2cf6bbf8a4292,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_16_legacy_api(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_16_legacy_api,
        const_str_plain_legacy_api,
#if PYTHON_VERSION >= 300
        const_str_digest_d7e629bfb69eb6b0fec8b50cbe62c91a,
#endif
        codeobj_7e232219f718db02f73592a2d5df0d32,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_17_reset(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_17_reset,
        const_str_plain_reset,
#if PYTHON_VERSION >= 300
        const_str_digest_d13b6e88161c381b75c90a7d8ae9490c,
#endif
        codeobj_cee9afab1d0baacb6b732e90d6fcfff8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_18___str__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_18___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_ac7ecfa5afac9d9cba7088893119bbcf,
#endif
        codeobj_27c9ea1e69d26b3104f92269aa08e1c7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_19_named(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_19_named,
        const_str_plain_named,
#if PYTHON_VERSION >= 300
        const_str_digest_944d2b0908af9c329cdc6dd3113d910b,
#endif
        codeobj_80d5329d7d171701e770a3cc5a3450f4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_a0baa4bb80808920b329f10b45c1da8f,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_1__accept(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_1__accept,
        const_str_plain__accept,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_2575d1fafa5ee2e0a350462a2206e554,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_20___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_20___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 300
        const_str_digest_014e0017b50029be569b14e24a36b93e,
#endif
        codeobj_e982f86f735f95188b8655c4a12d9a58,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_21___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_21___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_77beeccf348e971ef8b7b5b7a70029bb,
#endif
        codeobj_f726153c2ab688313fb6192b64a165a5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_22___contains__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_22___contains__,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 300
        const_str_digest_04c5939470391af46f913f0b1a887918,
#endif
        codeobj_d6ede18a8fd32f09345e1d9a4b57894b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_23_has_key(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_23_has_key,
        const_str_plain_has_key,
#if PYTHON_VERSION >= 300
        const_str_digest_407a4bcbc3e14920848d36554dfc4526,
#endif
        codeobj_65acf2f2b8b04bc5eb83e472984337e9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_24___setitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_24___setitem__,
        const_str_plain___setitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_c474ef2553f0b1a6f297474abe5e20b0,
#endif
        codeobj_e7887f7acbd628c31ede8823e04e6a38,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_25__setitem(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_25__setitem,
        const_str_plain__setitem,
#if PYTHON_VERSION >= 300
        const_str_digest_c36da39c7c65e54f3d98a9d859aab6b7,
#endif
        codeobj_e501b4d2298b52f36845c1ee1accf36f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_26___delitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_26___delitem__,
        const_str_plain___delitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_08debf0f4bbd8ad2aacfe5bce50b4adf,
#endif
        codeobj_40c435ff47b196c1a57aa3df647a8daf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_27___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_27___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 300
        const_str_digest_0f4650bf2ae33c80f9df4332c00b6710,
#endif
        codeobj_f26dce26fdc64eea13374b4cadf88e86,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_28__unpack(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_28__unpack,
        const_str_plain__unpack,
#if PYTHON_VERSION >= 300
        const_str_digest_80414d74ed3d67cc57fcf28a6508ca62,
#endif
        codeobj_ac7e3ef1c57c07915ccc7f53d7f3969e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_29__pack(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_29__pack,
        const_str_plain__pack,
#if PYTHON_VERSION >= 300
        const_str_digest_92e78cf1d2c84a6d023d60c11ff5861d,
#endif
        codeobj_342317ae8ab3bd9edb224f8d7af0b825,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_2__limit_rational(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_2__limit_rational,
        const_str_plain__limit_rational,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_20ecfd8a32c6bfd8f918732e60620813,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_30__register_loader,
        const_str_plain__register_loader,
#if PYTHON_VERSION >= 300
        const_str_digest_3a3999943d59392ff6584d751eab9554,
#endif
        codeobj_bcce158a4d6f41ca9253c76c1e1be241,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_30__register_loader$$$function_1_decorator,
        const_str_plain_decorator,
#if PYTHON_VERSION >= 300
        const_str_digest_2557e9b1861c939dc2d1c2b5ae3582e9,
#endif
        codeobj_fdd8a8df3a67830324707201830c0715,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        2
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_31__register_writer,
        const_str_plain__register_writer,
#if PYTHON_VERSION >= 300
        const_str_digest_1d62906af8266e02beba793abbc82c42,
#endif
        codeobj_c82772004a87c6a7bb35738eb45b3817,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_31__register_writer$$$function_1_decorator,
        const_str_plain_decorator,
#if PYTHON_VERSION >= 300
        const_str_digest_1b059c50a2a4db2c0252d885bfadbd0c,
#endif
        codeobj_10d42498402b62ece1d8beff9457b6f1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_32__register_basic,
        const_str_plain__register_basic,
#if PYTHON_VERSION >= 300
        const_str_digest_7f1557a96760768a0c43c9c1d8bf4c7b,
#endif
        codeobj_e5c941007fe38e475d700bffe0369461,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_04068613b851f119a2c692e8106c0743,
#endif
        codeobj_1f99c1e8717f64044a988507720a75a9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        2
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_32__register_basic$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_04068613b851f119a2c692e8106c0743,
#endif
        codeobj_967aaeb57ab3190287d08779e3961bb3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_33_load_byte( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_33_load_byte,
        const_str_plain_load_byte,
#if PYTHON_VERSION >= 300
        const_str_digest_3f3fe8ff4c40ed11dd6dd13c59c587ec,
#endif
        codeobj_0efedaccea387e79db3b8b27feb02e66,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_34_write_byte(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_34_write_byte,
        const_str_plain_write_byte,
#if PYTHON_VERSION >= 300
        const_str_digest_8384c3bce089a02838fd5d8937848994,
#endif
        codeobj_035016e5fd5e65a1f3524a185e374970,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_35_load_string( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_35_load_string,
        const_str_plain_load_string,
#if PYTHON_VERSION >= 300
        const_str_digest_41b07b4518ea49499b1bef79841050af,
#endif
        codeobj_0082b00a12f39acfc510cc861342f685,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_36_write_string(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_36_write_string,
        const_str_plain_write_string,
#if PYTHON_VERSION >= 300
        const_str_digest_f5d70555e371b1faee5bc78e89c23755,
#endif
        codeobj_82e978eebf395d5b8225a7d16edcc456,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_37_load_rational,
        const_str_plain_load_rational,
#if PYTHON_VERSION >= 300
        const_str_digest_cfc738c28d8e59a358b07bbd1a92dd87,
#endif
        codeobj_4ea75d3fead62b0ce8b58965be6b32fc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_37_load_rational$$$function_1_combine,
        const_str_plain_combine,
#if PYTHON_VERSION >= 300
        const_str_digest_0c186396ff51c44270c7e4708fce7395,
#endif
        codeobj_81a5b827dcac3539ef66c90c1d383515,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_38_write_rational(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_38_write_rational,
        const_str_plain_write_rational,
#if PYTHON_VERSION >= 300
        const_str_digest_81f304fc4abbeb6612c81962528c76b4,
#endif
        codeobj_7dc53a3a0068576ca023c47aa5fc74f0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_39_load_undefined( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_39_load_undefined,
        const_str_plain_load_undefined,
#if PYTHON_VERSION >= 300
        const_str_digest_bb7b5e999b69bc4f46f91ae4613836dd,
#endif
        codeobj_1340e8b393177fc8332501ef651ebf48,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_3__libtiff_version(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_3__libtiff_version,
        const_str_plain__libtiff_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_4cfa63263812b0b75a6a6431eeada605,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_40_write_undefined(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_40_write_undefined,
        const_str_plain_write_undefined,
#if PYTHON_VERSION >= 300
        const_str_digest_b821c8a6c88fde624ec9dd5fe90a30e1,
#endif
        codeobj_cabd68c42c300d0dc522e314acd51d59,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_41_load_signed_rational,
        const_str_plain_load_signed_rational,
#if PYTHON_VERSION >= 300
        const_str_digest_c984fe64ee3391b05d8c9a42c352de5c,
#endif
        codeobj_6587ff696723c46961c038013de53154,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_41_load_signed_rational$$$function_1_combine,
        const_str_plain_combine,
#if PYTHON_VERSION >= 300
        const_str_digest_fecdb345486ffbb193a74588571ea056,
#endif
        codeobj_aa66f459a2c09d2ffda5f44034204ebb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_42_write_signed_rational(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_42_write_signed_rational,
        const_str_plain_write_signed_rational,
#if PYTHON_VERSION >= 300
        const_str_digest_1ac09ffa8475c7a9b4fe42b53ca370a7,
#endif
        codeobj_b29504290a067901d73c63e9cfff37d9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_43__ensure_read(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_43__ensure_read,
        const_str_plain__ensure_read,
#if PYTHON_VERSION >= 300
        const_str_digest_88be5b33ddf030329f6e522287e232a3,
#endif
        codeobj_37bce8d2a322291925eb48a1396ad929,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_44_load(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_44_load,
        const_str_plain_load,
#if PYTHON_VERSION >= 300
        const_str_digest_0431b665d65283e91f036178c2bc5097,
#endif
        codeobj_6b83910b66967b3a1559d551a269f208,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_45_save(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_45_save,
        const_str_plain_save,
#if PYTHON_VERSION >= 300
        const_str_digest_7b1e18feff02a89a64010e059e45fa64,
#endif
        codeobj_3548084e462e583b5bdd1d2b003a978d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_46___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_46___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_1b14e851371247d7708137c79e11e7e3,
#endif
        codeobj_3e4237cb079ef39d375bd3fa69aa4fdf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_47_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_47_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_4d423ef79a0b823d0444d270265c8a85,
#endif
        codeobj_9a1dcabb83b8619d0d5db8838b3810f2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_48_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_48_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_4d423ef79a0b823d0444d270265c8a85,
#endif
        codeobj_0b85bc72a84f799ffd774d4be80b51ef,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_49_from_v2(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_49_from_v2,
        const_str_plain_from_v2,
#if PYTHON_VERSION >= 300
        const_str_digest_b2cc4a1f9603763f05092af4c78725ae,
#endif
        codeobj_1ff42e346a2754cb0ad082098d047812,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_d0d0426c97504a02e715ed5765c29e83,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_4___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_4___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_9447a377828d8a3eb4b071c4956af392,
#endif
        codeobj_2e1e4c1f5330055476ea5659804e1e40,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_2f16da6031cf29610c21ade0e458a954,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_50_to_v2(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_50_to_v2,
        const_str_plain_to_v2,
#if PYTHON_VERSION >= 300
        const_str_digest_b94af60b329741e4049ffdfbc9e815de,
#endif
        codeobj_a5b7f302af9cbae27961f6342cc65451,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_6baded4575fd14685f527600009eb0c0,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_51___contains__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_51___contains__,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 300
        const_str_digest_044a19d752b01d2c30c0a044313af1d8,
#endif
        codeobj_d778c9800471fd2e2a59d50a545b8ac4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_52___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_52___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 300
        const_str_digest_8461b59e3411b6ea466a968603cbae9d,
#endif
        codeobj_0d462b9205720dd46676aaf6d3150b05,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_53___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_53___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 300
        const_str_digest_9317aec61315258e1a9827aa603b38b1,
#endif
        codeobj_312fd463751bf0babfc46d8761c6b6e6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_54___setitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_54___setitem__,
        const_str_plain___setitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_5c0f840f8d91b28856d4b5f739bfca9c,
#endif
        codeobj_b7f9cb64c295e170ed666b9321bd9b77,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_55___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_55___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_e47dd4efad1227d32ad00623d2ee463a,
#endif
        codeobj_faad67dff9a716b224fa6a9002d2041c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_56__open(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_56__open,
        const_str_plain__open,
#if PYTHON_VERSION >= 300
        const_str_digest_cec14e1ec8821c6143797f46ba5e3e02,
#endif
        codeobj_09423594580680a7a194b3076286dbf6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_21528ffd3580853090d3b8344eadcd3b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_57_n_frames(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_57_n_frames,
        const_str_plain_n_frames,
#if PYTHON_VERSION >= 300
        const_str_digest_07f436bbe852ffe027be0902481c8ad9,
#endif
        codeobj_b8dda3ad7cb1be231c12f8823ec5b866,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_58_is_animated(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_58_is_animated,
        const_str_plain_is_animated,
#if PYTHON_VERSION >= 300
        const_str_digest_63e41ce0be1b33744234e91bbfd3694f,
#endif
        codeobj_a947e9874296c004bdad2116ab6f31a3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_59_seek(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_59_seek,
        const_str_plain_seek,
#if PYTHON_VERSION >= 300
        const_str_digest_e0f4892db296c0e267a27daafc79697f,
#endif
        codeobj_37cc5b83577da51cce196080465f5610,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_136523f5c699ca9430b9715a0cb12ad6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_5_numerator(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_5_numerator,
        const_str_plain_numerator,
#if PYTHON_VERSION >= 300
        const_str_digest_6409cd27149cc76e217dad17d2c5d661,
#endif
        codeobj_a0a828f24324513e60581b2711a251a1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_60__seek(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_60__seek,
        const_str_plain__seek,
#if PYTHON_VERSION >= 300
        const_str_digest_be1995f0b5ce3dd5fd965fac04e346bf,
#endif
        codeobj_08022af7f40313a8c4c985aee619a19b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_61_tell(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_61_tell,
        const_str_plain_tell,
#if PYTHON_VERSION >= 300
        const_str_digest_81a7a923e149038b01f4ba91e7c8685a,
#endif
        codeobj_e0a5956b232208871ef5771c8fbe1eac,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_fc67544e6dec665b7d6b3c69f65a32f8,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_62_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_62_size,
        const_str_plain_size,
#if PYTHON_VERSION >= 300
        const_str_digest_0ef719cd62029dceeb5c079ca1429379,
#endif
        codeobj_5ea41118e7c1019505b42897e95a9685,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_63_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_63_size,
        const_str_plain_size,
#if PYTHON_VERSION >= 300
        const_str_digest_0ef719cd62029dceeb5c079ca1429379,
#endif
        codeobj_acb470d44072f1d55d1eb2629adf0c6a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_64_load(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_64_load,
        const_str_plain_load,
#if PYTHON_VERSION >= 300
        const_str_digest_1f47d6fc66029446390a6aed590967bf,
#endif
        codeobj_726f2dfc8f4541083282f444923c412b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_65_load_end(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_65_load_end,
        const_str_plain_load_end,
#if PYTHON_VERSION >= 300
        const_str_digest_b242611e3516ff22f3e948b468ade6aa,
#endif
        codeobj_847b9e04fc3f5623f77010a62056a35f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_66__load_libtiff(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_66__load_libtiff,
        const_str_plain__load_libtiff,
#if PYTHON_VERSION >= 300
        const_str_digest_a6f4720cc42395719d6af2978be7f9c8,
#endif
        codeobj_42adb49f00dcb5a9d82a072b42606ab4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_973535bb2e882bd8a57330de2bae6594,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_67__setup(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_67__setup,
        const_str_plain__setup,
#if PYTHON_VERSION >= 300
        const_str_digest_55323581d0d7393f04c8370157275299,
#endif
        codeobj_b8632c5f1f36afe4f972176d21c2e38f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_34bc167a9662be20f946baa467e82adc,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_68__close__fp(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_68__close__fp,
        const_str_plain__close__fp,
#if PYTHON_VERSION >= 300
        const_str_digest_4f8471689e4eeb4a5c59934eb4e2b2f3,
#endif
        codeobj_f06f48873dfc793a4b11d897a07834fd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_69__save(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_69__save,
        const_str_plain__save,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_6cda4f89e1245682282b8adef14ab664,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_6_denominator(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_6_denominator,
        const_str_plain_denominator,
#if PYTHON_VERSION >= 300
        const_str_digest_82b28824d2cb77fb93e22da1c73c7177,
#endif
        codeobj_6689142d0b279dc6e8b0c25991ea3894,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_70___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_70___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_2959bfbaad00926382781285512fe82c,
#endif
        codeobj_c06d2b45287a725176290b1facdbaab6,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_71_setup(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_71_setup,
        const_str_plain_setup,
#if PYTHON_VERSION >= 300
        const_str_digest_3a8ea0240a25c759adfd355df23a25ea,
#endif
        codeobj_f9524a3076e2e7138f609e6c4ad55b8c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_72_finalize(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_72_finalize,
        const_str_plain_finalize,
#if PYTHON_VERSION >= 300
        const_str_digest_52bfe0cd9e44f2bbf534f910f2922204,
#endif
        codeobj_336f27bae7a685b3eca6c53d34597a82,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_73_newFrame(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_73_newFrame,
        const_str_plain_newFrame,
#if PYTHON_VERSION >= 300
        const_str_digest_56692adae372b22f2e783c2a5ca49779,
#endif
        codeobj_7b4bb5730ac50485820f76a51668d633,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_74___enter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_74___enter__,
        const_str_plain___enter__,
#if PYTHON_VERSION >= 300
        const_str_digest_eeea2ce515cd0ef3deb0643ca61099d5,
#endif
        codeobj_10fea9b02280a0e3e2c6033ca9175eaa,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_75___exit__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_75___exit__,
        const_str_plain___exit__,
#if PYTHON_VERSION >= 300
        const_str_digest_42a31ede9c68d42f92474f787ceccfc4,
#endif
        codeobj_b130e0032423f55156640809853856ee,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_76_tell(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_76_tell,
        const_str_plain_tell,
#if PYTHON_VERSION >= 300
        const_str_digest_bc9a5568d7961a4abcbcbc75b890c778,
#endif
        codeobj_fdc6c6e8844de9ab475a66708690dcde,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_77_seek(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_77_seek,
        const_str_plain_seek,
#if PYTHON_VERSION >= 300
        const_str_digest_0342d277e81a09f27cd252c2e24c1da9,
#endif
        codeobj_164e78496ac14e9b1d5386aa73ca2a62,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_78_goToEnd(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_78_goToEnd,
        const_str_plain_goToEnd,
#if PYTHON_VERSION >= 300
        const_str_digest_4e80b87021e352700620cbe3f7b4aaeb,
#endif
        codeobj_078177cbaf4ee42129545a54c84dce8c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_79_setEndian(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_79_setEndian,
        const_str_plain_setEndian,
#if PYTHON_VERSION >= 300
        const_str_digest_76e218b2e351f9fedc8ea3d7ca1beebb,
#endif
        codeobj_2856c68ddb52c15f325b6454ff818552,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_7_limit_rational(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_7_limit_rational,
        const_str_plain_limit_rational,
#if PYTHON_VERSION >= 300
        const_str_digest_ddffb0765d651100b56f0c8a14652e8b,
#endif
        codeobj_dbdab077daf7b2c03c61eecd4b003219,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        const_str_digest_bfca6850e4e625572e5e0b275db6f1c5,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_80_skipIFDs(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_80_skipIFDs,
        const_str_plain_skipIFDs,
#if PYTHON_VERSION >= 300
        const_str_digest_adc0d2ab4ca715d1067c3df53e57fce1,
#endif
        codeobj_267cb1a2ac702db4ed0b705f1221373a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_81_write(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_81_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 300
        const_str_digest_a8209851e86e25b9174074cc10865e85,
#endif
        codeobj_2ae5a0740f159777a3ce3a976648fe63,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_82_readShort(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_82_readShort,
        const_str_plain_readShort,
#if PYTHON_VERSION >= 300
        const_str_digest_5a086bbbd36cfacd08c303e7ece5be9c,
#endif
        codeobj_82996f6194c95ad02d897b5cb9f54f52,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_83_readLong(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_83_readLong,
        const_str_plain_readLong,
#if PYTHON_VERSION >= 300
        const_str_digest_1a960c42b63070e58475e386da68f151,
#endif
        codeobj_6cb860ca7c8db47431876b8f94c14c0c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong,
        const_str_plain_rewriteLastShortToLong,
#if PYTHON_VERSION >= 300
        const_str_digest_e5a5520d16084b1fa8690fea5fd54003,
#endif
        codeobj_4a5d34f527e95c432e45aa6b4807c32e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_85_rewriteLastShort(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_85_rewriteLastShort,
        const_str_plain_rewriteLastShort,
#if PYTHON_VERSION >= 300
        const_str_digest_d63fb117ffb46ff6cda4fb0e082808aa,
#endif
        codeobj_9c0321c0f03ab889f2e725dcee3d6bc2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_86_rewriteLastLong(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_86_rewriteLastLong,
        const_str_plain_rewriteLastLong,
#if PYTHON_VERSION >= 300
        const_str_digest_d563e1630064893d81f5c964d91100c8,
#endif
        codeobj_ed60a787d3aca02854acb57ad82f7fb9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_87_writeShort(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_87_writeShort,
        const_str_plain_writeShort,
#if PYTHON_VERSION >= 300
        const_str_digest_e59d036d5c01650be279801bdaec0cc4,
#endif
        codeobj_20bfb7154e4fda4fb602e7a2fadf65f5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_88_writeLong(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_88_writeLong,
        const_str_plain_writeLong,
#if PYTHON_VERSION >= 300
        const_str_digest_58486f122f0bfa598fdd55fe93a43522,
#endif
        codeobj_e506afd6b88e1ef3346114190f1afafc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_89_close(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_89_close,
        const_str_plain_close,
#if PYTHON_VERSION >= 300
        const_str_digest_b22de4bff5b4be2069d94c3971c8bce8,
#endif
        codeobj_0d6b4fb5870d5a5567f1835676abd3dc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_8___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_8___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_0e00713afa06076208509e5fd07311b4,
#endif
        codeobj_1ae13cc10216c3c56f8de6b175f63849,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_90_fixIFD(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_90_fixIFD,
        const_str_plain_fixIFD,
#if PYTHON_VERSION >= 300
        const_str_digest_13eb7bc9a5609c95771e02bd533dd9f6,
#endif
        codeobj_741ddc383480035d74106484182f19b9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_91_fixOffsets( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_91_fixOffsets,
        const_str_plain_fixOffsets,
#if PYTHON_VERSION >= 300
        const_str_digest_aa75aebb681891e596622e3da6ff8b94,
#endif
        codeobj_f8e19cb72f58afe34bd7fbae29d60efd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_92__save_all(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_92__save_all,
        const_str_plain__save_all,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_cbccd8829ad9c2a0cbafe9ed5793eaa1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_9___hash__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$TiffImagePlugin$$$function_9___hash__,
        const_str_plain___hash__,
#if PYTHON_VERSION >= 300
        const_str_digest_e91e67de774a34be043e8e8955a64230,
#endif
        codeobj_7cb7acefb66c9f4c713b0729737e8461,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$TiffImagePlugin,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_PIL$TiffImagePlugin =
{
    PyModuleDef_HEAD_INIT,
    "PIL.TiffImagePlugin",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( PIL$TiffImagePlugin )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_PIL$TiffImagePlugin );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("PIL.TiffImagePlugin: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("PIL.TiffImagePlugin: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("PIL.TiffImagePlugin: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initPIL$TiffImagePlugin" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_PIL$TiffImagePlugin = Py_InitModule4(
        "PIL.TiffImagePlugin",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module_PIL$TiffImagePlugin = PyModule_Create( &mdef_PIL$TiffImagePlugin );
#endif

    moduledict_PIL$TiffImagePlugin = MODULE_DICT( module_PIL$TiffImagePlugin );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict_PIL$TiffImagePlugin,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict_PIL$TiffImagePlugin,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict_PIL$TiffImagePlugin,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict_PIL$TiffImagePlugin,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module_PIL$TiffImagePlugin );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_digest_357d51dfc182b6fae5c38b3588a154f0, module_PIL$TiffImagePlugin );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var_k = NULL;
    PyObject *outline_0_var_v = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__bases_orig = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_dictcontraction$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_dictcontraction$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_dictcontraction$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_dictcontraction_1__$0 = NULL;
    PyObject *tmp_dictcontraction_1__contraction = NULL;
    PyObject *tmp_dictcontraction_1__iter_value_0 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    PyObject *tmp_import_from_3__module = NULL;
    PyObject *tmp_import_from_4__module = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_e81c3e3366ae57b402c59dcc068b3b8a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    struct Nuitka_FrameObject *frame_c9019b5d8a2eb1708c114c2d4187b84a_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *tmp_dictset_value;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    static struct Nuitka_FrameObject *cache_frame_c9019b5d8a2eb1708c114c2d4187b84a_2 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_PIL$TiffImagePlugin_299 = NULL;
    struct Nuitka_FrameObject *frame_822097513f144e173a2602fbaf394b97_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_822097513f144e173a2602fbaf394b97_3 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *locals_PIL$TiffImagePlugin_416 = NULL;
    struct Nuitka_FrameObject *frame_fe73e589bb33c902ac4cf7156b7f9250_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fe73e589bb33c902ac4cf7156b7f9250_4 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *locals_PIL$TiffImagePlugin_866 = NULL;
    struct Nuitka_FrameObject *frame_5847501e044c9194e44bab7d6542bd15_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5847501e044c9194e44bab7d6542bd15_5 = NULL;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *locals_PIL$TiffImagePlugin_959 = NULL;
    struct Nuitka_FrameObject *frame_484f0f48054c26892011d4b0dcb4ed0b_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_484f0f48054c26892011d4b0dcb4ed0b_6 = NULL;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *locals_PIL$TiffImagePlugin_1578 = NULL;
    struct Nuitka_FrameObject *frame_225b72f8e18a7713185e90c0bf993f32_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_225b72f8e18a7713185e90c0bf993f32_7 = NULL;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_e81c3e3366ae57b402c59dcc068b3b8a = MAKE_MODULE_FRAME( codeobj_e81c3e3366ae57b402c59dcc068b3b8a, module_PIL$TiffImagePlugin );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_e81c3e3366ae57b402c59dcc068b3b8a );
    assert( Py_REFCNT( frame_e81c3e3366ae57b402c59dcc068b3b8a ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 42;
        tmp_assign_source_4 = PyImport_ImportModule("__future__");
        assert( !(tmp_assign_source_4 == NULL) );
        assert( tmp_import_from_1__module == NULL );
        Py_INCREF( tmp_assign_source_4 );
        tmp_import_from_1__module = tmp_assign_source_4;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_1 = tmp_import_from_1__module;
        tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 42;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_2 = tmp_import_from_1__module;
        tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_print_function );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 42;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_print_function, tmp_assign_source_6 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_empty;
        tmp_globals_name_1 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_a80d59011539b37ab459d72c6fc2a53e_tuple;
        tmp_level_name_1 = const_int_pos_1;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 44;
        tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_2__module == NULL );
        tmp_import_from_2__module = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_3 = tmp_import_from_2__module;
        if ( PyModule_Check( tmp_import_name_from_3 ) )
        {
           tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)MODULE_DICT(tmp_import_name_from_3),
                const_str_plain_Image,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_Image );
        }

        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 44;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image, tmp_assign_source_8 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_4 = tmp_import_from_2__module;
        if ( PyModule_Check( tmp_import_name_from_4 ) )
        {
           tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)MODULE_DICT(tmp_import_name_from_4),
                const_str_plain_ImageFile,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_ImageFile );
        }

        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 44;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFile, tmp_assign_source_9 );
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_5 = tmp_import_from_2__module;
        if ( PyModule_Check( tmp_import_name_from_5 ) )
        {
           tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)MODULE_DICT(tmp_import_name_from_5),
                const_str_plain_ImagePalette,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_ImagePalette );
        }

        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 44;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImagePalette, tmp_assign_source_10 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_6 = tmp_import_from_2__module;
        if ( PyModule_Check( tmp_import_name_from_6 ) )
        {
           tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)MODULE_DICT(tmp_import_name_from_6),
                const_str_plain_TiffTags,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_TiffTags );
        }

        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 44;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags, tmp_assign_source_11 );
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain__binary;
        tmp_globals_name_2 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = const_tuple_str_plain_i8_str_plain_o8_tuple;
        tmp_level_name_2 = const_int_pos_1;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 45;
        tmp_assign_source_12 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_3__module == NULL );
        tmp_import_from_3__module = tmp_assign_source_12;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT( tmp_import_from_3__module );
        tmp_import_name_from_7 = tmp_import_from_3__module;
        if ( PyModule_Check( tmp_import_name_from_7 ) )
        {
           tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)MODULE_DICT(tmp_import_name_from_7),
                const_str_plain_i8,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_i8 );
        }

        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 45;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_i8, tmp_assign_source_13 );
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT( tmp_import_from_3__module );
        tmp_import_name_from_8 = tmp_import_from_3__module;
        if ( PyModule_Check( tmp_import_name_from_8 ) )
        {
           tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)MODULE_DICT(tmp_import_name_from_8),
                const_str_plain_o8,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_o8 );
        }

        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 45;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_o8, tmp_assign_source_14 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain__util;
        tmp_globals_name_3 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = const_tuple_str_plain_py3_tuple;
        tmp_level_name_3 = const_int_pos_1;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 46;
        tmp_import_name_from_9 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
        if ( tmp_import_name_from_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 46;

            goto frame_exception_exit_1;
        }
        if ( PyModule_Check( tmp_import_name_from_9 ) )
        {
           tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_9,
                (PyObject *)MODULE_DICT(tmp_import_name_from_9),
                const_str_plain_py3,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_py3 );
        }

        Py_DECREF( tmp_import_name_from_9 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 46;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3, tmp_assign_source_15 );
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_fractions;
        tmp_globals_name_4 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = const_tuple_str_plain_Fraction_tuple;
        tmp_level_name_4 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 48;
        tmp_import_name_from_10 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
        if ( tmp_import_name_from_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_Fraction );
        Py_DECREF( tmp_import_name_from_10 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Fraction, tmp_assign_source_16 );
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_numbers;
        tmp_globals_name_5 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = const_tuple_str_plain_Number_str_plain_Rational_tuple;
        tmp_level_name_5 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 49;
        tmp_assign_source_17 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_4__module == NULL );
        tmp_import_from_4__module = tmp_assign_source_17;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_import_name_from_11;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_11 = tmp_import_from_4__module;
        tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_Number );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Number, tmp_assign_source_18 );
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_12;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_12 = tmp_import_from_4__module;
        tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_Rational );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Rational, tmp_assign_source_19 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_io;
        tmp_globals_name_6 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = Py_None;
        tmp_level_name_6 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 51;
        tmp_assign_source_20 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
        if ( tmp_assign_source_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 51;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_20 );
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_itertools;
        tmp_globals_name_7 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = Py_None;
        tmp_level_name_7 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 52;
        tmp_assign_source_21 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
        assert( !(tmp_assign_source_21 == NULL) );
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_21 );
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = const_str_plain_os;
        tmp_globals_name_8 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = Py_None;
        tmp_level_name_8 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 53;
        tmp_assign_source_22 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 53;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_22 );
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_name_9;
        PyObject *tmp_locals_name_9;
        PyObject *tmp_fromlist_name_9;
        PyObject *tmp_level_name_9;
        tmp_name_name_9 = const_str_plain_struct;
        tmp_globals_name_9 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_9 = Py_None;
        tmp_fromlist_name_9 = Py_None;
        tmp_level_name_9 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 54;
        tmp_assign_source_23 = IMPORT_MODULE5( tmp_name_name_9, tmp_globals_name_9, tmp_locals_name_9, tmp_fromlist_name_9, tmp_level_name_9 );
        if ( tmp_assign_source_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 54;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_struct, tmp_assign_source_23 );
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_name_name_10;
        PyObject *tmp_globals_name_10;
        PyObject *tmp_locals_name_10;
        PyObject *tmp_fromlist_name_10;
        PyObject *tmp_level_name_10;
        tmp_name_name_10 = const_str_plain_sys;
        tmp_globals_name_10 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_10 = Py_None;
        tmp_fromlist_name_10 = Py_None;
        tmp_level_name_10 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 55;
        tmp_assign_source_24 = IMPORT_MODULE5( tmp_name_name_10, tmp_globals_name_10, tmp_locals_name_10, tmp_fromlist_name_10, tmp_level_name_10 );
        assert( !(tmp_assign_source_24 == NULL) );
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_24 );
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_name_name_11;
        PyObject *tmp_globals_name_11;
        PyObject *tmp_locals_name_11;
        PyObject *tmp_fromlist_name_11;
        PyObject *tmp_level_name_11;
        tmp_name_name_11 = const_str_plain_warnings;
        tmp_globals_name_11 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_11 = Py_None;
        tmp_fromlist_name_11 = Py_None;
        tmp_level_name_11 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 56;
        tmp_assign_source_25 = IMPORT_MODULE5( tmp_name_name_11, tmp_globals_name_11, tmp_locals_name_11, tmp_fromlist_name_11, tmp_level_name_11 );
        if ( tmp_assign_source_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 56;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_25 );
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_name_name_12;
        PyObject *tmp_globals_name_12;
        PyObject *tmp_locals_name_12;
        PyObject *tmp_fromlist_name_12;
        PyObject *tmp_level_name_12;
        tmp_name_name_12 = const_str_digest_4af59da437d2f21ccb08423e5fb98074;
        tmp_globals_name_12 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_12 = Py_None;
        tmp_fromlist_name_12 = Py_None;
        tmp_level_name_12 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 57;
        tmp_assign_source_26 = IMPORT_MODULE5( tmp_name_name_12, tmp_globals_name_12, tmp_locals_name_12, tmp_fromlist_name_12, tmp_level_name_12 );
        if ( tmp_assign_source_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_distutils, tmp_assign_source_26 );
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_import_name_from_13;
        PyObject *tmp_name_name_13;
        PyObject *tmp_globals_name_13;
        PyObject *tmp_locals_name_13;
        PyObject *tmp_fromlist_name_13;
        PyObject *tmp_level_name_13;
        tmp_name_name_13 = const_str_plain_TiffTags;
        tmp_globals_name_13 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_13 = Py_None;
        tmp_fromlist_name_13 = const_tuple_str_plain_TYPES_tuple;
        tmp_level_name_13 = const_int_pos_1;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 59;
        tmp_import_name_from_13 = IMPORT_MODULE5( tmp_name_name_13, tmp_globals_name_13, tmp_locals_name_13, tmp_fromlist_name_13, tmp_level_name_13 );
        if ( tmp_import_name_from_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        if ( PyModule_Check( tmp_import_name_from_13 ) )
        {
           tmp_assign_source_27 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_13,
                (PyObject *)MODULE_DICT(tmp_import_name_from_13),
                const_str_plain_TYPES,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_27 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_TYPES );
        }

        Py_DECREF( tmp_import_name_from_13 );
        if ( tmp_assign_source_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TYPES, tmp_assign_source_27 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_import_name_from_14;
        PyObject *tmp_name_name_14;
        PyObject *tmp_globals_name_14;
        PyObject *tmp_locals_name_14;
        PyObject *tmp_fromlist_name_14;
        PyObject *tmp_level_name_14;
        tmp_name_name_14 = const_str_digest_dc6974bae1533a27ce9599cdf14ca60e;
        tmp_globals_name_14 = (PyObject *)moduledict_PIL$TiffImagePlugin;
        tmp_locals_name_14 = Py_None;
        tmp_fromlist_name_14 = const_tuple_str_plain_MutableMapping_tuple;
        tmp_level_name_14 = const_int_0;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 63;
        tmp_import_name_from_14 = IMPORT_MODULE5( tmp_name_name_14, tmp_globals_name_14, tmp_locals_name_14, tmp_fromlist_name_14, tmp_level_name_14 );
        if ( tmp_import_name_from_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 63;

            goto try_except_handler_5;
        }
        tmp_assign_source_28 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_MutableMapping );
        Py_DECREF( tmp_import_name_from_14 );
        if ( tmp_assign_source_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 63;

            goto try_except_handler_5;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MutableMapping, tmp_assign_source_28 );
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_e81c3e3366ae57b402c59dcc068b3b8a, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != 0 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_e81c3e3366ae57b402c59dcc068b3b8a, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 64;

            goto try_except_handler_6;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_import_name_from_15;
            PyObject *tmp_name_name_15;
            PyObject *tmp_globals_name_15;
            PyObject *tmp_locals_name_15;
            PyObject *tmp_fromlist_name_15;
            PyObject *tmp_level_name_15;
            tmp_name_name_15 = const_str_plain_collections;
            tmp_globals_name_15 = (PyObject *)moduledict_PIL$TiffImagePlugin;
            tmp_locals_name_15 = Py_None;
            tmp_fromlist_name_15 = const_tuple_str_plain_MutableMapping_tuple;
            tmp_level_name_15 = const_int_0;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 66;
            tmp_import_name_from_15 = IMPORT_MODULE5( tmp_name_name_15, tmp_globals_name_15, tmp_locals_name_15, tmp_fromlist_name_15, tmp_level_name_15 );
            if ( tmp_import_name_from_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 66;

                goto try_except_handler_6;
            }
            tmp_assign_source_29 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_MutableMapping );
            Py_DECREF( tmp_import_name_from_15 );
            if ( tmp_assign_source_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 66;

                goto try_except_handler_6;
            }
            UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MutableMapping, tmp_assign_source_29 );
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 61;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame) frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = exception_tb->tb_lineno;

        goto try_except_handler_6;
        branch_end_1:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_5;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_5:;
    {
        PyObject *tmp_assign_source_30;
        tmp_assign_source_30 = const_str_digest_3e24da836032a5bee4f5b55c36ec831d;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_30 );
    }
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = Py_False;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DEBUG, tmp_assign_source_31 );
    }
    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = Py_False;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_READ_LIBTIFF, tmp_assign_source_32 );
    }
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = Py_False;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_WRITE_LIBTIFF, tmp_assign_source_33 );
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = Py_True;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFD_LEGACY_API, tmp_assign_source_34 );
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = const_bytes_digest_b65fc0f8807dad4b45c77b9fe922011e;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II, tmp_assign_source_35 );
    }
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = const_bytes_digest_a3483698f0fbc8406da4d0932ca3ee34;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM, tmp_assign_source_36 );
    }
    {
        PyObject *tmp_assign_source_37;
        tmp_assign_source_37 = const_int_pos_256;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEWIDTH, tmp_assign_source_37 );
    }
    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = const_int_pos_257;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGELENGTH, tmp_assign_source_38 );
    }
    {
        PyObject *tmp_assign_source_39;
        tmp_assign_source_39 = const_int_pos_258;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_BITSPERSAMPLE, tmp_assign_source_39 );
    }
    {
        PyObject *tmp_assign_source_40;
        tmp_assign_source_40 = const_int_pos_259;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION, tmp_assign_source_40 );
    }
    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = const_int_pos_262;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PHOTOMETRIC_INTERPRETATION, tmp_assign_source_41 );
    }
    {
        PyObject *tmp_assign_source_42;
        tmp_assign_source_42 = const_int_pos_266;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_FILLORDER, tmp_assign_source_42 );
    }
    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = const_int_pos_270;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEDESCRIPTION, tmp_assign_source_43 );
    }
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = const_int_pos_273;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPOFFSETS, tmp_assign_source_44 );
    }
    {
        PyObject *tmp_assign_source_45;
        tmp_assign_source_45 = const_int_pos_277;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAMPLESPERPIXEL, tmp_assign_source_45 );
    }
    {
        PyObject *tmp_assign_source_46;
        tmp_assign_source_46 = const_int_pos_278;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ROWSPERSTRIP, tmp_assign_source_46 );
    }
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = const_int_pos_279;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_STRIPBYTECOUNTS, tmp_assign_source_47 );
    }
    {
        PyObject *tmp_assign_source_48;
        tmp_assign_source_48 = const_int_pos_282;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_X_RESOLUTION, tmp_assign_source_48 );
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = const_int_pos_283;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Y_RESOLUTION, tmp_assign_source_49 );
    }
    {
        PyObject *tmp_assign_source_50;
        tmp_assign_source_50 = const_int_pos_284;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PLANAR_CONFIGURATION, tmp_assign_source_50 );
    }
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = const_int_pos_296;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_RESOLUTION_UNIT, tmp_assign_source_51 );
    }
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = const_int_pos_305;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SOFTWARE, tmp_assign_source_52 );
    }
    {
        PyObject *tmp_assign_source_53;
        tmp_assign_source_53 = const_int_pos_306;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_DATE_TIME, tmp_assign_source_53 );
    }
    {
        PyObject *tmp_assign_source_54;
        tmp_assign_source_54 = const_int_pos_315;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ARTIST, tmp_assign_source_54 );
    }
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = const_int_pos_317;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PREDICTOR, tmp_assign_source_55 );
    }
    {
        PyObject *tmp_assign_source_56;
        tmp_assign_source_56 = const_int_pos_320;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COLORMAP, tmp_assign_source_56 );
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = const_int_pos_324;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TILEOFFSETS, tmp_assign_source_57 );
    }
    {
        PyObject *tmp_assign_source_58;
        tmp_assign_source_58 = const_int_pos_338;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_EXTRASAMPLES, tmp_assign_source_58 );
    }
    {
        PyObject *tmp_assign_source_59;
        tmp_assign_source_59 = const_int_pos_339;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAMPLEFORMAT, tmp_assign_source_59 );
    }
    {
        PyObject *tmp_assign_source_60;
        tmp_assign_source_60 = const_int_pos_347;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_JPEGTABLES, tmp_assign_source_60 );
    }
    {
        PyObject *tmp_assign_source_61;
        tmp_assign_source_61 = const_int_pos_33432;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COPYRIGHT, tmp_assign_source_61 );
    }
    {
        PyObject *tmp_assign_source_62;
        tmp_assign_source_62 = const_int_pos_33723;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IPTC_NAA_CHUNK, tmp_assign_source_62 );
    }
    {
        PyObject *tmp_assign_source_63;
        tmp_assign_source_63 = const_int_pos_34377;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PHOTOSHOP_CHUNK, tmp_assign_source_63 );
    }
    {
        PyObject *tmp_assign_source_64;
        tmp_assign_source_64 = const_int_pos_34675;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ICCPROFILE, tmp_assign_source_64 );
    }
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = const_int_pos_34665;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_EXIFIFD, tmp_assign_source_65 );
    }
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = const_int_pos_700;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_XMP, tmp_assign_source_66 );
    }
    {
        PyObject *tmp_assign_source_67;
        tmp_assign_source_67 = const_int_pos_50838;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEJ_META_DATA_BYTE_COUNTS, tmp_assign_source_67 );
    }
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = const_int_pos_50839;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IMAGEJ_META_DATA, tmp_assign_source_68 );
    }
    {
        PyObject *tmp_assign_source_69;
        tmp_assign_source_69 = PyDict_Copy( const_dict_3fb23a4eb603424df68849b8a14b810b );
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO, tmp_assign_source_69 );
    }
    {
        PyObject *tmp_assign_source_70;
        // Tried code:
        {
            PyObject *tmp_assign_source_71;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_mvar_value_3;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO );
            }

            CHECK_OBJECT( tmp_mvar_value_3 );
            tmp_called_instance_1 = tmp_mvar_value_3;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 138;
            tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 138;

                goto try_except_handler_7;
            }
            tmp_assign_source_71 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_71 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 138;

                goto try_except_handler_7;
            }
            assert( tmp_dictcontraction_1__$0 == NULL );
            tmp_dictcontraction_1__$0 = tmp_assign_source_71;
        }
        {
            PyObject *tmp_assign_source_72;
            tmp_assign_source_72 = PyDict_New();
            assert( tmp_dictcontraction_1__contraction == NULL );
            tmp_dictcontraction_1__contraction = tmp_assign_source_72;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_c9019b5d8a2eb1708c114c2d4187b84a_2, codeobj_c9019b5d8a2eb1708c114c2d4187b84a, module_PIL$TiffImagePlugin, sizeof(void *)+sizeof(void *) );
        frame_c9019b5d8a2eb1708c114c2d4187b84a_2 = cache_frame_c9019b5d8a2eb1708c114c2d4187b84a_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_73;
            CHECK_OBJECT( tmp_dictcontraction_1__$0 );
            tmp_next_source_1 = tmp_dictcontraction_1__$0;
            tmp_assign_source_73 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_73 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "oo";
                    exception_lineno = 138;
                    goto try_except_handler_8;
                }
            }

            {
                PyObject *old = tmp_dictcontraction_1__iter_value_0;
                tmp_dictcontraction_1__iter_value_0 = tmp_assign_source_73;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_74;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT( tmp_dictcontraction_1__iter_value_0 );
            tmp_iter_arg_2 = tmp_dictcontraction_1__iter_value_0;
            tmp_assign_source_74 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_74 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 138;
                type_description_2 = "oo";
                goto try_except_handler_9;
            }
            {
                PyObject *old = tmp_dictcontraction$tuple_unpack_1__source_iter;
                tmp_dictcontraction$tuple_unpack_1__source_iter = tmp_assign_source_74;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_dictcontraction$tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_dictcontraction$tuple_unpack_1__source_iter;
            tmp_assign_source_75 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_75 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_2 = "oo";
                exception_lineno = 138;
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_dictcontraction$tuple_unpack_1__element_1;
                tmp_dictcontraction$tuple_unpack_1__element_1 = tmp_assign_source_75;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_76;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_dictcontraction$tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_dictcontraction$tuple_unpack_1__source_iter;
            tmp_assign_source_76 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_76 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_2 = "oo";
                exception_lineno = 138;
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_dictcontraction$tuple_unpack_1__element_2;
                tmp_dictcontraction$tuple_unpack_1__element_2 = tmp_assign_source_76;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_dictcontraction$tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_dictcontraction$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_2 = "oo";
                        exception_lineno = 138;
                        goto try_except_handler_10;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_2 = "oo";
                exception_lineno = 138;
                goto try_except_handler_10;
            }
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_dictcontraction$tuple_unpack_1__source_iter );
        Py_DECREF( tmp_dictcontraction$tuple_unpack_1__source_iter );
        tmp_dictcontraction$tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_9;
        // End of try:
        try_end_7:;
        goto try_end_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_dictcontraction$tuple_unpack_1__element_1 );
        tmp_dictcontraction$tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_dictcontraction$tuple_unpack_1__element_2 );
        tmp_dictcontraction$tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_8;
        // End of try:
        try_end_8:;
        CHECK_OBJECT( (PyObject *)tmp_dictcontraction$tuple_unpack_1__source_iter );
        Py_DECREF( tmp_dictcontraction$tuple_unpack_1__source_iter );
        tmp_dictcontraction$tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_77;
            CHECK_OBJECT( tmp_dictcontraction$tuple_unpack_1__element_1 );
            tmp_assign_source_77 = tmp_dictcontraction$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_0_var_k;
                outline_0_var_k = tmp_assign_source_77;
                Py_INCREF( outline_0_var_k );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_dictcontraction$tuple_unpack_1__element_1 );
        tmp_dictcontraction$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_78;
            CHECK_OBJECT( tmp_dictcontraction$tuple_unpack_1__element_2 );
            tmp_assign_source_78 = tmp_dictcontraction$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_0_var_v;
                outline_0_var_v = tmp_assign_source_78;
                Py_INCREF( outline_0_var_v );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_dictcontraction$tuple_unpack_1__element_2 );
        tmp_dictcontraction$tuple_unpack_1__element_2 = NULL;

        CHECK_OBJECT( outline_0_var_k );
        tmp_dictset_value = outline_0_var_k;
        CHECK_OBJECT( tmp_dictcontraction_1__contraction );
        tmp_dictset_dict = tmp_dictcontraction_1__contraction;
        CHECK_OBJECT( outline_0_var_v );
        tmp_dictset_key = outline_0_var_v;
        tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 138;
            type_description_2 = "oo";
            goto try_except_handler_8;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 138;
            type_description_2 = "oo";
            goto try_except_handler_8;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_dictcontraction_1__contraction );
        tmp_assign_source_70 = tmp_dictcontraction_1__contraction;
        Py_INCREF( tmp_assign_source_70 );
        goto try_return_handler_8;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT( (PyObject *)tmp_dictcontraction_1__$0 );
        Py_DECREF( tmp_dictcontraction_1__$0 );
        tmp_dictcontraction_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_dictcontraction_1__contraction );
        Py_DECREF( tmp_dictcontraction_1__contraction );
        tmp_dictcontraction_1__contraction = NULL;

        Py_XDECREF( tmp_dictcontraction_1__iter_value_0 );
        tmp_dictcontraction_1__iter_value_0 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_dictcontraction_1__$0 );
        Py_DECREF( tmp_dictcontraction_1__$0 );
        tmp_dictcontraction_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_dictcontraction_1__contraction );
        Py_DECREF( tmp_dictcontraction_1__contraction );
        tmp_dictcontraction_1__contraction = NULL;

        Py_XDECREF( tmp_dictcontraction_1__iter_value_0 );
        tmp_dictcontraction_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_7;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_c9019b5d8a2eb1708c114c2d4187b84a_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_c9019b5d8a2eb1708c114c2d4187b84a_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_c9019b5d8a2eb1708c114c2d4187b84a_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_c9019b5d8a2eb1708c114c2d4187b84a_2,
            type_description_2,
            outline_0_var_k,
            outline_0_var_v
        );


        // Release cached frame.
        if ( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 == cache_frame_c9019b5d8a2eb1708c114c2d4187b84a_2 )
        {
            Py_DECREF( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );
        }
        cache_frame_c9019b5d8a2eb1708c114c2d4187b84a_2 = NULL;

        assertFrameObject( frame_c9019b5d8a2eb1708c114c2d4187b84a_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_7;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_7:;
        Py_XDECREF( outline_0_var_k );
        outline_0_var_k = NULL;

        Py_XDECREF( outline_0_var_v );
        outline_0_var_v = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_k );
        outline_0_var_k = NULL;

        Py_XDECREF( outline_0_var_v );
        outline_0_var_v = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 138;
        goto frame_exception_exit_1;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_COMPRESSION_INFO_REV, tmp_assign_source_70 );
    }
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_dict_key_5;
        PyObject *tmp_dict_value_5;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_dict_key_6;
        PyObject *tmp_dict_value_6;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_dict_key_7;
        PyObject *tmp_dict_value_7;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_dict_key_8;
        PyObject *tmp_dict_value_8;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_dict_key_9;
        PyObject *tmp_dict_value_9;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_dict_key_10;
        PyObject *tmp_dict_value_10;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_dict_key_11;
        PyObject *tmp_dict_value_11;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_dict_key_12;
        PyObject *tmp_dict_value_12;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_mvar_value_15;
        PyObject *tmp_dict_key_13;
        PyObject *tmp_dict_value_13;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_mvar_value_16;
        PyObject *tmp_dict_key_14;
        PyObject *tmp_dict_value_14;
        PyObject *tmp_tuple_element_14;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_dict_key_15;
        PyObject *tmp_dict_value_15;
        PyObject *tmp_tuple_element_15;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_dict_key_16;
        PyObject *tmp_dict_value_16;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_dict_key_17;
        PyObject *tmp_dict_value_17;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_dict_key_18;
        PyObject *tmp_dict_value_18;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_mvar_value_21;
        PyObject *tmp_dict_key_19;
        PyObject *tmp_dict_value_19;
        PyObject *tmp_tuple_element_19;
        PyObject *tmp_mvar_value_22;
        PyObject *tmp_dict_key_20;
        PyObject *tmp_dict_value_20;
        PyObject *tmp_tuple_element_20;
        PyObject *tmp_mvar_value_23;
        PyObject *tmp_dict_key_21;
        PyObject *tmp_dict_value_21;
        PyObject *tmp_tuple_element_21;
        PyObject *tmp_mvar_value_24;
        PyObject *tmp_dict_key_22;
        PyObject *tmp_dict_value_22;
        PyObject *tmp_tuple_element_22;
        PyObject *tmp_mvar_value_25;
        PyObject *tmp_dict_key_23;
        PyObject *tmp_dict_value_23;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_mvar_value_26;
        PyObject *tmp_dict_key_24;
        PyObject *tmp_dict_value_24;
        PyObject *tmp_tuple_element_24;
        PyObject *tmp_mvar_value_27;
        PyObject *tmp_dict_key_25;
        PyObject *tmp_dict_value_25;
        PyObject *tmp_tuple_element_25;
        PyObject *tmp_mvar_value_28;
        PyObject *tmp_dict_key_26;
        PyObject *tmp_dict_value_26;
        PyObject *tmp_tuple_element_26;
        PyObject *tmp_mvar_value_29;
        PyObject *tmp_dict_key_27;
        PyObject *tmp_dict_value_27;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_mvar_value_30;
        PyObject *tmp_dict_key_28;
        PyObject *tmp_dict_value_28;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_mvar_value_31;
        PyObject *tmp_dict_key_29;
        PyObject *tmp_dict_value_29;
        PyObject *tmp_tuple_element_29;
        PyObject *tmp_mvar_value_32;
        PyObject *tmp_dict_key_30;
        PyObject *tmp_dict_value_30;
        PyObject *tmp_tuple_element_30;
        PyObject *tmp_mvar_value_33;
        PyObject *tmp_dict_key_31;
        PyObject *tmp_dict_value_31;
        PyObject *tmp_tuple_element_31;
        PyObject *tmp_mvar_value_34;
        PyObject *tmp_dict_key_32;
        PyObject *tmp_dict_value_32;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_mvar_value_35;
        PyObject *tmp_dict_key_33;
        PyObject *tmp_dict_value_33;
        PyObject *tmp_tuple_element_33;
        PyObject *tmp_mvar_value_36;
        PyObject *tmp_dict_key_34;
        PyObject *tmp_dict_value_34;
        PyObject *tmp_tuple_element_34;
        PyObject *tmp_mvar_value_37;
        PyObject *tmp_dict_key_35;
        PyObject *tmp_dict_value_35;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_mvar_value_38;
        PyObject *tmp_dict_key_36;
        PyObject *tmp_dict_value_36;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_mvar_value_39;
        PyObject *tmp_dict_key_37;
        PyObject *tmp_dict_value_37;
        PyObject *tmp_tuple_element_37;
        PyObject *tmp_mvar_value_40;
        PyObject *tmp_dict_key_38;
        PyObject *tmp_dict_value_38;
        PyObject *tmp_tuple_element_38;
        PyObject *tmp_mvar_value_41;
        PyObject *tmp_dict_key_39;
        PyObject *tmp_dict_value_39;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_mvar_value_42;
        PyObject *tmp_dict_key_40;
        PyObject *tmp_dict_value_40;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_mvar_value_43;
        PyObject *tmp_dict_key_41;
        PyObject *tmp_dict_value_41;
        PyObject *tmp_tuple_element_41;
        PyObject *tmp_mvar_value_44;
        PyObject *tmp_dict_key_42;
        PyObject *tmp_dict_value_42;
        PyObject *tmp_tuple_element_42;
        PyObject *tmp_mvar_value_45;
        PyObject *tmp_dict_key_43;
        PyObject *tmp_dict_value_43;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_mvar_value_46;
        PyObject *tmp_dict_key_44;
        PyObject *tmp_dict_value_44;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_mvar_value_47;
        PyObject *tmp_dict_key_45;
        PyObject *tmp_dict_value_45;
        PyObject *tmp_tuple_element_45;
        PyObject *tmp_mvar_value_48;
        PyObject *tmp_dict_key_46;
        PyObject *tmp_dict_value_46;
        PyObject *tmp_tuple_element_46;
        PyObject *tmp_mvar_value_49;
        PyObject *tmp_dict_key_47;
        PyObject *tmp_dict_value_47;
        PyObject *tmp_tuple_element_47;
        PyObject *tmp_mvar_value_50;
        PyObject *tmp_dict_key_48;
        PyObject *tmp_dict_value_48;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_mvar_value_51;
        PyObject *tmp_dict_key_49;
        PyObject *tmp_dict_value_49;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_mvar_value_52;
        PyObject *tmp_dict_key_50;
        PyObject *tmp_dict_value_50;
        PyObject *tmp_tuple_element_50;
        PyObject *tmp_mvar_value_53;
        PyObject *tmp_dict_key_51;
        PyObject *tmp_dict_value_51;
        PyObject *tmp_tuple_element_51;
        PyObject *tmp_mvar_value_54;
        PyObject *tmp_dict_key_52;
        PyObject *tmp_dict_value_52;
        PyObject *tmp_tuple_element_52;
        PyObject *tmp_mvar_value_55;
        PyObject *tmp_dict_key_53;
        PyObject *tmp_dict_value_53;
        PyObject *tmp_tuple_element_53;
        PyObject *tmp_mvar_value_56;
        PyObject *tmp_dict_key_54;
        PyObject *tmp_dict_value_54;
        PyObject *tmp_tuple_element_54;
        PyObject *tmp_mvar_value_57;
        PyObject *tmp_dict_key_55;
        PyObject *tmp_dict_value_55;
        PyObject *tmp_tuple_element_55;
        PyObject *tmp_mvar_value_58;
        PyObject *tmp_dict_key_56;
        PyObject *tmp_dict_value_56;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_mvar_value_59;
        PyObject *tmp_dict_key_57;
        PyObject *tmp_dict_value_57;
        PyObject *tmp_tuple_element_57;
        PyObject *tmp_mvar_value_60;
        PyObject *tmp_dict_key_58;
        PyObject *tmp_dict_value_58;
        PyObject *tmp_tuple_element_58;
        PyObject *tmp_mvar_value_61;
        PyObject *tmp_dict_key_59;
        PyObject *tmp_dict_value_59;
        PyObject *tmp_tuple_element_59;
        PyObject *tmp_mvar_value_62;
        PyObject *tmp_dict_key_60;
        PyObject *tmp_dict_value_60;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_mvar_value_63;
        PyObject *tmp_dict_key_61;
        PyObject *tmp_dict_value_61;
        PyObject *tmp_tuple_element_61;
        PyObject *tmp_mvar_value_64;
        PyObject *tmp_dict_key_62;
        PyObject *tmp_dict_value_62;
        PyObject *tmp_tuple_element_62;
        PyObject *tmp_mvar_value_65;
        PyObject *tmp_dict_key_63;
        PyObject *tmp_dict_value_63;
        PyObject *tmp_tuple_element_63;
        PyObject *tmp_mvar_value_66;
        PyObject *tmp_dict_key_64;
        PyObject *tmp_dict_value_64;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_mvar_value_67;
        PyObject *tmp_dict_key_65;
        PyObject *tmp_dict_value_65;
        PyObject *tmp_tuple_element_65;
        PyObject *tmp_mvar_value_68;
        PyObject *tmp_dict_key_66;
        PyObject *tmp_dict_value_66;
        PyObject *tmp_tuple_element_66;
        PyObject *tmp_mvar_value_69;
        PyObject *tmp_dict_key_67;
        PyObject *tmp_dict_value_67;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_mvar_value_70;
        PyObject *tmp_dict_key_68;
        PyObject *tmp_dict_value_68;
        PyObject *tmp_tuple_element_68;
        PyObject *tmp_mvar_value_71;
        PyObject *tmp_dict_key_69;
        PyObject *tmp_dict_value_69;
        PyObject *tmp_tuple_element_69;
        PyObject *tmp_mvar_value_72;
        PyObject *tmp_dict_key_70;
        PyObject *tmp_dict_value_70;
        PyObject *tmp_tuple_element_70;
        PyObject *tmp_mvar_value_73;
        PyObject *tmp_dict_key_71;
        PyObject *tmp_dict_value_71;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_mvar_value_74;
        PyObject *tmp_dict_key_72;
        PyObject *tmp_dict_value_72;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_mvar_value_75;
        PyObject *tmp_dict_key_73;
        PyObject *tmp_dict_value_73;
        PyObject *tmp_tuple_element_73;
        PyObject *tmp_mvar_value_76;
        PyObject *tmp_dict_key_74;
        PyObject *tmp_dict_value_74;
        PyObject *tmp_tuple_element_74;
        PyObject *tmp_mvar_value_77;
        PyObject *tmp_dict_key_75;
        PyObject *tmp_dict_value_75;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_mvar_value_78;
        PyObject *tmp_dict_key_76;
        PyObject *tmp_dict_value_76;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_mvar_value_79;
        PyObject *tmp_dict_key_77;
        PyObject *tmp_dict_value_77;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_mvar_value_80;
        PyObject *tmp_dict_key_78;
        PyObject *tmp_dict_value_78;
        PyObject *tmp_tuple_element_78;
        PyObject *tmp_mvar_value_81;
        PyObject *tmp_dict_key_79;
        PyObject *tmp_dict_value_79;
        PyObject *tmp_tuple_element_79;
        PyObject *tmp_mvar_value_82;
        PyObject *tmp_dict_key_80;
        PyObject *tmp_dict_value_80;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_mvar_value_83;
        PyObject *tmp_dict_key_81;
        PyObject *tmp_dict_value_81;
        PyObject *tmp_tuple_element_81;
        PyObject *tmp_mvar_value_84;
        PyObject *tmp_dict_key_82;
        PyObject *tmp_dict_value_82;
        PyObject *tmp_tuple_element_82;
        PyObject *tmp_mvar_value_85;
        PyObject *tmp_dict_key_83;
        PyObject *tmp_dict_value_83;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_mvar_value_86;
        PyObject *tmp_dict_key_84;
        PyObject *tmp_dict_value_84;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_mvar_value_87;
        PyObject *tmp_dict_key_85;
        PyObject *tmp_dict_value_85;
        PyObject *tmp_tuple_element_85;
        PyObject *tmp_mvar_value_88;
        PyObject *tmp_dict_key_86;
        PyObject *tmp_dict_value_86;
        PyObject *tmp_tuple_element_86;
        PyObject *tmp_mvar_value_89;
        PyObject *tmp_dict_key_87;
        PyObject *tmp_dict_value_87;
        PyObject *tmp_tuple_element_87;
        PyObject *tmp_mvar_value_90;
        PyObject *tmp_dict_key_88;
        PyObject *tmp_dict_value_88;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_mvar_value_91;
        PyObject *tmp_dict_key_89;
        PyObject *tmp_dict_value_89;
        PyObject *tmp_tuple_element_89;
        PyObject *tmp_mvar_value_92;
        PyObject *tmp_dict_key_90;
        PyObject *tmp_dict_value_90;
        PyObject *tmp_tuple_element_90;
        PyObject *tmp_mvar_value_93;
        PyObject *tmp_dict_key_91;
        PyObject *tmp_dict_value_91;
        PyObject *tmp_tuple_element_91;
        PyObject *tmp_mvar_value_94;
        PyObject *tmp_dict_key_92;
        PyObject *tmp_dict_value_92;
        PyObject *tmp_tuple_element_92;
        PyObject *tmp_mvar_value_95;
        PyObject *tmp_dict_key_93;
        PyObject *tmp_dict_value_93;
        PyObject *tmp_tuple_element_93;
        PyObject *tmp_mvar_value_96;
        PyObject *tmp_dict_key_94;
        PyObject *tmp_dict_value_94;
        PyObject *tmp_tuple_element_94;
        PyObject *tmp_mvar_value_97;
        PyObject *tmp_dict_key_95;
        PyObject *tmp_dict_value_95;
        PyObject *tmp_tuple_element_95;
        PyObject *tmp_mvar_value_98;
        PyObject *tmp_dict_key_96;
        PyObject *tmp_dict_value_96;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_mvar_value_99;
        PyObject *tmp_dict_key_97;
        PyObject *tmp_dict_value_97;
        PyObject *tmp_tuple_element_97;
        PyObject *tmp_mvar_value_100;
        PyObject *tmp_dict_key_98;
        PyObject *tmp_dict_value_98;
        PyObject *tmp_tuple_element_98;
        PyObject *tmp_mvar_value_101;
        PyObject *tmp_dict_key_99;
        PyObject *tmp_dict_value_99;
        PyObject *tmp_tuple_element_99;
        PyObject *tmp_mvar_value_102;
        PyObject *tmp_dict_key_100;
        PyObject *tmp_dict_value_100;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_mvar_value_103;
        PyObject *tmp_dict_key_101;
        PyObject *tmp_dict_value_101;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_mvar_value_104;
        PyObject *tmp_dict_key_102;
        PyObject *tmp_dict_value_102;
        PyObject *tmp_tuple_element_102;
        PyObject *tmp_mvar_value_105;
        PyObject *tmp_dict_key_103;
        PyObject *tmp_dict_value_103;
        PyObject *tmp_tuple_element_103;
        PyObject *tmp_mvar_value_106;
        PyObject *tmp_dict_key_104;
        PyObject *tmp_dict_value_104;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_mvar_value_107;
        PyObject *tmp_dict_key_105;
        PyObject *tmp_dict_value_105;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_mvar_value_108;
        PyObject *tmp_dict_key_106;
        PyObject *tmp_dict_value_106;
        PyObject *tmp_tuple_element_106;
        PyObject *tmp_mvar_value_109;
        PyObject *tmp_dict_key_107;
        PyObject *tmp_dict_value_107;
        PyObject *tmp_tuple_element_107;
        PyObject *tmp_mvar_value_110;
        PyObject *tmp_dict_key_108;
        PyObject *tmp_dict_value_108;
        PyObject *tmp_tuple_element_108;
        PyObject *tmp_mvar_value_111;
        PyObject *tmp_dict_key_109;
        PyObject *tmp_dict_value_109;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_mvar_value_112;
        PyObject *tmp_dict_key_110;
        PyObject *tmp_dict_value_110;
        PyObject *tmp_tuple_element_110;
        PyObject *tmp_mvar_value_113;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 143;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_4;
        tmp_dict_key_1 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_0;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 1, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 2, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 3, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 4, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dict_key_1, 5, tmp_tuple_element_1 );
        tmp_dict_value_1 = const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple;
        tmp_assign_source_79 = _PyDict_NewPresized( 110 );
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_key_1 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = tmp_mvar_value_5;
        tmp_dict_key_2 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 0, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_int_0;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 1, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 2, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 3, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 4, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_dict_key_2, 5, tmp_tuple_element_2 );
        tmp_dict_value_2 = const_tuple_str_plain_1_str_digest_a43c96e669182759de7b6dc21baa30ee_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_2, tmp_dict_value_2 );
        Py_DECREF( tmp_dict_key_2 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 145;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = tmp_mvar_value_6;
        tmp_dict_key_3 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_int_0;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 1, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 2, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 3, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 4, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_key_3, 5, tmp_tuple_element_3 );
        tmp_dict_value_3 = const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_3, tmp_dict_value_3 );
        Py_DECREF( tmp_dict_key_3 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_7 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 146;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = tmp_mvar_value_7;
        tmp_dict_key_4 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_int_0;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 1, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 2, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 3, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 4, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_dict_key_4, 5, tmp_tuple_element_4 );
        tmp_dict_value_4 = const_tuple_str_plain_1_str_digest_fd478f0dde6a2123dae00f22c54fe654_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_4, tmp_dict_value_4 );
        Py_DECREF( tmp_dict_key_4 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_8 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_5 = tmp_mvar_value_8;
        tmp_dict_key_5 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 0, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 1, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 2, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 3, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 4, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_key_5, 5, tmp_tuple_element_5 );
        tmp_dict_value_5 = const_tuple_str_plain_1_str_plain_1_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_5, tmp_dict_value_5 );
        Py_DECREF( tmp_dict_key_5 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_9 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 148;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = tmp_mvar_value_9;
        tmp_dict_key_6 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 0, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 1, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 2, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 3, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 4, tmp_tuple_element_6 );
        tmp_tuple_element_6 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_key_6, 5, tmp_tuple_element_6 );
        tmp_dict_value_6 = const_tuple_str_plain_1_str_plain_1_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_6, tmp_dict_value_6 );
        Py_DECREF( tmp_dict_key_6 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 149;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_7 = tmp_mvar_value_10;
        tmp_dict_key_7 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 0, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 1, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 2, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 3, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 4, tmp_tuple_element_7 );
        tmp_tuple_element_7 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_dict_key_7, 5, tmp_tuple_element_7 );
        tmp_dict_value_7 = const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_7, tmp_dict_value_7 );
        Py_DECREF( tmp_dict_key_7 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_11 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 150;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_8 = tmp_mvar_value_11;
        tmp_dict_key_8 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 0, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 1, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 2, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 3, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 4, tmp_tuple_element_8 );
        tmp_tuple_element_8 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_dict_key_8, 5, tmp_tuple_element_8 );
        tmp_dict_value_8 = const_tuple_str_plain_1_str_digest_bbc19644d747bce501dfd7062a7d3586_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_8, tmp_dict_value_8 );
        Py_DECREF( tmp_dict_key_8 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_12 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 152;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_9 = tmp_mvar_value_12;
        tmp_dict_key_9 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 0, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_int_0;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 1, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 2, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 3, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 4, tmp_tuple_element_9 );
        tmp_tuple_element_9 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_9 );
        PyTuple_SET_ITEM( tmp_dict_key_9, 5, tmp_tuple_element_9 );
        tmp_dict_value_9 = const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_9, tmp_dict_value_9 );
        Py_DECREF( tmp_dict_key_9 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_13 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 153;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_10 = tmp_mvar_value_13;
        tmp_dict_key_10 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 0, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_int_0;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 1, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 2, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 3, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 4, tmp_tuple_element_10 );
        tmp_tuple_element_10 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_10 );
        PyTuple_SET_ITEM( tmp_dict_key_10, 5, tmp_tuple_element_10 );
        tmp_dict_value_10 = const_tuple_str_plain_L_str_digest_70ec016f35c94ff56152caa56a4f378d_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_10, tmp_dict_value_10 );
        Py_DECREF( tmp_dict_key_10 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_14 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 154;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_11 = tmp_mvar_value_14;
        tmp_dict_key_11 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 0, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_int_0;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 1, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 2, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 3, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 4, tmp_tuple_element_11 );
        tmp_tuple_element_11 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_11 );
        PyTuple_SET_ITEM( tmp_dict_key_11, 5, tmp_tuple_element_11 );
        tmp_dict_value_11 = const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_11, tmp_dict_value_11 );
        Py_DECREF( tmp_dict_key_11 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_15 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 155;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_12 = tmp_mvar_value_15;
        tmp_dict_key_12 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 0, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_int_0;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 1, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 2, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 3, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 4, tmp_tuple_element_12 );
        tmp_tuple_element_12 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_dict_key_12, 5, tmp_tuple_element_12 );
        tmp_dict_value_12 = const_tuple_str_plain_L_str_digest_16c586d12fc8b53581149967a4bc2375_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_12, tmp_dict_value_12 );
        Py_DECREF( tmp_dict_key_12 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_16 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 156;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_13 = tmp_mvar_value_16;
        tmp_dict_key_13 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 0, tmp_tuple_element_13 );
        tmp_tuple_element_13 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 1, tmp_tuple_element_13 );
        tmp_tuple_element_13 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 2, tmp_tuple_element_13 );
        tmp_tuple_element_13 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 3, tmp_tuple_element_13 );
        tmp_tuple_element_13 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 4, tmp_tuple_element_13 );
        tmp_tuple_element_13 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_13 );
        PyTuple_SET_ITEM( tmp_dict_key_13, 5, tmp_tuple_element_13 );
        tmp_dict_value_13 = const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_13, tmp_dict_value_13 );
        Py_DECREF( tmp_dict_key_13 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_17 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 157;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_14 = tmp_mvar_value_17;
        tmp_dict_key_14 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 0, tmp_tuple_element_14 );
        tmp_tuple_element_14 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 1, tmp_tuple_element_14 );
        tmp_tuple_element_14 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 2, tmp_tuple_element_14 );
        tmp_tuple_element_14 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 3, tmp_tuple_element_14 );
        tmp_tuple_element_14 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 4, tmp_tuple_element_14 );
        tmp_tuple_element_14 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_14 );
        PyTuple_SET_ITEM( tmp_dict_key_14, 5, tmp_tuple_element_14 );
        tmp_dict_value_14 = const_tuple_str_plain_L_str_digest_618a3de1c568c2667cce7198dacf177b_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_14, tmp_dict_value_14 );
        Py_DECREF( tmp_dict_key_14 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_18 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_15 = tmp_mvar_value_18;
        tmp_dict_key_15 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 0, tmp_tuple_element_15 );
        tmp_tuple_element_15 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 1, tmp_tuple_element_15 );
        tmp_tuple_element_15 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 2, tmp_tuple_element_15 );
        tmp_tuple_element_15 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 3, tmp_tuple_element_15 );
        tmp_tuple_element_15 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 4, tmp_tuple_element_15 );
        tmp_tuple_element_15 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_15 );
        PyTuple_SET_ITEM( tmp_dict_key_15, 5, tmp_tuple_element_15 );
        tmp_dict_value_15 = const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_15, tmp_dict_value_15 );
        Py_DECREF( tmp_dict_key_15 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_19 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 159;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_16 = tmp_mvar_value_19;
        tmp_dict_key_16 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 0, tmp_tuple_element_16 );
        tmp_tuple_element_16 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 1, tmp_tuple_element_16 );
        tmp_tuple_element_16 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 2, tmp_tuple_element_16 );
        tmp_tuple_element_16 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 3, tmp_tuple_element_16 );
        tmp_tuple_element_16 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 4, tmp_tuple_element_16 );
        tmp_tuple_element_16 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_dict_key_16, 5, tmp_tuple_element_16 );
        tmp_dict_value_16 = const_tuple_str_plain_L_str_digest_42acff2a1fadc967cda081746b144844_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_16, tmp_dict_value_16 );
        Py_DECREF( tmp_dict_key_16 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_20 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 161;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_17 = tmp_mvar_value_20;
        tmp_dict_key_17 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 0, tmp_tuple_element_17 );
        tmp_tuple_element_17 = const_int_0;
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 1, tmp_tuple_element_17 );
        tmp_tuple_element_17 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 2, tmp_tuple_element_17 );
        tmp_tuple_element_17 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 3, tmp_tuple_element_17 );
        tmp_tuple_element_17 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 4, tmp_tuple_element_17 );
        tmp_tuple_element_17 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_17 );
        PyTuple_SET_ITEM( tmp_dict_key_17, 5, tmp_tuple_element_17 );
        tmp_dict_value_17 = const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_17, tmp_dict_value_17 );
        Py_DECREF( tmp_dict_key_17 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_21 == NULL ))
        {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_21 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 162;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_18 = tmp_mvar_value_21;
        tmp_dict_key_18 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 0, tmp_tuple_element_18 );
        tmp_tuple_element_18 = const_int_0;
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 1, tmp_tuple_element_18 );
        tmp_tuple_element_18 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 2, tmp_tuple_element_18 );
        tmp_tuple_element_18 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 3, tmp_tuple_element_18 );
        tmp_tuple_element_18 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 4, tmp_tuple_element_18 );
        tmp_tuple_element_18 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_18 );
        PyTuple_SET_ITEM( tmp_dict_key_18, 5, tmp_tuple_element_18 );
        tmp_dict_value_18 = const_tuple_str_plain_L_str_digest_8336b700d4e432f5dee89565b3bbfb48_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_18, tmp_dict_value_18 );
        Py_DECREF( tmp_dict_key_18 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_22 == NULL ))
        {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_22 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 163;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_19 = tmp_mvar_value_22;
        tmp_dict_key_19 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 0, tmp_tuple_element_19 );
        tmp_tuple_element_19 = const_int_0;
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 1, tmp_tuple_element_19 );
        tmp_tuple_element_19 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 2, tmp_tuple_element_19 );
        tmp_tuple_element_19 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 3, tmp_tuple_element_19 );
        tmp_tuple_element_19 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 4, tmp_tuple_element_19 );
        tmp_tuple_element_19 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_19 );
        PyTuple_SET_ITEM( tmp_dict_key_19, 5, tmp_tuple_element_19 );
        tmp_dict_value_19 = const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_19, tmp_dict_value_19 );
        Py_DECREF( tmp_dict_key_19 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_23 == NULL ))
        {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_23 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 164;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_20 = tmp_mvar_value_23;
        tmp_dict_key_20 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 0, tmp_tuple_element_20 );
        tmp_tuple_element_20 = const_int_0;
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 1, tmp_tuple_element_20 );
        tmp_tuple_element_20 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 2, tmp_tuple_element_20 );
        tmp_tuple_element_20 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 3, tmp_tuple_element_20 );
        tmp_tuple_element_20 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 4, tmp_tuple_element_20 );
        tmp_tuple_element_20 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_dict_key_20, 5, tmp_tuple_element_20 );
        tmp_dict_value_20 = const_tuple_str_plain_L_str_digest_4f7f4944fe010ab1e87d7a729022551f_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_20, tmp_dict_value_20 );
        Py_DECREF( tmp_dict_key_20 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_24 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 165;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_21 = tmp_mvar_value_24;
        tmp_dict_key_21 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 0, tmp_tuple_element_21 );
        tmp_tuple_element_21 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 1, tmp_tuple_element_21 );
        tmp_tuple_element_21 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 2, tmp_tuple_element_21 );
        tmp_tuple_element_21 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 3, tmp_tuple_element_21 );
        tmp_tuple_element_21 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 4, tmp_tuple_element_21 );
        tmp_tuple_element_21 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_21 );
        PyTuple_SET_ITEM( tmp_dict_key_21, 5, tmp_tuple_element_21 );
        tmp_dict_value_21 = const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_21, tmp_dict_value_21 );
        Py_DECREF( tmp_dict_key_21 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_25 == NULL ))
        {
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_25 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 166;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_22 = tmp_mvar_value_25;
        tmp_dict_key_22 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 0, tmp_tuple_element_22 );
        tmp_tuple_element_22 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 1, tmp_tuple_element_22 );
        tmp_tuple_element_22 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 2, tmp_tuple_element_22 );
        tmp_tuple_element_22 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 3, tmp_tuple_element_22 );
        tmp_tuple_element_22 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 4, tmp_tuple_element_22 );
        tmp_tuple_element_22 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_22 );
        PyTuple_SET_ITEM( tmp_dict_key_22, 5, tmp_tuple_element_22 );
        tmp_dict_value_22 = const_tuple_str_plain_L_str_digest_2c033295b58b93ebf2caef911a75b646_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_22, tmp_dict_value_22 );
        Py_DECREF( tmp_dict_key_22 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_26 == NULL ))
        {
            tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_26 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 167;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_23 = tmp_mvar_value_26;
        tmp_dict_key_23 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 0, tmp_tuple_element_23 );
        tmp_tuple_element_23 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 1, tmp_tuple_element_23 );
        tmp_tuple_element_23 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 2, tmp_tuple_element_23 );
        tmp_tuple_element_23 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 3, tmp_tuple_element_23 );
        tmp_tuple_element_23 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 4, tmp_tuple_element_23 );
        tmp_tuple_element_23 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_23 );
        PyTuple_SET_ITEM( tmp_dict_key_23, 5, tmp_tuple_element_23 );
        tmp_dict_value_23 = const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_23, tmp_dict_value_23 );
        Py_DECREF( tmp_dict_key_23 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_27 == NULL ))
        {
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_27 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 168;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_24 = tmp_mvar_value_27;
        tmp_dict_key_24 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 0, tmp_tuple_element_24 );
        tmp_tuple_element_24 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 1, tmp_tuple_element_24 );
        tmp_tuple_element_24 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 2, tmp_tuple_element_24 );
        tmp_tuple_element_24 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 3, tmp_tuple_element_24 );
        tmp_tuple_element_24 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 4, tmp_tuple_element_24 );
        tmp_tuple_element_24 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_dict_key_24, 5, tmp_tuple_element_24 );
        tmp_dict_value_24 = const_tuple_str_plain_L_str_digest_696cfd6263b36104ddb17e4691dd131c_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_24, tmp_dict_value_24 );
        Py_DECREF( tmp_dict_key_24 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_28 == NULL ))
        {
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_28 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 170;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_25 = tmp_mvar_value_28;
        tmp_dict_key_25 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 0, tmp_tuple_element_25 );
        tmp_tuple_element_25 = const_int_0;
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 1, tmp_tuple_element_25 );
        tmp_tuple_element_25 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 2, tmp_tuple_element_25 );
        tmp_tuple_element_25 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 3, tmp_tuple_element_25 );
        tmp_tuple_element_25 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 4, tmp_tuple_element_25 );
        tmp_tuple_element_25 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_25 );
        PyTuple_SET_ITEM( tmp_dict_key_25, 5, tmp_tuple_element_25 );
        tmp_dict_value_25 = const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_25, tmp_dict_value_25 );
        Py_DECREF( tmp_dict_key_25 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_29 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_29 == NULL ))
        {
            tmp_mvar_value_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_29 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 171;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_26 = tmp_mvar_value_29;
        tmp_dict_key_26 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 0, tmp_tuple_element_26 );
        tmp_tuple_element_26 = const_int_0;
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 1, tmp_tuple_element_26 );
        tmp_tuple_element_26 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 2, tmp_tuple_element_26 );
        tmp_tuple_element_26 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 3, tmp_tuple_element_26 );
        tmp_tuple_element_26 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 4, tmp_tuple_element_26 );
        tmp_tuple_element_26 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_26 );
        PyTuple_SET_ITEM( tmp_dict_key_26, 5, tmp_tuple_element_26 );
        tmp_dict_value_26 = const_tuple_str_plain_L_str_digest_d48803d0260721b871b10650fb5527bc_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_26, tmp_dict_value_26 );
        Py_DECREF( tmp_dict_key_26 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_30 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_30 == NULL ))
        {
            tmp_mvar_value_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_30 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 172;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_27 = tmp_mvar_value_30;
        tmp_dict_key_27 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 0, tmp_tuple_element_27 );
        tmp_tuple_element_27 = const_int_0;
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 1, tmp_tuple_element_27 );
        tmp_tuple_element_27 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 2, tmp_tuple_element_27 );
        tmp_tuple_element_27 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 3, tmp_tuple_element_27 );
        tmp_tuple_element_27 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 4, tmp_tuple_element_27 );
        tmp_tuple_element_27 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_27 );
        PyTuple_SET_ITEM( tmp_dict_key_27, 5, tmp_tuple_element_27 );
        tmp_dict_value_27 = const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_27, tmp_dict_value_27 );
        Py_DECREF( tmp_dict_key_27 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_31 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_31 == NULL ))
        {
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_31 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 173;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_28 = tmp_mvar_value_31;
        tmp_dict_key_28 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 0, tmp_tuple_element_28 );
        tmp_tuple_element_28 = const_int_0;
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 1, tmp_tuple_element_28 );
        tmp_tuple_element_28 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 2, tmp_tuple_element_28 );
        tmp_tuple_element_28 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 3, tmp_tuple_element_28 );
        tmp_tuple_element_28 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 4, tmp_tuple_element_28 );
        tmp_tuple_element_28 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_dict_key_28, 5, tmp_tuple_element_28 );
        tmp_dict_value_28 = const_tuple_str_plain_L_str_digest_1067b9cc680d4dfc20959a61f380945a_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_28, tmp_dict_value_28 );
        Py_DECREF( tmp_dict_key_28 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_32 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_32 == NULL ))
        {
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_32 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 174;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_29 = tmp_mvar_value_32;
        tmp_dict_key_29 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 0, tmp_tuple_element_29 );
        tmp_tuple_element_29 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 1, tmp_tuple_element_29 );
        tmp_tuple_element_29 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 2, tmp_tuple_element_29 );
        tmp_tuple_element_29 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 3, tmp_tuple_element_29 );
        tmp_tuple_element_29 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 4, tmp_tuple_element_29 );
        tmp_tuple_element_29 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_29 );
        PyTuple_SET_ITEM( tmp_dict_key_29, 5, tmp_tuple_element_29 );
        tmp_dict_value_29 = const_tuple_str_plain_L_str_plain_L_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_29, tmp_dict_value_29 );
        Py_DECREF( tmp_dict_key_29 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_33 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_33 == NULL ))
        {
            tmp_mvar_value_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_33 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 175;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_30 = tmp_mvar_value_33;
        tmp_dict_key_30 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 0, tmp_tuple_element_30 );
        tmp_tuple_element_30 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 1, tmp_tuple_element_30 );
        tmp_tuple_element_30 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 2, tmp_tuple_element_30 );
        tmp_tuple_element_30 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 3, tmp_tuple_element_30 );
        tmp_tuple_element_30 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 4, tmp_tuple_element_30 );
        tmp_tuple_element_30 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_30 );
        PyTuple_SET_ITEM( tmp_dict_key_30, 5, tmp_tuple_element_30 );
        tmp_dict_value_30 = const_tuple_str_plain_L_str_plain_L_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_30, tmp_dict_value_30 );
        Py_DECREF( tmp_dict_key_30 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_34 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_34 == NULL ))
        {
            tmp_mvar_value_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_34 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 176;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_31 = tmp_mvar_value_34;
        tmp_dict_key_31 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 0, tmp_tuple_element_31 );
        tmp_tuple_element_31 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 1, tmp_tuple_element_31 );
        tmp_tuple_element_31 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 2, tmp_tuple_element_31 );
        tmp_tuple_element_31 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 3, tmp_tuple_element_31 );
        tmp_tuple_element_31 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 4, tmp_tuple_element_31 );
        tmp_tuple_element_31 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_31 );
        PyTuple_SET_ITEM( tmp_dict_key_31, 5, tmp_tuple_element_31 );
        tmp_dict_value_31 = const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_31, tmp_dict_value_31 );
        Py_DECREF( tmp_dict_key_31 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_35 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_35 == NULL ))
        {
            tmp_mvar_value_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_35 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 177;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_32 = tmp_mvar_value_35;
        tmp_dict_key_32 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 0, tmp_tuple_element_32 );
        tmp_tuple_element_32 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 1, tmp_tuple_element_32 );
        tmp_tuple_element_32 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 2, tmp_tuple_element_32 );
        tmp_tuple_element_32 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 3, tmp_tuple_element_32 );
        tmp_tuple_element_32 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 4, tmp_tuple_element_32 );
        tmp_tuple_element_32 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_dict_key_32, 5, tmp_tuple_element_32 );
        tmp_dict_value_32 = const_tuple_str_plain_L_str_digest_74cec407fdc40159101a17036ad167d9_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_32, tmp_dict_value_32 );
        Py_DECREF( tmp_dict_key_32 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_36 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_36 == NULL ))
        {
            tmp_mvar_value_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_36 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 179;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_33 = tmp_mvar_value_36;
        tmp_dict_key_33 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 0, tmp_tuple_element_33 );
        tmp_tuple_element_33 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 1, tmp_tuple_element_33 );
        tmp_tuple_element_33 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 2, tmp_tuple_element_33 );
        tmp_tuple_element_33 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 3, tmp_tuple_element_33 );
        tmp_tuple_element_33 = const_tuple_int_pos_12_tuple;
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 4, tmp_tuple_element_33 );
        tmp_tuple_element_33 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_33 );
        PyTuple_SET_ITEM( tmp_dict_key_33, 5, tmp_tuple_element_33 );
        tmp_dict_value_33 = const_tuple_2f5b45cc6c9c49956b38aa83322d7ab5_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_33, tmp_dict_value_33 );
        Py_DECREF( tmp_dict_key_33 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_37 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_37 == NULL ))
        {
            tmp_mvar_value_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_37 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 181;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_34 = tmp_mvar_value_37;
        tmp_dict_key_34 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 0, tmp_tuple_element_34 );
        tmp_tuple_element_34 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 1, tmp_tuple_element_34 );
        tmp_tuple_element_34 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 2, tmp_tuple_element_34 );
        tmp_tuple_element_34 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 3, tmp_tuple_element_34 );
        tmp_tuple_element_34 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 4, tmp_tuple_element_34 );
        tmp_tuple_element_34 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_34 );
        PyTuple_SET_ITEM( tmp_dict_key_34, 5, tmp_tuple_element_34 );
        tmp_dict_value_34 = const_tuple_c26d7102cb00910348cf3aecb080d1f8_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_34, tmp_dict_value_34 );
        Py_DECREF( tmp_dict_key_34 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_38 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_38 == NULL ))
        {
            tmp_mvar_value_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_38 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 182;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_35 = tmp_mvar_value_38;
        tmp_dict_key_35 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 0, tmp_tuple_element_35 );
        tmp_tuple_element_35 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 1, tmp_tuple_element_35 );
        tmp_tuple_element_35 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 2, tmp_tuple_element_35 );
        tmp_tuple_element_35 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 3, tmp_tuple_element_35 );
        tmp_tuple_element_35 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 4, tmp_tuple_element_35 );
        tmp_tuple_element_35 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_35 );
        PyTuple_SET_ITEM( tmp_dict_key_35, 5, tmp_tuple_element_35 );
        tmp_dict_value_35 = const_tuple_4b14a900351fc88104458d29d4e23fd8_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_35, tmp_dict_value_35 );
        Py_DECREF( tmp_dict_key_35 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_39 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_39 == NULL ))
        {
            tmp_mvar_value_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_39 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 183;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_36 = tmp_mvar_value_39;
        tmp_dict_key_36 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 0, tmp_tuple_element_36 );
        tmp_tuple_element_36 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 1, tmp_tuple_element_36 );
        tmp_tuple_element_36 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 2, tmp_tuple_element_36 );
        tmp_tuple_element_36 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 3, tmp_tuple_element_36 );
        tmp_tuple_element_36 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 4, tmp_tuple_element_36 );
        tmp_tuple_element_36 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_dict_key_36, 5, tmp_tuple_element_36 );
        tmp_dict_value_36 = const_tuple_str_plain_I_str_digest_380c2cde6c6849a9cfbcc9225b2b8425_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_36, tmp_dict_value_36 );
        Py_DECREF( tmp_dict_key_36 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_40 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_40 == NULL ))
        {
            tmp_mvar_value_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_40 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 184;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_37 = tmp_mvar_value_40;
        tmp_dict_key_37 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 0, tmp_tuple_element_37 );
        tmp_tuple_element_37 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 1, tmp_tuple_element_37 );
        tmp_tuple_element_37 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 2, tmp_tuple_element_37 );
        tmp_tuple_element_37 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 3, tmp_tuple_element_37 );
        tmp_tuple_element_37 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 4, tmp_tuple_element_37 );
        tmp_tuple_element_37 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_37 );
        PyTuple_SET_ITEM( tmp_dict_key_37, 5, tmp_tuple_element_37 );
        tmp_dict_value_37 = const_tuple_str_plain_I_str_digest_397c5c7fdc15959b77fa01985509e603_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_37, tmp_dict_value_37 );
        Py_DECREF( tmp_dict_key_37 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_41 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_41 == NULL ))
        {
            tmp_mvar_value_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_41 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 186;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_38 = tmp_mvar_value_41;
        tmp_dict_key_38 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 0, tmp_tuple_element_38 );
        tmp_tuple_element_38 = const_int_0;
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 1, tmp_tuple_element_38 );
        tmp_tuple_element_38 = const_tuple_int_pos_3_tuple;
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 2, tmp_tuple_element_38 );
        tmp_tuple_element_38 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 3, tmp_tuple_element_38 );
        tmp_tuple_element_38 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 4, tmp_tuple_element_38 );
        tmp_tuple_element_38 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_38 );
        PyTuple_SET_ITEM( tmp_dict_key_38, 5, tmp_tuple_element_38 );
        tmp_dict_value_38 = const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_38, tmp_dict_value_38 );
        Py_DECREF( tmp_dict_key_38 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_42 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_42 == NULL ))
        {
            tmp_mvar_value_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_42 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 187;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_39 = tmp_mvar_value_42;
        tmp_dict_key_39 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 0, tmp_tuple_element_39 );
        tmp_tuple_element_39 = const_int_0;
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 1, tmp_tuple_element_39 );
        tmp_tuple_element_39 = const_tuple_int_pos_3_tuple;
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 2, tmp_tuple_element_39 );
        tmp_tuple_element_39 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 3, tmp_tuple_element_39 );
        tmp_tuple_element_39 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 4, tmp_tuple_element_39 );
        tmp_tuple_element_39 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_39 );
        PyTuple_SET_ITEM( tmp_dict_key_39, 5, tmp_tuple_element_39 );
        tmp_dict_value_39 = const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_39, tmp_dict_value_39 );
        Py_DECREF( tmp_dict_key_39 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_43 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_43 == NULL ))
        {
            tmp_mvar_value_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_43 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 188;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_40 = tmp_mvar_value_43;
        tmp_dict_key_40 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 0, tmp_tuple_element_40 );
        tmp_tuple_element_40 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 1, tmp_tuple_element_40 );
        tmp_tuple_element_40 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 2, tmp_tuple_element_40 );
        tmp_tuple_element_40 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 3, tmp_tuple_element_40 );
        tmp_tuple_element_40 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 4, tmp_tuple_element_40 );
        tmp_tuple_element_40 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_dict_key_40, 5, tmp_tuple_element_40 );
        tmp_dict_value_40 = const_tuple_str_plain_I_str_digest_ce02de2fe5593611868b4a64b70fa501_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_40, tmp_dict_value_40 );
        Py_DECREF( tmp_dict_key_40 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_44 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_44 == NULL ))
        {
            tmp_mvar_value_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_44 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 189;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_41 = tmp_mvar_value_44;
        tmp_dict_key_41 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 0, tmp_tuple_element_41 );
        tmp_tuple_element_41 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 1, tmp_tuple_element_41 );
        tmp_tuple_element_41 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 2, tmp_tuple_element_41 );
        tmp_tuple_element_41 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 3, tmp_tuple_element_41 );
        tmp_tuple_element_41 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 4, tmp_tuple_element_41 );
        tmp_tuple_element_41 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_41 );
        PyTuple_SET_ITEM( tmp_dict_key_41, 5, tmp_tuple_element_41 );
        tmp_dict_value_41 = const_tuple_str_plain_I_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_41, tmp_dict_value_41 );
        Py_DECREF( tmp_dict_key_41 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_45 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_45 == NULL ))
        {
            tmp_mvar_value_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_45 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 190;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_42 = tmp_mvar_value_45;
        tmp_dict_key_42 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 0, tmp_tuple_element_42 );
        tmp_tuple_element_42 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 1, tmp_tuple_element_42 );
        tmp_tuple_element_42 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 2, tmp_tuple_element_42 );
        tmp_tuple_element_42 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 3, tmp_tuple_element_42 );
        tmp_tuple_element_42 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 4, tmp_tuple_element_42 );
        tmp_tuple_element_42 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_42 );
        PyTuple_SET_ITEM( tmp_dict_key_42, 5, tmp_tuple_element_42 );
        tmp_dict_value_42 = const_tuple_str_plain_I_str_digest_668285c8e15fd1c4c777c2ca124e7de4_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_42, tmp_dict_value_42 );
        Py_DECREF( tmp_dict_key_42 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_46 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_46 == NULL ))
        {
            tmp_mvar_value_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_46 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 191;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_43 = tmp_mvar_value_46;
        tmp_dict_key_43 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 0, tmp_tuple_element_43 );
        tmp_tuple_element_43 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 1, tmp_tuple_element_43 );
        tmp_tuple_element_43 = const_tuple_int_pos_3_tuple;
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 2, tmp_tuple_element_43 );
        tmp_tuple_element_43 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 3, tmp_tuple_element_43 );
        tmp_tuple_element_43 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 4, tmp_tuple_element_43 );
        tmp_tuple_element_43 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_43 );
        PyTuple_SET_ITEM( tmp_dict_key_43, 5, tmp_tuple_element_43 );
        tmp_dict_value_43 = const_tuple_str_plain_F_str_digest_dd0014195a493dcdefb2a95211b4d78b_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_43, tmp_dict_value_43 );
        Py_DECREF( tmp_dict_key_43 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_47 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_47 == NULL ))
        {
            tmp_mvar_value_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_47 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 192;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_44 = tmp_mvar_value_47;
        tmp_dict_key_44 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 0, tmp_tuple_element_44 );
        tmp_tuple_element_44 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 1, tmp_tuple_element_44 );
        tmp_tuple_element_44 = const_tuple_int_pos_3_tuple;
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 2, tmp_tuple_element_44 );
        tmp_tuple_element_44 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 3, tmp_tuple_element_44 );
        tmp_tuple_element_44 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 4, tmp_tuple_element_44 );
        tmp_tuple_element_44 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_dict_key_44, 5, tmp_tuple_element_44 );
        tmp_dict_value_44 = const_tuple_str_plain_F_str_digest_d687ba9d0a20767ca771c8cb089e3484_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_44, tmp_dict_value_44 );
        Py_DECREF( tmp_dict_key_44 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_48 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_48 == NULL ))
        {
            tmp_mvar_value_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_48 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 194;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_45 = tmp_mvar_value_48;
        tmp_dict_key_45 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 0, tmp_tuple_element_45 );
        tmp_tuple_element_45 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 1, tmp_tuple_element_45 );
        tmp_tuple_element_45 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 2, tmp_tuple_element_45 );
        tmp_tuple_element_45 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 3, tmp_tuple_element_45 );
        tmp_tuple_element_45 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 4, tmp_tuple_element_45 );
        tmp_tuple_element_45 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_45 );
        PyTuple_SET_ITEM( tmp_dict_key_45, 5, tmp_tuple_element_45 );
        tmp_dict_value_45 = const_tuple_str_plain_LA_str_plain_LA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_45, tmp_dict_value_45 );
        Py_DECREF( tmp_dict_key_45 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_49 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_49 == NULL ))
        {
            tmp_mvar_value_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_49 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 195;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_46 = tmp_mvar_value_49;
        tmp_dict_key_46 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 0, tmp_tuple_element_46 );
        tmp_tuple_element_46 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 1, tmp_tuple_element_46 );
        tmp_tuple_element_46 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 2, tmp_tuple_element_46 );
        tmp_tuple_element_46 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 3, tmp_tuple_element_46 );
        tmp_tuple_element_46 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 4, tmp_tuple_element_46 );
        tmp_tuple_element_46 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_46 );
        PyTuple_SET_ITEM( tmp_dict_key_46, 5, tmp_tuple_element_46 );
        tmp_dict_value_46 = const_tuple_str_plain_LA_str_plain_LA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_46, tmp_dict_value_46 );
        Py_DECREF( tmp_dict_key_46 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_50 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_50 == NULL ))
        {
            tmp_mvar_value_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_50 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 197;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_47 = tmp_mvar_value_50;
        tmp_dict_key_47 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 0, tmp_tuple_element_47 );
        tmp_tuple_element_47 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 1, tmp_tuple_element_47 );
        tmp_tuple_element_47 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 2, tmp_tuple_element_47 );
        tmp_tuple_element_47 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 3, tmp_tuple_element_47 );
        tmp_tuple_element_47 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 4, tmp_tuple_element_47 );
        tmp_tuple_element_47 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_47 );
        PyTuple_SET_ITEM( tmp_dict_key_47, 5, tmp_tuple_element_47 );
        tmp_dict_value_47 = const_tuple_str_plain_RGB_str_plain_RGB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_47, tmp_dict_value_47 );
        Py_DECREF( tmp_dict_key_47 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_51 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_51 == NULL ))
        {
            tmp_mvar_value_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_51 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 198;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_48 = tmp_mvar_value_51;
        tmp_dict_key_48 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 0, tmp_tuple_element_48 );
        tmp_tuple_element_48 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 1, tmp_tuple_element_48 );
        tmp_tuple_element_48 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 2, tmp_tuple_element_48 );
        tmp_tuple_element_48 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 3, tmp_tuple_element_48 );
        tmp_tuple_element_48 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 4, tmp_tuple_element_48 );
        tmp_tuple_element_48 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_dict_key_48, 5, tmp_tuple_element_48 );
        tmp_dict_value_48 = const_tuple_str_plain_RGB_str_plain_RGB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_48, tmp_dict_value_48 );
        Py_DECREF( tmp_dict_key_48 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_52 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_52 == NULL ))
        {
            tmp_mvar_value_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_52 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 199;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_49 = tmp_mvar_value_52;
        tmp_dict_key_49 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 0, tmp_tuple_element_49 );
        tmp_tuple_element_49 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 1, tmp_tuple_element_49 );
        tmp_tuple_element_49 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 2, tmp_tuple_element_49 );
        tmp_tuple_element_49 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 3, tmp_tuple_element_49 );
        tmp_tuple_element_49 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 4, tmp_tuple_element_49 );
        tmp_tuple_element_49 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_49 );
        PyTuple_SET_ITEM( tmp_dict_key_49, 5, tmp_tuple_element_49 );
        tmp_dict_value_49 = const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_49, tmp_dict_value_49 );
        Py_DECREF( tmp_dict_key_49 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_53 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_53 == NULL ))
        {
            tmp_mvar_value_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_53 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 200;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_50 = tmp_mvar_value_53;
        tmp_dict_key_50 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 0, tmp_tuple_element_50 );
        tmp_tuple_element_50 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 1, tmp_tuple_element_50 );
        tmp_tuple_element_50 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 2, tmp_tuple_element_50 );
        tmp_tuple_element_50 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 3, tmp_tuple_element_50 );
        tmp_tuple_element_50 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 4, tmp_tuple_element_50 );
        tmp_tuple_element_50 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_50 );
        PyTuple_SET_ITEM( tmp_dict_key_50, 5, tmp_tuple_element_50 );
        tmp_dict_value_50 = const_tuple_str_plain_RGB_str_digest_64afa65c90866eeaeb2cfc62c2ed5551_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_50, tmp_dict_value_50 );
        Py_DECREF( tmp_dict_key_50 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_54 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_54 == NULL ))
        {
            tmp_mvar_value_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_54 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 201;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_51 = tmp_mvar_value_54;
        tmp_dict_key_51 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 0, tmp_tuple_element_51 );
        tmp_tuple_element_51 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 1, tmp_tuple_element_51 );
        tmp_tuple_element_51 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 2, tmp_tuple_element_51 );
        tmp_tuple_element_51 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 3, tmp_tuple_element_51 );
        tmp_tuple_element_51 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 4, tmp_tuple_element_51 );
        tmp_tuple_element_51 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_51 );
        PyTuple_SET_ITEM( tmp_dict_key_51, 5, tmp_tuple_element_51 );
        tmp_dict_value_51 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_51, tmp_dict_value_51 );
        Py_DECREF( tmp_dict_key_51 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_55 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_55 == NULL ))
        {
            tmp_mvar_value_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_55 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 202;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_52 = tmp_mvar_value_55;
        tmp_dict_key_52 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 0, tmp_tuple_element_52 );
        tmp_tuple_element_52 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 1, tmp_tuple_element_52 );
        tmp_tuple_element_52 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 2, tmp_tuple_element_52 );
        tmp_tuple_element_52 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 3, tmp_tuple_element_52 );
        tmp_tuple_element_52 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 4, tmp_tuple_element_52 );
        tmp_tuple_element_52 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_dict_key_52, 5, tmp_tuple_element_52 );
        tmp_dict_value_52 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_52, tmp_dict_value_52 );
        Py_DECREF( tmp_dict_key_52 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_56 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_56 == NULL ))
        {
            tmp_mvar_value_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_56 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 203;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_53 = tmp_mvar_value_56;
        tmp_dict_key_53 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 0, tmp_tuple_element_53 );
        tmp_tuple_element_53 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 1, tmp_tuple_element_53 );
        tmp_tuple_element_53 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 2, tmp_tuple_element_53 );
        tmp_tuple_element_53 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 3, tmp_tuple_element_53 );
        tmp_tuple_element_53 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 4, tmp_tuple_element_53 );
        tmp_tuple_element_53 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_53 );
        PyTuple_SET_ITEM( tmp_dict_key_53, 5, tmp_tuple_element_53 );
        tmp_dict_value_53 = const_tuple_str_plain_RGBX_str_plain_RGBX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_53, tmp_dict_value_53 );
        Py_DECREF( tmp_dict_key_53 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_57 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_57 == NULL ))
        {
            tmp_mvar_value_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_57 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 204;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_54 = tmp_mvar_value_57;
        tmp_dict_key_54 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 0, tmp_tuple_element_54 );
        tmp_tuple_element_54 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 1, tmp_tuple_element_54 );
        tmp_tuple_element_54 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 2, tmp_tuple_element_54 );
        tmp_tuple_element_54 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 3, tmp_tuple_element_54 );
        tmp_tuple_element_54 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 4, tmp_tuple_element_54 );
        tmp_tuple_element_54 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_54 );
        PyTuple_SET_ITEM( tmp_dict_key_54, 5, tmp_tuple_element_54 );
        tmp_dict_value_54 = const_tuple_str_plain_RGBX_str_plain_RGBX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_54, tmp_dict_value_54 );
        Py_DECREF( tmp_dict_key_54 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_58 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_58 == NULL ))
        {
            tmp_mvar_value_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_58 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 205;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_55 = tmp_mvar_value_58;
        tmp_dict_key_55 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 0, tmp_tuple_element_55 );
        tmp_tuple_element_55 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 1, tmp_tuple_element_55 );
        tmp_tuple_element_55 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 2, tmp_tuple_element_55 );
        tmp_tuple_element_55 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 3, tmp_tuple_element_55 );
        tmp_tuple_element_55 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 4, tmp_tuple_element_55 );
        tmp_tuple_element_55 = const_tuple_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_55 );
        PyTuple_SET_ITEM( tmp_dict_key_55, 5, tmp_tuple_element_55 );
        tmp_dict_value_55 = const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_55, tmp_dict_value_55 );
        Py_DECREF( tmp_dict_key_55 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_59 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_59 == NULL ))
        {
            tmp_mvar_value_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_59 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 206;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_56 = tmp_mvar_value_59;
        tmp_dict_key_56 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 0, tmp_tuple_element_56 );
        tmp_tuple_element_56 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 1, tmp_tuple_element_56 );
        tmp_tuple_element_56 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 2, tmp_tuple_element_56 );
        tmp_tuple_element_56 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 3, tmp_tuple_element_56 );
        tmp_tuple_element_56 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 4, tmp_tuple_element_56 );
        tmp_tuple_element_56 = const_tuple_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_dict_key_56, 5, tmp_tuple_element_56 );
        tmp_dict_value_56 = const_tuple_str_plain_RGBX_str_plain_RGBXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_56, tmp_dict_value_56 );
        Py_DECREF( tmp_dict_key_56 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_60 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_60 == NULL ))
        {
            tmp_mvar_value_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_60 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 207;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_57 = tmp_mvar_value_60;
        tmp_dict_key_57 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 0, tmp_tuple_element_57 );
        tmp_tuple_element_57 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 1, tmp_tuple_element_57 );
        tmp_tuple_element_57 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 2, tmp_tuple_element_57 );
        tmp_tuple_element_57 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 3, tmp_tuple_element_57 );
        tmp_tuple_element_57 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 4, tmp_tuple_element_57 );
        tmp_tuple_element_57 = const_tuple_int_0_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_57 );
        PyTuple_SET_ITEM( tmp_dict_key_57, 5, tmp_tuple_element_57 );
        tmp_dict_value_57 = const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_57, tmp_dict_value_57 );
        Py_DECREF( tmp_dict_key_57 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_61 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_61 == NULL ))
        {
            tmp_mvar_value_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_61 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 208;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_58 = tmp_mvar_value_61;
        tmp_dict_key_58 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 0, tmp_tuple_element_58 );
        tmp_tuple_element_58 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 1, tmp_tuple_element_58 );
        tmp_tuple_element_58 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 2, tmp_tuple_element_58 );
        tmp_tuple_element_58 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 3, tmp_tuple_element_58 );
        tmp_tuple_element_58 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 4, tmp_tuple_element_58 );
        tmp_tuple_element_58 = const_tuple_int_0_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_58 );
        PyTuple_SET_ITEM( tmp_dict_key_58, 5, tmp_tuple_element_58 );
        tmp_dict_value_58 = const_tuple_str_plain_RGBX_str_plain_RGBXXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_58, tmp_dict_value_58 );
        Py_DECREF( tmp_dict_key_58 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_62 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_62 == NULL ))
        {
            tmp_mvar_value_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_62 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 209;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_59 = tmp_mvar_value_62;
        tmp_dict_key_59 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 0, tmp_tuple_element_59 );
        tmp_tuple_element_59 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 1, tmp_tuple_element_59 );
        tmp_tuple_element_59 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 2, tmp_tuple_element_59 );
        tmp_tuple_element_59 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 3, tmp_tuple_element_59 );
        tmp_tuple_element_59 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 4, tmp_tuple_element_59 );
        tmp_tuple_element_59 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_59 );
        PyTuple_SET_ITEM( tmp_dict_key_59, 5, tmp_tuple_element_59 );
        tmp_dict_value_59 = const_tuple_str_plain_RGBA_str_plain_RGBa_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_59, tmp_dict_value_59 );
        Py_DECREF( tmp_dict_key_59 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_63 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_63 == NULL ))
        {
            tmp_mvar_value_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_63 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 210;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_60 = tmp_mvar_value_63;
        tmp_dict_key_60 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 0, tmp_tuple_element_60 );
        tmp_tuple_element_60 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 1, tmp_tuple_element_60 );
        tmp_tuple_element_60 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 2, tmp_tuple_element_60 );
        tmp_tuple_element_60 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 3, tmp_tuple_element_60 );
        tmp_tuple_element_60 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 4, tmp_tuple_element_60 );
        tmp_tuple_element_60 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_dict_key_60, 5, tmp_tuple_element_60 );
        tmp_dict_value_60 = const_tuple_str_plain_RGBA_str_plain_RGBa_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_60, tmp_dict_value_60 );
        Py_DECREF( tmp_dict_key_60 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_64 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_64 == NULL ))
        {
            tmp_mvar_value_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_64 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 211;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_61 = tmp_mvar_value_64;
        tmp_dict_key_61 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 0, tmp_tuple_element_61 );
        tmp_tuple_element_61 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 1, tmp_tuple_element_61 );
        tmp_tuple_element_61 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 2, tmp_tuple_element_61 );
        tmp_tuple_element_61 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 3, tmp_tuple_element_61 );
        tmp_tuple_element_61 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 4, tmp_tuple_element_61 );
        tmp_tuple_element_61 = const_tuple_int_pos_1_int_0_tuple;
        Py_INCREF( tmp_tuple_element_61 );
        PyTuple_SET_ITEM( tmp_dict_key_61, 5, tmp_tuple_element_61 );
        tmp_dict_value_61 = const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_61, tmp_dict_value_61 );
        Py_DECREF( tmp_dict_key_61 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_65 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_65 == NULL ))
        {
            tmp_mvar_value_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_65 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 212;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_62 = tmp_mvar_value_65;
        tmp_dict_key_62 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 0, tmp_tuple_element_62 );
        tmp_tuple_element_62 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 1, tmp_tuple_element_62 );
        tmp_tuple_element_62 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 2, tmp_tuple_element_62 );
        tmp_tuple_element_62 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 3, tmp_tuple_element_62 );
        tmp_tuple_element_62 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 4, tmp_tuple_element_62 );
        tmp_tuple_element_62 = const_tuple_int_pos_1_int_0_tuple;
        Py_INCREF( tmp_tuple_element_62 );
        PyTuple_SET_ITEM( tmp_dict_key_62, 5, tmp_tuple_element_62 );
        tmp_dict_value_62 = const_tuple_str_plain_RGBA_str_plain_RGBaX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_62, tmp_dict_value_62 );
        Py_DECREF( tmp_dict_key_62 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_66 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_66 == NULL ))
        {
            tmp_mvar_value_66 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_66 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 213;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_63 = tmp_mvar_value_66;
        tmp_dict_key_63 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 0, tmp_tuple_element_63 );
        tmp_tuple_element_63 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 1, tmp_tuple_element_63 );
        tmp_tuple_element_63 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 2, tmp_tuple_element_63 );
        tmp_tuple_element_63 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 3, tmp_tuple_element_63 );
        tmp_tuple_element_63 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 4, tmp_tuple_element_63 );
        tmp_tuple_element_63 = const_tuple_int_pos_1_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_63 );
        PyTuple_SET_ITEM( tmp_dict_key_63, 5, tmp_tuple_element_63 );
        tmp_dict_value_63 = const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_63, tmp_dict_value_63 );
        Py_DECREF( tmp_dict_key_63 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_67 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_67 == NULL ))
        {
            tmp_mvar_value_67 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_67 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_64 = tmp_mvar_value_67;
        tmp_dict_key_64 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 0, tmp_tuple_element_64 );
        tmp_tuple_element_64 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 1, tmp_tuple_element_64 );
        tmp_tuple_element_64 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 2, tmp_tuple_element_64 );
        tmp_tuple_element_64 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 3, tmp_tuple_element_64 );
        tmp_tuple_element_64 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 4, tmp_tuple_element_64 );
        tmp_tuple_element_64 = const_tuple_int_pos_1_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_dict_key_64, 5, tmp_tuple_element_64 );
        tmp_dict_value_64 = const_tuple_str_plain_RGBA_str_plain_RGBaXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_64, tmp_dict_value_64 );
        Py_DECREF( tmp_dict_key_64 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_68 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_68 == NULL ))
        {
            tmp_mvar_value_68 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_68 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 215;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_65 = tmp_mvar_value_68;
        tmp_dict_key_65 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 0, tmp_tuple_element_65 );
        tmp_tuple_element_65 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 1, tmp_tuple_element_65 );
        tmp_tuple_element_65 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 2, tmp_tuple_element_65 );
        tmp_tuple_element_65 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 3, tmp_tuple_element_65 );
        tmp_tuple_element_65 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 4, tmp_tuple_element_65 );
        tmp_tuple_element_65 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_65 );
        PyTuple_SET_ITEM( tmp_dict_key_65, 5, tmp_tuple_element_65 );
        tmp_dict_value_65 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_65, tmp_dict_value_65 );
        Py_DECREF( tmp_dict_key_65 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_69 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_69 == NULL ))
        {
            tmp_mvar_value_69 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_69 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 216;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_66 = tmp_mvar_value_69;
        tmp_dict_key_66 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 0, tmp_tuple_element_66 );
        tmp_tuple_element_66 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 1, tmp_tuple_element_66 );
        tmp_tuple_element_66 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 2, tmp_tuple_element_66 );
        tmp_tuple_element_66 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 3, tmp_tuple_element_66 );
        tmp_tuple_element_66 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 4, tmp_tuple_element_66 );
        tmp_tuple_element_66 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_66 );
        PyTuple_SET_ITEM( tmp_dict_key_66, 5, tmp_tuple_element_66 );
        tmp_dict_value_66 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_66, tmp_dict_value_66 );
        Py_DECREF( tmp_dict_key_66 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_70 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_70 == NULL ))
        {
            tmp_mvar_value_70 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_70 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 217;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_67 = tmp_mvar_value_70;
        tmp_dict_key_67 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 0, tmp_tuple_element_67 );
        tmp_tuple_element_67 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 1, tmp_tuple_element_67 );
        tmp_tuple_element_67 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 2, tmp_tuple_element_67 );
        tmp_tuple_element_67 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 3, tmp_tuple_element_67 );
        tmp_tuple_element_67 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 4, tmp_tuple_element_67 );
        tmp_tuple_element_67 = const_tuple_int_pos_2_int_0_tuple;
        Py_INCREF( tmp_tuple_element_67 );
        PyTuple_SET_ITEM( tmp_dict_key_67, 5, tmp_tuple_element_67 );
        tmp_dict_value_67 = const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_67, tmp_dict_value_67 );
        Py_DECREF( tmp_dict_key_67 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_71 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_71 == NULL ))
        {
            tmp_mvar_value_71 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_71 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 218;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_68 = tmp_mvar_value_71;
        tmp_dict_key_68 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 0, tmp_tuple_element_68 );
        tmp_tuple_element_68 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 1, tmp_tuple_element_68 );
        tmp_tuple_element_68 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 2, tmp_tuple_element_68 );
        tmp_tuple_element_68 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 3, tmp_tuple_element_68 );
        tmp_tuple_element_68 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 4, tmp_tuple_element_68 );
        tmp_tuple_element_68 = const_tuple_int_pos_2_int_0_tuple;
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_dict_key_68, 5, tmp_tuple_element_68 );
        tmp_dict_value_68 = const_tuple_str_plain_RGBA_str_plain_RGBAX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_68, tmp_dict_value_68 );
        Py_DECREF( tmp_dict_key_68 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_72 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_72 == NULL ))
        {
            tmp_mvar_value_72 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_72 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 219;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_69 = tmp_mvar_value_72;
        tmp_dict_key_69 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 0, tmp_tuple_element_69 );
        tmp_tuple_element_69 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 1, tmp_tuple_element_69 );
        tmp_tuple_element_69 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 2, tmp_tuple_element_69 );
        tmp_tuple_element_69 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 3, tmp_tuple_element_69 );
        tmp_tuple_element_69 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 4, tmp_tuple_element_69 );
        tmp_tuple_element_69 = const_tuple_int_pos_2_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_69 );
        PyTuple_SET_ITEM( tmp_dict_key_69, 5, tmp_tuple_element_69 );
        tmp_dict_value_69 = const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_69, tmp_dict_value_69 );
        Py_DECREF( tmp_dict_key_69 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_73 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_73 == NULL ))
        {
            tmp_mvar_value_73 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_73 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 220;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_70 = tmp_mvar_value_73;
        tmp_dict_key_70 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 0, tmp_tuple_element_70 );
        tmp_tuple_element_70 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 1, tmp_tuple_element_70 );
        tmp_tuple_element_70 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 2, tmp_tuple_element_70 );
        tmp_tuple_element_70 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 3, tmp_tuple_element_70 );
        tmp_tuple_element_70 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 4, tmp_tuple_element_70 );
        tmp_tuple_element_70 = const_tuple_int_pos_2_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_70 );
        PyTuple_SET_ITEM( tmp_dict_key_70, 5, tmp_tuple_element_70 );
        tmp_dict_value_70 = const_tuple_str_plain_RGBA_str_plain_RGBAXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_70, tmp_dict_value_70 );
        Py_DECREF( tmp_dict_key_70 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_74 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_74 == NULL ))
        {
            tmp_mvar_value_74 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_74 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 221;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_71 = tmp_mvar_value_74;
        tmp_dict_key_71 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 0, tmp_tuple_element_71 );
        tmp_tuple_element_71 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 1, tmp_tuple_element_71 );
        tmp_tuple_element_71 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 2, tmp_tuple_element_71 );
        tmp_tuple_element_71 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 3, tmp_tuple_element_71 );
        tmp_tuple_element_71 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 4, tmp_tuple_element_71 );
        tmp_tuple_element_71 = const_tuple_int_pos_999_tuple;
        Py_INCREF( tmp_tuple_element_71 );
        PyTuple_SET_ITEM( tmp_dict_key_71, 5, tmp_tuple_element_71 );
        tmp_dict_value_71 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_71, tmp_dict_value_71 );
        Py_DECREF( tmp_dict_key_71 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_75 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_75 == NULL ))
        {
            tmp_mvar_value_75 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_75 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 222;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_72 = tmp_mvar_value_75;
        tmp_dict_key_72 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 0, tmp_tuple_element_72 );
        tmp_tuple_element_72 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 1, tmp_tuple_element_72 );
        tmp_tuple_element_72 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 2, tmp_tuple_element_72 );
        tmp_tuple_element_72 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 3, tmp_tuple_element_72 );
        tmp_tuple_element_72 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 4, tmp_tuple_element_72 );
        tmp_tuple_element_72 = const_tuple_int_pos_999_tuple;
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_dict_key_72, 5, tmp_tuple_element_72 );
        tmp_dict_value_72 = const_tuple_str_plain_RGBA_str_plain_RGBA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_72, tmp_dict_value_72 );
        Py_DECREF( tmp_dict_key_72 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_76 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_76 == NULL ))
        {
            tmp_mvar_value_76 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_76 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_73 = tmp_mvar_value_76;
        tmp_dict_key_73 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 0, tmp_tuple_element_73 );
        tmp_tuple_element_73 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 1, tmp_tuple_element_73 );
        tmp_tuple_element_73 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 2, tmp_tuple_element_73 );
        tmp_tuple_element_73 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 3, tmp_tuple_element_73 );
        tmp_tuple_element_73 = const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 4, tmp_tuple_element_73 );
        tmp_tuple_element_73 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_73 );
        PyTuple_SET_ITEM( tmp_dict_key_73, 5, tmp_tuple_element_73 );
        tmp_dict_value_73 = const_tuple_str_plain_RGB_str_digest_ed6a9f3bbc7e4f523ae76e5bca2e9b87_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_73, tmp_dict_value_73 );
        Py_DECREF( tmp_dict_key_73 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_77 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_77 == NULL ))
        {
            tmp_mvar_value_77 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_77 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 225;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_74 = tmp_mvar_value_77;
        tmp_dict_key_74 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 0, tmp_tuple_element_74 );
        tmp_tuple_element_74 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 1, tmp_tuple_element_74 );
        tmp_tuple_element_74 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 2, tmp_tuple_element_74 );
        tmp_tuple_element_74 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 3, tmp_tuple_element_74 );
        tmp_tuple_element_74 = const_tuple_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 4, tmp_tuple_element_74 );
        tmp_tuple_element_74 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_74 );
        PyTuple_SET_ITEM( tmp_dict_key_74, 5, tmp_tuple_element_74 );
        tmp_dict_value_74 = const_tuple_str_plain_RGB_str_digest_96bd43a8b0706a78cd1cad9911adc73a_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_74, tmp_dict_value_74 );
        Py_DECREF( tmp_dict_key_74 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_78 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_78 == NULL ))
        {
            tmp_mvar_value_78 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_78 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 226;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_75 = tmp_mvar_value_78;
        tmp_dict_key_75 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 0, tmp_tuple_element_75 );
        tmp_tuple_element_75 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 1, tmp_tuple_element_75 );
        tmp_tuple_element_75 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 2, tmp_tuple_element_75 );
        tmp_tuple_element_75 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 3, tmp_tuple_element_75 );
        tmp_tuple_element_75 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 4, tmp_tuple_element_75 );
        tmp_tuple_element_75 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_75 );
        PyTuple_SET_ITEM( tmp_dict_key_75, 5, tmp_tuple_element_75 );
        tmp_dict_value_75 = const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_75, tmp_dict_value_75 );
        Py_DECREF( tmp_dict_key_75 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_79 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_79 == NULL ))
        {
            tmp_mvar_value_79 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_79 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 227;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_76 = tmp_mvar_value_79;
        tmp_dict_key_76 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 0, tmp_tuple_element_76 );
        tmp_tuple_element_76 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 1, tmp_tuple_element_76 );
        tmp_tuple_element_76 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 2, tmp_tuple_element_76 );
        tmp_tuple_element_76 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 3, tmp_tuple_element_76 );
        tmp_tuple_element_76 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 4, tmp_tuple_element_76 );
        tmp_tuple_element_76 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_dict_key_76, 5, tmp_tuple_element_76 );
        tmp_dict_value_76 = const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_76, tmp_dict_value_76 );
        Py_DECREF( tmp_dict_key_76 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_80 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_80 == NULL ))
        {
            tmp_mvar_value_80 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_80 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_77 = tmp_mvar_value_80;
        tmp_dict_key_77 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 0, tmp_tuple_element_77 );
        tmp_tuple_element_77 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 1, tmp_tuple_element_77 );
        tmp_tuple_element_77 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 2, tmp_tuple_element_77 );
        tmp_tuple_element_77 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 3, tmp_tuple_element_77 );
        tmp_tuple_element_77 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 4, tmp_tuple_element_77 );
        tmp_tuple_element_77 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_77 );
        PyTuple_SET_ITEM( tmp_dict_key_77, 5, tmp_tuple_element_77 );
        tmp_dict_value_77 = const_tuple_str_plain_RGBX_str_digest_3a8bd0f273227c1e25ee9d379a59290c_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_77, tmp_dict_value_77 );
        Py_DECREF( tmp_dict_key_77 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_81 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_81 == NULL ))
        {
            tmp_mvar_value_81 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_81 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 229;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_78 = tmp_mvar_value_81;
        tmp_dict_key_78 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 0, tmp_tuple_element_78 );
        tmp_tuple_element_78 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 1, tmp_tuple_element_78 );
        tmp_tuple_element_78 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 2, tmp_tuple_element_78 );
        tmp_tuple_element_78 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 3, tmp_tuple_element_78 );
        tmp_tuple_element_78 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 4, tmp_tuple_element_78 );
        tmp_tuple_element_78 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_78 );
        PyTuple_SET_ITEM( tmp_dict_key_78, 5, tmp_tuple_element_78 );
        tmp_dict_value_78 = const_tuple_str_plain_RGBX_str_digest_d1530cd9eda625c4eb12bb936e71432d_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_78, tmp_dict_value_78 );
        Py_DECREF( tmp_dict_key_78 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_82 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_82 == NULL ))
        {
            tmp_mvar_value_82 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_82 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 230;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_79 = tmp_mvar_value_82;
        tmp_dict_key_79 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 0, tmp_tuple_element_79 );
        tmp_tuple_element_79 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 1, tmp_tuple_element_79 );
        tmp_tuple_element_79 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 2, tmp_tuple_element_79 );
        tmp_tuple_element_79 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 3, tmp_tuple_element_79 );
        tmp_tuple_element_79 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 4, tmp_tuple_element_79 );
        tmp_tuple_element_79 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_79 );
        PyTuple_SET_ITEM( tmp_dict_key_79, 5, tmp_tuple_element_79 );
        tmp_dict_value_79 = const_tuple_str_plain_RGBA_str_digest_6a2e8bee5b1dc078fc0aa4d4b33a2fa1_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_79, tmp_dict_value_79 );
        Py_DECREF( tmp_dict_key_79 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_83 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_83 == NULL ))
        {
            tmp_mvar_value_83 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_83 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 231;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_80 = tmp_mvar_value_83;
        tmp_dict_key_80 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 0, tmp_tuple_element_80 );
        tmp_tuple_element_80 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 1, tmp_tuple_element_80 );
        tmp_tuple_element_80 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 2, tmp_tuple_element_80 );
        tmp_tuple_element_80 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 3, tmp_tuple_element_80 );
        tmp_tuple_element_80 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 4, tmp_tuple_element_80 );
        tmp_tuple_element_80 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_dict_key_80, 5, tmp_tuple_element_80 );
        tmp_dict_value_80 = const_tuple_str_plain_RGBA_str_digest_3d7b58fffa8ed7ce418bff1a75c77963_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_80, tmp_dict_value_80 );
        Py_DECREF( tmp_dict_key_80 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_84 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_84 == NULL ))
        {
            tmp_mvar_value_84 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_84 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_81 = tmp_mvar_value_84;
        tmp_dict_key_81 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 0, tmp_tuple_element_81 );
        tmp_tuple_element_81 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 1, tmp_tuple_element_81 );
        tmp_tuple_element_81 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 2, tmp_tuple_element_81 );
        tmp_tuple_element_81 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 3, tmp_tuple_element_81 );
        tmp_tuple_element_81 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 4, tmp_tuple_element_81 );
        tmp_tuple_element_81 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_81 );
        PyTuple_SET_ITEM( tmp_dict_key_81, 5, tmp_tuple_element_81 );
        tmp_dict_value_81 = const_tuple_str_plain_RGBA_str_digest_f169f20812704380dc83deb48954c693_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_81, tmp_dict_value_81 );
        Py_DECREF( tmp_dict_key_81 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_85 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_85 == NULL ))
        {
            tmp_mvar_value_85 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_85 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 233;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_82 = tmp_mvar_value_85;
        tmp_dict_key_82 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 0, tmp_tuple_element_82 );
        tmp_tuple_element_82 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 1, tmp_tuple_element_82 );
        tmp_tuple_element_82 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 2, tmp_tuple_element_82 );
        tmp_tuple_element_82 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 3, tmp_tuple_element_82 );
        tmp_tuple_element_82 = const_tuple_int_pos_16_int_pos_16_int_pos_16_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 4, tmp_tuple_element_82 );
        tmp_tuple_element_82 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_82 );
        PyTuple_SET_ITEM( tmp_dict_key_82, 5, tmp_tuple_element_82 );
        tmp_dict_value_82 = const_tuple_str_plain_RGBA_str_digest_104f43ace8a2dd2688c64d99e33006a2_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_82, tmp_dict_value_82 );
        Py_DECREF( tmp_dict_key_82 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_86 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_86 == NULL ))
        {
            tmp_mvar_value_86 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_86 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 235;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_83 = tmp_mvar_value_86;
        tmp_dict_key_83 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 0, tmp_tuple_element_83 );
        tmp_tuple_element_83 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 1, tmp_tuple_element_83 );
        tmp_tuple_element_83 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 2, tmp_tuple_element_83 );
        tmp_tuple_element_83 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 3, tmp_tuple_element_83 );
        tmp_tuple_element_83 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 4, tmp_tuple_element_83 );
        tmp_tuple_element_83 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_83 );
        PyTuple_SET_ITEM( tmp_dict_key_83, 5, tmp_tuple_element_83 );
        tmp_dict_value_83 = const_tuple_str_plain_P_str_digest_676e11a5ff7d2b82b18a5b0dbbad6c6d_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_83, tmp_dict_value_83 );
        Py_DECREF( tmp_dict_key_83 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_87 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_87 == NULL ))
        {
            tmp_mvar_value_87 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_87 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 236;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_84 = tmp_mvar_value_87;
        tmp_dict_key_84 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 0, tmp_tuple_element_84 );
        tmp_tuple_element_84 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 1, tmp_tuple_element_84 );
        tmp_tuple_element_84 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 2, tmp_tuple_element_84 );
        tmp_tuple_element_84 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 3, tmp_tuple_element_84 );
        tmp_tuple_element_84 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 4, tmp_tuple_element_84 );
        tmp_tuple_element_84 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_dict_key_84, 5, tmp_tuple_element_84 );
        tmp_dict_value_84 = const_tuple_str_plain_P_str_digest_676e11a5ff7d2b82b18a5b0dbbad6c6d_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_84, tmp_dict_value_84 );
        Py_DECREF( tmp_dict_key_84 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_88 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_88 == NULL ))
        {
            tmp_mvar_value_88 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_88 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 237;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_85 = tmp_mvar_value_88;
        tmp_dict_key_85 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 0, tmp_tuple_element_85 );
        tmp_tuple_element_85 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 1, tmp_tuple_element_85 );
        tmp_tuple_element_85 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 2, tmp_tuple_element_85 );
        tmp_tuple_element_85 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 3, tmp_tuple_element_85 );
        tmp_tuple_element_85 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 4, tmp_tuple_element_85 );
        tmp_tuple_element_85 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_85 );
        PyTuple_SET_ITEM( tmp_dict_key_85, 5, tmp_tuple_element_85 );
        tmp_dict_value_85 = const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_85, tmp_dict_value_85 );
        Py_DECREF( tmp_dict_key_85 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_89 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_89 == NULL ))
        {
            tmp_mvar_value_89 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_89 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 238;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_86 = tmp_mvar_value_89;
        tmp_dict_key_86 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 0, tmp_tuple_element_86 );
        tmp_tuple_element_86 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 1, tmp_tuple_element_86 );
        tmp_tuple_element_86 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 2, tmp_tuple_element_86 );
        tmp_tuple_element_86 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 3, tmp_tuple_element_86 );
        tmp_tuple_element_86 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 4, tmp_tuple_element_86 );
        tmp_tuple_element_86 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_86 );
        PyTuple_SET_ITEM( tmp_dict_key_86, 5, tmp_tuple_element_86 );
        tmp_dict_value_86 = const_tuple_str_plain_P_str_digest_a50f555c0b56fa82177e1fa640a59e78_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_86, tmp_dict_value_86 );
        Py_DECREF( tmp_dict_key_86 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_90 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_90 == NULL ))
        {
            tmp_mvar_value_90 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_90 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 239;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_87 = tmp_mvar_value_90;
        tmp_dict_key_87 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 0, tmp_tuple_element_87 );
        tmp_tuple_element_87 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 1, tmp_tuple_element_87 );
        tmp_tuple_element_87 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 2, tmp_tuple_element_87 );
        tmp_tuple_element_87 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 3, tmp_tuple_element_87 );
        tmp_tuple_element_87 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 4, tmp_tuple_element_87 );
        tmp_tuple_element_87 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_87 );
        PyTuple_SET_ITEM( tmp_dict_key_87, 5, tmp_tuple_element_87 );
        tmp_dict_value_87 = const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_87, tmp_dict_value_87 );
        Py_DECREF( tmp_dict_key_87 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_91 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_91 == NULL ))
        {
            tmp_mvar_value_91 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_91 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 240;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_88 = tmp_mvar_value_91;
        tmp_dict_key_88 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 0, tmp_tuple_element_88 );
        tmp_tuple_element_88 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 1, tmp_tuple_element_88 );
        tmp_tuple_element_88 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 2, tmp_tuple_element_88 );
        tmp_tuple_element_88 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 3, tmp_tuple_element_88 );
        tmp_tuple_element_88 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 4, tmp_tuple_element_88 );
        tmp_tuple_element_88 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_dict_key_88, 5, tmp_tuple_element_88 );
        tmp_dict_value_88 = const_tuple_str_plain_P_str_digest_045116fcde78869c4a017035801be409_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_88, tmp_dict_value_88 );
        Py_DECREF( tmp_dict_key_88 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_92 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_92 == NULL ))
        {
            tmp_mvar_value_92 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_92 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 241;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_89 = tmp_mvar_value_92;
        tmp_dict_key_89 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 0, tmp_tuple_element_89 );
        tmp_tuple_element_89 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 1, tmp_tuple_element_89 );
        tmp_tuple_element_89 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 2, tmp_tuple_element_89 );
        tmp_tuple_element_89 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 3, tmp_tuple_element_89 );
        tmp_tuple_element_89 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 4, tmp_tuple_element_89 );
        tmp_tuple_element_89 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_89 );
        PyTuple_SET_ITEM( tmp_dict_key_89, 5, tmp_tuple_element_89 );
        tmp_dict_value_89 = const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_89, tmp_dict_value_89 );
        Py_DECREF( tmp_dict_key_89 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_93 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_93 == NULL ))
        {
            tmp_mvar_value_93 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_93 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 242;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_90 = tmp_mvar_value_93;
        tmp_dict_key_90 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 0, tmp_tuple_element_90 );
        tmp_tuple_element_90 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 1, tmp_tuple_element_90 );
        tmp_tuple_element_90 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 2, tmp_tuple_element_90 );
        tmp_tuple_element_90 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 3, tmp_tuple_element_90 );
        tmp_tuple_element_90 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 4, tmp_tuple_element_90 );
        tmp_tuple_element_90 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_90 );
        PyTuple_SET_ITEM( tmp_dict_key_90, 5, tmp_tuple_element_90 );
        tmp_dict_value_90 = const_tuple_str_plain_P_str_digest_afdb5f00ce92cafe90c56f17650752ca_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_90, tmp_dict_value_90 );
        Py_DECREF( tmp_dict_key_90 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_94 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_94 == NULL ))
        {
            tmp_mvar_value_94 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_94 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 243;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_91 = tmp_mvar_value_94;
        tmp_dict_key_91 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 0, tmp_tuple_element_91 );
        tmp_tuple_element_91 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 1, tmp_tuple_element_91 );
        tmp_tuple_element_91 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 2, tmp_tuple_element_91 );
        tmp_tuple_element_91 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 3, tmp_tuple_element_91 );
        tmp_tuple_element_91 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 4, tmp_tuple_element_91 );
        tmp_tuple_element_91 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_91 );
        PyTuple_SET_ITEM( tmp_dict_key_91, 5, tmp_tuple_element_91 );
        tmp_dict_value_91 = const_tuple_str_plain_P_str_digest_19532ebc85912cba7ed62a9cd4e9c195_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_91, tmp_dict_value_91 );
        Py_DECREF( tmp_dict_key_91 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_95 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_95 == NULL ))
        {
            tmp_mvar_value_95 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_95 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 244;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_92 = tmp_mvar_value_95;
        tmp_dict_key_92 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 0, tmp_tuple_element_92 );
        tmp_tuple_element_92 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 1, tmp_tuple_element_92 );
        tmp_tuple_element_92 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 2, tmp_tuple_element_92 );
        tmp_tuple_element_92 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 3, tmp_tuple_element_92 );
        tmp_tuple_element_92 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 4, tmp_tuple_element_92 );
        tmp_tuple_element_92 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_92 );
        PyTuple_SET_ITEM( tmp_dict_key_92, 5, tmp_tuple_element_92 );
        tmp_dict_value_92 = const_tuple_str_plain_P_str_digest_19532ebc85912cba7ed62a9cd4e9c195_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_92, tmp_dict_value_92 );
        Py_DECREF( tmp_dict_key_92 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_96 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_96 == NULL ))
        {
            tmp_mvar_value_96 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_96 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 245;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_93 = tmp_mvar_value_96;
        tmp_dict_key_93 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 0, tmp_tuple_element_93 );
        tmp_tuple_element_93 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 1, tmp_tuple_element_93 );
        tmp_tuple_element_93 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 2, tmp_tuple_element_93 );
        tmp_tuple_element_93 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 3, tmp_tuple_element_93 );
        tmp_tuple_element_93 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 4, tmp_tuple_element_93 );
        tmp_tuple_element_93 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_93 );
        PyTuple_SET_ITEM( tmp_dict_key_93, 5, tmp_tuple_element_93 );
        tmp_dict_value_93 = const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_93, tmp_dict_value_93 );
        Py_DECREF( tmp_dict_key_93 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_97 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_97 == NULL ))
        {
            tmp_mvar_value_97 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_97 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 246;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_94 = tmp_mvar_value_97;
        tmp_dict_key_94 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 0, tmp_tuple_element_94 );
        tmp_tuple_element_94 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 1, tmp_tuple_element_94 );
        tmp_tuple_element_94 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 2, tmp_tuple_element_94 );
        tmp_tuple_element_94 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 3, tmp_tuple_element_94 );
        tmp_tuple_element_94 = const_tuple_int_pos_4_tuple;
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 4, tmp_tuple_element_94 );
        tmp_tuple_element_94 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_94 );
        PyTuple_SET_ITEM( tmp_dict_key_94, 5, tmp_tuple_element_94 );
        tmp_dict_value_94 = const_tuple_str_plain_P_str_digest_014ebc09434e7e49f602922eb046a479_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_94, tmp_dict_value_94 );
        Py_DECREF( tmp_dict_key_94 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_98 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_98 == NULL ))
        {
            tmp_mvar_value_98 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_98 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 247;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_95 = tmp_mvar_value_98;
        tmp_dict_key_95 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 0, tmp_tuple_element_95 );
        tmp_tuple_element_95 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 1, tmp_tuple_element_95 );
        tmp_tuple_element_95 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 2, tmp_tuple_element_95 );
        tmp_tuple_element_95 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 3, tmp_tuple_element_95 );
        tmp_tuple_element_95 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 4, tmp_tuple_element_95 );
        tmp_tuple_element_95 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_95 );
        PyTuple_SET_ITEM( tmp_dict_key_95, 5, tmp_tuple_element_95 );
        tmp_dict_value_95 = const_tuple_str_plain_P_str_plain_P_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_95, tmp_dict_value_95 );
        Py_DECREF( tmp_dict_key_95 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_99 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_99 == NULL ))
        {
            tmp_mvar_value_99 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_99 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 248;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_96 = tmp_mvar_value_99;
        tmp_dict_key_96 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 0, tmp_tuple_element_96 );
        tmp_tuple_element_96 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 1, tmp_tuple_element_96 );
        tmp_tuple_element_96 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 2, tmp_tuple_element_96 );
        tmp_tuple_element_96 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 3, tmp_tuple_element_96 );
        tmp_tuple_element_96 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 4, tmp_tuple_element_96 );
        tmp_tuple_element_96 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_96 );
        PyTuple_SET_ITEM( tmp_dict_key_96, 5, tmp_tuple_element_96 );
        tmp_dict_value_96 = const_tuple_str_plain_P_str_plain_P_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_96, tmp_dict_value_96 );
        Py_DECREF( tmp_dict_key_96 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_100 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_100 == NULL ))
        {
            tmp_mvar_value_100 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_100 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 249;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_97 = tmp_mvar_value_100;
        tmp_dict_key_97 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 0, tmp_tuple_element_97 );
        tmp_tuple_element_97 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 1, tmp_tuple_element_97 );
        tmp_tuple_element_97 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 2, tmp_tuple_element_97 );
        tmp_tuple_element_97 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 3, tmp_tuple_element_97 );
        tmp_tuple_element_97 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 4, tmp_tuple_element_97 );
        tmp_tuple_element_97 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_97 );
        PyTuple_SET_ITEM( tmp_dict_key_97, 5, tmp_tuple_element_97 );
        tmp_dict_value_97 = const_tuple_str_plain_PA_str_plain_PA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_97, tmp_dict_value_97 );
        Py_DECREF( tmp_dict_key_97 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_101 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_101 == NULL ))
        {
            tmp_mvar_value_101 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_101 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 250;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_98 = tmp_mvar_value_101;
        tmp_dict_key_98 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 0, tmp_tuple_element_98 );
        tmp_tuple_element_98 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 1, tmp_tuple_element_98 );
        tmp_tuple_element_98 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 2, tmp_tuple_element_98 );
        tmp_tuple_element_98 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 3, tmp_tuple_element_98 );
        tmp_tuple_element_98 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 4, tmp_tuple_element_98 );
        tmp_tuple_element_98 = const_tuple_int_pos_2_tuple;
        Py_INCREF( tmp_tuple_element_98 );
        PyTuple_SET_ITEM( tmp_dict_key_98, 5, tmp_tuple_element_98 );
        tmp_dict_value_98 = const_tuple_str_plain_PA_str_plain_PA_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_98, tmp_dict_value_98 );
        Py_DECREF( tmp_dict_key_98 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_102 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_102 == NULL ))
        {
            tmp_mvar_value_102 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_102 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 251;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_99 = tmp_mvar_value_102;
        tmp_dict_key_99 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 0, tmp_tuple_element_99 );
        tmp_tuple_element_99 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 1, tmp_tuple_element_99 );
        tmp_tuple_element_99 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 2, tmp_tuple_element_99 );
        tmp_tuple_element_99 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 3, tmp_tuple_element_99 );
        tmp_tuple_element_99 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 4, tmp_tuple_element_99 );
        tmp_tuple_element_99 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_99 );
        PyTuple_SET_ITEM( tmp_dict_key_99, 5, tmp_tuple_element_99 );
        tmp_dict_value_99 = const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_99, tmp_dict_value_99 );
        Py_DECREF( tmp_dict_key_99 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_103 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_103 == NULL ))
        {
            tmp_mvar_value_103 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_103 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 252;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_100 = tmp_mvar_value_103;
        tmp_dict_key_100 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 0, tmp_tuple_element_100 );
        tmp_tuple_element_100 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 1, tmp_tuple_element_100 );
        tmp_tuple_element_100 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 2, tmp_tuple_element_100 );
        tmp_tuple_element_100 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 3, tmp_tuple_element_100 );
        tmp_tuple_element_100 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 4, tmp_tuple_element_100 );
        tmp_tuple_element_100 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_100 );
        PyTuple_SET_ITEM( tmp_dict_key_100, 5, tmp_tuple_element_100 );
        tmp_dict_value_100 = const_tuple_str_plain_P_str_digest_d15d46b9a984d08f6d37480428d03f1f_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_100, tmp_dict_value_100 );
        Py_DECREF( tmp_dict_key_100 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_104 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_104 == NULL ))
        {
            tmp_mvar_value_104 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_104 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 254;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_101 = tmp_mvar_value_104;
        tmp_dict_key_101 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 0, tmp_tuple_element_101 );
        tmp_tuple_element_101 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 1, tmp_tuple_element_101 );
        tmp_tuple_element_101 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 2, tmp_tuple_element_101 );
        tmp_tuple_element_101 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 3, tmp_tuple_element_101 );
        tmp_tuple_element_101 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 4, tmp_tuple_element_101 );
        tmp_tuple_element_101 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_101 );
        PyTuple_SET_ITEM( tmp_dict_key_101, 5, tmp_tuple_element_101 );
        tmp_dict_value_101 = const_tuple_str_plain_CMYK_str_plain_CMYK_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_101, tmp_dict_value_101 );
        Py_DECREF( tmp_dict_key_101 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_105 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_105 == NULL ))
        {
            tmp_mvar_value_105 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_105 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 255;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_102 = tmp_mvar_value_105;
        tmp_dict_key_102 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 0, tmp_tuple_element_102 );
        tmp_tuple_element_102 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 1, tmp_tuple_element_102 );
        tmp_tuple_element_102 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 2, tmp_tuple_element_102 );
        tmp_tuple_element_102 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 3, tmp_tuple_element_102 );
        tmp_tuple_element_102 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 4, tmp_tuple_element_102 );
        tmp_tuple_element_102 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_102 );
        PyTuple_SET_ITEM( tmp_dict_key_102, 5, tmp_tuple_element_102 );
        tmp_dict_value_102 = const_tuple_str_plain_CMYK_str_plain_CMYK_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_102, tmp_dict_value_102 );
        Py_DECREF( tmp_dict_key_102 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_106 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_106 == NULL ))
        {
            tmp_mvar_value_106 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_106 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 256;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_103 = tmp_mvar_value_106;
        tmp_dict_key_103 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 0, tmp_tuple_element_103 );
        tmp_tuple_element_103 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 1, tmp_tuple_element_103 );
        tmp_tuple_element_103 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 2, tmp_tuple_element_103 );
        tmp_tuple_element_103 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 3, tmp_tuple_element_103 );
        tmp_tuple_element_103 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 4, tmp_tuple_element_103 );
        tmp_tuple_element_103 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_103 );
        PyTuple_SET_ITEM( tmp_dict_key_103, 5, tmp_tuple_element_103 );
        tmp_dict_value_103 = const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_103, tmp_dict_value_103 );
        Py_DECREF( tmp_dict_key_103 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_107 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_107 == NULL ))
        {
            tmp_mvar_value_107 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_107 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 257;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_104 = tmp_mvar_value_107;
        tmp_dict_key_104 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 0, tmp_tuple_element_104 );
        tmp_tuple_element_104 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 1, tmp_tuple_element_104 );
        tmp_tuple_element_104 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 2, tmp_tuple_element_104 );
        tmp_tuple_element_104 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 3, tmp_tuple_element_104 );
        tmp_tuple_element_104 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 4, tmp_tuple_element_104 );
        tmp_tuple_element_104 = const_tuple_int_0_tuple;
        Py_INCREF( tmp_tuple_element_104 );
        PyTuple_SET_ITEM( tmp_dict_key_104, 5, tmp_tuple_element_104 );
        tmp_dict_value_104 = const_tuple_str_plain_CMYK_str_plain_CMYKX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_104, tmp_dict_value_104 );
        Py_DECREF( tmp_dict_key_104 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_108 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_108 == NULL ))
        {
            tmp_mvar_value_108 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_108 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_105 = tmp_mvar_value_108;
        tmp_dict_key_105 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 0, tmp_tuple_element_105 );
        tmp_tuple_element_105 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 1, tmp_tuple_element_105 );
        tmp_tuple_element_105 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 2, tmp_tuple_element_105 );
        tmp_tuple_element_105 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 3, tmp_tuple_element_105 );
        tmp_tuple_element_105 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 4, tmp_tuple_element_105 );
        tmp_tuple_element_105 = const_tuple_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_105 );
        PyTuple_SET_ITEM( tmp_dict_key_105, 5, tmp_tuple_element_105 );
        tmp_dict_value_105 = const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_105, tmp_dict_value_105 );
        Py_DECREF( tmp_dict_key_105 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_109 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_109 == NULL ))
        {
            tmp_mvar_value_109 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_109 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 259;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_106 = tmp_mvar_value_109;
        tmp_dict_key_106 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 0, tmp_tuple_element_106 );
        tmp_tuple_element_106 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 1, tmp_tuple_element_106 );
        tmp_tuple_element_106 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 2, tmp_tuple_element_106 );
        tmp_tuple_element_106 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 3, tmp_tuple_element_106 );
        tmp_tuple_element_106 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 4, tmp_tuple_element_106 );
        tmp_tuple_element_106 = const_tuple_int_0_int_0_tuple;
        Py_INCREF( tmp_tuple_element_106 );
        PyTuple_SET_ITEM( tmp_dict_key_106, 5, tmp_tuple_element_106 );
        tmp_dict_value_106 = const_tuple_str_plain_CMYK_str_plain_CMYKXX_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_106, tmp_dict_value_106 );
        Py_DECREF( tmp_dict_key_106 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_110 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_110 == NULL ))
        {
            tmp_mvar_value_110 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_110 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 263;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_107 = tmp_mvar_value_110;
        tmp_dict_key_107 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 0, tmp_tuple_element_107 );
        tmp_tuple_element_107 = const_int_pos_6;
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 1, tmp_tuple_element_107 );
        tmp_tuple_element_107 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 2, tmp_tuple_element_107 );
        tmp_tuple_element_107 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 3, tmp_tuple_element_107 );
        tmp_tuple_element_107 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 4, tmp_tuple_element_107 );
        tmp_tuple_element_107 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_107 );
        PyTuple_SET_ITEM( tmp_dict_key_107, 5, tmp_tuple_element_107 );
        tmp_dict_value_107 = const_tuple_str_plain_RGB_str_plain_RGB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_107, tmp_dict_value_107 );
        Py_DECREF( tmp_dict_key_107 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_111 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_111 == NULL ))
        {
            tmp_mvar_value_111 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_111 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 264;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_108 = tmp_mvar_value_111;
        tmp_dict_key_108 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 0, tmp_tuple_element_108 );
        tmp_tuple_element_108 = const_int_pos_6;
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 1, tmp_tuple_element_108 );
        tmp_tuple_element_108 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 2, tmp_tuple_element_108 );
        tmp_tuple_element_108 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 3, tmp_tuple_element_108 );
        tmp_tuple_element_108 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 4, tmp_tuple_element_108 );
        tmp_tuple_element_108 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_108 );
        PyTuple_SET_ITEM( tmp_dict_key_108, 5, tmp_tuple_element_108 );
        tmp_dict_value_108 = const_tuple_str_plain_RGB_str_plain_RGB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_108, tmp_dict_value_108 );
        Py_DECREF( tmp_dict_key_108 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_112 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_112 == NULL ))
        {
            tmp_mvar_value_112 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_112 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 266;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_109 = tmp_mvar_value_112;
        tmp_dict_key_109 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 0, tmp_tuple_element_109 );
        tmp_tuple_element_109 = const_int_pos_8;
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 1, tmp_tuple_element_109 );
        tmp_tuple_element_109 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 2, tmp_tuple_element_109 );
        tmp_tuple_element_109 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 3, tmp_tuple_element_109 );
        tmp_tuple_element_109 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 4, tmp_tuple_element_109 );
        tmp_tuple_element_109 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_109 );
        PyTuple_SET_ITEM( tmp_dict_key_109, 5, tmp_tuple_element_109 );
        tmp_dict_value_109 = const_tuple_str_plain_LAB_str_plain_LAB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_109, tmp_dict_value_109 );
        Py_DECREF( tmp_dict_key_109 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_113 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_113 == NULL ))
        {
            tmp_mvar_value_113 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_113 == NULL )
        {
            Py_DECREF( tmp_assign_source_79 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 267;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_110 = tmp_mvar_value_113;
        tmp_dict_key_110 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 0, tmp_tuple_element_110 );
        tmp_tuple_element_110 = const_int_pos_8;
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 1, tmp_tuple_element_110 );
        tmp_tuple_element_110 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 2, tmp_tuple_element_110 );
        tmp_tuple_element_110 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 3, tmp_tuple_element_110 );
        tmp_tuple_element_110 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 4, tmp_tuple_element_110 );
        tmp_tuple_element_110 = const_tuple_empty;
        Py_INCREF( tmp_tuple_element_110 );
        PyTuple_SET_ITEM( tmp_dict_key_110, 5, tmp_tuple_element_110 );
        tmp_dict_value_110 = const_tuple_str_plain_LAB_str_plain_LAB_tuple;
        tmp_res = PyDict_SetItem( tmp_assign_source_79, tmp_dict_key_110, tmp_dict_value_110 );
        Py_DECREF( tmp_dict_key_110 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_79 );

            exception_lineno = 140;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_OPEN_INFO, tmp_assign_source_79 );
    }
    {
        PyObject *tmp_assign_source_80;
        tmp_assign_source_80 = LIST_COPY( const_list_e86f3f63dcccafd263b2bedfc1d476de_list );
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_PREFIXES, tmp_assign_source_80 );
    }
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_1__accept(  );



        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__accept, tmp_assign_source_81 );
    }
    {
        PyObject *tmp_assign_source_82;
        tmp_assign_source_82 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_2__limit_rational(  );



        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__limit_rational, tmp_assign_source_82 );
    }
    {
        PyObject *tmp_assign_source_83;
        tmp_assign_source_83 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_3__libtiff_version(  );



        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__libtiff_version, tmp_assign_source_83 );
    }
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__load_dispatch, tmp_assign_source_84 );
    }
    {
        PyObject *tmp_assign_source_85;
        tmp_assign_source_85 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__write_dispatch, tmp_assign_source_85 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_tuple_element_111;
        PyObject *tmp_mvar_value_114;
        tmp_mvar_value_114 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Rational );

        if (unlikely( tmp_mvar_value_114 == NULL ))
        {
            tmp_mvar_value_114 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Rational );
        }

        if ( tmp_mvar_value_114 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Rational" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 299;

            goto try_except_handler_11;
        }

        tmp_tuple_element_111 = tmp_mvar_value_114;
        tmp_assign_source_86 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_111 );
        PyTuple_SET_ITEM( tmp_assign_source_86, 0, tmp_tuple_element_111 );
        assert( tmp_class_creation_1__bases_orig == NULL );
        tmp_class_creation_1__bases_orig = tmp_assign_source_86;
    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT( tmp_class_creation_1__bases_orig );
        tmp_dircall_arg1_1 = tmp_class_creation_1__bases_orig;
        Py_INCREF( tmp_dircall_arg1_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_87 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_87 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        assert( tmp_class_creation_1__bases == NULL );
        tmp_class_creation_1__bases = tmp_assign_source_87;
    }
    {
        PyObject *tmp_assign_source_88;
        tmp_assign_source_88 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_88;
    }
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_class_creation_1__bases );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_subscribed_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_type_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        Py_DECREF( tmp_type_arg_1 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_89 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_89 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_89;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_11;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_1 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_1, const_str_plain___prepare__ );
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_90;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_112;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_2 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___prepare__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_11;
            }
            tmp_tuple_element_112 = const_str_plain_IFDRational;
            tmp_args_name_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_112 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_112 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_112 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_112 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_112 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 299;
            tmp_assign_source_90 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            if ( tmp_assign_source_90 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_11;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_90;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_3 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_3, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_11;
            }
            tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_113;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_113 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_113 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 299;

                    goto try_except_handler_11;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_113 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_2 = tmp_class_creation_1__prepared;
                tmp_source_name_4 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_4 == NULL) );
                tmp_tuple_element_113 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_tuple_element_113 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 299;

                    goto try_except_handler_11;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_113 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 299;

                    goto try_except_handler_11;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 299;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_11;
            }
            branch_no_4:;
        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_91;
            tmp_assign_source_91 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_91;
        }
        branch_end_3:;
    }
    {
        PyObject *tmp_assign_source_92;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_PIL$TiffImagePlugin_299 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_13;
        }
        tmp_dictset_value = const_str_digest_181093529040d325153e3d3d27abab18;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_13;
        }
        tmp_dictset_value = const_str_plain_IFDRational;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;

            goto try_except_handler_13;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_822097513f144e173a2602fbaf394b97_3, codeobj_822097513f144e173a2602fbaf394b97, module_PIL$TiffImagePlugin, sizeof(void *) );
        frame_822097513f144e173a2602fbaf394b97_3 = cache_frame_822097513f144e173a2602fbaf394b97_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_822097513f144e173a2602fbaf394b97_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_822097513f144e173a2602fbaf394b97_3 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_tuple_str_plain__numerator_str_plain__denominator_str_plain__val_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___slots__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 311;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_int_pos_1_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_4___init__( tmp_defaults_1 );



            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 313;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_2;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_299, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_7 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_3;
            }
            else
            {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            tmp_called_name_2 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain_property );

            if ( tmp_called_name_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_args_element_name_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_5_numerator(  );



            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 343;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_called_name_3 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_2 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_5_numerator(  );



            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 343;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_3:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain_numerator, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_4;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_299, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_8 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_4;
            }
            else
            {
                goto condexpr_false_4;
            }
            condexpr_true_4:;
            tmp_called_name_4 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain_property );

            if ( tmp_called_name_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_args_element_name_3 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_6_denominator(  );



            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 347;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_4;
            condexpr_false_4:;
            tmp_called_name_5 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_4 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_6_denominator(  );



            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 347;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_4:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain_denominator, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_7_limit_rational(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain_limit_rational, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_8___repr__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___repr__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_9___hash__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___hash__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 367;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_10___eq__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___eq__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 370;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_11__delegate(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 373;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_called_name_6;
            tmp_called_name_6 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 386;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_str_plain___add___tuple, 0 ) );

            Py_DECREF( tmp_called_name_6 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___add__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_7;
            tmp_called_name_7 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_7 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 387;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_plain___radd___tuple, 0 ) );

            Py_DECREF( tmp_called_name_7 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___radd__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_8;
            tmp_called_name_8 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_8 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 388;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 388;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_str_plain___sub___tuple, 0 ) );

            Py_DECREF( tmp_called_name_8 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___sub__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_9;
            tmp_called_name_9 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_9 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 389;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 389;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_str_plain___rsub___tuple, 0 ) );

            Py_DECREF( tmp_called_name_9 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rsub__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_10;
            tmp_called_name_10 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_10 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 390;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_str_plain___div___tuple, 0 ) );

            Py_DECREF( tmp_called_name_10 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___div__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_11;
            tmp_called_name_11 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_11 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 391;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_str_plain___rdiv___tuple, 0 ) );

            Py_DECREF( tmp_called_name_11 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rdiv__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 391;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_12;
            tmp_called_name_12 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_12 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 392;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_str_plain___mul___tuple, 0 ) );

            Py_DECREF( tmp_called_name_12 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___mul__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_13;
            tmp_called_name_13 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_13 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 393;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 393;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 393;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, &PyTuple_GET_ITEM( const_tuple_str_plain___rmul___tuple, 0 ) );

            Py_DECREF( tmp_called_name_13 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 393;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rmul__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 393;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_14;
            tmp_called_name_14 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_14 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 394;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_str_plain___truediv___tuple, 0 ) );

            Py_DECREF( tmp_called_name_14 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___truediv__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 394;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_15;
            tmp_called_name_15 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_15 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 395;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_str_plain___rtruediv___tuple, 0 ) );

            Py_DECREF( tmp_called_name_15 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rtruediv__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 395;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_16;
            tmp_called_name_16 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_16 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 396;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, &PyTuple_GET_ITEM( const_tuple_str_plain___floordiv___tuple, 0 ) );

            Py_DECREF( tmp_called_name_16 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___floordiv__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_17;
            tmp_called_name_17 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_17 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 397;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, &PyTuple_GET_ITEM( const_tuple_str_plain___rfloordiv___tuple, 0 ) );

            Py_DECREF( tmp_called_name_17 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rfloordiv__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 397;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_18;
            tmp_called_name_18 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_18 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 398;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, &PyTuple_GET_ITEM( const_tuple_str_plain___mod___tuple, 0 ) );

            Py_DECREF( tmp_called_name_18 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___mod__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_19;
            tmp_called_name_19 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_19 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 399;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 399;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 399;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, &PyTuple_GET_ITEM( const_tuple_str_plain___rmod___tuple, 0 ) );

            Py_DECREF( tmp_called_name_19 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 399;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rmod__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 399;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_20;
            tmp_called_name_20 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_20 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 400;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 400;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 400;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, &PyTuple_GET_ITEM( const_tuple_str_plain___pow___tuple, 0 ) );

            Py_DECREF( tmp_called_name_20 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 400;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___pow__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 400;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_21;
            tmp_called_name_21 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_21 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 401;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 401;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 401;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, &PyTuple_GET_ITEM( const_tuple_str_plain___rpow___tuple, 0 ) );

            Py_DECREF( tmp_called_name_21 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 401;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___rpow__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 401;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_22;
            tmp_called_name_22 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_22 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 402;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_22, &PyTuple_GET_ITEM( const_tuple_str_plain___pos___tuple, 0 ) );

            Py_DECREF( tmp_called_name_22 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___pos__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_23;
            tmp_called_name_23 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_23 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 403;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 403;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 403;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_23, &PyTuple_GET_ITEM( const_tuple_str_plain___neg___tuple, 0 ) );

            Py_DECREF( tmp_called_name_23 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 403;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___neg__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 403;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_24;
            tmp_called_name_24 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_24 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 404;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_24 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 404;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 404;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_24, &PyTuple_GET_ITEM( const_tuple_str_plain___abs___tuple, 0 ) );

            Py_DECREF( tmp_called_name_24 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 404;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___abs__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 404;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_25;
            tmp_called_name_25 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_25 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 405;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 405;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 405;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_25, &PyTuple_GET_ITEM( const_tuple_str_plain___trunc___tuple, 0 ) );

            Py_DECREF( tmp_called_name_25 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 405;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___trunc__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 405;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_26;
            tmp_called_name_26 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_26 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 406;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 406;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 406;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_26, &PyTuple_GET_ITEM( const_tuple_str_plain___lt___tuple, 0 ) );

            Py_DECREF( tmp_called_name_26 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 406;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___lt__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 406;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_27;
            tmp_called_name_27 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_27 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 407;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_27, &PyTuple_GET_ITEM( const_tuple_str_plain___gt___tuple, 0 ) );

            Py_DECREF( tmp_called_name_27 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___gt__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_28;
            tmp_called_name_28 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_28 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 408;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 408;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 408;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_28, &PyTuple_GET_ITEM( const_tuple_str_plain___le___tuple, 0 ) );

            Py_DECREF( tmp_called_name_28 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 408;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___le__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 408;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_29;
            tmp_called_name_29 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_29 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 409;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 409;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 409;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_29, &PyTuple_GET_ITEM( const_tuple_str_plain___ge___tuple, 0 ) );

            Py_DECREF( tmp_called_name_29 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 409;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___ge__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 409;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_30;
            tmp_called_name_30 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_30 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 410;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_30 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 410;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 410;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_30, &PyTuple_GET_ITEM( const_tuple_str_plain___nonzero___tuple, 0 ) );

            Py_DECREF( tmp_called_name_30 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 410;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___nonzero__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 410;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_31;
            tmp_called_name_31 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_31 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 411;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_31 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 411;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 411;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_31, &PyTuple_GET_ITEM( const_tuple_str_plain___ceil___tuple, 0 ) );

            Py_DECREF( tmp_called_name_31 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 411;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___ceil__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 411;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_32;
            tmp_called_name_32 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_32 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 412;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_32 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 412;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 412;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_32, &PyTuple_GET_ITEM( const_tuple_str_plain___floor___tuple, 0 ) );

            Py_DECREF( tmp_called_name_32 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 412;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___floor__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 412;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_name_33;
            tmp_called_name_33 = PyObject_GetItem( locals_PIL$TiffImagePlugin_299, const_str_plain__delegate );

            if ( tmp_called_name_33 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_delegate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 413;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_33 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 413;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_822097513f144e173a2602fbaf394b97_3->m_frame.f_lineno = 413;
            tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_33, &PyTuple_GET_ITEM( const_tuple_str_plain___round___tuple, 0 ) );

            Py_DECREF( tmp_called_name_33 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 413;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___round__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 413;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_822097513f144e173a2602fbaf394b97_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_822097513f144e173a2602fbaf394b97_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_822097513f144e173a2602fbaf394b97_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_822097513f144e173a2602fbaf394b97_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_822097513f144e173a2602fbaf394b97_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_822097513f144e173a2602fbaf394b97_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if ( frame_822097513f144e173a2602fbaf394b97_3 == cache_frame_822097513f144e173a2602fbaf394b97_3 )
        {
            Py_DECREF( frame_822097513f144e173a2602fbaf394b97_3 );
        }
        cache_frame_822097513f144e173a2602fbaf394b97_3 = NULL;

        assertFrameObject( frame_822097513f144e173a2602fbaf394b97_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_13;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_compexpr_left_2 = tmp_class_creation_1__bases;
            CHECK_OBJECT( tmp_class_creation_1__bases_orig );
            tmp_compexpr_right_2 = tmp_class_creation_1__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_13;
            }
            tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            CHECK_OBJECT( tmp_class_creation_1__bases_orig );
            tmp_dictset_value = tmp_class_creation_1__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_299, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_13;
            }
            branch_no_5:;
        }
        {
            PyObject *tmp_assign_source_93;
            PyObject *tmp_called_name_34;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_114;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_34 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_114 = const_str_plain_IFDRational;
            tmp_args_name_2 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_114 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_114 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_114 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_114 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_114 );
            tmp_tuple_element_114 = locals_PIL$TiffImagePlugin_299;
            Py_INCREF( tmp_tuple_element_114 );
            PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_114 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 299;
            tmp_assign_source_93 = CALL_FUNCTION( tmp_called_name_34, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            if ( tmp_assign_source_93 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;

                goto try_except_handler_13;
            }
            assert( outline_1_var___class__ == NULL );
            outline_1_var___class__ = tmp_assign_source_93;
        }
        CHECK_OBJECT( outline_1_var___class__ );
        tmp_assign_source_92 = outline_1_var___class__;
        Py_INCREF( tmp_assign_source_92 );
        goto try_return_handler_13;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF( locals_PIL$TiffImagePlugin_299 );
        locals_PIL$TiffImagePlugin_299 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$TiffImagePlugin_299 );
        locals_PIL$TiffImagePlugin_299 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 299;
        goto try_except_handler_11;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_IFDRational, tmp_assign_source_92 );
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases_orig );
    tmp_class_creation_1__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases_orig );
    Py_DECREF( tmp_class_creation_1__bases_orig );
    tmp_class_creation_1__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_tuple_element_115;
        PyObject *tmp_mvar_value_115;
        tmp_mvar_value_115 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MutableMapping );

        if (unlikely( tmp_mvar_value_115 == NULL ))
        {
            tmp_mvar_value_115 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MutableMapping );
        }

        if ( tmp_mvar_value_115 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MutableMapping" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 416;

            goto try_except_handler_14;
        }

        tmp_tuple_element_115 = tmp_mvar_value_115;
        tmp_assign_source_94 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_115 );
        PyTuple_SET_ITEM( tmp_assign_source_94, 0, tmp_tuple_element_115 );
        assert( tmp_class_creation_2__bases_orig == NULL );
        tmp_class_creation_2__bases_orig = tmp_assign_source_94;
    }
    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT( tmp_class_creation_2__bases_orig );
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF( tmp_dircall_arg1_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_95 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_95 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        assert( tmp_class_creation_2__bases == NULL );
        tmp_class_creation_2__bases = tmp_assign_source_95;
    }
    {
        PyObject *tmp_assign_source_96;
        tmp_assign_source_96 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_96;
    }
    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_11;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_5;
        }
        else
        {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_class_creation_2__bases );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        tmp_condition_result_11 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_6;
        }
        else
        {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_subscribed_name_2 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        if ( tmp_type_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1( tmp_type_arg_3 );
        Py_DECREF( tmp_type_arg_3 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_97 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_97 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_97;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_14;
        }
        branch_no_6:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_5 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_5, const_str_plain___prepare__ );
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_98;
            PyObject *tmp_called_name_35;
            PyObject *tmp_source_name_6;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_116;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_6 = tmp_class_creation_2__metaclass;
            tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___prepare__ );
            if ( tmp_called_name_35 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_14;
            }
            tmp_tuple_element_116 = const_str_plain_ImageFileDirectory_v2;
            tmp_args_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_116 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_116 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_116 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_116 );
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_116 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 416;
            tmp_assign_source_98 = CALL_FUNCTION( tmp_called_name_35, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_35 );
            Py_DECREF( tmp_args_name_3 );
            if ( tmp_assign_source_98 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_14;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_98;
        }
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_7 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_7, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_14;
            }
            tmp_condition_result_14 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_117;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_type_arg_4;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_117 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_117 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 416;

                    goto try_except_handler_14;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_117 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_4 = tmp_class_creation_2__prepared;
                tmp_source_name_8 = BUILTIN_TYPE1( tmp_type_arg_4 );
                assert( !(tmp_source_name_8 == NULL) );
                tmp_tuple_element_117 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_8 );
                if ( tmp_tuple_element_117 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 416;

                    goto try_except_handler_14;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_117 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 416;

                    goto try_except_handler_14;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 416;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_14;
            }
            branch_no_8:;
        }
        goto branch_end_7;
        branch_no_7:;
        {
            PyObject *tmp_assign_source_99;
            tmp_assign_source_99 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_99;
        }
        branch_end_7:;
    }
    {
        PyObject *tmp_assign_source_100;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_PIL$TiffImagePlugin_416 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_16;
        }
        tmp_dictset_value = const_str_digest_6a4528fd84c0e2b69d390d3bac48a989;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_16;
        }
        tmp_dictset_value = const_str_plain_ImageFileDirectory_v2;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;

            goto try_except_handler_16;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_fe73e589bb33c902ac4cf7156b7f9250_4, codeobj_fe73e589bb33c902ac4cf7156b7f9250, module_PIL$TiffImagePlugin, sizeof(void *) );
        frame_fe73e589bb33c902ac4cf7156b7f9250_4 = cache_frame_fe73e589bb33c902ac4cf7156b7f9250_4;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_fe73e589bb33c902ac4cf7156b7f9250_4 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_fe73e589bb33c902ac4cf7156b7f9250_4 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = const_tuple_bytes_digest_86b03d73e2e9c8df5a251fa8c233c072_none_tuple;
            Py_INCREF( tmp_defaults_2 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_12___init__( tmp_defaults_2 );



            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 470;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_15;
            PyObject *tmp_called_name_36;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_called_name_37;
            PyObject *tmp_args_element_name_6;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_15 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_7;
            }
            else
            {
                goto condexpr_false_7;
            }
            condexpr_true_7:;
            tmp_called_name_36 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_called_name_36 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_36 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_5 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_13_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 494;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_36, call_args );
            }

            Py_DECREF( tmp_called_name_36 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            goto condexpr_end_7;
            condexpr_false_7:;
            tmp_called_name_37 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_6 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_13_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 494;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_37, call_args );
            }

            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            condexpr_end_7:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_prefix, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 494;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_called_name_38;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_called_name_39;
            PyObject *tmp_args_element_name_8;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_16 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_8;
            }
            else
            {
                goto condexpr_false_8;
            }
            condexpr_true_8:;
            tmp_called_name_38 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_called_name_38 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_38 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_7 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_14_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 495;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_38, call_args );
            }

            Py_DECREF( tmp_called_name_38 );
            Py_DECREF( tmp_args_element_name_7 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            goto condexpr_end_8;
            condexpr_false_8:;
            tmp_called_name_39 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_8 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_14_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 495;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_39, call_args );
            }

            Py_DECREF( tmp_args_element_name_8 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            condexpr_end_8:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_offset, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_called_name_40;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_called_name_41;
            PyObject *tmp_args_element_name_10;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_17 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_9;
            }
            else
            {
                goto condexpr_false_9;
            }
            condexpr_true_9:;
            tmp_called_name_40 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_property );

            if ( tmp_called_name_40 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_40 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_9 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_15_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 496;
            {
                PyObject *call_args[] = { tmp_args_element_name_9 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_40, call_args );
            }

            Py_DECREF( tmp_called_name_40 );
            Py_DECREF( tmp_args_element_name_9 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            goto condexpr_end_9;
            condexpr_false_9:;
            tmp_called_name_41 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_10 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_15_lambda(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 496;
            {
                PyObject *call_args[] = { tmp_args_element_name_10 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_41, call_args );
            }

            Py_DECREF( tmp_args_element_name_10 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            condexpr_end_9:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_legacy_api, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_args_element_name_11;
            tmp_called_instance_2 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_legacy_api );

            if ( tmp_called_instance_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "legacy_api" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 498;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 498;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_11 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_16_legacy_api(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 498;
            {
                PyObject *call_args[] = { tmp_args_element_name_11 };
                tmp_dictset_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_setter, call_args );
            }

            Py_DECREF( tmp_called_instance_2 );
            Py_DECREF( tmp_args_element_name_11 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 498;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_legacy_api, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 498;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_17_reset(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_reset, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 502;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_18___str__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___str__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 510;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_19_named(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_named, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 513;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_20___len__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___len__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_21___getitem__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___getitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 525;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_22___contains__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___contains__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 536;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_mvar_value_116;
            tmp_operand_name_3 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_py3 );

            if ( tmp_operand_name_3 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_mvar_value_116 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_py3 );

                if (unlikely( tmp_mvar_value_116 == NULL ))
                {
                    tmp_mvar_value_116 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_py3 );
                }

                if ( tmp_mvar_value_116 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "py3" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 539;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                tmp_operand_name_3 = tmp_mvar_value_116;
                Py_INCREF( tmp_operand_name_3 );
                }
            }

            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            Py_DECREF( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 539;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_18 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_23_has_key(  );



            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_has_key, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 540;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            branch_no_9:;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_24___setitem__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___setitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 543;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_25__setitem(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__setitem, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 546;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_26___delitem__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___delitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 615;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_27___iter__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___iter__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 620;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_28__unpack(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__unpack, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 623;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_29__pack(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__pack, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 626;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_30__register_loader(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 629;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_31__register_writer(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 638;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_32__register_basic(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_basic, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 644;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            nuitka_bool tmp_condition_result_19;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_list );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 654;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_condition_result_19 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_called_name_42;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_12;
                nuitka_bool tmp_condition_result_20;
                PyObject *tmp_called_name_43;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_args_element_name_14;
                PyObject *tmp_list_element_1;
                PyObject *tmp_tuple_element_118;
                PyObject *tmp_source_name_9;
                PyObject *tmp_mvar_value_117;
                PyObject *tmp_tuple_element_119;
                PyObject *tmp_source_name_10;
                PyObject *tmp_mvar_value_118;
                PyObject *tmp_tuple_element_120;
                PyObject *tmp_source_name_11;
                PyObject *tmp_mvar_value_119;
                PyObject *tmp_tuple_element_121;
                PyObject *tmp_source_name_12;
                PyObject *tmp_mvar_value_120;
                PyObject *tmp_tuple_element_122;
                PyObject *tmp_source_name_13;
                PyObject *tmp_mvar_value_121;
                PyObject *tmp_tuple_element_123;
                PyObject *tmp_source_name_14;
                PyObject *tmp_mvar_value_122;
                PyObject *tmp_tuple_element_124;
                PyObject *tmp_source_name_15;
                PyObject *tmp_mvar_value_123;
                PyObject *tmp_called_name_44;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_args_element_name_16;
                PyObject *tmp_list_element_2;
                PyObject *tmp_tuple_element_125;
                PyObject *tmp_source_name_16;
                PyObject *tmp_mvar_value_124;
                PyObject *tmp_tuple_element_126;
                PyObject *tmp_source_name_17;
                PyObject *tmp_mvar_value_125;
                PyObject *tmp_tuple_element_127;
                PyObject *tmp_source_name_18;
                PyObject *tmp_mvar_value_126;
                PyObject *tmp_tuple_element_128;
                PyObject *tmp_source_name_19;
                PyObject *tmp_mvar_value_127;
                PyObject *tmp_tuple_element_129;
                PyObject *tmp_source_name_20;
                PyObject *tmp_mvar_value_128;
                PyObject *tmp_tuple_element_130;
                PyObject *tmp_source_name_21;
                PyObject *tmp_mvar_value_129;
                PyObject *tmp_tuple_element_131;
                PyObject *tmp_source_name_22;
                PyObject *tmp_mvar_value_130;
                tmp_called_name_42 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_list );

                if ( tmp_called_name_42 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_called_name_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_map );

                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_condition_result_20 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_10;
                }
                else
                {
                    goto condexpr_false_10;
                }
                condexpr_true_10:;
                tmp_called_name_43 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_map );

                if ( tmp_called_name_43 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                    Py_DECREF( tmp_called_name_42 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "map" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_called_name_43 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_args_element_name_13 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_basic );

                if ( tmp_args_element_name_13 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_basic" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_args_element_name_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_source_name_9 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_9 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_117 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_117 == NULL ))
                    {
                        tmp_mvar_value_117 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_117 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 655;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_9 = tmp_mvar_value_117;
                    Py_INCREF( tmp_source_name_9 );
                    }
                }

                tmp_tuple_element_118 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_SHORT );
                Py_DECREF( tmp_source_name_9 );
                if ( tmp_tuple_element_118 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );

                    exception_lineno = 655;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_118 );
                tmp_tuple_element_118 = const_str_plain_H;
                Py_INCREF( tmp_tuple_element_118 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_118 );
                tmp_tuple_element_118 = const_str_plain_short;
                Py_INCREF( tmp_tuple_element_118 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_118 );
                tmp_args_element_name_14 = PyList_New( 7 );
                PyList_SET_ITEM( tmp_args_element_name_14, 0, tmp_list_element_1 );
                tmp_source_name_10 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_10 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_118 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_118 == NULL ))
                    {
                        tmp_mvar_value_118 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_118 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 656;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_10 = tmp_mvar_value_118;
                    Py_INCREF( tmp_source_name_10 );
                    }
                }

                tmp_tuple_element_119 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_LONG );
                Py_DECREF( tmp_source_name_10 );
                if ( tmp_tuple_element_119 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 656;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_119 );
                tmp_tuple_element_119 = const_str_plain_L;
                Py_INCREF( tmp_tuple_element_119 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_119 );
                tmp_tuple_element_119 = const_str_plain_long;
                Py_INCREF( tmp_tuple_element_119 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_119 );
                PyList_SET_ITEM( tmp_args_element_name_14, 1, tmp_list_element_1 );
                tmp_source_name_11 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_11 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_119 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_119 == NULL ))
                    {
                        tmp_mvar_value_119 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_119 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 657;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_11 = tmp_mvar_value_119;
                    Py_INCREF( tmp_source_name_11 );
                    }
                }

                tmp_tuple_element_120 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_SIGNED_BYTE );
                Py_DECREF( tmp_source_name_11 );
                if ( tmp_tuple_element_120 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 657;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_120 );
                tmp_tuple_element_120 = const_str_plain_b;
                Py_INCREF( tmp_tuple_element_120 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_120 );
                tmp_tuple_element_120 = const_str_digest_3bd8050fabc18c25f5fe43bc68a84616;
                Py_INCREF( tmp_tuple_element_120 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_120 );
                PyList_SET_ITEM( tmp_args_element_name_14, 2, tmp_list_element_1 );
                tmp_source_name_12 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_12 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_120 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_120 == NULL ))
                    {
                        tmp_mvar_value_120 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_120 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 658;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_12 = tmp_mvar_value_120;
                    Py_INCREF( tmp_source_name_12 );
                    }
                }

                tmp_tuple_element_121 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_SIGNED_SHORT );
                Py_DECREF( tmp_source_name_12 );
                if ( tmp_tuple_element_121 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 658;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_121 );
                tmp_tuple_element_121 = const_str_plain_h;
                Py_INCREF( tmp_tuple_element_121 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_121 );
                tmp_tuple_element_121 = const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575;
                Py_INCREF( tmp_tuple_element_121 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_121 );
                PyList_SET_ITEM( tmp_args_element_name_14, 3, tmp_list_element_1 );
                tmp_source_name_13 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_13 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_121 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_121 == NULL ))
                    {
                        tmp_mvar_value_121 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_121 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 659;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_13 = tmp_mvar_value_121;
                    Py_INCREF( tmp_source_name_13 );
                    }
                }

                tmp_tuple_element_122 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_SIGNED_LONG );
                Py_DECREF( tmp_source_name_13 );
                if ( tmp_tuple_element_122 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 659;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_122 );
                tmp_tuple_element_122 = const_str_plain_l;
                Py_INCREF( tmp_tuple_element_122 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_122 );
                tmp_tuple_element_122 = const_str_digest_7dfeda29e0f8703b75217dc553f65d0c;
                Py_INCREF( tmp_tuple_element_122 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_122 );
                PyList_SET_ITEM( tmp_args_element_name_14, 4, tmp_list_element_1 );
                tmp_source_name_14 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_14 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_122 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_122 == NULL ))
                    {
                        tmp_mvar_value_122 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_122 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 660;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_14 = tmp_mvar_value_122;
                    Py_INCREF( tmp_source_name_14 );
                    }
                }

                tmp_tuple_element_123 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_FLOAT );
                Py_DECREF( tmp_source_name_14 );
                if ( tmp_tuple_element_123 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 660;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_123 );
                tmp_tuple_element_123 = const_str_plain_f;
                Py_INCREF( tmp_tuple_element_123 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_123 );
                tmp_tuple_element_123 = const_str_plain_float;
                Py_INCREF( tmp_tuple_element_123 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_123 );
                PyList_SET_ITEM( tmp_args_element_name_14, 5, tmp_list_element_1 );
                tmp_source_name_15 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_15 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_123 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_123 == NULL ))
                    {
                        tmp_mvar_value_123 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_123 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_called_name_43 );
                        Py_DECREF( tmp_args_element_name_13 );
                        Py_DECREF( tmp_args_element_name_14 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 661;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_15 = tmp_mvar_value_123;
                    Py_INCREF( tmp_source_name_15 );
                    }
                }

                tmp_tuple_element_124 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_DOUBLE );
                Py_DECREF( tmp_source_name_15 );
                if ( tmp_tuple_element_124 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_called_name_43 );
                    Py_DECREF( tmp_args_element_name_13 );
                    Py_DECREF( tmp_args_element_name_14 );

                    exception_lineno = 661;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_1 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_124 );
                tmp_tuple_element_124 = const_str_plain_d;
                Py_INCREF( tmp_tuple_element_124 );
                PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_124 );
                tmp_tuple_element_124 = const_str_plain_double;
                Py_INCREF( tmp_tuple_element_124 );
                PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_124 );
                PyList_SET_ITEM( tmp_args_element_name_14, 6, tmp_list_element_1 );
                frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 654;
                {
                    PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
                    tmp_args_element_name_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_43, call_args );
                }

                Py_DECREF( tmp_called_name_43 );
                Py_DECREF( tmp_args_element_name_13 );
                Py_DECREF( tmp_args_element_name_14 );
                if ( tmp_args_element_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                goto condexpr_end_10;
                condexpr_false_10:;
                tmp_called_name_44 = (PyObject *)&PyMap_Type;
                tmp_args_element_name_15 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_basic );

                if ( tmp_args_element_name_15 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                    Py_DECREF( tmp_called_name_42 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_basic" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_args_element_name_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_source_name_16 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_16 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_124 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_124 == NULL ))
                    {
                        tmp_mvar_value_124 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_124 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 655;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_16 = tmp_mvar_value_124;
                    Py_INCREF( tmp_source_name_16 );
                    }
                }

                tmp_tuple_element_125 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_SHORT );
                Py_DECREF( tmp_source_name_16 );
                if ( tmp_tuple_element_125 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );

                    exception_lineno = 655;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_125 );
                tmp_tuple_element_125 = const_str_plain_H;
                Py_INCREF( tmp_tuple_element_125 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_125 );
                tmp_tuple_element_125 = const_str_plain_short;
                Py_INCREF( tmp_tuple_element_125 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_125 );
                tmp_args_element_name_16 = PyList_New( 7 );
                PyList_SET_ITEM( tmp_args_element_name_16, 0, tmp_list_element_2 );
                tmp_source_name_17 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_17 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_125 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_125 == NULL ))
                    {
                        tmp_mvar_value_125 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_125 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 656;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_17 = tmp_mvar_value_125;
                    Py_INCREF( tmp_source_name_17 );
                    }
                }

                tmp_tuple_element_126 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_LONG );
                Py_DECREF( tmp_source_name_17 );
                if ( tmp_tuple_element_126 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 656;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_126 );
                tmp_tuple_element_126 = const_str_plain_L;
                Py_INCREF( tmp_tuple_element_126 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_126 );
                tmp_tuple_element_126 = const_str_plain_long;
                Py_INCREF( tmp_tuple_element_126 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_126 );
                PyList_SET_ITEM( tmp_args_element_name_16, 1, tmp_list_element_2 );
                tmp_source_name_18 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_18 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_126 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_126 == NULL ))
                    {
                        tmp_mvar_value_126 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_126 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 657;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_18 = tmp_mvar_value_126;
                    Py_INCREF( tmp_source_name_18 );
                    }
                }

                tmp_tuple_element_127 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_SIGNED_BYTE );
                Py_DECREF( tmp_source_name_18 );
                if ( tmp_tuple_element_127 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 657;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_127 );
                tmp_tuple_element_127 = const_str_plain_b;
                Py_INCREF( tmp_tuple_element_127 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_127 );
                tmp_tuple_element_127 = const_str_digest_3bd8050fabc18c25f5fe43bc68a84616;
                Py_INCREF( tmp_tuple_element_127 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_127 );
                PyList_SET_ITEM( tmp_args_element_name_16, 2, tmp_list_element_2 );
                tmp_source_name_19 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_19 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_127 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_127 == NULL ))
                    {
                        tmp_mvar_value_127 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_127 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 658;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_19 = tmp_mvar_value_127;
                    Py_INCREF( tmp_source_name_19 );
                    }
                }

                tmp_tuple_element_128 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_SIGNED_SHORT );
                Py_DECREF( tmp_source_name_19 );
                if ( tmp_tuple_element_128 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 658;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_128 );
                tmp_tuple_element_128 = const_str_plain_h;
                Py_INCREF( tmp_tuple_element_128 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_128 );
                tmp_tuple_element_128 = const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575;
                Py_INCREF( tmp_tuple_element_128 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_128 );
                PyList_SET_ITEM( tmp_args_element_name_16, 3, tmp_list_element_2 );
                tmp_source_name_20 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_20 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_128 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_128 == NULL ))
                    {
                        tmp_mvar_value_128 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_128 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 659;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_20 = tmp_mvar_value_128;
                    Py_INCREF( tmp_source_name_20 );
                    }
                }

                tmp_tuple_element_129 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_SIGNED_LONG );
                Py_DECREF( tmp_source_name_20 );
                if ( tmp_tuple_element_129 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 659;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_129 );
                tmp_tuple_element_129 = const_str_plain_l;
                Py_INCREF( tmp_tuple_element_129 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_129 );
                tmp_tuple_element_129 = const_str_digest_7dfeda29e0f8703b75217dc553f65d0c;
                Py_INCREF( tmp_tuple_element_129 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_129 );
                PyList_SET_ITEM( tmp_args_element_name_16, 4, tmp_list_element_2 );
                tmp_source_name_21 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_21 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_129 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_129 == NULL ))
                    {
                        tmp_mvar_value_129 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_129 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 660;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_21 = tmp_mvar_value_129;
                    Py_INCREF( tmp_source_name_21 );
                    }
                }

                tmp_tuple_element_130 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_FLOAT );
                Py_DECREF( tmp_source_name_21 );
                if ( tmp_tuple_element_130 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 660;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_130 );
                tmp_tuple_element_130 = const_str_plain_f;
                Py_INCREF( tmp_tuple_element_130 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_130 );
                tmp_tuple_element_130 = const_str_plain_float;
                Py_INCREF( tmp_tuple_element_130 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_130 );
                PyList_SET_ITEM( tmp_args_element_name_16, 5, tmp_list_element_2 );
                tmp_source_name_22 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_22 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_130 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_130 == NULL ))
                    {
                        tmp_mvar_value_130 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_130 == NULL )
                    {
                        Py_DECREF( tmp_called_name_42 );
                        Py_DECREF( tmp_args_element_name_15 );
                        Py_DECREF( tmp_args_element_name_16 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 661;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_22 = tmp_mvar_value_130;
                    Py_INCREF( tmp_source_name_22 );
                    }
                }

                tmp_tuple_element_131 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_DOUBLE );
                Py_DECREF( tmp_source_name_22 );
                if ( tmp_tuple_element_131 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );
                    Py_DECREF( tmp_args_element_name_15 );
                    Py_DECREF( tmp_args_element_name_16 );

                    exception_lineno = 661;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_2 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_2, 0, tmp_tuple_element_131 );
                tmp_tuple_element_131 = const_str_plain_d;
                Py_INCREF( tmp_tuple_element_131 );
                PyTuple_SET_ITEM( tmp_list_element_2, 1, tmp_tuple_element_131 );
                tmp_tuple_element_131 = const_str_plain_double;
                Py_INCREF( tmp_tuple_element_131 );
                PyTuple_SET_ITEM( tmp_list_element_2, 2, tmp_tuple_element_131 );
                PyList_SET_ITEM( tmp_args_element_name_16, 6, tmp_list_element_2 );
                frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 654;
                {
                    PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
                    tmp_args_element_name_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_44, call_args );
                }

                Py_DECREF( tmp_args_element_name_15 );
                Py_DECREF( tmp_args_element_name_16 );
                if ( tmp_args_element_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_42 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                condexpr_end_10:;
                frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 654;
                {
                    PyObject *call_args[] = { tmp_args_element_name_12 };
                    tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_42, call_args );
                }

                Py_DECREF( tmp_called_name_42 );
                Py_DECREF( tmp_args_element_name_12 );
                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            goto branch_end_10;
            branch_no_10:;
            {
                PyObject *tmp_list_arg_1;
                nuitka_bool tmp_condition_result_21;
                PyObject *tmp_called_name_45;
                PyObject *tmp_args_element_name_17;
                PyObject *tmp_args_element_name_18;
                PyObject *tmp_list_element_3;
                PyObject *tmp_tuple_element_132;
                PyObject *tmp_source_name_23;
                PyObject *tmp_mvar_value_131;
                PyObject *tmp_tuple_element_133;
                PyObject *tmp_source_name_24;
                PyObject *tmp_mvar_value_132;
                PyObject *tmp_tuple_element_134;
                PyObject *tmp_source_name_25;
                PyObject *tmp_mvar_value_133;
                PyObject *tmp_tuple_element_135;
                PyObject *tmp_source_name_26;
                PyObject *tmp_mvar_value_134;
                PyObject *tmp_tuple_element_136;
                PyObject *tmp_source_name_27;
                PyObject *tmp_mvar_value_135;
                PyObject *tmp_tuple_element_137;
                PyObject *tmp_source_name_28;
                PyObject *tmp_mvar_value_136;
                PyObject *tmp_tuple_element_138;
                PyObject *tmp_source_name_29;
                PyObject *tmp_mvar_value_137;
                PyObject *tmp_called_name_46;
                PyObject *tmp_args_element_name_19;
                PyObject *tmp_args_element_name_20;
                PyObject *tmp_list_element_4;
                PyObject *tmp_tuple_element_139;
                PyObject *tmp_source_name_30;
                PyObject *tmp_mvar_value_138;
                PyObject *tmp_tuple_element_140;
                PyObject *tmp_source_name_31;
                PyObject *tmp_mvar_value_139;
                PyObject *tmp_tuple_element_141;
                PyObject *tmp_source_name_32;
                PyObject *tmp_mvar_value_140;
                PyObject *tmp_tuple_element_142;
                PyObject *tmp_source_name_33;
                PyObject *tmp_mvar_value_141;
                PyObject *tmp_tuple_element_143;
                PyObject *tmp_source_name_34;
                PyObject *tmp_mvar_value_142;
                PyObject *tmp_tuple_element_144;
                PyObject *tmp_source_name_35;
                PyObject *tmp_mvar_value_143;
                PyObject *tmp_tuple_element_145;
                PyObject *tmp_source_name_36;
                PyObject *tmp_mvar_value_144;
                PyObject *tmp_capi_result_1;
                tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_416, const_str_plain_map );

                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_condition_result_21 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_11;
                }
                else
                {
                    goto condexpr_false_11;
                }
                condexpr_true_11:;
                tmp_called_name_45 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_map );

                if ( tmp_called_name_45 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "map" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_called_name_45 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_args_element_name_17 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_basic );

                if ( tmp_args_element_name_17 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                    Py_DECREF( tmp_called_name_45 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_basic" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_args_element_name_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_source_name_23 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_23 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_131 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_131 == NULL ))
                    {
                        tmp_mvar_value_131 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_131 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 655;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_23 = tmp_mvar_value_131;
                    Py_INCREF( tmp_source_name_23 );
                    }
                }

                tmp_tuple_element_132 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_SHORT );
                Py_DECREF( tmp_source_name_23 );
                if ( tmp_tuple_element_132 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );

                    exception_lineno = 655;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_132 );
                tmp_tuple_element_132 = const_str_plain_H;
                Py_INCREF( tmp_tuple_element_132 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_132 );
                tmp_tuple_element_132 = const_str_plain_short;
                Py_INCREF( tmp_tuple_element_132 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_132 );
                tmp_args_element_name_18 = PyList_New( 7 );
                PyList_SET_ITEM( tmp_args_element_name_18, 0, tmp_list_element_3 );
                tmp_source_name_24 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_24 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_132 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_132 == NULL ))
                    {
                        tmp_mvar_value_132 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_132 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 656;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_24 = tmp_mvar_value_132;
                    Py_INCREF( tmp_source_name_24 );
                    }
                }

                tmp_tuple_element_133 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_LONG );
                Py_DECREF( tmp_source_name_24 );
                if ( tmp_tuple_element_133 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 656;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_133 );
                tmp_tuple_element_133 = const_str_plain_L;
                Py_INCREF( tmp_tuple_element_133 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_133 );
                tmp_tuple_element_133 = const_str_plain_long;
                Py_INCREF( tmp_tuple_element_133 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_133 );
                PyList_SET_ITEM( tmp_args_element_name_18, 1, tmp_list_element_3 );
                tmp_source_name_25 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_25 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_133 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_133 == NULL ))
                    {
                        tmp_mvar_value_133 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_133 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 657;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_25 = tmp_mvar_value_133;
                    Py_INCREF( tmp_source_name_25 );
                    }
                }

                tmp_tuple_element_134 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_SIGNED_BYTE );
                Py_DECREF( tmp_source_name_25 );
                if ( tmp_tuple_element_134 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 657;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_134 );
                tmp_tuple_element_134 = const_str_plain_b;
                Py_INCREF( tmp_tuple_element_134 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_134 );
                tmp_tuple_element_134 = const_str_digest_3bd8050fabc18c25f5fe43bc68a84616;
                Py_INCREF( tmp_tuple_element_134 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_134 );
                PyList_SET_ITEM( tmp_args_element_name_18, 2, tmp_list_element_3 );
                tmp_source_name_26 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_26 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_134 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_134 == NULL ))
                    {
                        tmp_mvar_value_134 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_134 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 658;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_26 = tmp_mvar_value_134;
                    Py_INCREF( tmp_source_name_26 );
                    }
                }

                tmp_tuple_element_135 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_SIGNED_SHORT );
                Py_DECREF( tmp_source_name_26 );
                if ( tmp_tuple_element_135 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 658;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_135 );
                tmp_tuple_element_135 = const_str_plain_h;
                Py_INCREF( tmp_tuple_element_135 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_135 );
                tmp_tuple_element_135 = const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575;
                Py_INCREF( tmp_tuple_element_135 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_135 );
                PyList_SET_ITEM( tmp_args_element_name_18, 3, tmp_list_element_3 );
                tmp_source_name_27 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_27 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_135 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_135 == NULL ))
                    {
                        tmp_mvar_value_135 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_135 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 659;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_27 = tmp_mvar_value_135;
                    Py_INCREF( tmp_source_name_27 );
                    }
                }

                tmp_tuple_element_136 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_SIGNED_LONG );
                Py_DECREF( tmp_source_name_27 );
                if ( tmp_tuple_element_136 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 659;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_136 );
                tmp_tuple_element_136 = const_str_plain_l;
                Py_INCREF( tmp_tuple_element_136 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_136 );
                tmp_tuple_element_136 = const_str_digest_7dfeda29e0f8703b75217dc553f65d0c;
                Py_INCREF( tmp_tuple_element_136 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_136 );
                PyList_SET_ITEM( tmp_args_element_name_18, 4, tmp_list_element_3 );
                tmp_source_name_28 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_28 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_136 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_136 == NULL ))
                    {
                        tmp_mvar_value_136 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_136 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 660;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_28 = tmp_mvar_value_136;
                    Py_INCREF( tmp_source_name_28 );
                    }
                }

                tmp_tuple_element_137 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_FLOAT );
                Py_DECREF( tmp_source_name_28 );
                if ( tmp_tuple_element_137 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 660;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_137 );
                tmp_tuple_element_137 = const_str_plain_f;
                Py_INCREF( tmp_tuple_element_137 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_137 );
                tmp_tuple_element_137 = const_str_plain_float;
                Py_INCREF( tmp_tuple_element_137 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_137 );
                PyList_SET_ITEM( tmp_args_element_name_18, 5, tmp_list_element_3 );
                tmp_source_name_29 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_29 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_137 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_137 == NULL ))
                    {
                        tmp_mvar_value_137 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_137 == NULL )
                    {
                        Py_DECREF( tmp_called_name_45 );
                        Py_DECREF( tmp_args_element_name_17 );
                        Py_DECREF( tmp_args_element_name_18 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 661;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_29 = tmp_mvar_value_137;
                    Py_INCREF( tmp_source_name_29 );
                    }
                }

                tmp_tuple_element_138 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_DOUBLE );
                Py_DECREF( tmp_source_name_29 );
                if ( tmp_tuple_element_138 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_45 );
                    Py_DECREF( tmp_args_element_name_17 );
                    Py_DECREF( tmp_args_element_name_18 );

                    exception_lineno = 661;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_3 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_3, 0, tmp_tuple_element_138 );
                tmp_tuple_element_138 = const_str_plain_d;
                Py_INCREF( tmp_tuple_element_138 );
                PyTuple_SET_ITEM( tmp_list_element_3, 1, tmp_tuple_element_138 );
                tmp_tuple_element_138 = const_str_plain_double;
                Py_INCREF( tmp_tuple_element_138 );
                PyTuple_SET_ITEM( tmp_list_element_3, 2, tmp_tuple_element_138 );
                PyList_SET_ITEM( tmp_args_element_name_18, 6, tmp_list_element_3 );
                frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 654;
                {
                    PyObject *call_args[] = { tmp_args_element_name_17, tmp_args_element_name_18 };
                    tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_45, call_args );
                }

                Py_DECREF( tmp_called_name_45 );
                Py_DECREF( tmp_args_element_name_17 );
                Py_DECREF( tmp_args_element_name_18 );
                if ( tmp_list_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                goto condexpr_end_11;
                condexpr_false_11:;
                tmp_called_name_46 = (PyObject *)&PyMap_Type;
                tmp_args_element_name_19 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_basic );

                if ( tmp_args_element_name_19 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_basic" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }

                if ( tmp_args_element_name_19 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_source_name_30 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_30 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_138 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_138 == NULL ))
                    {
                        tmp_mvar_value_138 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_138 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 655;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_30 = tmp_mvar_value_138;
                    Py_INCREF( tmp_source_name_30 );
                    }
                }

                tmp_tuple_element_139 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_SHORT );
                Py_DECREF( tmp_source_name_30 );
                if ( tmp_tuple_element_139 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );

                    exception_lineno = 655;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_139 );
                tmp_tuple_element_139 = const_str_plain_H;
                Py_INCREF( tmp_tuple_element_139 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_139 );
                tmp_tuple_element_139 = const_str_plain_short;
                Py_INCREF( tmp_tuple_element_139 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_139 );
                tmp_args_element_name_20 = PyList_New( 7 );
                PyList_SET_ITEM( tmp_args_element_name_20, 0, tmp_list_element_4 );
                tmp_source_name_31 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_31 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_139 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_139 == NULL ))
                    {
                        tmp_mvar_value_139 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_139 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 656;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_31 = tmp_mvar_value_139;
                    Py_INCREF( tmp_source_name_31 );
                    }
                }

                tmp_tuple_element_140 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_LONG );
                Py_DECREF( tmp_source_name_31 );
                if ( tmp_tuple_element_140 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 656;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_140 );
                tmp_tuple_element_140 = const_str_plain_L;
                Py_INCREF( tmp_tuple_element_140 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_140 );
                tmp_tuple_element_140 = const_str_plain_long;
                Py_INCREF( tmp_tuple_element_140 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_140 );
                PyList_SET_ITEM( tmp_args_element_name_20, 1, tmp_list_element_4 );
                tmp_source_name_32 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_32 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_140 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_140 == NULL ))
                    {
                        tmp_mvar_value_140 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_140 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 657;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_32 = tmp_mvar_value_140;
                    Py_INCREF( tmp_source_name_32 );
                    }
                }

                tmp_tuple_element_141 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_SIGNED_BYTE );
                Py_DECREF( tmp_source_name_32 );
                if ( tmp_tuple_element_141 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 657;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_141 );
                tmp_tuple_element_141 = const_str_plain_b;
                Py_INCREF( tmp_tuple_element_141 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_141 );
                tmp_tuple_element_141 = const_str_digest_3bd8050fabc18c25f5fe43bc68a84616;
                Py_INCREF( tmp_tuple_element_141 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_141 );
                PyList_SET_ITEM( tmp_args_element_name_20, 2, tmp_list_element_4 );
                tmp_source_name_33 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_33 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_141 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_141 == NULL ))
                    {
                        tmp_mvar_value_141 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_141 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 658;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_33 = tmp_mvar_value_141;
                    Py_INCREF( tmp_source_name_33 );
                    }
                }

                tmp_tuple_element_142 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_SIGNED_SHORT );
                Py_DECREF( tmp_source_name_33 );
                if ( tmp_tuple_element_142 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 658;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_142 );
                tmp_tuple_element_142 = const_str_plain_h;
                Py_INCREF( tmp_tuple_element_142 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_142 );
                tmp_tuple_element_142 = const_str_digest_5cc2e936f1ecfd9d305f0eea25dd9575;
                Py_INCREF( tmp_tuple_element_142 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_142 );
                PyList_SET_ITEM( tmp_args_element_name_20, 3, tmp_list_element_4 );
                tmp_source_name_34 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_34 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_142 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_142 == NULL ))
                    {
                        tmp_mvar_value_142 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_142 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 659;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_34 = tmp_mvar_value_142;
                    Py_INCREF( tmp_source_name_34 );
                    }
                }

                tmp_tuple_element_143 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_SIGNED_LONG );
                Py_DECREF( tmp_source_name_34 );
                if ( tmp_tuple_element_143 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 659;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_143 );
                tmp_tuple_element_143 = const_str_plain_l;
                Py_INCREF( tmp_tuple_element_143 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_143 );
                tmp_tuple_element_143 = const_str_digest_7dfeda29e0f8703b75217dc553f65d0c;
                Py_INCREF( tmp_tuple_element_143 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_143 );
                PyList_SET_ITEM( tmp_args_element_name_20, 4, tmp_list_element_4 );
                tmp_source_name_35 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_35 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_143 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_143 == NULL ))
                    {
                        tmp_mvar_value_143 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_143 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 660;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_35 = tmp_mvar_value_143;
                    Py_INCREF( tmp_source_name_35 );
                    }
                }

                tmp_tuple_element_144 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_FLOAT );
                Py_DECREF( tmp_source_name_35 );
                if ( tmp_tuple_element_144 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 660;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_144 );
                tmp_tuple_element_144 = const_str_plain_f;
                Py_INCREF( tmp_tuple_element_144 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_144 );
                tmp_tuple_element_144 = const_str_plain_float;
                Py_INCREF( tmp_tuple_element_144 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_144 );
                PyList_SET_ITEM( tmp_args_element_name_20, 5, tmp_list_element_4 );
                tmp_source_name_36 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_TiffTags );

                if ( tmp_source_name_36 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_144 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffTags );

                    if (unlikely( tmp_mvar_value_144 == NULL ))
                    {
                        tmp_mvar_value_144 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffTags );
                    }

                    if ( tmp_mvar_value_144 == NULL )
                    {
                        Py_DECREF( tmp_args_element_name_19 );
                        Py_DECREF( tmp_args_element_name_20 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffTags" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 661;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }

                    tmp_source_name_36 = tmp_mvar_value_144;
                    Py_INCREF( tmp_source_name_36 );
                    }
                }

                tmp_tuple_element_145 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_DOUBLE );
                Py_DECREF( tmp_source_name_36 );
                if ( tmp_tuple_element_145 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_19 );
                    Py_DECREF( tmp_args_element_name_20 );

                    exception_lineno = 661;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                tmp_list_element_4 = PyTuple_New( 3 );
                PyTuple_SET_ITEM( tmp_list_element_4, 0, tmp_tuple_element_145 );
                tmp_tuple_element_145 = const_str_plain_d;
                Py_INCREF( tmp_tuple_element_145 );
                PyTuple_SET_ITEM( tmp_list_element_4, 1, tmp_tuple_element_145 );
                tmp_tuple_element_145 = const_str_plain_double;
                Py_INCREF( tmp_tuple_element_145 );
                PyTuple_SET_ITEM( tmp_list_element_4, 2, tmp_tuple_element_145 );
                PyList_SET_ITEM( tmp_args_element_name_20, 6, tmp_list_element_4 );
                frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 654;
                {
                    PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20 };
                    tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_46, call_args );
                }

                Py_DECREF( tmp_args_element_name_19 );
                Py_DECREF( tmp_args_element_name_20 );
                if ( tmp_list_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                condexpr_end_11:;
                tmp_capi_result_1 = PySequence_List( tmp_list_arg_1 );
                Py_DECREF( tmp_list_arg_1 );
                if ( tmp_capi_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 654;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
                Py_DECREF( tmp_capi_result_1 );
            }
            branch_end_10:;
        }
        {
            PyObject *tmp_called_name_47;
            PyObject *tmp_called_name_48;
            PyObject *tmp_args_element_name_21;
            PyObject *tmp_defaults_3;
            tmp_called_name_48 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader );

            if ( tmp_called_name_48 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_loader" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 663;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_48 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 663;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 663;
            tmp_called_name_47 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_48, &PyTuple_GET_ITEM( const_tuple_int_pos_1_int_pos_1_tuple, 0 ) );

            Py_DECREF( tmp_called_name_48 );
            if ( tmp_called_name_47 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 663;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_defaults_3 = const_tuple_true_tuple;
            Py_INCREF( tmp_defaults_3 );
            tmp_args_element_name_21 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_33_load_byte( tmp_defaults_3 );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 663;
            {
                PyObject *call_args[] = { tmp_args_element_name_21 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_47, call_args );
            }

            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_args_element_name_21 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 663;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load_byte, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 663;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_49;
            PyObject *tmp_called_name_50;
            PyObject *tmp_args_element_name_22;
            tmp_called_name_50 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer );

            if ( tmp_called_name_50 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_writer" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 667;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_50 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 667;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 667;
            tmp_called_name_49 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_50, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

            Py_DECREF( tmp_called_name_50 );
            if ( tmp_called_name_49 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 667;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_22 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_34_write_byte(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 667;
            {
                PyObject *call_args[] = { tmp_args_element_name_22 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_49, call_args );
            }

            Py_DECREF( tmp_called_name_49 );
            Py_DECREF( tmp_args_element_name_22 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 667;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_write_byte, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 667;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_51;
            PyObject *tmp_called_name_52;
            PyObject *tmp_args_element_name_23;
            PyObject *tmp_defaults_4;
            tmp_called_name_52 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader );

            if ( tmp_called_name_52 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_loader" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 671;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_52 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 671;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 671;
            tmp_called_name_51 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_52, &PyTuple_GET_ITEM( const_tuple_int_pos_2_int_pos_1_tuple, 0 ) );

            Py_DECREF( tmp_called_name_52 );
            if ( tmp_called_name_51 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 671;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_defaults_4 = const_tuple_true_tuple;
            Py_INCREF( tmp_defaults_4 );
            tmp_args_element_name_23 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_35_load_string( tmp_defaults_4 );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 671;
            {
                PyObject *call_args[] = { tmp_args_element_name_23 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_51, call_args );
            }

            Py_DECREF( tmp_called_name_51 );
            Py_DECREF( tmp_args_element_name_23 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 671;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load_string, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 671;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_53;
            PyObject *tmp_called_name_54;
            PyObject *tmp_args_element_name_24;
            tmp_called_name_54 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer );

            if ( tmp_called_name_54 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_writer" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 677;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_54 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 677;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 677;
            tmp_called_name_53 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_54, &PyTuple_GET_ITEM( const_tuple_int_pos_2_tuple, 0 ) );

            Py_DECREF( tmp_called_name_54 );
            if ( tmp_called_name_53 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 677;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_24 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_36_write_string(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 677;
            {
                PyObject *call_args[] = { tmp_args_element_name_24 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_53, call_args );
            }

            Py_DECREF( tmp_called_name_53 );
            Py_DECREF( tmp_args_element_name_24 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 677;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_write_string, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 677;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_55;
            PyObject *tmp_called_name_56;
            PyObject *tmp_args_element_name_25;
            PyObject *tmp_defaults_5;
            tmp_called_name_56 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader );

            if ( tmp_called_name_56 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_loader" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_56 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 684;
            tmp_called_name_55 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_56, &PyTuple_GET_ITEM( const_tuple_int_pos_5_int_pos_8_tuple, 0 ) );

            Py_DECREF( tmp_called_name_56 );
            if ( tmp_called_name_55 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_defaults_5 = const_tuple_true_tuple;
            Py_INCREF( tmp_defaults_5 );
            tmp_args_element_name_25 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_37_load_rational( tmp_defaults_5 );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 684;
            {
                PyObject *call_args[] = { tmp_args_element_name_25 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_55, call_args );
            }

            Py_DECREF( tmp_called_name_55 );
            Py_DECREF( tmp_args_element_name_25 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load_rational, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_57;
            PyObject *tmp_called_name_58;
            PyObject *tmp_args_element_name_26;
            tmp_called_name_58 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer );

            if ( tmp_called_name_58 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_writer" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 692;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_58 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 692;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 692;
            tmp_called_name_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_58, &PyTuple_GET_ITEM( const_tuple_int_pos_5_tuple, 0 ) );

            Py_DECREF( tmp_called_name_58 );
            if ( tmp_called_name_57 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 692;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_26 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_38_write_rational(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 692;
            {
                PyObject *call_args[] = { tmp_args_element_name_26 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_57, call_args );
            }

            Py_DECREF( tmp_called_name_57 );
            Py_DECREF( tmp_args_element_name_26 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 692;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_write_rational, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 692;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_59;
            PyObject *tmp_called_name_60;
            PyObject *tmp_args_element_name_27;
            PyObject *tmp_defaults_6;
            tmp_called_name_60 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader );

            if ( tmp_called_name_60 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_loader" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_60 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 697;
            tmp_called_name_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_60, &PyTuple_GET_ITEM( const_tuple_int_pos_7_int_pos_1_tuple, 0 ) );

            Py_DECREF( tmp_called_name_60 );
            if ( tmp_called_name_59 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_defaults_6 = const_tuple_true_tuple;
            Py_INCREF( tmp_defaults_6 );
            tmp_args_element_name_27 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_39_load_undefined( tmp_defaults_6 );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 697;
            {
                PyObject *call_args[] = { tmp_args_element_name_27 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_59, call_args );
            }

            Py_DECREF( tmp_called_name_59 );
            Py_DECREF( tmp_args_element_name_27 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load_undefined, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 697;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_61;
            PyObject *tmp_called_name_62;
            PyObject *tmp_args_element_name_28;
            tmp_called_name_62 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer );

            if ( tmp_called_name_62 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_writer" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 701;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_62 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 701;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 701;
            tmp_called_name_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_62, &PyTuple_GET_ITEM( const_tuple_int_pos_7_tuple, 0 ) );

            Py_DECREF( tmp_called_name_62 );
            if ( tmp_called_name_61 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 701;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_28 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_40_write_undefined(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 701;
            {
                PyObject *call_args[] = { tmp_args_element_name_28 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_61, call_args );
            }

            Py_DECREF( tmp_called_name_61 );
            Py_DECREF( tmp_args_element_name_28 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 701;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_write_undefined, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 701;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_63;
            PyObject *tmp_called_name_64;
            PyObject *tmp_args_element_name_29;
            PyObject *tmp_defaults_7;
            tmp_called_name_64 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_loader );

            if ( tmp_called_name_64 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_loader" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 705;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_64 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 705;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 705;
            tmp_called_name_63 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_64, &PyTuple_GET_ITEM( const_tuple_int_pos_10_int_pos_8_tuple, 0 ) );

            Py_DECREF( tmp_called_name_64 );
            if ( tmp_called_name_63 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 705;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_defaults_7 = const_tuple_true_tuple;
            Py_INCREF( tmp_defaults_7 );
            tmp_args_element_name_29 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_41_load_signed_rational( tmp_defaults_7 );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 705;
            {
                PyObject *call_args[] = { tmp_args_element_name_29 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_63, call_args );
            }

            Py_DECREF( tmp_called_name_63 );
            Py_DECREF( tmp_args_element_name_29 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 705;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load_signed_rational, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 705;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_called_name_65;
            PyObject *tmp_called_name_66;
            PyObject *tmp_args_element_name_30;
            tmp_called_name_66 = PyObject_GetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__register_writer );

            if ( tmp_called_name_66 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_register_writer" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 713;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

            if ( tmp_called_name_66 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 713;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 713;
            tmp_called_name_65 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_66, &PyTuple_GET_ITEM( const_tuple_int_pos_10_tuple, 0 ) );

            Py_DECREF( tmp_called_name_66 );
            if ( tmp_called_name_65 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 713;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_args_element_name_30 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_42_write_signed_rational(  );



            frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame.f_lineno = 713;
            {
                PyObject *call_args[] = { tmp_args_element_name_30 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_65, call_args );
            }

            Py_DECREF( tmp_called_name_65 );
            Py_DECREF( tmp_args_element_name_30 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 713;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_write_signed_rational, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 713;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_43__ensure_read(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain__ensure_read, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 718;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_44_load(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_load, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 726;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_45_save(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain_save, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 783;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_fe73e589bb33c902ac4cf7156b7f9250_4 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_fe73e589bb33c902ac4cf7156b7f9250_4 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_fe73e589bb33c902ac4cf7156b7f9250_4, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_fe73e589bb33c902ac4cf7156b7f9250_4->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_fe73e589bb33c902ac4cf7156b7f9250_4, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_fe73e589bb33c902ac4cf7156b7f9250_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if ( frame_fe73e589bb33c902ac4cf7156b7f9250_4 == cache_frame_fe73e589bb33c902ac4cf7156b7f9250_4 )
        {
            Py_DECREF( frame_fe73e589bb33c902ac4cf7156b7f9250_4 );
        }
        cache_frame_fe73e589bb33c902ac4cf7156b7f9250_4 = NULL;

        assertFrameObject( frame_fe73e589bb33c902ac4cf7156b7f9250_4 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_16;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_22;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_compexpr_left_3 = tmp_class_creation_2__bases;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_compexpr_right_3 = tmp_class_creation_2__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_16;
            }
            tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_dictset_value = tmp_class_creation_2__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_416, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_16;
            }
            branch_no_11:;
        }
        {
            PyObject *tmp_assign_source_101;
            PyObject *tmp_called_name_67;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_146;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_67 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_146 = const_str_plain_ImageFileDirectory_v2;
            tmp_args_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_146 );
            PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_146 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_146 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_146 );
            PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_146 );
            tmp_tuple_element_146 = locals_PIL$TiffImagePlugin_416;
            Py_INCREF( tmp_tuple_element_146 );
            PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_146 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 416;
            tmp_assign_source_101 = CALL_FUNCTION( tmp_called_name_67, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_args_name_4 );
            if ( tmp_assign_source_101 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;

                goto try_except_handler_16;
            }
            assert( outline_2_var___class__ == NULL );
            outline_2_var___class__ = tmp_assign_source_101;
        }
        CHECK_OBJECT( outline_2_var___class__ );
        tmp_assign_source_100 = outline_2_var___class__;
        Py_INCREF( tmp_assign_source_100 );
        goto try_return_handler_16;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_16:;
        Py_DECREF( locals_PIL$TiffImagePlugin_416 );
        locals_PIL$TiffImagePlugin_416 = NULL;
        goto try_return_handler_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$TiffImagePlugin_416 );
        locals_PIL$TiffImagePlugin_416 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto try_except_handler_15;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
        Py_DECREF( outline_2_var___class__ );
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_3:;
        exception_lineno = 416;
        goto try_except_handler_14;
        outline_result_3:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2, tmp_assign_source_100 );
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases_orig );
    Py_DECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_mvar_value_145;
        PyObject *tmp_assattr_target_3;
        PyObject *tmp_mvar_value_146;
        tmp_mvar_value_145 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__load_dispatch );

        if (unlikely( tmp_mvar_value_145 == NULL ))
        {
            tmp_mvar_value_145 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__load_dispatch );
        }

        if ( tmp_mvar_value_145 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_load_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 856;

            goto frame_exception_exit_1;
        }

        tmp_assattr_name_3 = tmp_mvar_value_145;
        tmp_mvar_value_146 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_146 == NULL ))
        {
            tmp_mvar_value_146 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_146 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 856;

            goto frame_exception_exit_1;
        }

        tmp_assattr_target_3 = tmp_mvar_value_146;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__load_dispatch, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 856;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_mvar_value_147;
        PyObject *tmp_assattr_target_4;
        PyObject *tmp_mvar_value_148;
        tmp_mvar_value_147 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__write_dispatch );

        if (unlikely( tmp_mvar_value_147 == NULL ))
        {
            tmp_mvar_value_147 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__write_dispatch );
        }

        if ( tmp_mvar_value_147 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_write_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 857;

            goto frame_exception_exit_1;
        }

        tmp_assattr_name_4 = tmp_mvar_value_147;
        tmp_mvar_value_148 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_148 == NULL ))
        {
            tmp_mvar_value_148 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_148 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 857;

            goto frame_exception_exit_1;
        }

        tmp_assattr_target_4 = tmp_mvar_value_148;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__write_dispatch, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 857;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_149;
        tmp_mvar_value_149 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TYPES );

        if (unlikely( tmp_mvar_value_149 == NULL ))
        {
            tmp_mvar_value_149 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TYPES );
        }

        if ( tmp_mvar_value_149 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TYPES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 858;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_149;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 858;
        tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_items );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 858;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_102 = MAKE_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_102 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 858;

            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_102;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_103;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_103 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_103 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                exception_lineno = 858;
                goto try_except_handler_17;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_103;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_4 = tmp_for_loop_1__iter_value;
        tmp_assign_source_104 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
        if ( tmp_assign_source_104 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 858;

            goto try_except_handler_18;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_104;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_105 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
        if ( tmp_assign_source_105 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }



            exception_lineno = 858;
            goto try_except_handler_19;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_105;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_106 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
        if ( tmp_assign_source_106 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }



            exception_lineno = 858;
            goto try_except_handler_19;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_106;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 858;
                    goto try_except_handler_19;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 858;
            goto try_except_handler_19;
        }
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto try_except_handler_18;
    // End of try:
    try_end_11:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto try_except_handler_17;
    // End of try:
    try_end_12:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_107;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_107 = tmp_tuple_unpack_1__element_1;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_idx, tmp_assign_source_107 );
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_108;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_108 = tmp_tuple_unpack_1__element_2;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_name, tmp_assign_source_108 );
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_mvar_value_150;
        tmp_mvar_value_150 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_name );

        if (unlikely( tmp_mvar_value_150 == NULL ))
        {
            tmp_mvar_value_150 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_name );
        }

        if ( tmp_mvar_value_150 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "name" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 859;

            goto try_except_handler_17;
        }

        tmp_called_instance_4 = tmp_mvar_value_150;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 859;
        tmp_assign_source_109 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_space_str_plain___tuple, 0 ) );

        if ( tmp_assign_source_109 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 859;

            goto try_except_handler_17;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_name, tmp_assign_source_109 );
    }
    {
        PyObject *tmp_setattr_target_1;
        PyObject *tmp_mvar_value_151;
        PyObject *tmp_setattr_attr_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_mvar_value_152;
        PyObject *tmp_setattr_value_1;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_mvar_value_153;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_mvar_value_154;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_capi_result_2;
        tmp_mvar_value_151 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_151 == NULL ))
        {
            tmp_mvar_value_151 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_151 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 860;

            goto try_except_handler_17;
        }

        tmp_setattr_target_1 = tmp_mvar_value_151;
        tmp_left_name_3 = const_str_plain_load_;
        tmp_mvar_value_152 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_name );

        if (unlikely( tmp_mvar_value_152 == NULL ))
        {
            tmp_mvar_value_152 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_name );
        }

        CHECK_OBJECT( tmp_mvar_value_152 );
        tmp_right_name_3 = tmp_mvar_value_152;
        tmp_setattr_attr_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        if ( tmp_setattr_attr_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 860;

            goto try_except_handler_17;
        }
        tmp_mvar_value_153 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__load_dispatch );

        if (unlikely( tmp_mvar_value_153 == NULL ))
        {
            tmp_mvar_value_153 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__load_dispatch );
        }

        if ( tmp_mvar_value_153 == NULL )
        {
            Py_DECREF( tmp_setattr_attr_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_load_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 860;

            goto try_except_handler_17;
        }

        tmp_subscribed_name_4 = tmp_mvar_value_153;
        tmp_mvar_value_154 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_idx );

        if (unlikely( tmp_mvar_value_154 == NULL ))
        {
            tmp_mvar_value_154 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_idx );
        }

        if ( tmp_mvar_value_154 == NULL )
        {
            Py_DECREF( tmp_setattr_attr_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "idx" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 860;

            goto try_except_handler_17;
        }

        tmp_subscript_name_3 = tmp_mvar_value_154;
        tmp_subscribed_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_3 );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_setattr_attr_1 );

            exception_lineno = 860;

            goto try_except_handler_17;
        }
        tmp_subscript_name_4 = const_int_pos_1;
        tmp_setattr_value_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_4, 1 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_setattr_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_setattr_attr_1 );

            exception_lineno = 860;

            goto try_except_handler_17;
        }
        tmp_capi_result_2 = BUILTIN_SETATTR( tmp_setattr_target_1, tmp_setattr_attr_1, tmp_setattr_value_1 );
        Py_DECREF( tmp_setattr_attr_1 );
        Py_DECREF( tmp_setattr_value_1 );
        if ( tmp_capi_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 860;

            goto try_except_handler_17;
        }
    }
    {
        PyObject *tmp_setattr_target_2;
        PyObject *tmp_mvar_value_155;
        PyObject *tmp_setattr_attr_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_mvar_value_156;
        PyObject *tmp_setattr_value_2;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_mvar_value_157;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_mvar_value_158;
        PyObject *tmp_capi_result_3;
        tmp_mvar_value_155 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_155 == NULL ))
        {
            tmp_mvar_value_155 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_155 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 861;

            goto try_except_handler_17;
        }

        tmp_setattr_target_2 = tmp_mvar_value_155;
        tmp_left_name_4 = const_str_plain_write_;
        tmp_mvar_value_156 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_name );

        if (unlikely( tmp_mvar_value_156 == NULL ))
        {
            tmp_mvar_value_156 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_name );
        }

        if ( tmp_mvar_value_156 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "name" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 861;

            goto try_except_handler_17;
        }

        tmp_right_name_4 = tmp_mvar_value_156;
        tmp_setattr_attr_2 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_4, tmp_right_name_4 );
        if ( tmp_setattr_attr_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 861;

            goto try_except_handler_17;
        }
        tmp_mvar_value_157 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__write_dispatch );

        if (unlikely( tmp_mvar_value_157 == NULL ))
        {
            tmp_mvar_value_157 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__write_dispatch );
        }

        if ( tmp_mvar_value_157 == NULL )
        {
            Py_DECREF( tmp_setattr_attr_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_write_dispatch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 861;

            goto try_except_handler_17;
        }

        tmp_subscribed_name_5 = tmp_mvar_value_157;
        tmp_mvar_value_158 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_idx );

        if (unlikely( tmp_mvar_value_158 == NULL ))
        {
            tmp_mvar_value_158 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_idx );
        }

        if ( tmp_mvar_value_158 == NULL )
        {
            Py_DECREF( tmp_setattr_attr_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "idx" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 861;

            goto try_except_handler_17;
        }

        tmp_subscript_name_5 = tmp_mvar_value_158;
        tmp_setattr_value_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
        if ( tmp_setattr_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_setattr_attr_2 );

            exception_lineno = 861;

            goto try_except_handler_17;
        }
        tmp_capi_result_3 = BUILTIN_SETATTR( tmp_setattr_target_2, tmp_setattr_attr_2, tmp_setattr_value_2 );
        Py_DECREF( tmp_setattr_attr_2 );
        Py_DECREF( tmp_setattr_value_2 );
        if ( tmp_capi_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 861;

            goto try_except_handler_17;
        }
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 858;

        goto try_except_handler_17;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_13;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_PIL$TiffImagePlugin, const_str_plain__load_dispatch );
    tmp_result = tmp_res != -1;
    if ( tmp_result == false ) CLEAR_ERROR_OCCURRED();

    if ( tmp_result == false )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_load_dispatch" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 862;

        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_PIL$TiffImagePlugin, const_str_plain__write_dispatch );
    tmp_result = tmp_res != -1;
    if ( tmp_result == false ) CLEAR_ERROR_OCCURRED();

    if ( tmp_result == false )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_write_dispatch" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 862;

        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_PIL$TiffImagePlugin, const_str_plain_idx );
    tmp_result = tmp_res != -1;
    if ( tmp_result == false ) CLEAR_ERROR_OCCURRED();

    if ( tmp_result == false )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "idx" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 862;

        goto frame_exception_exit_1;
    }

    tmp_res = PyDict_DelItem( (PyObject *)moduledict_PIL$TiffImagePlugin, const_str_plain_name );
    tmp_result = tmp_res != -1;
    if ( tmp_result == false ) CLEAR_ERROR_OCCURRED();

    if ( tmp_result == false )
    {

        exception_type = PyExc_NameError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "name" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 862;

        goto frame_exception_exit_1;
    }

    // Tried code:
    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_tuple_element_147;
        PyObject *tmp_mvar_value_159;
        tmp_mvar_value_159 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );

        if (unlikely( tmp_mvar_value_159 == NULL ))
        {
            tmp_mvar_value_159 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v2 );
        }

        if ( tmp_mvar_value_159 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v2" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 866;

            goto try_except_handler_20;
        }

        tmp_tuple_element_147 = tmp_mvar_value_159;
        tmp_assign_source_110 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_147 );
        PyTuple_SET_ITEM( tmp_assign_source_110, 0, tmp_tuple_element_147 );
        assert( tmp_class_creation_3__bases_orig == NULL );
        tmp_class_creation_3__bases_orig = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT( tmp_class_creation_3__bases_orig );
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF( tmp_dircall_arg1_3 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_111 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_111 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        assert( tmp_class_creation_3__bases == NULL );
        tmp_class_creation_3__bases = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        tmp_assign_source_112 = PyDict_New();
        assert( tmp_class_creation_3__class_decl_dict == NULL );
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_112;
    }
    {
        PyObject *tmp_assign_source_113;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        nuitka_bool tmp_condition_result_24;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_7, tmp_key_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_12;
        }
        else
        {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_class_creation_3__bases );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        tmp_condition_result_24 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_13;
        }
        else
        {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_subscribed_name_6 = tmp_class_creation_3__bases;
        tmp_subscript_name_6 = const_int_0;
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 0 );
        if ( tmp_type_arg_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        tmp_metaclass_name_3 = BUILTIN_TYPE1( tmp_type_arg_5 );
        Py_DECREF( tmp_type_arg_5 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_3 );
        condexpr_end_13:;
        condexpr_end_12:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_bases_name_3 = tmp_class_creation_3__bases;
        tmp_assign_source_113 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
        Py_DECREF( tmp_metaclass_name_3 );
        if ( tmp_assign_source_113 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        assert( tmp_class_creation_3__metaclass == NULL );
        tmp_class_creation_3__metaclass = tmp_assign_source_113;
    }
    {
        nuitka_bool tmp_condition_result_25;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_9, tmp_key_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_20;
        }
        branch_no_12:;
    }
    {
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_source_name_37;
        CHECK_OBJECT( tmp_class_creation_3__metaclass );
        tmp_source_name_37 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_37, const_str_plain___prepare__ );
        tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_assign_source_114;
            PyObject *tmp_called_name_68;
            PyObject *tmp_source_name_38;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_148;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_source_name_38 = tmp_class_creation_3__metaclass;
            tmp_called_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain___prepare__ );
            if ( tmp_called_name_68 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_20;
            }
            tmp_tuple_element_148 = const_str_plain_ImageFileDirectory_v1;
            tmp_args_name_5 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_148 );
            PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_148 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_148 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_148 );
            PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_148 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 866;
            tmp_assign_source_114 = CALL_FUNCTION( tmp_called_name_68, tmp_args_name_5, tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_68 );
            Py_DECREF( tmp_args_name_5 );
            if ( tmp_assign_source_114 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_20;
            }
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_114;
        }
        {
            nuitka_bool tmp_condition_result_27;
            PyObject *tmp_operand_name_4;
            PyObject *tmp_source_name_39;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_source_name_39 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_39, const_str_plain___getitem__ );
            tmp_operand_name_4 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_20;
            }
            tmp_condition_result_27 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                PyObject *tmp_tuple_element_149;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_40;
                PyObject *tmp_type_arg_6;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_5 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_3__metaclass );
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_149 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
                if ( tmp_tuple_element_149 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 866;

                    goto try_except_handler_20;
                }
                tmp_right_name_5 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_149 );
                CHECK_OBJECT( tmp_class_creation_3__prepared );
                tmp_type_arg_6 = tmp_class_creation_3__prepared;
                tmp_source_name_40 = BUILTIN_TYPE1( tmp_type_arg_6 );
                assert( !(tmp_source_name_40 == NULL) );
                tmp_tuple_element_149 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_40 );
                if ( tmp_tuple_element_149 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_5 );

                    exception_lineno = 866;

                    goto try_except_handler_20;
                }
                PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_149 );
                tmp_raise_value_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
                Py_DECREF( tmp_right_name_5 );
                if ( tmp_raise_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 866;

                    goto try_except_handler_20;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF( tmp_raise_type_3 );
                exception_value = tmp_raise_value_3;
                exception_lineno = 866;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_20;
            }
            branch_no_14:;
        }
        goto branch_end_13;
        branch_no_13:;
        {
            PyObject *tmp_assign_source_115;
            tmp_assign_source_115 = PyDict_New();
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_115;
        }
        branch_end_13:;
    }
    {
        PyObject *tmp_assign_source_116;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_PIL$TiffImagePlugin_866 = tmp_set_locals_3;
            Py_INCREF( tmp_set_locals_3 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_22;
        }
        tmp_dictset_value = const_str_digest_843ed406639f09239929be890e1db672;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_22;
        }
        tmp_dictset_value = const_str_plain_ImageFileDirectory_v1;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;

            goto try_except_handler_22;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_5847501e044c9194e44bab7d6542bd15_5, codeobj_5847501e044c9194e44bab7d6542bd15, module_PIL$TiffImagePlugin, sizeof(void *) );
        frame_5847501e044c9194e44bab7d6542bd15_5 = cache_frame_5847501e044c9194e44bab7d6542bd15_5;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_5847501e044c9194e44bab7d6542bd15_5 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_5847501e044c9194e44bab7d6542bd15_5 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_46___init__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 884;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            nuitka_bool tmp_condition_result_28;
            PyObject *tmp_called_name_69;
            PyObject *tmp_args_element_name_31;
            PyObject *tmp_called_name_70;
            PyObject *tmp_args_element_name_32;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_866, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_condition_result_28 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_14;
            }
            else
            {
                goto condexpr_false_14;
            }
            condexpr_true_14:;
            tmp_called_name_69 = PyObject_GetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_property );

            if ( tmp_called_name_69 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if ( tmp_called_name_69 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_args_element_name_31 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_47_lambda(  );



            frame_5847501e044c9194e44bab7d6542bd15_5->m_frame.f_lineno = 888;
            {
                PyObject *call_args[] = { tmp_args_element_name_31 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_69, call_args );
            }

            Py_DECREF( tmp_called_name_69 );
            Py_DECREF( tmp_args_element_name_31 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            goto condexpr_end_14;
            condexpr_false_14:;
            tmp_called_name_70 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_32 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_47_lambda(  );



            frame_5847501e044c9194e44bab7d6542bd15_5->m_frame.f_lineno = 888;
            {
                PyObject *call_args[] = { tmp_args_element_name_32 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_70, call_args );
            }

            Py_DECREF( tmp_args_element_name_32 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            condexpr_end_14:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_tags, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 888;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        {
            nuitka_bool tmp_condition_result_29;
            PyObject *tmp_called_name_71;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_called_name_72;
            PyObject *tmp_args_element_name_34;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_866, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_condition_result_29 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_15;
            }
            else
            {
                goto condexpr_false_15;
            }
            condexpr_true_15:;
            tmp_called_name_71 = PyObject_GetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_property );

            if ( tmp_called_name_71 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if ( tmp_called_name_71 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_args_element_name_33 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_48_lambda(  );



            frame_5847501e044c9194e44bab7d6542bd15_5->m_frame.f_lineno = 889;
            {
                PyObject *call_args[] = { tmp_args_element_name_33 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_71, call_args );
            }

            Py_DECREF( tmp_called_name_71 );
            Py_DECREF( tmp_args_element_name_33 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            goto condexpr_end_15;
            condexpr_false_15:;
            tmp_called_name_72 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_34 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_48_lambda(  );



            frame_5847501e044c9194e44bab7d6542bd15_5->m_frame.f_lineno = 889;
            {
                PyObject *call_args[] = { tmp_args_element_name_34 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_72, call_args );
            }

            Py_DECREF( tmp_args_element_name_34 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            condexpr_end_15:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_tagdata, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_called_name_73;
            PyObject *tmp_args_element_name_35;
            PyObject *tmp_classmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_866, const_str_plain_classmethod );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_condition_result_30 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_16;
            }
            else
            {
                goto condexpr_false_16;
            }
            condexpr_true_16:;
            tmp_called_name_73 = PyObject_GetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_classmethod );

            if ( tmp_called_name_73 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "classmethod" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if ( tmp_called_name_73 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_args_element_name_35 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_49_from_v2(  );



            frame_5847501e044c9194e44bab7d6542bd15_5->m_frame.f_lineno = 891;
            {
                PyObject *call_args[] = { tmp_args_element_name_35 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_73, call_args );
            }

            Py_DECREF( tmp_called_name_73 );
            Py_DECREF( tmp_args_element_name_35 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            goto condexpr_end_16;
            condexpr_false_16:;
            tmp_classmethod_arg_1 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_49_from_v2(  );



            tmp_dictset_value = BUILTIN_CLASSMETHOD( tmp_classmethod_arg_1 );
            Py_DECREF( tmp_classmethod_arg_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            condexpr_end_16:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_from_v2, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_50_to_v2(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain_to_v2, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 909;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_51___contains__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___contains__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 926;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_52___len__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___len__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 929;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_53___iter__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___iter__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 932;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_54___setitem__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___setitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 935;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_55___getitem__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___getitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 939;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5847501e044c9194e44bab7d6542bd15_5 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5847501e044c9194e44bab7d6542bd15_5 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_5847501e044c9194e44bab7d6542bd15_5, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_5847501e044c9194e44bab7d6542bd15_5->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_5847501e044c9194e44bab7d6542bd15_5, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_5847501e044c9194e44bab7d6542bd15_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame.
        if ( frame_5847501e044c9194e44bab7d6542bd15_5 == cache_frame_5847501e044c9194e44bab7d6542bd15_5 )
        {
            Py_DECREF( frame_5847501e044c9194e44bab7d6542bd15_5 );
        }
        cache_frame_5847501e044c9194e44bab7d6542bd15_5 = NULL;

        assertFrameObject( frame_5847501e044c9194e44bab7d6542bd15_5 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_22;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_compexpr_left_4 = tmp_class_creation_3__bases;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_compexpr_right_4 = tmp_class_creation_3__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_22;
            }
            tmp_condition_result_31 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_dictset_value = tmp_class_creation_3__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_866, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_22;
            }
            branch_no_15:;
        }
        {
            PyObject *tmp_assign_source_117;
            PyObject *tmp_called_name_74;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_150;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_called_name_74 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_150 = const_str_plain_ImageFileDirectory_v1;
            tmp_args_name_6 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_150 );
            PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_150 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_150 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_150 );
            PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_150 );
            tmp_tuple_element_150 = locals_PIL$TiffImagePlugin_866;
            Py_INCREF( tmp_tuple_element_150 );
            PyTuple_SET_ITEM( tmp_args_name_6, 2, tmp_tuple_element_150 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 866;
            tmp_assign_source_117 = CALL_FUNCTION( tmp_called_name_74, tmp_args_name_6, tmp_kw_name_6 );
            Py_DECREF( tmp_args_name_6 );
            if ( tmp_assign_source_117 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 866;

                goto try_except_handler_22;
            }
            assert( outline_3_var___class__ == NULL );
            outline_3_var___class__ = tmp_assign_source_117;
        }
        CHECK_OBJECT( outline_3_var___class__ );
        tmp_assign_source_116 = outline_3_var___class__;
        Py_INCREF( tmp_assign_source_116 );
        goto try_return_handler_22;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_22:;
        Py_DECREF( locals_PIL$TiffImagePlugin_866 );
        locals_PIL$TiffImagePlugin_866 = NULL;
        goto try_return_handler_21;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$TiffImagePlugin_866 );
        locals_PIL$TiffImagePlugin_866 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto try_except_handler_21;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_21:;
        CHECK_OBJECT( (PyObject *)outline_3_var___class__ );
        Py_DECREF( outline_3_var___class__ );
        outline_3_var___class__ = NULL;

        goto outline_result_4;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto outline_exception_4;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_4:;
        exception_lineno = 866;
        goto try_except_handler_20;
        outline_result_4:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1, tmp_assign_source_116 );
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases_orig );
    Py_DECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__prepared );
    Py_DECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_mvar_value_160;
        tmp_mvar_value_160 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );

        if (unlikely( tmp_mvar_value_160 == NULL ))
        {
            tmp_mvar_value_160 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory_v1 );
        }

        if ( tmp_mvar_value_160 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFileDirectory_v1" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 953;

            goto frame_exception_exit_1;
        }

        tmp_assign_source_118 = tmp_mvar_value_160;
        UPDATE_STRING_DICT0( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFileDirectory, tmp_assign_source_118 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_tuple_element_151;
        PyObject *tmp_source_name_41;
        PyObject *tmp_mvar_value_161;
        tmp_mvar_value_161 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_ImageFile );

        if (unlikely( tmp_mvar_value_161 == NULL ))
        {
            tmp_mvar_value_161 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageFile );
        }

        if ( tmp_mvar_value_161 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 959;

            goto try_except_handler_23;
        }

        tmp_source_name_41 = tmp_mvar_value_161;
        tmp_tuple_element_151 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_ImageFile );
        if ( tmp_tuple_element_151 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        tmp_assign_source_119 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_assign_source_119, 0, tmp_tuple_element_151 );
        assert( tmp_class_creation_4__bases_orig == NULL );
        tmp_class_creation_4__bases_orig = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT( tmp_class_creation_4__bases_orig );
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF( tmp_dircall_arg1_4 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_120 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_120 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        assert( tmp_class_creation_4__bases == NULL );
        tmp_class_creation_4__bases = tmp_assign_source_120;
    }
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = PyDict_New();
        assert( tmp_class_creation_4__class_decl_dict == NULL );
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_121;
    }
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_metaclass_name_4;
        nuitka_bool tmp_condition_result_32;
        PyObject *tmp_key_name_10;
        PyObject *tmp_dict_name_10;
        PyObject *tmp_dict_name_11;
        PyObject *tmp_key_name_11;
        nuitka_bool tmp_condition_result_33;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_subscribed_name_7;
        PyObject *tmp_subscript_name_7;
        PyObject *tmp_bases_name_4;
        tmp_key_name_10 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_10, tmp_key_name_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        tmp_condition_result_32 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_17;
        }
        else
        {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_name_11 = const_str_plain_metaclass;
        tmp_metaclass_name_4 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_class_creation_4__bases );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        tmp_condition_result_33 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_18;
        }
        else
        {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_subscribed_name_7 = tmp_class_creation_4__bases;
        tmp_subscript_name_7 = const_int_0;
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 0 );
        if ( tmp_type_arg_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        tmp_metaclass_name_4 = BUILTIN_TYPE1( tmp_type_arg_7 );
        Py_DECREF( tmp_type_arg_7 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_4 );
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_bases_name_4 = tmp_class_creation_4__bases;
        tmp_assign_source_122 = SELECT_METACLASS( tmp_metaclass_name_4, tmp_bases_name_4 );
        Py_DECREF( tmp_metaclass_name_4 );
        if ( tmp_assign_source_122 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        assert( tmp_class_creation_4__metaclass == NULL );
        tmp_class_creation_4__metaclass = tmp_assign_source_122;
    }
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_key_name_12;
        PyObject *tmp_dict_name_12;
        tmp_key_name_12 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_12, tmp_key_name_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        tmp_condition_result_34 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_34 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_16;
        }
        else
        {
            goto branch_no_16;
        }
        branch_yes_16:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_23;
        }
        branch_no_16:;
    }
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_source_name_42;
        CHECK_OBJECT( tmp_class_creation_4__metaclass );
        tmp_source_name_42 = tmp_class_creation_4__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_42, const_str_plain___prepare__ );
        tmp_condition_result_35 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_35 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_17;
        }
        else
        {
            goto branch_no_17;
        }
        branch_yes_17:;
        {
            PyObject *tmp_assign_source_123;
            PyObject *tmp_called_name_75;
            PyObject *tmp_source_name_43;
            PyObject *tmp_args_name_7;
            PyObject *tmp_tuple_element_152;
            PyObject *tmp_kw_name_7;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_source_name_43 = tmp_class_creation_4__metaclass;
            tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain___prepare__ );
            if ( tmp_called_name_75 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_23;
            }
            tmp_tuple_element_152 = const_str_plain_TiffImageFile;
            tmp_args_name_7 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_152 );
            PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_152 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_152 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_152 );
            PyTuple_SET_ITEM( tmp_args_name_7, 1, tmp_tuple_element_152 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_7 = tmp_class_creation_4__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 959;
            tmp_assign_source_123 = CALL_FUNCTION( tmp_called_name_75, tmp_args_name_7, tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_75 );
            Py_DECREF( tmp_args_name_7 );
            if ( tmp_assign_source_123 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_23;
            }
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_123;
        }
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_operand_name_5;
            PyObject *tmp_source_name_44;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_source_name_44 = tmp_class_creation_4__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_44, const_str_plain___getitem__ );
            tmp_operand_name_5 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_23;
            }
            tmp_condition_result_36 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_36 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            {
                PyObject *tmp_raise_type_4;
                PyObject *tmp_raise_value_4;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                PyObject *tmp_tuple_element_153;
                PyObject *tmp_getattr_target_4;
                PyObject *tmp_getattr_attr_4;
                PyObject *tmp_getattr_default_4;
                PyObject *tmp_source_name_45;
                PyObject *tmp_type_arg_8;
                tmp_raise_type_4 = PyExc_TypeError;
                tmp_left_name_6 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_4__metaclass );
                tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
                tmp_getattr_attr_4 = const_str_plain___name__;
                tmp_getattr_default_4 = const_str_angle_metaclass;
                tmp_tuple_element_153 = BUILTIN_GETATTR( tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4 );
                if ( tmp_tuple_element_153 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 959;

                    goto try_except_handler_23;
                }
                tmp_right_name_6 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_153 );
                CHECK_OBJECT( tmp_class_creation_4__prepared );
                tmp_type_arg_8 = tmp_class_creation_4__prepared;
                tmp_source_name_45 = BUILTIN_TYPE1( tmp_type_arg_8 );
                assert( !(tmp_source_name_45 == NULL) );
                tmp_tuple_element_153 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_45 );
                if ( tmp_tuple_element_153 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_6 );

                    exception_lineno = 959;

                    goto try_except_handler_23;
                }
                PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_153 );
                tmp_raise_value_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
                Py_DECREF( tmp_right_name_6 );
                if ( tmp_raise_value_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 959;

                    goto try_except_handler_23;
                }
                exception_type = tmp_raise_type_4;
                Py_INCREF( tmp_raise_type_4 );
                exception_value = tmp_raise_value_4;
                exception_lineno = 959;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_23;
            }
            branch_no_18:;
        }
        goto branch_end_17;
        branch_no_17:;
        {
            PyObject *tmp_assign_source_124;
            tmp_assign_source_124 = PyDict_New();
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_124;
        }
        branch_end_17:;
    }
    {
        PyObject *tmp_assign_source_125;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_PIL$TiffImagePlugin_959 = tmp_set_locals_4;
            Py_INCREF( tmp_set_locals_4 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_25;
        }
        tmp_dictset_value = const_str_plain_TiffImageFile;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 959;

            goto try_except_handler_25;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_484f0f48054c26892011d4b0dcb4ed0b_6, codeobj_484f0f48054c26892011d4b0dcb4ed0b, module_PIL$TiffImagePlugin, sizeof(void *) );
        frame_484f0f48054c26892011d4b0dcb4ed0b_6 = cache_frame_484f0f48054c26892011d4b0dcb4ed0b_6;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_484f0f48054c26892011d4b0dcb4ed0b_6 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_484f0f48054c26892011d4b0dcb4ed0b_6 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_TIFF;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_format, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 961;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = const_str_digest_6692cf102d3f538f97ca25bd835e3695;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_format_description, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 962;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__close_exclusive_fp_after_loading, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 963;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_56__open(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__open, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 965;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            nuitka_bool tmp_condition_result_37;
            PyObject *tmp_called_name_76;
            PyObject *tmp_args_element_name_36;
            PyObject *tmp_called_name_77;
            PyObject *tmp_args_element_name_37;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_condition_result_37 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_37 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_19;
            }
            else
            {
                goto condexpr_false_19;
            }
            condexpr_true_19:;
            tmp_called_name_76 = PyObject_GetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_called_name_76 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if ( tmp_called_name_76 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_args_element_name_36 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_57_n_frames(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 993;
            {
                PyObject *call_args[] = { tmp_args_element_name_36 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_76, call_args );
            }

            Py_DECREF( tmp_called_name_76 );
            Py_DECREF( tmp_args_element_name_36 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            goto condexpr_end_19;
            condexpr_false_19:;
            tmp_called_name_77 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_37 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_57_n_frames(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 993;
            {
                PyObject *call_args[] = { tmp_args_element_name_37 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_77, call_args );
            }

            Py_DECREF( tmp_args_element_name_37 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            condexpr_end_19:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_n_frames, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 993;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        {
            nuitka_bool tmp_condition_result_38;
            PyObject *tmp_called_name_78;
            PyObject *tmp_args_element_name_38;
            PyObject *tmp_called_name_79;
            PyObject *tmp_args_element_name_39;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_condition_result_38 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_38 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_20;
            }
            else
            {
                goto condexpr_false_20;
            }
            condexpr_true_20:;
            tmp_called_name_78 = PyObject_GetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_called_name_78 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if ( tmp_called_name_78 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_args_element_name_38 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_58_is_animated(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 1005;
            {
                PyObject *call_args[] = { tmp_args_element_name_38 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_78, call_args );
            }

            Py_DECREF( tmp_called_name_78 );
            Py_DECREF( tmp_args_element_name_38 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            goto condexpr_end_20;
            condexpr_false_20:;
            tmp_called_name_79 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_39 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_58_is_animated(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 1005;
            {
                PyObject *call_args[] = { tmp_args_element_name_39 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_79, call_args );
            }

            Py_DECREF( tmp_args_element_name_39 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            condexpr_end_20:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_is_animated, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1005;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_59_seek(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_seek, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1022;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_60__seek(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__seek, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1033;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_61_tell(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_tell, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1060;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            nuitka_bool tmp_condition_result_39;
            PyObject *tmp_called_name_80;
            PyObject *tmp_args_element_name_40;
            PyObject *tmp_called_name_81;
            PyObject *tmp_args_element_name_41;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_condition_result_39 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_39 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_21;
            }
            else
            {
                goto condexpr_false_21;
            }
            condexpr_true_21:;
            tmp_called_name_80 = PyObject_GetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_property );

            if ( tmp_called_name_80 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if ( tmp_called_name_80 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_args_element_name_40 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_62_size(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 1064;
            {
                PyObject *call_args[] = { tmp_args_element_name_40 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_80, call_args );
            }

            Py_DECREF( tmp_called_name_80 );
            Py_DECREF( tmp_args_element_name_40 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            goto condexpr_end_21;
            condexpr_false_21:;
            tmp_called_name_81 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_41 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_62_size(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 1064;
            {
                PyObject *call_args[] = { tmp_args_element_name_41 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_81, call_args );
            }

            Py_DECREF( tmp_args_element_name_41 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            condexpr_end_21:;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_size, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1064;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_name_42;
            tmp_called_instance_5 = PyObject_GetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_size );

            if ( tmp_called_instance_5 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "size" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1068;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }

            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1068;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_args_element_name_42 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_63_size(  );



            frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame.f_lineno = 1068;
            {
                PyObject *call_args[] = { tmp_args_element_name_42 };
                tmp_dictset_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_setter, call_args );
            }

            Py_DECREF( tmp_called_instance_5 );
            Py_DECREF( tmp_args_element_name_42 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1068;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_size, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1068;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_64_load(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_load, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1077;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_65_load_end(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain_load_end, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1082;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_66__load_libtiff(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__load_libtiff, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1088;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_67__setup(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__setup, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1175;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_68__close__fp(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain__close__fp, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1362;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_484f0f48054c26892011d4b0dcb4ed0b_6 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_484f0f48054c26892011d4b0dcb4ed0b_6 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_484f0f48054c26892011d4b0dcb4ed0b_6, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_484f0f48054c26892011d4b0dcb4ed0b_6->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_484f0f48054c26892011d4b0dcb4ed0b_6, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_484f0f48054c26892011d4b0dcb4ed0b_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame.
        if ( frame_484f0f48054c26892011d4b0dcb4ed0b_6 == cache_frame_484f0f48054c26892011d4b0dcb4ed0b_6 )
        {
            Py_DECREF( frame_484f0f48054c26892011d4b0dcb4ed0b_6 );
        }
        cache_frame_484f0f48054c26892011d4b0dcb4ed0b_6 = NULL;

        assertFrameObject( frame_484f0f48054c26892011d4b0dcb4ed0b_6 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_25;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_40;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_compexpr_left_5 = tmp_class_creation_4__bases;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_compexpr_right_5 = tmp_class_creation_4__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_25;
            }
            tmp_condition_result_40 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_40 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_19;
            }
            else
            {
                goto branch_no_19;
            }
            branch_yes_19:;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_dictset_value = tmp_class_creation_4__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_959, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_25;
            }
            branch_no_19:;
        }
        {
            PyObject *tmp_assign_source_126;
            PyObject *tmp_called_name_82;
            PyObject *tmp_args_name_8;
            PyObject *tmp_tuple_element_154;
            PyObject *tmp_kw_name_8;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_called_name_82 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_154 = const_str_plain_TiffImageFile;
            tmp_args_name_8 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_154 );
            PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_154 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_154 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_154 );
            PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_154 );
            tmp_tuple_element_154 = locals_PIL$TiffImagePlugin_959;
            Py_INCREF( tmp_tuple_element_154 );
            PyTuple_SET_ITEM( tmp_args_name_8, 2, tmp_tuple_element_154 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 959;
            tmp_assign_source_126 = CALL_FUNCTION( tmp_called_name_82, tmp_args_name_8, tmp_kw_name_8 );
            Py_DECREF( tmp_args_name_8 );
            if ( tmp_assign_source_126 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 959;

                goto try_except_handler_25;
            }
            assert( outline_4_var___class__ == NULL );
            outline_4_var___class__ = tmp_assign_source_126;
        }
        CHECK_OBJECT( outline_4_var___class__ );
        tmp_assign_source_125 = outline_4_var___class__;
        Py_INCREF( tmp_assign_source_125 );
        goto try_return_handler_25;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_25:;
        Py_DECREF( locals_PIL$TiffImagePlugin_959 );
        locals_PIL$TiffImagePlugin_959 = NULL;
        goto try_return_handler_24;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$TiffImagePlugin_959 );
        locals_PIL$TiffImagePlugin_959 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto try_except_handler_24;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_24:;
        CHECK_OBJECT( (PyObject *)outline_4_var___class__ );
        Py_DECREF( outline_4_var___class__ );
        outline_4_var___class__ = NULL;

        goto outline_result_5;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto outline_exception_5;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_5:;
        exception_lineno = 959;
        goto try_except_handler_23;
        outline_result_5:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile, tmp_assign_source_125 );
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases_orig );
    Py_DECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_decl_dict );
    Py_DECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__prepared );
    Py_DECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_dict_key_111;
        PyObject *tmp_dict_value_111;
        PyObject *tmp_tuple_element_155;
        PyObject *tmp_mvar_value_162;
        PyObject *tmp_dict_key_112;
        PyObject *tmp_dict_value_112;
        PyObject *tmp_tuple_element_156;
        PyObject *tmp_mvar_value_163;
        PyObject *tmp_dict_key_113;
        PyObject *tmp_dict_value_113;
        PyObject *tmp_tuple_element_157;
        PyObject *tmp_mvar_value_164;
        PyObject *tmp_dict_key_114;
        PyObject *tmp_dict_value_114;
        PyObject *tmp_tuple_element_158;
        PyObject *tmp_mvar_value_165;
        PyObject *tmp_dict_key_115;
        PyObject *tmp_dict_value_115;
        PyObject *tmp_tuple_element_159;
        PyObject *tmp_mvar_value_166;
        PyObject *tmp_dict_key_116;
        PyObject *tmp_dict_value_116;
        PyObject *tmp_tuple_element_160;
        PyObject *tmp_mvar_value_167;
        PyObject *tmp_dict_key_117;
        PyObject *tmp_dict_value_117;
        PyObject *tmp_tuple_element_161;
        PyObject *tmp_mvar_value_168;
        PyObject *tmp_dict_key_118;
        PyObject *tmp_dict_value_118;
        PyObject *tmp_tuple_element_162;
        PyObject *tmp_mvar_value_169;
        PyObject *tmp_dict_key_119;
        PyObject *tmp_dict_value_119;
        PyObject *tmp_tuple_element_163;
        PyObject *tmp_mvar_value_170;
        PyObject *tmp_dict_key_120;
        PyObject *tmp_dict_value_120;
        PyObject *tmp_tuple_element_164;
        PyObject *tmp_mvar_value_171;
        PyObject *tmp_dict_key_121;
        PyObject *tmp_dict_value_121;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_mvar_value_172;
        PyObject *tmp_dict_key_122;
        PyObject *tmp_dict_value_122;
        PyObject *tmp_tuple_element_166;
        PyObject *tmp_mvar_value_173;
        PyObject *tmp_dict_key_123;
        PyObject *tmp_dict_value_123;
        PyObject *tmp_tuple_element_167;
        PyObject *tmp_mvar_value_174;
        PyObject *tmp_dict_key_124;
        PyObject *tmp_dict_value_124;
        PyObject *tmp_tuple_element_168;
        PyObject *tmp_mvar_value_175;
        PyObject *tmp_dict_key_125;
        PyObject *tmp_dict_value_125;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_mvar_value_176;
        PyObject *tmp_dict_key_126;
        PyObject *tmp_dict_value_126;
        PyObject *tmp_tuple_element_170;
        PyObject *tmp_mvar_value_177;
        PyObject *tmp_dict_key_127;
        PyObject *tmp_dict_value_127;
        PyObject *tmp_tuple_element_171;
        PyObject *tmp_mvar_value_178;
        PyObject *tmp_dict_key_128;
        PyObject *tmp_dict_value_128;
        PyObject *tmp_tuple_element_172;
        PyObject *tmp_mvar_value_179;
        PyObject *tmp_dict_key_129;
        PyObject *tmp_dict_value_129;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_mvar_value_180;
        tmp_dict_key_111 = const_str_plain_1;
        tmp_tuple_element_155 = const_str_plain_1;
        tmp_dict_value_111 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 0, tmp_tuple_element_155 );
        tmp_mvar_value_162 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_162 == NULL ))
        {
            tmp_mvar_value_162 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_162 == NULL )
        {
            Py_DECREF( tmp_dict_value_111 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1382;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_155 = tmp_mvar_value_162;
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 1, tmp_tuple_element_155 );
        tmp_tuple_element_155 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 2, tmp_tuple_element_155 );
        tmp_tuple_element_155 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 3, tmp_tuple_element_155 );
        tmp_tuple_element_155 = const_tuple_int_pos_1_tuple;
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 4, tmp_tuple_element_155 );
        tmp_tuple_element_155 = Py_None;
        Py_INCREF( tmp_tuple_element_155 );
        PyTuple_SET_ITEM( tmp_dict_value_111, 5, tmp_tuple_element_155 );
        tmp_assign_source_127 = _PyDict_NewPresized( 19 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_111, tmp_dict_value_111 );
        Py_DECREF( tmp_dict_value_111 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_112 = const_str_plain_L;
        tmp_tuple_element_156 = const_str_plain_L;
        tmp_dict_value_112 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 0, tmp_tuple_element_156 );
        tmp_mvar_value_163 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_163 == NULL ))
        {
            tmp_mvar_value_163 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_163 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_112 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1383;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_156 = tmp_mvar_value_163;
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 1, tmp_tuple_element_156 );
        tmp_tuple_element_156 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 2, tmp_tuple_element_156 );
        tmp_tuple_element_156 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 3, tmp_tuple_element_156 );
        tmp_tuple_element_156 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 4, tmp_tuple_element_156 );
        tmp_tuple_element_156 = Py_None;
        Py_INCREF( tmp_tuple_element_156 );
        PyTuple_SET_ITEM( tmp_dict_value_112, 5, tmp_tuple_element_156 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_112, tmp_dict_value_112 );
        Py_DECREF( tmp_dict_value_112 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_113 = const_str_plain_LA;
        tmp_tuple_element_157 = const_str_plain_LA;
        tmp_dict_value_113 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 0, tmp_tuple_element_157 );
        tmp_mvar_value_164 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_164 == NULL ))
        {
            tmp_mvar_value_164 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_164 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_113 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1384;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_157 = tmp_mvar_value_164;
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 1, tmp_tuple_element_157 );
        tmp_tuple_element_157 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 2, tmp_tuple_element_157 );
        tmp_tuple_element_157 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 3, tmp_tuple_element_157 );
        tmp_tuple_element_157 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 4, tmp_tuple_element_157 );
        tmp_tuple_element_157 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_157 );
        PyTuple_SET_ITEM( tmp_dict_value_113, 5, tmp_tuple_element_157 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_113, tmp_dict_value_113 );
        Py_DECREF( tmp_dict_value_113 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_114 = const_str_plain_P;
        tmp_tuple_element_158 = const_str_plain_P;
        tmp_dict_value_114 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 0, tmp_tuple_element_158 );
        tmp_mvar_value_165 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_165 == NULL ))
        {
            tmp_mvar_value_165 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_165 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_114 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1385;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_158 = tmp_mvar_value_165;
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 1, tmp_tuple_element_158 );
        tmp_tuple_element_158 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 2, tmp_tuple_element_158 );
        tmp_tuple_element_158 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 3, tmp_tuple_element_158 );
        tmp_tuple_element_158 = const_tuple_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 4, tmp_tuple_element_158 );
        tmp_tuple_element_158 = Py_None;
        Py_INCREF( tmp_tuple_element_158 );
        PyTuple_SET_ITEM( tmp_dict_value_114, 5, tmp_tuple_element_158 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_114, tmp_dict_value_114 );
        Py_DECREF( tmp_dict_value_114 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_115 = const_str_plain_PA;
        tmp_tuple_element_159 = const_str_plain_PA;
        tmp_dict_value_115 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 0, tmp_tuple_element_159 );
        tmp_mvar_value_166 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_166 == NULL ))
        {
            tmp_mvar_value_166 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_166 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_115 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1386;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_159 = tmp_mvar_value_166;
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 1, tmp_tuple_element_159 );
        tmp_tuple_element_159 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 2, tmp_tuple_element_159 );
        tmp_tuple_element_159 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 3, tmp_tuple_element_159 );
        tmp_tuple_element_159 = const_tuple_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 4, tmp_tuple_element_159 );
        tmp_tuple_element_159 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_159 );
        PyTuple_SET_ITEM( tmp_dict_value_115, 5, tmp_tuple_element_159 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_115, tmp_dict_value_115 );
        Py_DECREF( tmp_dict_value_115 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_116 = const_str_plain_I;
        tmp_tuple_element_160 = const_str_digest_084e7b24f5ff6fbbfb31e69f0a2a35d0;
        tmp_dict_value_116 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 0, tmp_tuple_element_160 );
        tmp_mvar_value_167 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_167 == NULL ))
        {
            tmp_mvar_value_167 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_167 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_116 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1387;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_160 = tmp_mvar_value_167;
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 1, tmp_tuple_element_160 );
        tmp_tuple_element_160 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 2, tmp_tuple_element_160 );
        tmp_tuple_element_160 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 3, tmp_tuple_element_160 );
        tmp_tuple_element_160 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 4, tmp_tuple_element_160 );
        tmp_tuple_element_160 = Py_None;
        Py_INCREF( tmp_tuple_element_160 );
        PyTuple_SET_ITEM( tmp_dict_value_116, 5, tmp_tuple_element_160 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_116, tmp_dict_value_116 );
        Py_DECREF( tmp_dict_value_116 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_117 = const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c;
        tmp_tuple_element_161 = const_str_digest_0fde4dc5ce330fdd8e2eb5c008ed370c;
        tmp_dict_value_117 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 0, tmp_tuple_element_161 );
        tmp_mvar_value_168 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_168 == NULL ))
        {
            tmp_mvar_value_168 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_168 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_117 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1388;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_161 = tmp_mvar_value_168;
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 1, tmp_tuple_element_161 );
        tmp_tuple_element_161 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 2, tmp_tuple_element_161 );
        tmp_tuple_element_161 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 3, tmp_tuple_element_161 );
        tmp_tuple_element_161 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 4, tmp_tuple_element_161 );
        tmp_tuple_element_161 = Py_None;
        Py_INCREF( tmp_tuple_element_161 );
        PyTuple_SET_ITEM( tmp_dict_value_117, 5, tmp_tuple_element_161 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_117, tmp_dict_value_117 );
        Py_DECREF( tmp_dict_value_117 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_118 = const_str_digest_380c2cde6c6849a9cfbcc9225b2b8425;
        tmp_tuple_element_162 = const_str_digest_380c2cde6c6849a9cfbcc9225b2b8425;
        tmp_dict_value_118 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 0, tmp_tuple_element_162 );
        tmp_mvar_value_169 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_169 == NULL ))
        {
            tmp_mvar_value_169 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_169 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_118 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1389;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_162 = tmp_mvar_value_169;
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 1, tmp_tuple_element_162 );
        tmp_tuple_element_162 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 2, tmp_tuple_element_162 );
        tmp_tuple_element_162 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 3, tmp_tuple_element_162 );
        tmp_tuple_element_162 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 4, tmp_tuple_element_162 );
        tmp_tuple_element_162 = Py_None;
        Py_INCREF( tmp_tuple_element_162 );
        PyTuple_SET_ITEM( tmp_dict_value_118, 5, tmp_tuple_element_162 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_118, tmp_dict_value_118 );
        Py_DECREF( tmp_dict_value_118 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_119 = const_str_plain_F;
        tmp_tuple_element_163 = const_str_digest_dd0014195a493dcdefb2a95211b4d78b;
        tmp_dict_value_119 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 0, tmp_tuple_element_163 );
        tmp_mvar_value_170 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_170 == NULL ))
        {
            tmp_mvar_value_170 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_170 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_119 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1390;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_163 = tmp_mvar_value_170;
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 1, tmp_tuple_element_163 );
        tmp_tuple_element_163 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 2, tmp_tuple_element_163 );
        tmp_tuple_element_163 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 3, tmp_tuple_element_163 );
        tmp_tuple_element_163 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 4, tmp_tuple_element_163 );
        tmp_tuple_element_163 = Py_None;
        Py_INCREF( tmp_tuple_element_163 );
        PyTuple_SET_ITEM( tmp_dict_value_119, 5, tmp_tuple_element_163 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_119, tmp_dict_value_119 );
        Py_DECREF( tmp_dict_value_119 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_120 = const_str_plain_RGB;
        tmp_tuple_element_164 = const_str_plain_RGB;
        tmp_dict_value_120 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 0, tmp_tuple_element_164 );
        tmp_mvar_value_171 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_171 == NULL ))
        {
            tmp_mvar_value_171 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_171 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_120 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1391;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_164 = tmp_mvar_value_171;
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 1, tmp_tuple_element_164 );
        tmp_tuple_element_164 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 2, tmp_tuple_element_164 );
        tmp_tuple_element_164 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 3, tmp_tuple_element_164 );
        tmp_tuple_element_164 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 4, tmp_tuple_element_164 );
        tmp_tuple_element_164 = Py_None;
        Py_INCREF( tmp_tuple_element_164 );
        PyTuple_SET_ITEM( tmp_dict_value_120, 5, tmp_tuple_element_164 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_120, tmp_dict_value_120 );
        Py_DECREF( tmp_dict_value_120 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_121 = const_str_plain_RGBX;
        tmp_tuple_element_165 = const_str_plain_RGBX;
        tmp_dict_value_121 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 0, tmp_tuple_element_165 );
        tmp_mvar_value_172 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_172 == NULL ))
        {
            tmp_mvar_value_172 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_172 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_121 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1392;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_165 = tmp_mvar_value_172;
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 1, tmp_tuple_element_165 );
        tmp_tuple_element_165 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 2, tmp_tuple_element_165 );
        tmp_tuple_element_165 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 3, tmp_tuple_element_165 );
        tmp_tuple_element_165 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 4, tmp_tuple_element_165 );
        tmp_tuple_element_165 = const_int_0;
        Py_INCREF( tmp_tuple_element_165 );
        PyTuple_SET_ITEM( tmp_dict_value_121, 5, tmp_tuple_element_165 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_121, tmp_dict_value_121 );
        Py_DECREF( tmp_dict_value_121 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_122 = const_str_plain_RGBA;
        tmp_tuple_element_166 = const_str_plain_RGBA;
        tmp_dict_value_122 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 0, tmp_tuple_element_166 );
        tmp_mvar_value_173 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_173 == NULL ))
        {
            tmp_mvar_value_173 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_173 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_122 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1393;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_166 = tmp_mvar_value_173;
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 1, tmp_tuple_element_166 );
        tmp_tuple_element_166 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 2, tmp_tuple_element_166 );
        tmp_tuple_element_166 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 3, tmp_tuple_element_166 );
        tmp_tuple_element_166 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 4, tmp_tuple_element_166 );
        tmp_tuple_element_166 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_166 );
        PyTuple_SET_ITEM( tmp_dict_value_122, 5, tmp_tuple_element_166 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_122, tmp_dict_value_122 );
        Py_DECREF( tmp_dict_value_122 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_123 = const_str_plain_CMYK;
        tmp_tuple_element_167 = const_str_plain_CMYK;
        tmp_dict_value_123 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 0, tmp_tuple_element_167 );
        tmp_mvar_value_174 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_174 == NULL ))
        {
            tmp_mvar_value_174 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_174 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_123 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1394;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_167 = tmp_mvar_value_174;
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 1, tmp_tuple_element_167 );
        tmp_tuple_element_167 = const_int_pos_5;
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 2, tmp_tuple_element_167 );
        tmp_tuple_element_167 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 3, tmp_tuple_element_167 );
        tmp_tuple_element_167 = const_tuple_int_pos_8_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 4, tmp_tuple_element_167 );
        tmp_tuple_element_167 = Py_None;
        Py_INCREF( tmp_tuple_element_167 );
        PyTuple_SET_ITEM( tmp_dict_value_123, 5, tmp_tuple_element_167 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_123, tmp_dict_value_123 );
        Py_DECREF( tmp_dict_value_123 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_124 = const_str_plain_YCbCr;
        tmp_tuple_element_168 = const_str_plain_YCbCr;
        tmp_dict_value_124 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 0, tmp_tuple_element_168 );
        tmp_mvar_value_175 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_175 == NULL ))
        {
            tmp_mvar_value_175 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_175 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_124 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1395;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_168 = tmp_mvar_value_175;
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 1, tmp_tuple_element_168 );
        tmp_tuple_element_168 = const_int_pos_6;
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 2, tmp_tuple_element_168 );
        tmp_tuple_element_168 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 3, tmp_tuple_element_168 );
        tmp_tuple_element_168 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 4, tmp_tuple_element_168 );
        tmp_tuple_element_168 = Py_None;
        Py_INCREF( tmp_tuple_element_168 );
        PyTuple_SET_ITEM( tmp_dict_value_124, 5, tmp_tuple_element_168 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_124, tmp_dict_value_124 );
        Py_DECREF( tmp_dict_value_124 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_125 = const_str_plain_LAB;
        tmp_tuple_element_169 = const_str_plain_LAB;
        tmp_dict_value_125 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 0, tmp_tuple_element_169 );
        tmp_mvar_value_176 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_II );

        if (unlikely( tmp_mvar_value_176 == NULL ))
        {
            tmp_mvar_value_176 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_II );
        }

        if ( tmp_mvar_value_176 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_125 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "II" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1396;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_169 = tmp_mvar_value_176;
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 1, tmp_tuple_element_169 );
        tmp_tuple_element_169 = const_int_pos_8;
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 2, tmp_tuple_element_169 );
        tmp_tuple_element_169 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 3, tmp_tuple_element_169 );
        tmp_tuple_element_169 = const_tuple_int_pos_8_int_pos_8_int_pos_8_tuple;
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 4, tmp_tuple_element_169 );
        tmp_tuple_element_169 = Py_None;
        Py_INCREF( tmp_tuple_element_169 );
        PyTuple_SET_ITEM( tmp_dict_value_125, 5, tmp_tuple_element_169 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_125, tmp_dict_value_125 );
        Py_DECREF( tmp_dict_value_125 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_126 = const_str_digest_668285c8e15fd1c4c777c2ca124e7de4;
        tmp_tuple_element_170 = const_str_digest_668285c8e15fd1c4c777c2ca124e7de4;
        tmp_dict_value_126 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 0, tmp_tuple_element_170 );
        tmp_mvar_value_177 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_177 == NULL ))
        {
            tmp_mvar_value_177 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_177 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_126 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1398;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_170 = tmp_mvar_value_177;
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 1, tmp_tuple_element_170 );
        tmp_tuple_element_170 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 2, tmp_tuple_element_170 );
        tmp_tuple_element_170 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 3, tmp_tuple_element_170 );
        tmp_tuple_element_170 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 4, tmp_tuple_element_170 );
        tmp_tuple_element_170 = Py_None;
        Py_INCREF( tmp_tuple_element_170 );
        PyTuple_SET_ITEM( tmp_dict_value_126, 5, tmp_tuple_element_170 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_126, tmp_dict_value_126 );
        Py_DECREF( tmp_dict_value_126 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_127 = const_str_digest_772c0402ef22c7a4d610f4443976d74a;
        tmp_tuple_element_171 = const_str_digest_772c0402ef22c7a4d610f4443976d74a;
        tmp_dict_value_127 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 0, tmp_tuple_element_171 );
        tmp_mvar_value_178 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_178 == NULL ))
        {
            tmp_mvar_value_178 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_178 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_127 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1399;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_171 = tmp_mvar_value_178;
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 1, tmp_tuple_element_171 );
        tmp_tuple_element_171 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 2, tmp_tuple_element_171 );
        tmp_tuple_element_171 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 3, tmp_tuple_element_171 );
        tmp_tuple_element_171 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 4, tmp_tuple_element_171 );
        tmp_tuple_element_171 = Py_None;
        Py_INCREF( tmp_tuple_element_171 );
        PyTuple_SET_ITEM( tmp_dict_value_127, 5, tmp_tuple_element_171 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_127, tmp_dict_value_127 );
        Py_DECREF( tmp_dict_value_127 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_128 = const_str_digest_397c5c7fdc15959b77fa01985509e603;
        tmp_tuple_element_172 = const_str_digest_397c5c7fdc15959b77fa01985509e603;
        tmp_dict_value_128 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 0, tmp_tuple_element_172 );
        tmp_mvar_value_179 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_179 == NULL ))
        {
            tmp_mvar_value_179 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_179 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_128 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1400;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_172 = tmp_mvar_value_179;
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 1, tmp_tuple_element_172 );
        tmp_tuple_element_172 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 2, tmp_tuple_element_172 );
        tmp_tuple_element_172 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 3, tmp_tuple_element_172 );
        tmp_tuple_element_172 = const_tuple_int_pos_16_tuple;
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 4, tmp_tuple_element_172 );
        tmp_tuple_element_172 = Py_None;
        Py_INCREF( tmp_tuple_element_172 );
        PyTuple_SET_ITEM( tmp_dict_value_128, 5, tmp_tuple_element_172 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_128, tmp_dict_value_128 );
        Py_DECREF( tmp_dict_value_128 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_129 = const_str_digest_d687ba9d0a20767ca771c8cb089e3484;
        tmp_tuple_element_173 = const_str_digest_d687ba9d0a20767ca771c8cb089e3484;
        tmp_dict_value_129 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 0, tmp_tuple_element_173 );
        tmp_mvar_value_180 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_MM );

        if (unlikely( tmp_mvar_value_180 == NULL ))
        {
            tmp_mvar_value_180 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MM );
        }

        if ( tmp_mvar_value_180 == NULL )
        {
            Py_DECREF( tmp_assign_source_127 );
            Py_DECREF( tmp_dict_value_129 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MM" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1401;

            goto frame_exception_exit_1;
        }

        tmp_tuple_element_173 = tmp_mvar_value_180;
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 1, tmp_tuple_element_173 );
        tmp_tuple_element_173 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 2, tmp_tuple_element_173 );
        tmp_tuple_element_173 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 3, tmp_tuple_element_173 );
        tmp_tuple_element_173 = const_tuple_int_pos_32_tuple;
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 4, tmp_tuple_element_173 );
        tmp_tuple_element_173 = Py_None;
        Py_INCREF( tmp_tuple_element_173 );
        PyTuple_SET_ITEM( tmp_dict_value_129, 5, tmp_tuple_element_173 );
        tmp_res = PyDict_SetItem( tmp_assign_source_127, tmp_dict_key_129, tmp_dict_value_129 );
        Py_DECREF( tmp_dict_value_129 );
        assert( !(tmp_res != 0) );
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_SAVE_INFO, tmp_assign_source_127 );
    }
    {
        PyObject *tmp_assign_source_128;
        tmp_assign_source_128 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_69__save(  );



        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save, tmp_assign_source_128 );
    }
    {
        PyObject *tmp_assign_source_129;
        tmp_assign_source_129 = PyDict_New();
        assert( tmp_class_creation_5__class_decl_dict == NULL );
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_129;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_metaclass_name_5;
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_key_name_13;
        PyObject *tmp_dict_name_13;
        PyObject *tmp_dict_name_14;
        PyObject *tmp_key_name_14;
        PyObject *tmp_bases_name_5;
        tmp_key_name_13 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_13, tmp_key_name_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_26;
        }
        tmp_condition_result_41 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_41 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_22;
        }
        else
        {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_name_14 = const_str_plain_metaclass;
        tmp_metaclass_name_5 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
        if ( tmp_metaclass_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_26;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_5 );
        condexpr_end_22:;
        tmp_bases_name_5 = const_tuple_empty;
        tmp_assign_source_130 = SELECT_METACLASS( tmp_metaclass_name_5, tmp_bases_name_5 );
        Py_DECREF( tmp_metaclass_name_5 );
        if ( tmp_assign_source_130 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_26;
        }
        assert( tmp_class_creation_5__metaclass == NULL );
        tmp_class_creation_5__metaclass = tmp_assign_source_130;
    }
    {
        nuitka_bool tmp_condition_result_42;
        PyObject *tmp_key_name_15;
        PyObject *tmp_dict_name_15;
        tmp_key_name_15 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_15, tmp_key_name_15 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_26;
        }
        tmp_condition_result_42 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_42 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_20;
        }
        else
        {
            goto branch_no_20;
        }
        branch_yes_20:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_26;
        }
        branch_no_20:;
    }
    {
        nuitka_bool tmp_condition_result_43;
        PyObject *tmp_source_name_46;
        CHECK_OBJECT( tmp_class_creation_5__metaclass );
        tmp_source_name_46 = tmp_class_creation_5__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_46, const_str_plain___prepare__ );
        tmp_condition_result_43 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_43 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_21;
        }
        else
        {
            goto branch_no_21;
        }
        branch_yes_21:;
        {
            PyObject *tmp_assign_source_131;
            PyObject *tmp_called_name_83;
            PyObject *tmp_source_name_47;
            PyObject *tmp_args_name_9;
            PyObject *tmp_kw_name_9;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_source_name_47 = tmp_class_creation_5__metaclass;
            tmp_called_name_83 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain___prepare__ );
            if ( tmp_called_name_83 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1578;

                goto try_except_handler_26;
            }
            tmp_args_name_9 = const_tuple_str_plain_AppendingTiffWriter_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_9 = tmp_class_creation_5__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1578;
            tmp_assign_source_131 = CALL_FUNCTION( tmp_called_name_83, tmp_args_name_9, tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_83 );
            if ( tmp_assign_source_131 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1578;

                goto try_except_handler_26;
            }
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_131;
        }
        {
            nuitka_bool tmp_condition_result_44;
            PyObject *tmp_operand_name_6;
            PyObject *tmp_source_name_48;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_source_name_48 = tmp_class_creation_5__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_48, const_str_plain___getitem__ );
            tmp_operand_name_6 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1578;

                goto try_except_handler_26;
            }
            tmp_condition_result_44 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_44 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_22;
            }
            else
            {
                goto branch_no_22;
            }
            branch_yes_22:;
            {
                PyObject *tmp_raise_type_5;
                PyObject *tmp_raise_value_5;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                PyObject *tmp_tuple_element_174;
                PyObject *tmp_getattr_target_5;
                PyObject *tmp_getattr_attr_5;
                PyObject *tmp_getattr_default_5;
                PyObject *tmp_source_name_49;
                PyObject *tmp_type_arg_9;
                tmp_raise_type_5 = PyExc_TypeError;
                tmp_left_name_7 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_5__metaclass );
                tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
                tmp_getattr_attr_5 = const_str_plain___name__;
                tmp_getattr_default_5 = const_str_angle_metaclass;
                tmp_tuple_element_174 = BUILTIN_GETATTR( tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5 );
                if ( tmp_tuple_element_174 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1578;

                    goto try_except_handler_26;
                }
                tmp_right_name_7 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_7, 0, tmp_tuple_element_174 );
                CHECK_OBJECT( tmp_class_creation_5__prepared );
                tmp_type_arg_9 = tmp_class_creation_5__prepared;
                tmp_source_name_49 = BUILTIN_TYPE1( tmp_type_arg_9 );
                assert( !(tmp_source_name_49 == NULL) );
                tmp_tuple_element_174 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_49 );
                if ( tmp_tuple_element_174 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_7 );

                    exception_lineno = 1578;

                    goto try_except_handler_26;
                }
                PyTuple_SET_ITEM( tmp_right_name_7, 1, tmp_tuple_element_174 );
                tmp_raise_value_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_raise_value_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1578;

                    goto try_except_handler_26;
                }
                exception_type = tmp_raise_type_5;
                Py_INCREF( tmp_raise_type_5 );
                exception_value = tmp_raise_value_5;
                exception_lineno = 1578;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_26;
            }
            branch_no_22:;
        }
        goto branch_end_21;
        branch_no_21:;
        {
            PyObject *tmp_assign_source_132;
            tmp_assign_source_132 = PyDict_New();
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_132;
        }
        branch_end_21:;
    }
    {
        PyObject *tmp_assign_source_133;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_PIL$TiffImagePlugin_1578 = tmp_set_locals_5;
            Py_INCREF( tmp_set_locals_5 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_357d51dfc182b6fae5c38b3588a154f0;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_28;
        }
        tmp_dictset_value = const_str_plain_AppendingTiffWriter;
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1578;

            goto try_except_handler_28;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_225b72f8e18a7713185e90c0bf993f32_7, codeobj_225b72f8e18a7713185e90c0bf993f32, module_PIL$TiffImagePlugin, sizeof(void *) );
        frame_225b72f8e18a7713185e90c0bf993f32_7 = cache_frame_225b72f8e18a7713185e90c0bf993f32_7;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_225b72f8e18a7713185e90c0bf993f32_7 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_225b72f8e18a7713185e90c0bf993f32_7 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = LIST_COPY( const_list_8f903af5db046de439bc115b7dbdd517_list );
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_fieldSizes, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1579;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = PySet_New( const_set_9e5b488b5e37385300d083e92084ce13 );
        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_Tags, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1601;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = const_tuple_false_tuple;
            Py_INCREF( tmp_defaults_8 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_70___init__( tmp_defaults_8 );



            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1603;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_71_setup(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_setup, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1617;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_72_finalize(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_finalize, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1641;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_73_newFrame(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_newFrame, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1665;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_74___enter__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain___enter__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1670;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_75___exit__(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain___exit__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1673;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_76_tell(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_tell, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1678;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_77_seek(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_seek, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1681;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_78_goToEnd(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_goToEnd, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1688;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_79_setEndian(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_setEndian, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1698;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_80_skipIFDs(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_skipIFDs, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1704;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_81_write(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_write, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1715;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_82_readShort(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_readShort, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1718;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_83_readLong(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_readLong, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1722;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_84_rewriteLastShortToLong(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_rewriteLastShortToLong, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1726;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_85_rewriteLastShort(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_rewriteLastShort, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1733;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_86_rewriteLastLong(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_rewriteLastLong, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1740;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_87_writeShort(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_writeShort, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1747;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_88_writeLong(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_writeLong, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1753;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_89_close(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_close, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1759;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_90_fixIFD(  );



        tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_fixIFD, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1763;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_9;
            tmp_defaults_9 = const_tuple_false_false_tuple;
            Py_INCREF( tmp_defaults_9 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_91_fixOffsets( tmp_defaults_9 );



            tmp_res = PyObject_SetItem( locals_PIL$TiffImagePlugin_1578, const_str_plain_fixOffsets, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1797;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_225b72f8e18a7713185e90c0bf993f32_7 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_225b72f8e18a7713185e90c0bf993f32_7 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_225b72f8e18a7713185e90c0bf993f32_7, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_225b72f8e18a7713185e90c0bf993f32_7->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_225b72f8e18a7713185e90c0bf993f32_7, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_225b72f8e18a7713185e90c0bf993f32_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame.
        if ( frame_225b72f8e18a7713185e90c0bf993f32_7 == cache_frame_225b72f8e18a7713185e90c0bf993f32_7 )
        {
            Py_DECREF( frame_225b72f8e18a7713185e90c0bf993f32_7 );
        }
        cache_frame_225b72f8e18a7713185e90c0bf993f32_7 = NULL;

        assertFrameObject( frame_225b72f8e18a7713185e90c0bf993f32_7 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_28;
        skip_nested_handling_6:;
        {
            PyObject *tmp_assign_source_134;
            PyObject *tmp_called_name_84;
            PyObject *tmp_args_name_10;
            PyObject *tmp_tuple_element_175;
            PyObject *tmp_kw_name_10;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_called_name_84 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_175 = const_str_plain_AppendingTiffWriter;
            tmp_args_name_10 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_175 );
            PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_175 );
            tmp_tuple_element_175 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_175 );
            PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_175 );
            tmp_tuple_element_175 = locals_PIL$TiffImagePlugin_1578;
            Py_INCREF( tmp_tuple_element_175 );
            PyTuple_SET_ITEM( tmp_args_name_10, 2, tmp_tuple_element_175 );
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;
            frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1578;
            tmp_assign_source_134 = CALL_FUNCTION( tmp_called_name_84, tmp_args_name_10, tmp_kw_name_10 );
            Py_DECREF( tmp_args_name_10 );
            if ( tmp_assign_source_134 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1578;

                goto try_except_handler_28;
            }
            assert( outline_5_var___class__ == NULL );
            outline_5_var___class__ = tmp_assign_source_134;
        }
        CHECK_OBJECT( outline_5_var___class__ );
        tmp_assign_source_133 = outline_5_var___class__;
        Py_INCREF( tmp_assign_source_133 );
        goto try_return_handler_28;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_28:;
        Py_DECREF( locals_PIL$TiffImagePlugin_1578 );
        locals_PIL$TiffImagePlugin_1578 = NULL;
        goto try_return_handler_27;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$TiffImagePlugin_1578 );
        locals_PIL$TiffImagePlugin_1578 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto try_except_handler_27;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_27:;
        CHECK_OBJECT( (PyObject *)outline_5_var___class__ );
        Py_DECREF( outline_5_var___class__ );
        outline_5_var___class__ = NULL;

        goto outline_result_6;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto outline_exception_6;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$TiffImagePlugin );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_6:;
        exception_lineno = 1578;
        goto try_except_handler_26;
        outline_result_6:;
        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_AppendingTiffWriter, tmp_assign_source_133 );
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_decl_dict );
    Py_DECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_decl_dict );
    Py_DECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__prepared );
    Py_DECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    {
        PyObject *tmp_assign_source_135;
        tmp_assign_source_135 = MAKE_FUNCTION_PIL$TiffImagePlugin$$$function_92__save_all(  );



        UPDATE_STRING_DICT1( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save_all, tmp_assign_source_135 );
    }
    {
        PyObject *tmp_called_name_85;
        PyObject *tmp_source_name_50;
        PyObject *tmp_mvar_value_181;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_43;
        PyObject *tmp_source_name_51;
        PyObject *tmp_mvar_value_182;
        PyObject *tmp_args_element_name_44;
        PyObject *tmp_mvar_value_183;
        PyObject *tmp_args_element_name_45;
        PyObject *tmp_mvar_value_184;
        tmp_mvar_value_181 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_181 == NULL ))
        {
            tmp_mvar_value_181 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_181 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }

        tmp_source_name_50 = tmp_mvar_value_181;
        tmp_called_name_85 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_register_open );
        if ( tmp_called_name_85 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_182 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_182 == NULL ))
        {
            tmp_mvar_value_182 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_182 == NULL )
        {
            Py_DECREF( tmp_called_name_85 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }

        tmp_source_name_51 = tmp_mvar_value_182;
        tmp_args_element_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_format );
        if ( tmp_args_element_name_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_85 );

            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_183 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_183 == NULL ))
        {
            tmp_mvar_value_183 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_183 == NULL )
        {
            Py_DECREF( tmp_called_name_85 );
            Py_DECREF( tmp_args_element_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }

        tmp_args_element_name_44 = tmp_mvar_value_183;
        tmp_mvar_value_184 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__accept );

        if (unlikely( tmp_mvar_value_184 == NULL ))
        {
            tmp_mvar_value_184 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__accept );
        }

        if ( tmp_mvar_value_184 == NULL )
        {
            Py_DECREF( tmp_called_name_85 );
            Py_DECREF( tmp_args_element_name_43 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_accept" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }

        tmp_args_element_name_45 = tmp_mvar_value_184;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1852;
        {
            PyObject *call_args[] = { tmp_args_element_name_43, tmp_args_element_name_44, tmp_args_element_name_45 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_85, call_args );
        }

        Py_DECREF( tmp_called_name_85 );
        Py_DECREF( tmp_args_element_name_43 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1852;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_86;
        PyObject *tmp_source_name_52;
        PyObject *tmp_mvar_value_185;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_source_name_53;
        PyObject *tmp_mvar_value_186;
        PyObject *tmp_args_element_name_47;
        PyObject *tmp_mvar_value_187;
        tmp_mvar_value_185 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_185 == NULL ))
        {
            tmp_mvar_value_185 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_185 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }

        tmp_source_name_52 = tmp_mvar_value_185;
        tmp_called_name_86 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_register_save );
        if ( tmp_called_name_86 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_186 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_186 == NULL ))
        {
            tmp_mvar_value_186 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_186 == NULL )
        {
            Py_DECREF( tmp_called_name_86 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }

        tmp_source_name_53 = tmp_mvar_value_186;
        tmp_args_element_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_format );
        if ( tmp_args_element_name_46 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_86 );

            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_187 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save );

        if (unlikely( tmp_mvar_value_187 == NULL ))
        {
            tmp_mvar_value_187 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__save );
        }

        if ( tmp_mvar_value_187 == NULL )
        {
            Py_DECREF( tmp_called_name_86 );
            Py_DECREF( tmp_args_element_name_46 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_save" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }

        tmp_args_element_name_47 = tmp_mvar_value_187;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1853;
        {
            PyObject *call_args[] = { tmp_args_element_name_46, tmp_args_element_name_47 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_86, call_args );
        }

        Py_DECREF( tmp_called_name_86 );
        Py_DECREF( tmp_args_element_name_46 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1853;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_name_87;
        PyObject *tmp_source_name_54;
        PyObject *tmp_mvar_value_188;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_source_name_55;
        PyObject *tmp_mvar_value_189;
        PyObject *tmp_args_element_name_49;
        PyObject *tmp_mvar_value_190;
        tmp_mvar_value_188 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_188 == NULL ))
        {
            tmp_mvar_value_188 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_188 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }

        tmp_source_name_54 = tmp_mvar_value_188;
        tmp_called_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_register_save_all );
        if ( tmp_called_name_87 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_189 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_189 == NULL ))
        {
            tmp_mvar_value_189 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_189 == NULL )
        {
            Py_DECREF( tmp_called_name_87 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }

        tmp_source_name_55 = tmp_mvar_value_189;
        tmp_args_element_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_format );
        if ( tmp_args_element_name_48 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_87 );

            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_190 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain__save_all );

        if (unlikely( tmp_mvar_value_190 == NULL ))
        {
            tmp_mvar_value_190 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__save_all );
        }

        if ( tmp_mvar_value_190 == NULL )
        {
            Py_DECREF( tmp_called_name_87 );
            Py_DECREF( tmp_args_element_name_48 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_save_all" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }

        tmp_args_element_name_49 = tmp_mvar_value_190;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1854;
        {
            PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49 };
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_87, call_args );
        }

        Py_DECREF( tmp_called_name_87 );
        Py_DECREF( tmp_args_element_name_48 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1854;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_name_88;
        PyObject *tmp_source_name_56;
        PyObject *tmp_mvar_value_191;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_50;
        PyObject *tmp_source_name_57;
        PyObject *tmp_mvar_value_192;
        PyObject *tmp_args_element_name_51;
        tmp_mvar_value_191 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_191 == NULL ))
        {
            tmp_mvar_value_191 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_191 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1856;

            goto frame_exception_exit_1;
        }

        tmp_source_name_56 = tmp_mvar_value_191;
        tmp_called_name_88 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_register_extensions );
        if ( tmp_called_name_88 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1856;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_192 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_192 == NULL ))
        {
            tmp_mvar_value_192 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_192 == NULL )
        {
            Py_DECREF( tmp_called_name_88 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1856;

            goto frame_exception_exit_1;
        }

        tmp_source_name_57 = tmp_mvar_value_192;
        tmp_args_element_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_format );
        if ( tmp_args_element_name_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_88 );

            exception_lineno = 1856;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_51 = LIST_COPY( const_list_7966eeb46c8db0e0ad53952e033a7ea8_list );
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1856;
        {
            PyObject *call_args[] = { tmp_args_element_name_50, tmp_args_element_name_51 };
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_88, call_args );
        }

        Py_DECREF( tmp_called_name_88 );
        Py_DECREF( tmp_args_element_name_50 );
        Py_DECREF( tmp_args_element_name_51 );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1856;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }
    {
        PyObject *tmp_called_name_89;
        PyObject *tmp_source_name_58;
        PyObject *tmp_mvar_value_193;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_source_name_59;
        PyObject *tmp_mvar_value_194;
        PyObject *tmp_args_element_name_53;
        tmp_mvar_value_193 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_193 == NULL ))
        {
            tmp_mvar_value_193 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_193 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1858;

            goto frame_exception_exit_1;
        }

        tmp_source_name_58 = tmp_mvar_value_193;
        tmp_called_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_register_mime );
        if ( tmp_called_name_89 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1858;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_194 = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );

        if (unlikely( tmp_mvar_value_194 == NULL ))
        {
            tmp_mvar_value_194 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TiffImageFile );
        }

        if ( tmp_mvar_value_194 == NULL )
        {
            Py_DECREF( tmp_called_name_89 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TiffImageFile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1858;

            goto frame_exception_exit_1;
        }

        tmp_source_name_59 = tmp_mvar_value_194;
        tmp_args_element_name_52 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_format );
        if ( tmp_args_element_name_52 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_89 );

            exception_lineno = 1858;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_53 = const_str_digest_a1105e36a1e6c2a432fdc8c72e22be55;
        frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame.f_lineno = 1858;
        {
            PyObject *call_args[] = { tmp_args_element_name_52, tmp_args_element_name_53 };
            tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_89, call_args );
        }

        Py_DECREF( tmp_called_name_89 );
        Py_DECREF( tmp_args_element_name_52 );
        if ( tmp_call_result_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1858;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_6 );
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e81c3e3366ae57b402c59dcc068b3b8a );
#endif
    popFrameStack();

    assertFrameObject( frame_e81c3e3366ae57b402c59dcc068b3b8a );

    goto frame_no_exception_7;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e81c3e3366ae57b402c59dcc068b3b8a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e81c3e3366ae57b402c59dcc068b3b8a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e81c3e3366ae57b402c59dcc068b3b8a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e81c3e3366ae57b402c59dcc068b3b8a, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_7:;

#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict_PIL$TiffImagePlugin, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module_PIL$TiffImagePlugin );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
