/* Generated code for Python module '__main__'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module___main__" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module___main__;
PyDictObject *moduledict___main__;

/* The declarations of module constants used, if any. */
static PyObject *const_str_plain_draw_grid;
extern PyObject *const_int_pos_20;
static PyObject *const_str_digest_2665ea63e56456e34828ec2461179dc3;
static PyObject *const_tuple_str_chr_93_str_chr_125_tuple;
static PyObject *const_str_plain_load_btn_action;
static PyObject *const_str_plain_wipe;
extern PyObject *const_str_plain___name__;
extern PyObject *const_tuple_str_plain_self_str_plain_key_tuple;
static PyObject *const_dict_738265a1f8ceb6b4670fa18d7056ae21;
extern PyObject *const_str_plain_i;
extern PyObject *const_int_pos_9;
static PyObject *const_dict_8a45eee56207aabbbd2d15d9a021b84a;
static PyObject *const_str_plain_messagebox;
static PyObject *const_str_angle_Leave;
static PyObject *const_str_plain_DoubleVar;
static PyObject *const_str_plain_cchoser;
static PyObject *const_str_plain_zoom_in_img;
static PyObject *const_str_digest_043ad602a26f843cf886d9ba4f965229;
static PyObject *const_tuple_str_chr_91_str_chr_123_tuple;
static PyObject *const_str_digest_678735b487c05236249e402e35045f18;
static PyObject *const_str_plain_TOP;
static PyObject *const_str_digest_361dd1c8cba8cde0e72a5788da7e1786;
static PyObject *const_dict_2f5602dc6b887a06485e48254eb1f50f;
static PyObject *const_str_plain_askyesno;
static PyObject *const_str_plain_initialvalue;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain_m;
static PyObject *const_str_plain_Windows;
extern PyObject *const_str_plain_end;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_None;
static PyObject *const_str_plain_mrk;
static PyObject *const_str_plain_yview;
extern PyObject *const_int_pos_5;
static PyObject *const_dict_8bd173e26c1d838fc770fb6a2be4205f;
extern PyObject *const_tuple_str_chr_59_tuple;
static PyObject *const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f;
static PyObject *const_tuple_79171cb7bc5169852d4a4b87644be836_tuple;
static PyObject *const_str_digest_12e1a80dd8270b38ec843d368ea4ac96;
static PyObject *const_dict_54e6c67b961a458f372b3d6c307d9b12;
static PyObject *const_str_digest_f105d337cb4869a4eb343e45bb85d4a9;
static PyObject *const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple;
static PyObject *const_str_plain_bind;
extern PyObject *const_str_plain_start;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_str_plain_left_frame;
static PyObject *const_dict_e2fbe04220f86df988fb54d70c4d4b43;
static PyObject *const_str_plain_disabled;
extern PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_i_tuple;
extern PyObject *const_str_plain___debug__;
static PyObject *const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple;
static PyObject *const_str_plain_zoom;
static PyObject *const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple;
static PyObject *const_tuple_str_plain_ObjectCounter_tuple_empty_tuple;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_str;
static PyObject *const_str_plain_red;
static PyObject *const_tuple_str_plain_Marker_tuple_empty_tuple;
static PyObject *const_dict_fc1e67bad2294e4dce8e82715c04d663;
static PyObject *const_str_plain_new_marker_name;
static PyObject *const_str_plain_marker_table;
static PyObject *const_str_digest_47756bc5cfe494056597c559a2bb8160;
static PyObject *const_str_digest_fb2de3fccc9b5d08e8226ca8b84e5dec;
extern PyObject *const_tuple_str_chr_125_tuple;
extern PyObject *const_str_plain_min;
static PyObject *const_str_plain_draw_marker;
extern PyObject *const_float_1_0;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_check;
static PyObject *const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple;
static PyObject *const_str_plain__actual_zoom;
static PyObject *const_str_plain_prompt;
static PyObject *const_tuple_str_plain_self_str_plain_points_tuple;
static PyObject *const_str_plain_font;
static PyObject *const_tuple_str_plain_p_name_str_plain_marker_tuple;
static PyObject *const_str_digest_2c78e6f04f9ce20dacd3b59e58a8cedb;
static PyObject *const_tuple_str_plain_self_str_plain___tuple;
static PyObject *const_dict_7909693c253d0e10e6fb69517ade1d2a;
static PyObject *const_str_plain_wstep;
static PyObject *const_str_digest_a340598b81f9859d255defa2b567ea50;
static PyObject *const_str_plain_nearest_points;
static PyObject *const_str_digest_99735502170c8addc93dd171d1203a59;
static PyObject *const_tuple_51d4fca747f746d25a0febff62952ff9_tuple;
static PyObject *const_str_plain_showxy;
static PyObject *const_str_plain_find_nearest;
static PyObject *const_str_plain_asksaveasfilename;
static PyObject *const_str_plain_event;
static PyObject *const_str_plain_point_name;
static PyObject *const_str_plain_no;
static PyObject *const_str_plain_grid_color_btn;
static PyObject *const_str_plain_canvasx;
extern PyObject *const_str_plain_LINES;
extern PyObject *const_str_plain_name;
static PyObject *const_str_digest_4633380c9724e5dcec31fae1a6f4a03c;
static PyObject *const_str_plain_wn;
extern PyObject *const_str_plain_img;
static PyObject *const_str_plain_img_open_btn;
static PyObject *const_str_digest_156f914c140602ab1fb5d0e18001e622;
static PyObject *const_tuple_a63c96853c9e8683966577513823007f_tuple;
static PyObject *const_str_plain_se;
extern PyObject *const_str_plain_expand;
static PyObject *const_str_plain_textvariable;
static PyObject *const_tuple_str_plain_self_str_plain_mark_name_tuple;
static PyObject *const_str_plain_realpath;
static PyObject *const_str_plain_underline;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_False;
static PyObject *const_str_plain_dist;
extern PyObject *const_str_plain___contains__;
static PyObject *const_tuple_ec25bdef56334bb81af938720b0aedad_tuple;
static PyObject *const_str_plain_green;
static PyObject *const_str_plain_grid_size_combo;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple;
static PyObject *const_str_plain_canvasy;
extern PyObject *const_str_plain_formats;
extern PyObject *const_str_plain_pop;
static PyObject *const_str_plain_new_marker;
extern PyObject *const_int_0;
extern PyObject *const_str_plain_arithmetic_round;
static PyObject *const_str_plain_heading;
static PyObject *const_str_digest_92515876b38379efe30c6b0d0a2885ae;
static PyObject *const_str_plain_relief;
static PyObject *const_tuple_str_digest_92f9edc60183389fa951ade34579539a_tuple;
static PyObject *const_str_plain_add_point;
static PyObject *const_tuple_str_plain_markname_str_plain_markcount_tuple;
static PyObject *const_tuple_str_plain_markname_tuple;
static PyObject *const_str_plain_vert_lines;
static PyObject *const_str_plain_btn_frame;
static PyObject *const_str_plain_StringVar;
static PyObject *const_str_digest_8af3a737307d555062afd7a55846c1c2;
static PyObject *const_str_digest_481dfb1d53c787be8da4d69b9fa34363;
extern PyObject *const_str_plain_nw;
static PyObject *const_dict_4c1e1caa9d21b6213c97c860d09b0b94;
static PyObject *const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple;
extern PyObject *const_int_pos_200;
static PyObject *const_str_plain_new_tuple;
static PyObject *const_str_digest_8e041da51efee9ef74e9094d9c468ec6;
extern PyObject *const_str_plain_type;
static PyObject *const_tuple_str_empty_int_0_int_0_tuple;
extern PyObject *const_str_plain_white;
static PyObject *const_str_plain_points;
extern PyObject *const_str_plain_color;
static PyObject *const_str_plain_show_zoom;
extern PyObject *const_str_plain___cached__;
static PyObject *const_tuple_be1deddea78092a669e6364afea2bdf9_tuple;
static PyObject *const_str_digest_bb9e58d89eebf4d528f9449426ecd81f;
static PyObject *const_str_digest_9c7d5cb723beb3c9a6dec588cdb24cc3;
static PyObject *const_str_plain_Point;
static PyObject *const_str_plain_distances;
static PyObject *const_str_plain_bottom;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_replace;
static PyObject *const_tuple_str_plain_markcount_tuple;
extern PyObject *const_str_plain_open;
static PyObject *const_str_angle_Return;
static PyObject *const_tuple_str_empty_str_plain_marker_tuple;
extern PyObject *const_str_plain_state;
extern PyObject *const_tuple_str_plain_randint_tuple;
extern PyObject *const_str_plain___prepare__;
static PyObject *const_str_plain_buflabel;
static PyObject *const_list_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple_list;
static PyObject *const_str_plain_store_mouse_pos;
static PyObject *const_str_plain__decrement;
static PyObject *const_str_plain_iconphoto;
static PyObject *const_str_digest_bf8079306be717ea88559cde794acadb;
static PyObject *const_dict_309a489fd2370b220c4e258462867846;
extern PyObject *const_str_plain_lines;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___repr__;
extern PyObject *const_str_plain_distance;
static PyObject *const_tuple_0973355e7733aa362f4df09dc2a12073_tuple;
static PyObject *const_str_digest_eae2951ed9faacdb55d59b23e7879a06;
static PyObject *const_tuple_str_plain_Point_tuple_empty_tuple;
static PyObject *const_str_plain_Count;
static PyObject *const_tuple_str_plain_0_str_plain_end_tuple;
static PyObject *const_str_plain_delete_covered;
static PyObject *const_str_plain_ImageTk;
static PyObject *const_str_plain_ratio;
extern PyObject *const_str_plain_format;
static PyObject *const_str_plain_configure;
extern PyObject *const_str_plain_property;
static PyObject *const_str_digest_1c24ecf31578f5606644bd45c32b4fad;
static PyObject *const_str_plain_zoom_in;
static PyObject *const_str_digest_9ed82b09ff4a3e5976740f07f46487fe;
static PyObject *const_tuple_b3745be60634e8159f2d90d701687747_tuple;
static PyObject *const_str_plain_Scrollbar;
static PyObject *const_str_digest_8cc96a3265a0db94293be0ddd7070477;
static PyObject *const_tuple_str_plain_grid_tuple;
static PyObject *const_str_plain___annotations__;
extern PyObject *const_int_pos_600;
static PyObject *const_str_plain_blue;
extern PyObject *const_str_plain_set;
static PyObject *const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple;
extern PyObject *const_str_plain_index;
static PyObject *const_tuple_str_digest_bb9e58d89eebf4d528f9449426ecd81f_tuple;
static PyObject *const_str_digest_3b393deb6b662fcadc9d1af5a6e48b8e;
static PyObject *const_str_digest_02ac800b2307cc3cc42f52855e26d9ae;
static PyObject *const_dict_f300a543a76e1e5e5a970ab2c143067c;
static PyObject *const_str_plain_gain;
extern PyObject *const_str_plain_resample;
static PyObject *const_tuple_str_plain_path_tuple;
extern PyObject *const_str_plain_background;
static PyObject *const_str_plain_sec_btn_frame;
extern PyObject *const_str_plain_show_image;
extern PyObject *const_str_plain___file__;
extern PyObject *const_slice_int_pos_1_none_none;
extern PyObject *const_int_pos_11;
static PyObject *const_dict_8638e2e7734fb2515e9526a7f0773526;
static PyObject *const_str_plain__w;
static PyObject *const_str_plain_table_frame;
static PyObject *const_dict_69685cdba574c74e631e147de131a5d7;
static PyObject *const_str_digest_2ca36c7a190a81e4db49e8c4a6ddb2f6;
static PyObject *const_str_angle_Enter;
extern PyObject *const_str_plain_site;
static PyObject *const_str_plain_widget;
static PyObject *const_str_plain_grid_visible;
static PyObject *const_dict_1a9f45c4f6fc80524900a0b81a21cc2c;
static PyObject *const_dict_6971a692b5811e69040ac39b14c13b17;
extern PyObject *const_str_plain_image;
static PyObject *const_dict_2ef0d65eb52a756a69a89bae2d2067a9;
extern PyObject *const_tuple_str_chr_44_tuple;
static PyObject *const_str_plain_bold;
extern PyObject *const_str_chr_37;
static PyObject *const_tuple_str_digest_2665ea63e56456e34828ec2461179dc3_tuple;
extern PyObject *const_str_plain_strip;
static PyObject *const_str_plain__zoom_factor;
extern PyObject *const_str_plain_filter;
static PyObject *const_tuple_str_digest_ad8beff752f22bac590c03c36052bef2_tuple;
static PyObject *const_str_plain_groove;
static PyObject *const_tuple_str_plain_bold_int_pos_11_tuple;
static PyObject *const_str_plain_iconimg;
static PyObject *const_str_plain_add_btn_img;
static PyObject *const_str_plain__file_name;
static PyObject *const_tuple_2d432bc3f16857b379210a5124c9531c_tuple;
static PyObject *const_str_plain_new_zoom_factor;
extern PyObject *const_str_plain_read;
extern PyObject *const_str_plain_names;
static PyObject *const_str_plain_Linux;
extern PyObject *const_str_plain_platform;
static PyObject *const_str_plain_mark_color;
static PyObject *const_str_plain_config_buttons;
static PyObject *const_str_plain_markcount;
extern PyObject *const_str_chr_123;
static PyObject *const_str_digest_f09db1b2c387038946fbd47fd97ce655;
static PyObject *const_str_plain_marker_select;
extern PyObject *const_tuple_str_plain_photo_tuple;
extern PyObject *const_str_plain_template;
static PyObject *const_str_digest_5b05b371bb96da05cea21ad6a2e464c1;
static PyObject *const_str_plain_zoom_out_btn;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_str_plain_zfactor;
static PyObject *const_str_digest_9dff3e2111217dcf1806e50ab2da8459;
extern PyObject *const_str_plain_n;
static PyObject *const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple;
extern PyObject *const_str_plain_point;
static PyObject *const_dict_ba0015d6bade45d90a5f5463658c3d76;
extern PyObject *const_str_plain_tags;
static PyObject *const_tuple_299e29199d09389d25700552944f1b9a_tuple;
extern PyObject *const_str_plain_w;
static PyObject *const_dict_9f3d12dbab780c44f0342015a4e21236;
extern PyObject *const_str_plain_value;
static PyObject *const_str_plain_zoom_in_btn;
extern PyObject *const_str_plain_insert;
static PyObject *const_str_plain_winfo_height;
extern PyObject *const_str_plain_all;
static PyObject *const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple;
extern PyObject *const_str_plain_e;
static PyObject *const_str_plain_horiz_lines;
extern PyObject *const_tuple_str_chr_37_tuple;
extern PyObject *const_str_chr_91;
extern PyObject *const_str_chr_64;
static PyObject *const_tuple_str_digest_bac2fab41082fba55cf3968b78192136_tuple;
static PyObject *const_str_plain_both;
static PyObject *const_str_digest_37874538785eccb7920bdd6b8b2cf7bc;
static PyObject *const_str_plain_columns;
extern PyObject *const_tuple_str_plain_self_str_plain_value_tuple;
static PyObject *const_tuple_str_chr_64_tuple;
static PyObject *const_str_plain_draw_grid_btn_action;
extern PyObject *const_str_plain_top;
static PyObject *const_str_plain_ttk;
static PyObject *const_str_plain__grid_var;
extern PyObject *const_tuple_float_1_0_tuple;
static PyObject *const_str_plain_marker_color;
static PyObject *const_str_digest_a5f219c7e8fd8991f91570be61d25fd7;
static PyObject *const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248;
static PyObject *const_str_plain__act_mrk;
static PyObject *const_str_plain_winfo_x;
extern PyObject *const_str_plain_pack;
static PyObject *const_str_digest_0105c2e4e6b8955907874e1dbe95f1fd;
extern PyObject *const_tuple_str_empty_tuple;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_digest_2c8a2582df54bd57ece92b8e178727af;
static PyObject *const_str_digest_10a4fb838c96bd91726226a1df02e818;
static PyObject *const_str_plain_remove_marker_points;
extern PyObject *const_str_plain_call;
extern PyObject *const_str_plain_text;
static PyObject *const_str_plain_key_set;
static PyObject *const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_name_tuple;
extern PyObject *const_str_plain_length;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_str_plain_draw_grid_btn;
static PyObject *const_str_digest_45b66455e94b518712a40e6124dad7bc;
static PyObject *const_str_digest_11de1900b3320878cbf4d73e2ed91396;
static PyObject *const_str_digest_7332ad94b4e981b11dd65fedd42c636a;
static PyObject *const_str_plain_zoom_out_img;
static PyObject *const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple;
static PyObject *const_str_plain_tag_configure;
extern PyObject *const_str_plain_callback;
static PyObject *const_str_digest_abf8b776d50cfbab6678e38b6d16f548;
extern PyObject *const_str_plain___main__;
static PyObject *const_str_plain_mrk_name;
static PyObject *const_str_plain_pnt;
static PyObject *const_dict_d5a93c3679de1e33f30e478c6869828b;
static PyObject *const_str_digest_00172c2c0d2413c7b279dec91fcb7085;
extern PyObject *const_dict_607b85ec57ab5596c680ca014e9c8645;
extern PyObject *const_str_plain_to;
static PyObject *const_str_plain_minsize;
static PyObject *const_str_plain_minwidth;
static PyObject *const_str_digest_533c974ac3262d16e2fa6f5a14cda1ba;
extern PyObject *const_str_chr_47;
static PyObject *const_str_digest_ad8beff752f22bac590c03c36052bef2;
static PyObject *const_str_plain_get_children;
extern PyObject *const_str_plain_px;
extern PyObject *const_str_plain_file;
static PyObject *const_tuple_str_digest_eeb1379f1e97d50b95bacdca6f3396ac_tuple;
extern PyObject *const_str_plain_y;
static PyObject *const_str_plain_jpg;
static PyObject *const_dict_61a7fd64943dba580017d10d3bca2711;
static PyObject *const_str_digest_6115d3419b96dfbdef52fc8cf0dfe523;
extern PyObject *const_str_plain_key;
extern PyObject *const_str_plain_stop;
static PyObject *const_str_plain_defaultextension;
static PyObject *const_str_plain_save_img;
extern PyObject *const_str_plain___init__;
extern PyObject *const_str_plain_left;
static PyObject *const_str_plain_askcolor;
static PyObject *const_str_digest_b63b71117d022038ada56c3ecf438060;
static PyObject *const_str_plain_del_btn_img;
static PyObject *const_str_plain_all_saved;
extern PyObject *const_tuple_str_plain_a_tuple;
static PyObject *const_str_digest_37dcde0202eb7af14b0dc333d1b93a12;
static PyObject *const_str_angle_module;
extern PyObject *const_str_plain_delete;
extern PyObject *const_str_plain_resize;
extern PyObject *const_str_empty;
static PyObject *const_str_plain_mainloop;
extern PyObject *const_float_0_0;
static PyObject *const_str_digest_4177e5d1da0875775db706dbda998159;
static PyObject *const_tuple_str_plain_self_str_plain_event_tuple;
extern PyObject *const_int_pos_100;
static PyObject *const_dict_53232a9b0f1c9c3739814e5eff6d249e;
static PyObject *const_str_plain_ctrl_frame;
static PyObject *const_str_plain_colorchooser;
static PyObject *const_tuple_str_plain_system_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_key_tuple;
static PyObject *const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple;
static PyObject *const_str_plain_grid;
extern PyObject *const_str_plain_marker;
static PyObject *const_str_plain_create_line;
static PyObject *const_str_digest_64f09200df47ccd35b5cb150a2099376;
static PyObject *const_str_plain_open_img;
static PyObject *const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple;
extern PyObject *const_float_1_5;
static PyObject *const_int_pos_420;
static PyObject *const_str_digest_479ed5f8e34c5b603066fce1b59c59d3;
static PyObject *const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7;
extern PyObject *const_str_plain_0;
static PyObject *const_str_plain_hint_label;
static PyObject *const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple;
static PyObject *const_str_digest_d7061b71d49c6b02992636cdcd0fc09a;
static PyObject *const_str_digest_fa6e19975889e039b20bacc6da76404b;
static PyObject *const_str_plain_canv_width;
static PyObject *const_dict_21d54f41ccfcb1c44202b6f93553087c;
static PyObject *const_str_digest_978dfa8aaff5cd4268700ea5916fd762;
static PyObject *const_dict_9b757b99718b3588fd7491e72a547151;
static PyObject *const_str_digest_16b0ef3da2503c9f68feb2662e9f7601;
static PyObject *const_str_plain_selection;
static PyObject *const_str_plain_xscrollcommand;
static PyObject *const_tuple_str_plain_b_str_plain_min_dist_tuple;
static PyObject *const_str_digest_eeb1379f1e97d50b95bacdca6f3396ac;
static PyObject *const_dict_1b28b80177f7157d826cfed027094bed;
static PyObject *const_str_plain_grid_color_dialog;
static PyObject *const_str_plain_wm;
static PyObject *const_str_digest_9036c4e0dace44a646d7c2c58123821b;
extern PyObject *const_str_plain_Label;
static PyObject *const_tuple_str_plain_Image_str_plain_ImageTk_tuple;
static PyObject *const_str_digest_cad5af3a4e7798d6db01e37b19e0fe54;
static PyObject *const_str_digest_535da19c895faf339dd1db062192393d;
static PyObject *const_str_plain_zf;
static PyObject *const_dict_632bdb133f31db7a2f8b975160559743;
static PyObject *const_str_plain_a_round;
static PyObject *const_str_digest_f4cc7bdf9667d51a590587307719312a;
static PyObject *const_str_plain_canvas;
static PyObject *const_str_plain_create_image;
static PyObject *const_str_digest_03982a4b60c2466984ee18366852d28d;
static PyObject *const_str_digest_853e35348d328b0302e354b188c35c30;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_meta;
static PyObject *const_tuple_c530375e859d477735dca92c794c212c_tuple;
static PyObject *const_tuple_str_plain_x_str_plain_self_tuple;
static PyObject *const_str_digest_1779fdfe54bac779d90ced3fbb05c75d;
extern PyObject *const_str_plain_new_name;
static PyObject *const_dict_e9bcd17dbcefea8e779c4693868d05bc;
static PyObject *const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain___len__;
extern PyObject *const_str_plain_sequence;
static PyObject *const_str_plain_oc;
static PyObject *const_str_plain_cursor_dist;
static PyObject *const_str_plain_wfile;
static PyObject *const_str_digest_6be3e39f1bed78d6d2b5d9685bddb660;
static PyObject *const_str_digest_5b18b8c9f5f7ce9cdf95ea9d49dd84db;
static PyObject *const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple;
static PyObject *const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple;
static PyObject *const_str_digest_8edaab80aa908bbb404d0711f8c1a8c6;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_plain_list_markers;
static PyObject *const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list;
static PyObject *const_str_digest_f61b078e43e4a8b40b68a07b533a1ddb;
static PyObject *const_str_plain_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_str_plain_grid_color_img;
static PyObject *const_str_plain_parent;
extern PyObject *const_str_plain_LATIN;
extern PyObject *const_str_plain_height;
static PyObject *const_str_plain_vertical;
static PyObject *const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple;
static PyObject *const_str_plain_actual_x;
static PyObject *const_str_plain_hstep;
static PyObject *const_str_plain__markers;
static PyObject *const_str_plain_simd;
static PyObject *const_str_plain_fold;
static PyObject *const_str_digest_dbed1b28aded01c5a308ca7ef04b4c9e;
static PyObject *const_str_plain_simpledialog;
extern PyObject *const_tuple_empty;
static PyObject *const_str_plain_browse;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_is_number;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_chr_125;
static PyObject *const_str_angle_Motion;
extern PyObject *const_str_plain_side;
static PyObject *const_str_plain__grid_color;
static PyObject *const_str_chr_92;
static PyObject *const_dict_dfd7982266194fee87015b2199b24d40;
extern PyObject *const_int_pos_10;
static PyObject *const_str_plain_scroll_canvas;
static PyObject *const_str_digest_20040adeb7ecd82d1ad664c5d087baa1;
static PyObject *const_str_digest_92f9edc60183389fa951ade34579539a;
static PyObject *const_str_digest_dc166b1b7db229c019bf1e02a4bdd4be;
static PyObject *const_str_digest_aa2ec49d4aec211af747ecb45eb68955;
static PyObject *const_str_plain_delete_nearest;
static PyObject *const_str_digest_11b19aced8caa49fed5176e98b5ceb16;
static PyObject *const_str_plain_MW;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_split;
static PyObject *const_str_plain_anchor;
static PyObject *const_str_plain_reg_marker;
static PyObject *const_str_digest_bac2fab41082fba55cf3968b78192136;
static PyObject *const_str_plain__increment;
extern PyObject *const_str_plain_n_repeat;
static PyObject *const_str_plain_renderer;
static PyObject *const_str_plain_filetypes;
static PyObject *const_str_digest_480fc8b97596af5d9f11310225eb2ebf;
static PyObject *const_dict_39ca36b2ad91eb500a98a2faae94b20a;
static PyObject *const_str_digest_18185c3a907c423e15b284dfcd45864b;
static PyObject *const_str_plain_p_name;
static PyObject *const_str_plain_save_markers_btn;
static PyObject *const_str_digest_2d6badb92fb03a65764e0b33d3000873;
static PyObject *const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple;
extern PyObject *const_str_plain_photo;
static PyObject *const_str_digest_4fc0f3cb1ee2d65b94af894f9bd0869f;
extern PyObject *const_tuple_str_plain_m_tuple;
static PyObject *const_str_plain_winfo_y;
static PyObject *const_str_digest_45eb3e971e3b95fddc0f286f5b7bdca9;
static PyObject *const_str_digest_3d7098de101b2d50ae06ab55dc3b69ef;
extern PyObject *const_str_plain_x;
static PyObject *const_str_digest_83f55308ed344de463ffdc78f04a35bd;
static PyObject *const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple;
extern PyObject *const_str_plain_c;
static PyObject *const_str_digest_0bc01304183f169c6eafdf394be67114;
static PyObject *const_str_plain_some;
extern PyObject *const_tuple_str_plain_all_tuple;
static PyObject *const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple;
static PyObject *const_str_digest_cc66b487c4c2e4e68f7098ebd678113a;
static PyObject *const_str_plain_restore_markers_btn;
static PyObject *const_str_plain_delete_point;
static PyObject *const_str_plain_dereg_marker_btn;
extern PyObject *const_str_plain_dirname;
static PyObject *const_str_plain_markname;
extern PyObject *const_str_plain_system;
static PyObject *const_str_plain_min_dist;
extern PyObject *const_str_plain_randint;
extern PyObject *const_str_plain_DIGITS;
static PyObject *const_str_plain_yscrollcommand;
extern PyObject *const_str_plain___class__;
static PyObject *const_str_plain_create_oval;
extern PyObject *const_str_plain__;
static PyObject *const_str_digest_ddb918f39efc5bec3b0745d2ee48459e;
static PyObject *const_str_digest_af814221305a5b80a0f017120c5947f0;
static PyObject *const_dict_6567b5349b15cc01325b1e3b73731e75;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain___str__;
static PyObject *const_str_plain_edit_mt_item;
static PyObject *const_str_plain_photo_file;
static PyObject *const_str_plain_iconbitmap;
static PyObject *const_dict_04f25dca3d4d6c90e2b5523257528f5e;
static PyObject *const_str_digest_04a32ad9da9f14eba46b22d829d9df2b;
static PyObject *const_str_plain_new_x;
extern PyObject *const_str_plain_readonly;
static PyObject *const_str_plain_takefocus;
static PyObject *const_str_plain_JpgCanvas;
static PyObject *const_tuple_int_0_int_0_int_pos_9_tuple;
static PyObject *const_str_plain_dereg_marker;
static PyObject *const_str_plain_sunken;
static PyObject *const_str_digest_f0730a5b60ecd8b23e4f03dcf315d650;
static PyObject *const_dict_cd18443782360158901000a04a62f9b8;
extern PyObject *const_str_plain_LANCZOS;
static PyObject *const_str_plain_Name;
static PyObject *const_str_digest_c36c140071b9199d6e2a034118d1de51;
static PyObject *const_str_digest_869e1da944f24734e75b205c837ec843;
static PyObject *const_str_digest_7ac06338f0d3a3c40fdf3e9d84c9bb52;
static PyObject *const_str_digest_03941c600898473130bdd80b65ebc76b;
static PyObject *const_str_plain_mark_name;
static PyObject *const_dict_843f8dee56a2d8d35350c85cedbea8e9;
static PyObject *const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple;
extern PyObject *const_str_plain_tkinter;
extern PyObject *const_str_plain_get;
static PyObject *const_str_plain_Treeview;
static PyObject *const_str_plain_cursor;
static PyObject *const_int_pos_35;
static PyObject *const_str_plain_draw_queue;
static PyObject *const_str_plain_scroll;
extern PyObject *const_str_plain_sets;
static PyObject *const_str_digest_010bdc9aabc2e96c2518550ab0d029e2;
static PyObject *const_str_plain_rest_img;
static PyObject *const_str_plain_Scale;
static PyObject *const_str_plain_scrollregion;
static PyObject *const_str_digest_1ed1bb1688ad4d64f6c436f196c95e52;
static PyObject *const_str_plain_new_width;
extern PyObject *const_str_plain___iter__;
static PyObject *const_str_plain_Tk;
static PyObject *const_str_plain_Canvas;
extern PyObject *const_str_plain_fill;
static PyObject *const_str_digest_22a56652470931e1ca9fb48730e47674;
static PyObject *const_str_plain_last_point;
static PyObject *const_str_digest_be0b7f707e2c7d3b2b6e31f01ac24601;
static PyObject *const_dict_954798d046aec4035b0ebd54d4afd999;
static PyObject *const_str_digest_2fa4183c3f41794a0df2fe4af5bcff16;
static PyObject *const_str_plain_recalculate_points_positions;
static PyObject *const_str_digest_edf98059acca72bb709b386add886408;
static PyObject *const_str_plain_VertImgScroll;
static PyObject *const_str_plain_silver;
extern PyObject *const_str_plain_foreground;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_scan_dragto;
extern PyObject *const_str_plain_main;
static PyObject *const_str_plain_v_scroll_frame;
static PyObject *const_str_digest_2094ca90f02e7fc2c7d761c818ab9a31;
static PyObject *const_str_plain_redraw_grid;
static PyObject *const_dict_387ffba8c6007802d2ff1057b76f718d;
static PyObject *const_str_digest_1cb6bcc50333534b80b0dbdb17ec0142;
static PyObject *const_str_plain_scan_mark;
extern PyObject *const_tuple_str_plain___class___tuple;
static PyObject *const_str_plain_actual_y;
static PyObject *const_dict_c8f191ee18e314cbd54f4429f11fd237;
static PyObject *const_str_digest_6c92efcbf38cda1e8f529735f36d5913;
extern PyObject *const_str_angle_metaclass;
extern PyObject *const_tuple_str_space_str_plain___tuple;
extern PyObject *const_str_plain___exit__;
static PyObject *const_str_digest_de827676e90e243c6f6e99864add5ae8;
static PyObject *const_str_plain__index_of;
static PyObject *const_str_plain_ifexit;
static PyObject *const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple;
extern PyObject *const_str_plain_a;
static PyObject *const_str_plain_restore_markers;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_name_tuple;
static PyObject *const_str_digest_8c020ebcc4e366f17cbdf0ddaf8201a4;
static PyObject *const_str_plain_mouse_x;
extern PyObject *const_str_plain_protocol;
static PyObject *const_str_digest_341f627abde4738a7ba7c80d7016af84;
static PyObject *const_dict_c81e51d900f46841d2257bc020593429;
extern PyObject *const_str_plain_size;
static PyObject *const_str_digest_a7a395a6f5b786b2837acf466cf590f4;
static PyObject *const_str_digest_2afb393e5bf92d069ac752bb2020a148;
static PyObject *const_str_digest_e0c1d1b1847f096d71ec514176536240;
static PyObject *const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple;
extern PyObject *const_str_plain_bg;
static PyObject *const_str_plain_Frame;
extern PyObject *const_str_plain_from_;
extern PyObject *const_str_plain___enter__;
static PyObject *const_str_plain_padx;
extern PyObject *const_tuple_str_chr_58_tuple;
static PyObject *const_str_plain_justify;
static PyObject *const_str_plain_add_btn_action;
static PyObject *const_str_plain_NO;
extern PyObject *const_str_plain_command;
static PyObject *const_str_digest_1e015f729cf96517bd39715d84674b71;
static PyObject *const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple;
static PyObject *const_str_plain_p_names;
static PyObject *const_str_digest_3ada7868ab79bf6ab657778950f2bb14;
extern PyObject *const_str_plain_join;
extern PyObject *const_tuple_int_0_int_0_tuple;
static PyObject *const_str_digest_e4cf56fe3b0bc995853a45abe22e6244;
static PyObject *const_str_plain_zoom_factor_label;
static PyObject *const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple;
static PyObject *const_str_plain_reg_marker_btn;
extern PyObject *const_str_dot;
static PyObject *const_str_digest_ab2827542477cf85f83a30583bea4580;
static PyObject *const_str_plain_Marker;
static PyObject *const_str_plain_save_markers;
static PyObject *const_str_plain_xview;
extern PyObject *const_str_plain_PIL;
static PyObject *const_str_plain_del_btn_action;
static PyObject *const_dict_9a135619cf9f4e2dc0e57013204896a8;
static PyObject *const_tuple_str_plain_self_str_plain_zfactor_tuple;
static PyObject *const_str_digest_91369a51db914682b7b489fb669b7d4a;
static PyObject *const_str_plain_Entry;
extern PyObject *const_str_chr_44;
static PyObject *const_str_digest_52236fb712fbcfd75011618e94986a01;
static PyObject *const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple;
extern PyObject *const_str_plain_PhotoImage;
static PyObject *const_str_plain_color_box;
static PyObject *const_str_digest_484045dd99bc1aa516b6975ab5488c88;
extern PyObject *const_str_plain_int;
static PyObject *const_str_digest_1d315cd69fb8867c96afa445af2e8202;
static PyObject *const_str_plain_zoom_bar;
extern PyObject *const_str_plain_variable;
static PyObject *const_str_plain_horizontal;
static PyObject *const_str_plain_hn;
extern PyObject *const_str_plain_random;
static PyObject *const_tuple_int_pos_600_int_pos_600_tuple;
static PyObject *const_str_plain_filedialog;
static PyObject *const_dict_ab6f30f3f2c3c07dd8fbd56f4ec662bd;
extern PyObject *const_str_plain_line;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple;
extern PyObject *const_str_plain_fd;
static PyObject *const_dict_7cc8ea2452b7529ef5642e9b0f43bebd;
static PyObject *const_str_plain_marker_name;
static PyObject *const_str_digest_8800f774b27d44e11f6e7dc799e181fc;
static PyObject *const_str_digest_a2135bac7a55a5f1c007dd16df1fb6fc;
static PyObject *const_str_plain_winfo_width;
extern PyObject *const_str_plain_title;
static PyObject *const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7;
static PyObject *const_str_plain_orient;
static PyObject *const_tuple_str_plain_ttk_str_plain_messagebox_tuple;
static PyObject *const_str_plain_askstring;
extern PyObject *const_str_plain_r;
static PyObject *const_str_digest_f7ea88360407b5af8f2057be79d397f7;
extern PyObject *const_str_plain_py;
static PyObject *const_str_digest_0671ae41e24608f4baed6f6736e6f766;
static PyObject *const_str_plain_m_name;
static PyObject *const_str_digest_58f35236723a163685990d21d3e8852f;
extern PyObject *const_tuple_str_plain_x_tuple;
static PyObject *const_str_plain_new_y;
static PyObject *const_str_digest_a776a2e35d80570c0434d801d80ee1e0;
static PyObject *const_str_digest_c0c6b393b34855ffa199d0a9f4a999a9;
static PyObject *const_str_digest_a6c24e7eda67112764a21ae5ba836efb;
static PyObject *const_str_plain_coordinates;
static PyObject *const_str_digest_64f21f796b58f0181825b26e02898373;
static PyObject *const_str_digest_071d198a42c91039f0e324fe46862605;
static PyObject *const_tuple_73825a395eede51bac87df279c13d87a_tuple;
static PyObject *const_dict_81900f1fa71706159eeaded4993b6386;
static PyObject *const_str_plain_destroy;
static PyObject *const_dict_644eea9536c311d40bcda6e9823e381c;
static PyObject *const_str_plain_canv_height;
static PyObject *const_str_plain_WM_DELETE_WINDOW;
static PyObject *const_str_digest_06796b648e08ddbc99b55cf216966b9a;
static PyObject *const_tuple_str_plain_self_str_plain___str_plain_value_tuple;
static PyObject *const_str_plain_init_name;
static PyObject *const_str_plain_mouse_y;
static PyObject *const_str_plain_place_marker_point;
static PyObject *const_dict_7a96c67f653e4bbdc849976097e96fb5;
static PyObject *const_str_plain_namegen;
static PyObject *const_str_plain_image_frame;
static PyObject *const_str_plain_Combobox;
extern PyObject *const_str_chr_58;
static PyObject *const_str_digest_b5bc58a36ade8b28c32452d7a339d9ac;
static PyObject *const_dict_0bb445399fe88d6da125b1ba538ec20c;
static PyObject *const_tuple_str_plain_red_tuple;
static PyObject *const_str_digest_5424b83a11fdc59b8169de1e79b727c7;
extern PyObject *const_str_plain_right;
extern PyObject *const_str_angle_listcomp;
static PyObject *const_dict_9a3fa329eccba2f298c8181d957f35f2;
static PyObject *const_tuple_str_plain_self_str_plain_ifexit_tuple;
static PyObject *const_str_plain_column;
static PyObject *const_str_digest_18dba6422046979b1801ec5903c968d0;
static PyObject *const_dict_9bebc746c58a0156de1440cf5c4adafb;
static PyObject *const_str_digest_c3983cdf52a3b805b4ae9a8560f2cd66;
static PyObject *const_tuple_a5b28a47185bf750381240a61310a4e0_tuple;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_int_pos_50;
static PyObject *const_str_plain_Button;
extern PyObject *const_str_plain_flat;
static PyObject *const_str_plain_stretch;
static PyObject *const_dict_29192ed75dad88e4602a2efaaea0cde1;
extern PyObject *const_str_chr_93;
static PyObject *const_tuple_str_digest_1779fdfe54bac779d90ced3fbb05c75d_tuple;
static PyObject *const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple;
static PyObject *const_str_digest_3761902b939bcfae63ccb9e5c1056971;
static PyObject *const_tuple_e49d47e725ed3317310738bb67686d05_tuple;
extern PyObject *const_str_plain_maxsplit;
static PyObject *const_str_plain_h_scroll_frame;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_marker_tuple;
extern PyObject *const_str_plain_PUNCT;
extern PyObject *const_str_plain_filename;
static PyObject *const_str_digest_0cced0d80afacc5b0545a9f16b3a5aa4;
static PyObject *const_str_plain_ObjectCounter;
static PyObject *const_str_digest_0b13918e89a11310bf797ee9b20559b9;
static PyObject *const_str_plain_HorizImgScroll;
extern PyObject *const_str_plain_values;
extern PyObject *const_str_plain_last;
static PyObject *const_str_plain_grid_img;
static PyObject *const_str_plain_internal_frame;
extern PyObject *const_str_plain_strfilter;
static PyObject *const_tuple_str_plain_DIGITS_str_plain_PUNCT_tuple;
static PyObject *const_str_plain_syst;
static PyObject *const_str_plain_marker_1;
extern PyObject *const_str_plain_width;
static PyObject *const_str_digest_79647c6567c1db57751208265588ef26;
extern PyObject *const_str_plain_enabled;
static PyObject *const_str_plain_selectmode;
static PyObject *const_dict_595ce05fed954a5be4fec998da079e83;
extern PyObject *const_int_pos_3;
static PyObject *const_str_plain__count;
extern PyObject *const_str_plain_self;
static PyObject *const_dict_e774fcf6597a6add02277f245bf9520e;
static PyObject *const_str_plain_zoom_out;
static PyObject *const_str_plain_tag_bind;
static PyObject *const_dict_3584f923e93519852eb3b60cbfff8c61;
static PyObject *const_str_digest_c9dbca89b60e23dab81d05bd0125ba17;
static PyObject *const_str_plain_homedir;
extern PyObject *const_str_chr_59;
static PyObject *const_str_plain_mark_count;
static PyObject *const_str_plain_counter;
extern PyObject *const_int_pos_2;
static PyObject *const_str_digest_63ff4c5cb59d6cdc351fd21bc2be98e6;
static PyObject *const_str_plain_xyentry;
extern PyObject *const_str_plain_Image;
static PyObject *const_str_plain_crosshair;
static PyObject *const_str_plain_askopenfilename;
static PyObject *const_str_angle_Configure;
static PyObject *const_str_plain_new_height;
static PyObject *const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_str_plain_draw_grid = UNSTREAM_STRING_ASCII( &constant_bin[ 115251 ], 9, 1 );
    const_str_digest_2665ea63e56456e34828ec2461179dc3 = UNSTREAM_STRING_ASCII( &constant_bin[ 115260 ], 9, 0 );
    const_tuple_str_chr_93_str_chr_125_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_93_str_chr_125_tuple, 0, const_str_chr_93 ); Py_INCREF( const_str_chr_93 );
    PyTuple_SET_ITEM( const_tuple_str_chr_93_str_chr_125_tuple, 1, const_str_chr_125 ); Py_INCREF( const_str_chr_125 );
    const_str_plain_load_btn_action = UNSTREAM_STRING_ASCII( &constant_bin[ 115269 ], 15, 1 );
    const_str_plain_wipe = UNSTREAM_STRING_ASCII( &constant_bin[ 115284 ], 4, 1 );
    const_dict_738265a1f8ceb6b4670fa18d7056ae21 = _PyDict_NewPresized( 1 );
    const_str_digest_11de1900b3320878cbf4d73e2ed91396 = UNSTREAM_STRING_ASCII( &constant_bin[ 115288 ], 42, 0 );
    PyDict_SetItem( const_dict_738265a1f8ceb6b4670fa18d7056ae21, const_str_plain_text, const_str_digest_11de1900b3320878cbf4d73e2ed91396 );
    assert( PyDict_Size( const_dict_738265a1f8ceb6b4670fa18d7056ae21 ) == 1 );
    const_dict_8a45eee56207aabbbd2d15d9a021b84a = _PyDict_NewPresized( 1 );
    const_tuple_str_plain_DIGITS_str_plain_PUNCT_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_DIGITS_str_plain_PUNCT_tuple, 0, const_str_plain_DIGITS ); Py_INCREF( const_str_plain_DIGITS );
    PyTuple_SET_ITEM( const_tuple_str_plain_DIGITS_str_plain_PUNCT_tuple, 1, const_str_plain_PUNCT ); Py_INCREF( const_str_plain_PUNCT );
    PyDict_SetItem( const_dict_8a45eee56207aabbbd2d15d9a021b84a, const_str_plain_sets, const_tuple_str_plain_DIGITS_str_plain_PUNCT_tuple );
    assert( PyDict_Size( const_dict_8a45eee56207aabbbd2d15d9a021b84a ) == 1 );
    const_str_plain_messagebox = UNSTREAM_STRING_ASCII( &constant_bin[ 115330 ], 10, 1 );
    const_str_angle_Leave = UNSTREAM_STRING_ASCII( &constant_bin[ 115340 ], 7, 0 );
    const_str_plain_DoubleVar = UNSTREAM_STRING_ASCII( &constant_bin[ 115347 ], 9, 1 );
    const_str_plain_cchoser = UNSTREAM_STRING_ASCII( &constant_bin[ 115356 ], 7, 1 );
    const_str_plain_zoom_in_img = UNSTREAM_STRING_ASCII( &constant_bin[ 115363 ], 11, 1 );
    const_str_digest_043ad602a26f843cf886d9ba4f965229 = UNSTREAM_STRING_ASCII( &constant_bin[ 115374 ], 6, 0 );
    const_tuple_str_chr_91_str_chr_123_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_91_str_chr_123_tuple, 0, const_str_chr_91 ); Py_INCREF( const_str_chr_91 );
    PyTuple_SET_ITEM( const_tuple_str_chr_91_str_chr_123_tuple, 1, const_str_chr_123 ); Py_INCREF( const_str_chr_123 );
    const_str_digest_678735b487c05236249e402e35045f18 = UNSTREAM_STRING_ASCII( &constant_bin[ 115380 ], 5, 0 );
    const_str_plain_TOP = UNSTREAM_STRING_ASCII( &constant_bin[ 19688 ], 3, 1 );
    const_str_digest_361dd1c8cba8cde0e72a5788da7e1786 = UNSTREAM_STRING_ASCII( &constant_bin[ 115385 ], 26, 0 );
    const_dict_2f5602dc6b887a06485e48254eb1f50f = _PyDict_NewPresized( 2 );
    const_str_plain_Name = UNSTREAM_STRING_ASCII( &constant_bin[ 6226 ], 4, 1 );
    PyDict_SetItem( const_dict_2f5602dc6b887a06485e48254eb1f50f, const_str_plain_text, const_str_plain_Name );
    const_str_plain_anchor = UNSTREAM_STRING_ASCII( &constant_bin[ 115411 ], 6, 1 );
    PyDict_SetItem( const_dict_2f5602dc6b887a06485e48254eb1f50f, const_str_plain_anchor, const_str_plain_w );
    assert( PyDict_Size( const_dict_2f5602dc6b887a06485e48254eb1f50f ) == 2 );
    const_str_plain_askyesno = UNSTREAM_STRING_ASCII( &constant_bin[ 115417 ], 8, 1 );
    const_str_plain_initialvalue = UNSTREAM_STRING_ASCII( &constant_bin[ 115425 ], 12, 1 );
    const_str_plain_Windows = UNSTREAM_STRING_ASCII( &constant_bin[ 2013 ], 7, 1 );
    const_str_plain_mrk = UNSTREAM_STRING_ASCII( &constant_bin[ 115437 ], 3, 1 );
    const_str_plain_yview = UNSTREAM_STRING_ASCII( &constant_bin[ 115440 ], 5, 1 );
    const_dict_8bd173e26c1d838fc770fb6a2be4205f = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_8bd173e26c1d838fc770fb6a2be4205f, const_str_plain_fill, const_str_plain_y );
    PyDict_SetItem( const_dict_8bd173e26c1d838fc770fb6a2be4205f, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_8bd173e26c1d838fc770fb6a2be4205f, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_8bd173e26c1d838fc770fb6a2be4205f, const_str_plain_anchor, const_str_plain_e );
    assert( PyDict_Size( const_dict_8bd173e26c1d838fc770fb6a2be4205f ) == 4 );
    const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f = UNSTREAM_STRING_ASCII( &constant_bin[ 115445 ], 5, 0 );
    const_tuple_79171cb7bc5169852d4a4b87644be836_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 2, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    const_str_plain_distances = UNSTREAM_STRING_ASCII( &constant_bin[ 51571 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 3, const_str_plain_distances ); Py_INCREF( const_str_plain_distances );
    const_str_plain_min_dist = UNSTREAM_STRING_ASCII( &constant_bin[ 115450 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 4, const_str_plain_min_dist ); Py_INCREF( const_str_plain_min_dist );
    const_str_digest_12e1a80dd8270b38ec843d368ea4ac96 = UNSTREAM_STRING_ASCII( &constant_bin[ 115458 ], 43, 0 );
    const_dict_54e6c67b961a458f372b3d6c307d9b12 = _PyDict_NewPresized( 1 );
    const_str_digest_de827676e90e243c6f6e99864add5ae8 = UNSTREAM_STRING_ASCII( &constant_bin[ 115501 ], 17, 0 );
    PyDict_SetItem( const_dict_54e6c67b961a458f372b3d6c307d9b12, const_str_plain_text, const_str_digest_de827676e90e243c6f6e99864add5ae8 );
    assert( PyDict_Size( const_dict_54e6c67b961a458f372b3d6c307d9b12 ) == 1 );
    const_str_digest_f105d337cb4869a4eb343e45bb85d4a9 = UNSTREAM_STRING_ASCII( &constant_bin[ 115518 ], 3, 0 );
    const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple = PyTuple_New( 3 );
    const_str_plain_p_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115521 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple, 0, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_m_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115527 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple, 2, const_str_plain_m_name ); Py_INCREF( const_str_plain_m_name );
    const_str_plain_bind = UNSTREAM_STRING_ASCII( &constant_bin[ 27386 ], 4, 1 );
    const_str_plain_left_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 115533 ], 10, 1 );
    const_dict_e2fbe04220f86df988fb54d70c4d4b43 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_e2fbe04220f86df988fb54d70c4d4b43, const_str_plain_mode, const_str_plain_all );
    assert( PyDict_Size( const_dict_e2fbe04220f86df988fb54d70c4d4b43 ) == 1 );
    const_str_plain_disabled = UNSTREAM_STRING_ASCII( &constant_bin[ 115543 ], 8, 1 );
    const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple = PyTuple_New( 2 );
    const_str_digest_a340598b81f9859d255defa2b567ea50 = UNSTREAM_STRING_ASCII( &constant_bin[ 115551 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple, 0, const_str_digest_a340598b81f9859d255defa2b567ea50 ); Py_INCREF( const_str_digest_a340598b81f9859d255defa2b567ea50 );
    const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple, 0, const_str_digest_678735b487c05236249e402e35045f18 ); Py_INCREF( const_str_digest_678735b487c05236249e402e35045f18 );
    PyTuple_SET_ITEM( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple, 1, const_str_digest_043ad602a26f843cf886d9ba4f965229 ); Py_INCREF( const_str_digest_043ad602a26f843cf886d9ba4f965229 );
    const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7 = UNSTREAM_STRING_ASCII( &constant_bin[ 115573 ], 5, 0 );
    PyTuple_SET_ITEM( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple, 2, const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7 ); Py_INCREF( const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7 );
    const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248 = UNSTREAM_STRING_ASCII( &constant_bin[ 115578 ], 5, 0 );
    PyTuple_SET_ITEM( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple, 3, const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248 ); Py_INCREF( const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248 );
    PyTuple_SET_ITEM( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple, 4, const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f ); Py_INCREF( const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f );
    PyTuple_SET_ITEM( const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple, 1, const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple ); Py_INCREF( const_tuple_46caa6f377d4aee96c3c12ac1ed98512_tuple );
    const_str_plain_zoom = UNSTREAM_STRING_ASCII( &constant_bin[ 105917 ], 4, 1 );
    const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_marker_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115583 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple, 1, const_str_plain_marker_name ); Py_INCREF( const_str_plain_marker_name );
    const_str_plain_marker_color = UNSTREAM_STRING_ASCII( &constant_bin[ 115594 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple, 2, const_str_plain_marker_color ); Py_INCREF( const_str_plain_marker_color );
    const_tuple_str_plain_ObjectCounter_tuple_empty_tuple = PyTuple_New( 2 );
    const_str_plain_ObjectCounter = UNSTREAM_STRING_ASCII( &constant_bin[ 115385 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ObjectCounter_tuple_empty_tuple, 0, const_str_plain_ObjectCounter ); Py_INCREF( const_str_plain_ObjectCounter );
    PyTuple_SET_ITEM( const_tuple_str_plain_ObjectCounter_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain_red = UNSTREAM_STRING_ASCII( &constant_bin[ 1032 ], 3, 1 );
    const_tuple_str_plain_Marker_tuple_empty_tuple = PyTuple_New( 2 );
    const_str_plain_Marker = UNSTREAM_STRING_ASCII( &constant_bin[ 115606 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Marker_tuple_empty_tuple, 0, const_str_plain_Marker ); Py_INCREF( const_str_plain_Marker );
    PyTuple_SET_ITEM( const_tuple_str_plain_Marker_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_dict_fc1e67bad2294e4dce8e82715c04d663 = _PyDict_NewPresized( 1 );
    const_str_digest_481dfb1d53c787be8da4d69b9fa34363 = UNSTREAM_STRING_ASCII( &constant_bin[ 115612 ], 20, 0 );
    PyDict_SetItem( const_dict_fc1e67bad2294e4dce8e82715c04d663, const_str_plain_text, const_str_digest_481dfb1d53c787be8da4d69b9fa34363 );
    assert( PyDict_Size( const_dict_fc1e67bad2294e4dce8e82715c04d663 ) == 1 );
    const_str_plain_new_marker_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115632 ], 15, 1 );
    const_str_plain_marker_table = UNSTREAM_STRING_ASCII( &constant_bin[ 115647 ], 12, 1 );
    const_str_digest_47756bc5cfe494056597c559a2bb8160 = UNSTREAM_STRING_ASCII( &constant_bin[ 115659 ], 19, 0 );
    const_str_digest_fb2de3fccc9b5d08e8226ca8b84e5dec = UNSTREAM_STRING_ASCII( &constant_bin[ 115678 ], 14, 0 );
    const_str_plain_draw_marker = UNSTREAM_STRING_ASCII( &constant_bin[ 115692 ], 11, 1 );
    const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple, 0, const_str_plain_mrk ); Py_INCREF( const_str_plain_mrk );
    const_str_plain_pnt = UNSTREAM_STRING_ASCII( &constant_bin[ 115703 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple, 1, const_str_plain_pnt ); Py_INCREF( const_str_plain_pnt );
    PyTuple_SET_ITEM( const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple, 2, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple, 3, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    const_str_plain__actual_zoom = UNSTREAM_STRING_ASCII( &constant_bin[ 115706 ], 12, 1 );
    const_str_plain_prompt = UNSTREAM_STRING_ASCII( &constant_bin[ 115718 ], 6, 1 );
    const_tuple_str_plain_self_str_plain_points_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_points_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_points = UNSTREAM_STRING_ASCII( &constant_bin[ 46541 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_points_tuple, 1, const_str_plain_points ); Py_INCREF( const_str_plain_points );
    const_str_plain_font = UNSTREAM_STRING_ASCII( &constant_bin[ 115724 ], 4, 1 );
    const_tuple_str_plain_p_name_str_plain_marker_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_name_str_plain_marker_tuple, 0, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_name_str_plain_marker_tuple, 1, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_digest_2c78e6f04f9ce20dacd3b59e58a8cedb = UNSTREAM_STRING_ASCII( &constant_bin[ 115728 ], 31, 0 );
    const_tuple_str_plain_self_str_plain___tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___tuple, 1, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_dict_7909693c253d0e10e6fb69517ade1d2a = _PyDict_NewPresized( 1 );
    const_str_digest_edf98059acca72bb709b386add886408 = UNSTREAM_STRING_ASCII( &constant_bin[ 115759 ], 22, 0 );
    PyDict_SetItem( const_dict_7909693c253d0e10e6fb69517ade1d2a, const_str_plain_text, const_str_digest_edf98059acca72bb709b386add886408 );
    assert( PyDict_Size( const_dict_7909693c253d0e10e6fb69517ade1d2a ) == 1 );
    const_str_plain_wstep = UNSTREAM_STRING_ASCII( &constant_bin[ 115781 ], 5, 1 );
    const_str_plain_nearest_points = UNSTREAM_STRING_ASCII( &constant_bin[ 115786 ], 14, 1 );
    const_str_digest_99735502170c8addc93dd171d1203a59 = UNSTREAM_STRING_ASCII( &constant_bin[ 115800 ], 42, 0 );
    const_tuple_51d4fca747f746d25a0febff62952ff9_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_fold = UNSTREAM_STRING_ASCII( &constant_bin[ 115842 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 1, const_str_plain_fold ); Py_INCREF( const_str_plain_fold );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 2, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 3, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 4, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 5, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    const_str_plain_showxy = UNSTREAM_STRING_ASCII( &constant_bin[ 115846 ], 6, 1 );
    const_str_plain_find_nearest = UNSTREAM_STRING_ASCII( &constant_bin[ 115852 ], 12, 1 );
    const_str_plain_asksaveasfilename = UNSTREAM_STRING_ASCII( &constant_bin[ 115864 ], 17, 1 );
    const_str_plain_event = UNSTREAM_STRING_ASCII( &constant_bin[ 115881 ], 5, 1 );
    const_str_plain_point_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115886 ], 10, 1 );
    const_str_plain_no = UNSTREAM_STRING_ASCII( &constant_bin[ 1789 ], 2, 1 );
    const_str_plain_grid_color_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 115896 ], 14, 1 );
    const_str_plain_canvasx = UNSTREAM_STRING_ASCII( &constant_bin[ 115910 ], 7, 1 );
    const_str_digest_4633380c9724e5dcec31fae1a6f4a03c = UNSTREAM_STRING_ASCII( &constant_bin[ 115917 ], 17, 0 );
    const_str_plain_wn = UNSTREAM_STRING_ASCII( &constant_bin[ 7662 ], 2, 1 );
    const_str_plain_img_open_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 115934 ], 12, 1 );
    const_str_digest_156f914c140602ab1fb5d0e18001e622 = UNSTREAM_STRING_ASCII( &constant_bin[ 115946 ], 18, 0 );
    const_tuple_a63c96853c9e8683966577513823007f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a63c96853c9e8683966577513823007f_tuple, 0, const_str_digest_678735b487c05236249e402e35045f18 ); Py_INCREF( const_str_digest_678735b487c05236249e402e35045f18 );
    PyTuple_SET_ITEM( const_tuple_a63c96853c9e8683966577513823007f_tuple, 1, const_str_digest_043ad602a26f843cf886d9ba4f965229 ); Py_INCREF( const_str_digest_043ad602a26f843cf886d9ba4f965229 );
    const_str_plain_se = UNSTREAM_STRING_ASCII( &constant_bin[ 1103 ], 2, 1 );
    const_str_plain_textvariable = UNSTREAM_STRING_ASCII( &constant_bin[ 115964 ], 12, 1 );
    const_tuple_str_plain_self_str_plain_mark_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mark_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_mark_name = UNSTREAM_STRING_ASCII( &constant_bin[ 115976 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mark_name_tuple, 1, const_str_plain_mark_name ); Py_INCREF( const_str_plain_mark_name );
    const_str_plain_realpath = UNSTREAM_STRING_ASCII( &constant_bin[ 115985 ], 8, 1 );
    const_str_plain_underline = UNSTREAM_STRING_ASCII( &constant_bin[ 115993 ], 9, 1 );
    const_str_plain_dist = UNSTREAM_STRING_ASCII( &constant_bin[ 32907 ], 4, 1 );
    const_tuple_ec25bdef56334bb81af938720b0aedad_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_ec25bdef56334bb81af938720b0aedad_tuple, 0, const_str_plain_distance ); Py_INCREF( const_str_plain_distance );
    PyTuple_SET_ITEM( const_tuple_ec25bdef56334bb81af938720b0aedad_tuple, 1, const_str_plain_strfilter ); Py_INCREF( const_str_plain_strfilter );
    PyTuple_SET_ITEM( const_tuple_ec25bdef56334bb81af938720b0aedad_tuple, 2, const_str_plain_n_repeat ); Py_INCREF( const_str_plain_n_repeat );
    PyTuple_SET_ITEM( const_tuple_ec25bdef56334bb81af938720b0aedad_tuple, 3, const_str_plain_arithmetic_round ); Py_INCREF( const_str_plain_arithmetic_round );
    PyTuple_SET_ITEM( const_tuple_ec25bdef56334bb81af938720b0aedad_tuple, 4, const_str_plain_is_number ); Py_INCREF( const_str_plain_is_number );
    const_str_plain_green = UNSTREAM_STRING_ASCII( &constant_bin[ 26078 ], 5, 1 );
    const_str_plain_grid_size_combo = UNSTREAM_STRING_ASCII( &constant_bin[ 116002 ], 15, 1 );
    const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple, 1, const_str_plain_mark_name ); Py_INCREF( const_str_plain_mark_name );
    const_str_plain_new_tuple = UNSTREAM_STRING_ASCII( &constant_bin[ 116017 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple, 2, const_str_plain_new_tuple ); Py_INCREF( const_str_plain_new_tuple );
    const_str_plain_canvasy = UNSTREAM_STRING_ASCII( &constant_bin[ 116026 ], 7, 1 );
    const_str_plain_new_marker = UNSTREAM_STRING_ASCII( &constant_bin[ 115632 ], 10, 1 );
    const_str_plain_heading = UNSTREAM_STRING_ASCII( &constant_bin[ 116033 ], 7, 1 );
    const_str_digest_92515876b38379efe30c6b0d0a2885ae = UNSTREAM_STRING_ASCII( &constant_bin[ 116040 ], 20, 0 );
    const_str_plain_relief = UNSTREAM_STRING_ASCII( &constant_bin[ 116060 ], 6, 1 );
    const_tuple_str_digest_92f9edc60183389fa951ade34579539a_tuple = PyTuple_New( 1 );
    const_str_digest_92f9edc60183389fa951ade34579539a = UNSTREAM_STRING_ASCII( &constant_bin[ 116066 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_92f9edc60183389fa951ade34579539a_tuple, 0, const_str_digest_92f9edc60183389fa951ade34579539a ); Py_INCREF( const_str_digest_92f9edc60183389fa951ade34579539a );
    const_str_plain_add_point = UNSTREAM_STRING_ASCII( &constant_bin[ 116069 ], 9, 1 );
    const_tuple_str_plain_markname_str_plain_markcount_tuple = PyTuple_New( 2 );
    const_str_plain_markname = UNSTREAM_STRING_ASCII( &constant_bin[ 116078 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_markname_str_plain_markcount_tuple, 0, const_str_plain_markname ); Py_INCREF( const_str_plain_markname );
    const_str_plain_markcount = UNSTREAM_STRING_ASCII( &constant_bin[ 116086 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_markname_str_plain_markcount_tuple, 1, const_str_plain_markcount ); Py_INCREF( const_str_plain_markcount );
    const_tuple_str_plain_markname_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_markname_tuple, 0, const_str_plain_markname ); Py_INCREF( const_str_plain_markname );
    const_str_plain_vert_lines = UNSTREAM_STRING_ASCII( &constant_bin[ 116095 ], 10, 1 );
    const_str_plain_btn_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 116105 ], 9, 1 );
    const_str_plain_StringVar = UNSTREAM_STRING_ASCII( &constant_bin[ 116114 ], 9, 1 );
    const_str_digest_8af3a737307d555062afd7a55846c1c2 = UNSTREAM_STRING_ASCII( &constant_bin[ 116123 ], 14, 0 );
    const_dict_4c1e1caa9d21b6213c97c860d09b0b94 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_4c1e1caa9d21b6213c97c860d09b0b94, const_str_plain_width, const_int_pos_5 );
    const_str_plain_justify = UNSTREAM_STRING_ASCII( &constant_bin[ 116137 ], 7, 1 );
    PyDict_SetItem( const_dict_4c1e1caa9d21b6213c97c860d09b0b94, const_str_plain_justify, const_str_plain_right );
    const_tuple_e49d47e725ed3317310738bb67686d05_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 0, const_str_digest_92f9edc60183389fa951ade34579539a ); Py_INCREF( const_str_digest_92f9edc60183389fa951ade34579539a );
    const_str_digest_04a32ad9da9f14eba46b22d829d9df2b = UNSTREAM_STRING_ASCII( &constant_bin[ 116144 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 1, const_str_digest_04a32ad9da9f14eba46b22d829d9df2b ); Py_INCREF( const_str_digest_04a32ad9da9f14eba46b22d829d9df2b );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 2, const_str_digest_f105d337cb4869a4eb343e45bb85d4a9 ); Py_INCREF( const_str_digest_f105d337cb4869a4eb343e45bb85d4a9 );
    const_str_digest_5424b83a11fdc59b8169de1e79b727c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 116147 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 3, const_str_digest_5424b83a11fdc59b8169de1e79b727c7 ); Py_INCREF( const_str_digest_5424b83a11fdc59b8169de1e79b727c7 );
    const_str_digest_02ac800b2307cc3cc42f52855e26d9ae = UNSTREAM_STRING_ASCII( &constant_bin[ 116150 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 4, const_str_digest_02ac800b2307cc3cc42f52855e26d9ae ); Py_INCREF( const_str_digest_02ac800b2307cc3cc42f52855e26d9ae );
    const_str_digest_f0730a5b60ecd8b23e4f03dcf315d650 = UNSTREAM_STRING_ASCII( &constant_bin[ 116153 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 5, const_str_digest_f0730a5b60ecd8b23e4f03dcf315d650 ); Py_INCREF( const_str_digest_f0730a5b60ecd8b23e4f03dcf315d650 );
    const_str_digest_64f09200df47ccd35b5cb150a2099376 = UNSTREAM_STRING_ASCII( &constant_bin[ 116156 ], 3, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 6, const_str_digest_64f09200df47ccd35b5cb150a2099376 ); Py_INCREF( const_str_digest_64f09200df47ccd35b5cb150a2099376 );
    const_str_digest_f4cc7bdf9667d51a590587307719312a = UNSTREAM_STRING_ASCII( &constant_bin[ 116154 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 7, const_str_digest_f4cc7bdf9667d51a590587307719312a ); Py_INCREF( const_str_digest_f4cc7bdf9667d51a590587307719312a );
    const_str_digest_010bdc9aabc2e96c2518550ab0d029e2 = UNSTREAM_STRING_ASCII( &constant_bin[ 116159 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_e49d47e725ed3317310738bb67686d05_tuple, 8, const_str_digest_010bdc9aabc2e96c2518550ab0d029e2 ); Py_INCREF( const_str_digest_010bdc9aabc2e96c2518550ab0d029e2 );
    PyDict_SetItem( const_dict_4c1e1caa9d21b6213c97c860d09b0b94, const_str_plain_values, const_tuple_e49d47e725ed3317310738bb67686d05_tuple );
    assert( PyDict_Size( const_dict_4c1e1caa9d21b6213c97c860d09b0b94 ) == 3 );
    const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple, 1, const_str_plain_n ); Py_INCREF( const_str_plain_n );
    const_str_plain_key_set = UNSTREAM_STRING_ASCII( &constant_bin[ 116161 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple, 2, const_str_plain_key_set ); Py_INCREF( const_str_plain_key_set );
    const_str_digest_8e041da51efee9ef74e9094d9c468ec6 = UNSTREAM_STRING_ASCII( &constant_bin[ 116168 ], 26, 0 );
    const_tuple_str_empty_int_0_int_0_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_empty_int_0_int_0_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_int_0_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_str_empty_int_0_int_0_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_show_zoom = UNSTREAM_STRING_ASCII( &constant_bin[ 116194 ], 9, 1 );
    const_tuple_be1deddea78092a669e6364afea2bdf9_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 2, const_str_plain_color ); Py_INCREF( const_str_plain_color );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 3, const_str_plain_mark_name ); Py_INCREF( const_str_plain_mark_name );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 4, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    const_str_plain_init_name = UNSTREAM_STRING_ASCII( &constant_bin[ 116203 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 5, const_str_plain_init_name ); Py_INCREF( const_str_plain_init_name );
    const_str_digest_bb9e58d89eebf4d528f9449426ecd81f = UNSTREAM_STRING_ASCII( &constant_bin[ 56316 ], 2, 0 );
    const_str_digest_9c7d5cb723beb3c9a6dec588cdb24cc3 = UNSTREAM_STRING_ASCII( &constant_bin[ 116212 ], 29, 0 );
    const_str_plain_Point = UNSTREAM_STRING_ASCII( &constant_bin[ 7363 ], 5, 1 );
    const_str_plain_bottom = UNSTREAM_STRING_ASCII( &constant_bin[ 9466 ], 6, 1 );
    const_tuple_str_plain_markcount_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_markcount_tuple, 0, const_str_plain_markcount ); Py_INCREF( const_str_plain_markcount );
    const_str_angle_Return = UNSTREAM_STRING_ASCII( &constant_bin[ 116241 ], 8, 0 );
    const_tuple_str_empty_str_plain_marker_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_marker_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_marker_tuple, 1, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_plain_buflabel = UNSTREAM_STRING_ASCII( &constant_bin[ 116249 ], 8, 1 );
    const_list_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple_list = PyList_New( 1 );
    const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple = PyTuple_New( 2 );
    const_str_digest_2094ca90f02e7fc2c7d761c818ab9a31 = UNSTREAM_STRING_ASCII( &constant_bin[ 116257 ], 28, 0 );
    PyTuple_SET_ITEM( const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple, 0, const_str_digest_2094ca90f02e7fc2c7d761c818ab9a31 ); Py_INCREF( const_str_digest_2094ca90f02e7fc2c7d761c818ab9a31 );
    const_tuple_str_digest_ad8beff752f22bac590c03c36052bef2_tuple = PyTuple_New( 1 );
    const_str_digest_ad8beff752f22bac590c03c36052bef2 = UNSTREAM_STRING_ASCII( &constant_bin[ 116285 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_ad8beff752f22bac590c03c36052bef2_tuple, 0, const_str_digest_ad8beff752f22bac590c03c36052bef2 ); Py_INCREF( const_str_digest_ad8beff752f22bac590c03c36052bef2 );
    PyTuple_SET_ITEM( const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple, 1, const_tuple_str_digest_ad8beff752f22bac590c03c36052bef2_tuple ); Py_INCREF( const_tuple_str_digest_ad8beff752f22bac590c03c36052bef2_tuple );
    PyList_SET_ITEM( const_list_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple_list, 0, const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple ); Py_INCREF( const_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple );
    const_str_plain_store_mouse_pos = UNSTREAM_STRING_ASCII( &constant_bin[ 116289 ], 15, 1 );
    const_str_plain__decrement = UNSTREAM_STRING_ASCII( &constant_bin[ 116304 ], 10, 1 );
    const_str_plain_iconphoto = UNSTREAM_STRING_ASCII( &constant_bin[ 116314 ], 9, 1 );
    const_str_digest_bf8079306be717ea88559cde794acadb = UNSTREAM_STRING_ASCII( &constant_bin[ 116323 ], 14, 0 );
    const_dict_309a489fd2370b220c4e258462867846 = _PyDict_NewPresized( 1 );
    const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple, 0, const_str_plain_LATIN ); Py_INCREF( const_str_plain_LATIN );
    PyTuple_SET_ITEM( const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple, 1, const_str_plain_LINES ); Py_INCREF( const_str_plain_LINES );
    PyTuple_SET_ITEM( const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple, 2, const_str_plain_DIGITS ); Py_INCREF( const_str_plain_DIGITS );
    PyDict_SetItem( const_dict_309a489fd2370b220c4e258462867846, const_str_plain_sets, const_tuple_str_plain_LATIN_str_plain_LINES_str_plain_DIGITS_tuple );
    assert( PyDict_Size( const_dict_309a489fd2370b220c4e258462867846 ) == 1 );
    const_tuple_0973355e7733aa362f4df09dc2a12073_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 1, const_str_plain_m_name ); Py_INCREF( const_str_plain_m_name );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 2, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    const_str_plain_draw_queue = UNSTREAM_STRING_ASCII( &constant_bin[ 116337 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 3, const_str_plain_draw_queue ); Py_INCREF( const_str_plain_draw_queue );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 4, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 5, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_plain_mrk_name = UNSTREAM_STRING_ASCII( &constant_bin[ 116347 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 6, const_str_plain_mrk_name ); Py_INCREF( const_str_plain_mrk_name );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 7, const_str_plain_color ); Py_INCREF( const_str_plain_color );
    PyTuple_SET_ITEM( const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 8, const_str_plain_point ); Py_INCREF( const_str_plain_point );
    const_str_digest_eae2951ed9faacdb55d59b23e7879a06 = UNSTREAM_STRING_ASCII( &constant_bin[ 116355 ], 9, 0 );
    const_tuple_str_plain_Point_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Point_tuple_empty_tuple, 0, const_str_plain_Point ); Py_INCREF( const_str_plain_Point );
    PyTuple_SET_ITEM( const_tuple_str_plain_Point_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain_Count = UNSTREAM_STRING_ASCII( &constant_bin[ 109130 ], 5, 1 );
    const_tuple_str_plain_0_str_plain_end_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_0_str_plain_end_tuple, 0, const_str_plain_0 ); Py_INCREF( const_str_plain_0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_0_str_plain_end_tuple, 1, const_str_plain_end ); Py_INCREF( const_str_plain_end );
    const_str_plain_delete_covered = UNSTREAM_STRING_ASCII( &constant_bin[ 116364 ], 14, 1 );
    const_str_plain_ImageTk = UNSTREAM_STRING_ASCII( &constant_bin[ 76894 ], 7, 1 );
    const_str_plain_ratio = UNSTREAM_STRING_ASCII( &constant_bin[ 2607 ], 5, 1 );
    const_str_plain_configure = UNSTREAM_STRING_ASCII( &constant_bin[ 23911 ], 9, 1 );
    const_str_digest_1c24ecf31578f5606644bd45c32b4fad = UNSTREAM_STRING_ASCII( &constant_bin[ 116378 ], 25, 0 );
    const_str_plain_zoom_in = UNSTREAM_STRING_ASCII( &constant_bin[ 115363 ], 7, 1 );
    const_str_digest_9ed82b09ff4a3e5976740f07f46487fe = UNSTREAM_STRING_ASCII( &constant_bin[ 116403 ], 45, 0 );
    const_tuple_b3745be60634e8159f2d90d701687747_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_b3745be60634e8159f2d90d701687747_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_b3745be60634e8159f2d90d701687747_tuple, 1, const_str_plain_event ); Py_INCREF( const_str_plain_event );
    const_str_plain_canvas = UNSTREAM_STRING_ASCII( &constant_bin[ 115910 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_b3745be60634e8159f2d90d701687747_tuple, 2, const_str_plain_canvas ); Py_INCREF( const_str_plain_canvas );
    const_str_plain_actual_x = UNSTREAM_STRING_ASCII( &constant_bin[ 116448 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_b3745be60634e8159f2d90d701687747_tuple, 3, const_str_plain_actual_x ); Py_INCREF( const_str_plain_actual_x );
    const_str_plain_actual_y = UNSTREAM_STRING_ASCII( &constant_bin[ 116456 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_b3745be60634e8159f2d90d701687747_tuple, 4, const_str_plain_actual_y ); Py_INCREF( const_str_plain_actual_y );
    const_str_plain_Scrollbar = UNSTREAM_STRING_ASCII( &constant_bin[ 116464 ], 9, 1 );
    const_str_digest_8cc96a3265a0db94293be0ddd7070477 = UNSTREAM_STRING_ASCII( &constant_bin[ 116473 ], 18, 0 );
    const_tuple_str_plain_grid_tuple = PyTuple_New( 1 );
    const_str_plain_grid = UNSTREAM_STRING_ASCII( &constant_bin[ 115256 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_grid_tuple, 0, const_str_plain_grid ); Py_INCREF( const_str_plain_grid );
    const_str_plain___annotations__ = UNSTREAM_STRING_ASCII( &constant_bin[ 116491 ], 15, 1 );
    const_str_plain_blue = UNSTREAM_STRING_ASCII( &constant_bin[ 26089 ], 4, 1 );
    const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple, 2, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple, 3, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_tuple_str_digest_bb9e58d89eebf4d528f9449426ecd81f_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_bb9e58d89eebf4d528f9449426ecd81f_tuple, 0, const_str_digest_bb9e58d89eebf4d528f9449426ecd81f ); Py_INCREF( const_str_digest_bb9e58d89eebf4d528f9449426ecd81f );
    const_str_digest_3b393deb6b662fcadc9d1af5a6e48b8e = UNSTREAM_STRING_ASCII( &constant_bin[ 116506 ], 17, 0 );
    const_dict_f300a543a76e1e5e5a970ab2c143067c = _PyDict_NewPresized( 1 );
    const_str_digest_e4cf56fe3b0bc995853a45abe22e6244 = UNSTREAM_STRING_ASCII( &constant_bin[ 116523 ], 18, 0 );
    PyDict_SetItem( const_dict_f300a543a76e1e5e5a970ab2c143067c, const_str_plain_text, const_str_digest_e4cf56fe3b0bc995853a45abe22e6244 );
    assert( PyDict_Size( const_dict_f300a543a76e1e5e5a970ab2c143067c ) == 1 );
    const_str_plain_gain = UNSTREAM_STRING_ASCII( &constant_bin[ 57250 ], 4, 1 );
    const_tuple_str_plain_path_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_path_tuple, 0, const_str_plain_path ); Py_INCREF( const_str_plain_path );
    const_str_plain_sec_btn_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 116541 ], 13, 1 );
    const_dict_8638e2e7734fb2515e9526a7f0773526 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_8638e2e7734fb2515e9526a7f0773526, const_str_plain_template, const_int_0 );
    assert( PyDict_Size( const_dict_8638e2e7734fb2515e9526a7f0773526 ) == 1 );
    const_str_plain__w = UNSTREAM_STRING_ASCII( &constant_bin[ 3471 ], 2, 1 );
    const_str_plain_table_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 116554 ], 11, 1 );
    const_dict_69685cdba574c74e631e147de131a5d7 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_69685cdba574c74e631e147de131a5d7, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_69685cdba574c74e631e147de131a5d7, const_str_plain_fill, const_str_plain_y );
    PyDict_SetItem( const_dict_69685cdba574c74e631e147de131a5d7, const_str_plain_anchor, const_str_plain_nw );
    assert( PyDict_Size( const_dict_69685cdba574c74e631e147de131a5d7 ) == 3 );
    const_str_digest_2ca36c7a190a81e4db49e8c4a6ddb2f6 = UNSTREAM_STRING_ASCII( &constant_bin[ 116565 ], 47, 0 );
    const_str_angle_Enter = UNSTREAM_STRING_ASCII( &constant_bin[ 116612 ], 7, 0 );
    const_str_plain_widget = UNSTREAM_STRING_ASCII( &constant_bin[ 116619 ], 6, 1 );
    const_str_plain_grid_visible = UNSTREAM_STRING_ASCII( &constant_bin[ 116625 ], 12, 1 );
    const_dict_1a9f45c4f6fc80524900a0b81a21cc2c = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_1a9f45c4f6fc80524900a0b81a21cc2c, const_str_plain_a, const_int_0 );
    const_int_pos_35 = PyLong_FromUnsignedLong( 35ul );
    PyDict_SetItem( const_dict_1a9f45c4f6fc80524900a0b81a21cc2c, const_str_plain_b, const_int_pos_35 );
    assert( PyDict_Size( const_dict_1a9f45c4f6fc80524900a0b81a21cc2c ) == 2 );
    const_dict_6971a692b5811e69040ac39b14c13b17 = _PyDict_NewPresized( 1 );
    const_str_digest_16b0ef3da2503c9f68feb2662e9f7601 = UNSTREAM_STRING_ASCII( &constant_bin[ 116637 ], 22, 0 );
    PyDict_SetItem( const_dict_6971a692b5811e69040ac39b14c13b17, const_str_plain_text, const_str_digest_16b0ef3da2503c9f68feb2662e9f7601 );
    assert( PyDict_Size( const_dict_6971a692b5811e69040ac39b14c13b17 ) == 1 );
    const_dict_2ef0d65eb52a756a69a89bae2d2067a9 = _PyDict_NewPresized( 1 );
    const_str_digest_9036c4e0dace44a646d7c2c58123821b = UNSTREAM_STRING_ASCII( &constant_bin[ 116659 ], 23, 0 );
    PyDict_SetItem( const_dict_2ef0d65eb52a756a69a89bae2d2067a9, const_str_plain_text, const_str_digest_9036c4e0dace44a646d7c2c58123821b );
    assert( PyDict_Size( const_dict_2ef0d65eb52a756a69a89bae2d2067a9 ) == 1 );
    const_str_plain_bold = UNSTREAM_STRING_ASCII( &constant_bin[ 116682 ], 4, 1 );
    const_tuple_str_digest_2665ea63e56456e34828ec2461179dc3_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_2665ea63e56456e34828ec2461179dc3_tuple, 0, const_str_digest_2665ea63e56456e34828ec2461179dc3 ); Py_INCREF( const_str_digest_2665ea63e56456e34828ec2461179dc3 );
    const_str_plain__zoom_factor = UNSTREAM_STRING_ASCII( &constant_bin[ 116686 ], 12, 1 );
    const_str_plain_groove = UNSTREAM_STRING_ASCII( &constant_bin[ 116698 ], 6, 1 );
    const_tuple_str_plain_bold_int_pos_11_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_bold_int_pos_11_tuple, 0, const_str_plain_bold ); Py_INCREF( const_str_plain_bold );
    PyTuple_SET_ITEM( const_tuple_str_plain_bold_int_pos_11_tuple, 1, const_int_pos_11 ); Py_INCREF( const_int_pos_11 );
    const_str_plain_iconimg = UNSTREAM_STRING_ASCII( &constant_bin[ 116704 ], 7, 1 );
    const_str_plain_add_btn_img = UNSTREAM_STRING_ASCII( &constant_bin[ 116711 ], 11, 1 );
    const_str_plain__file_name = UNSTREAM_STRING_ASCII( &constant_bin[ 116722 ], 10, 1 );
    const_tuple_2d432bc3f16857b379210a5124c9531c_tuple = PyTuple_New( 2 );
    const_str_digest_7332ad94b4e981b11dd65fedd42c636a = UNSTREAM_STRING_ASCII( &constant_bin[ 116732 ], 10, 0 );
    PyTuple_SET_ITEM( const_tuple_2d432bc3f16857b379210a5124c9531c_tuple, 0, const_str_digest_7332ad94b4e981b11dd65fedd42c636a ); Py_INCREF( const_str_digest_7332ad94b4e981b11dd65fedd42c636a );
    PyTuple_SET_ITEM( const_tuple_2d432bc3f16857b379210a5124c9531c_tuple, 1, const_tuple_a63c96853c9e8683966577513823007f_tuple ); Py_INCREF( const_tuple_a63c96853c9e8683966577513823007f_tuple );
    const_str_plain_new_zoom_factor = UNSTREAM_STRING_ASCII( &constant_bin[ 116742 ], 15, 1 );
    const_str_plain_Linux = UNSTREAM_STRING_ASCII( &constant_bin[ 116757 ], 5, 1 );
    const_str_plain_mark_color = UNSTREAM_STRING_ASCII( &constant_bin[ 116762 ], 10, 1 );
    const_str_plain_config_buttons = UNSTREAM_STRING_ASCII( &constant_bin[ 116772 ], 14, 1 );
    const_str_digest_f09db1b2c387038946fbd47fd97ce655 = UNSTREAM_STRING_ASCII( &constant_bin[ 116786 ], 21, 0 );
    const_str_plain_marker_select = UNSTREAM_STRING_ASCII( &constant_bin[ 116807 ], 13, 1 );
    const_str_digest_5b05b371bb96da05cea21ad6a2e464c1 = UNSTREAM_STRING_ASCII( &constant_bin[ 116820 ], 17, 0 );
    const_str_plain_zoom_out_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 116837 ], 12, 1 );
    const_str_plain_zfactor = UNSTREAM_STRING_ASCII( &constant_bin[ 116849 ], 7, 1 );
    const_str_digest_9dff3e2111217dcf1806e50ab2da8459 = UNSTREAM_STRING_ASCII( &constant_bin[ 116856 ], 17, 0 );
    const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple, 1, const_str_plain_names ); Py_INCREF( const_str_plain_names );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_dict_ba0015d6bade45d90a5f5463658c3d76 = _PyDict_NewPresized( 6 );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_width, const_int_pos_5 );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_bg, const_str_plain_white );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_foreground, const_str_plain_green );
    const_str_plain_takefocus = UNSTREAM_STRING_ASCII( &constant_bin[ 116873 ], 9, 1 );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_takefocus, Py_False );
    const_str_plain_sunken = UNSTREAM_STRING_ASCII( &constant_bin[ 116882 ], 6, 1 );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_relief, const_str_plain_sunken );
    PyDict_SetItem( const_dict_ba0015d6bade45d90a5f5463658c3d76, const_str_plain_font, const_tuple_str_plain_bold_int_pos_11_tuple );
    assert( PyDict_Size( const_dict_ba0015d6bade45d90a5f5463658c3d76 ) == 6 );
    const_tuple_299e29199d09389d25700552944f1b9a_tuple = PyTuple_New( 4 );
    const_str_plain_filedialog = UNSTREAM_STRING_ASCII( &constant_bin[ 116888 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_299e29199d09389d25700552944f1b9a_tuple, 0, const_str_plain_filedialog ); Py_INCREF( const_str_plain_filedialog );
    const_str_plain_colorchooser = UNSTREAM_STRING_ASCII( &constant_bin[ 116898 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_299e29199d09389d25700552944f1b9a_tuple, 1, const_str_plain_colorchooser ); Py_INCREF( const_str_plain_colorchooser );
    const_str_plain_simpledialog = UNSTREAM_STRING_ASCII( &constant_bin[ 116910 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_299e29199d09389d25700552944f1b9a_tuple, 2, const_str_plain_simpledialog ); Py_INCREF( const_str_plain_simpledialog );
    PyTuple_SET_ITEM( const_tuple_299e29199d09389d25700552944f1b9a_tuple, 3, const_str_plain_StringVar ); Py_INCREF( const_str_plain_StringVar );
    const_dict_9f3d12dbab780c44f0342015a4e21236 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_9f3d12dbab780c44f0342015a4e21236, const_str_plain_gain, const_int_pos_1 );
    assert( PyDict_Size( const_dict_9f3d12dbab780c44f0342015a4e21236 ) == 1 );
    const_str_plain_zoom_in_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 116922 ], 11, 1 );
    const_str_plain_winfo_height = UNSTREAM_STRING_ASCII( &constant_bin[ 116933 ], 12, 1 );
    const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 1, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    PyTuple_SET_ITEM( const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 2, const_str_plain_mark_name ); Py_INCREF( const_str_plain_mark_name );
    PyTuple_SET_ITEM( const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 3, const_str_plain_mark_color ); Py_INCREF( const_str_plain_mark_color );
    const_str_plain_mark_count = UNSTREAM_STRING_ASCII( &constant_bin[ 116945 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 4, const_str_plain_mark_count ); Py_INCREF( const_str_plain_mark_count );
    const_str_plain_horiz_lines = UNSTREAM_STRING_ASCII( &constant_bin[ 116955 ], 11, 1 );
    const_tuple_str_digest_bac2fab41082fba55cf3968b78192136_tuple = PyTuple_New( 1 );
    const_str_digest_bac2fab41082fba55cf3968b78192136 = UNSTREAM_STRING_ASCII( &constant_bin[ 116966 ], 12, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_bac2fab41082fba55cf3968b78192136_tuple, 0, const_str_digest_bac2fab41082fba55cf3968b78192136 ); Py_INCREF( const_str_digest_bac2fab41082fba55cf3968b78192136 );
    const_str_plain_both = UNSTREAM_STRING_ASCII( &constant_bin[ 51786 ], 4, 1 );
    const_str_digest_37874538785eccb7920bdd6b8b2cf7bc = UNSTREAM_STRING_ASCII( &constant_bin[ 116978 ], 22, 0 );
    const_str_plain_columns = UNSTREAM_STRING_ASCII( &constant_bin[ 117000 ], 7, 1 );
    const_tuple_str_chr_64_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_chr_64_tuple, 0, const_str_chr_64 ); Py_INCREF( const_str_chr_64 );
    const_str_plain_draw_grid_btn_action = UNSTREAM_STRING_ASCII( &constant_bin[ 117007 ], 20, 1 );
    const_str_plain_ttk = UNSTREAM_STRING_ASCII( &constant_bin[ 79021 ], 3, 1 );
    const_str_plain__grid_var = UNSTREAM_STRING_ASCII( &constant_bin[ 117027 ], 9, 1 );
    const_str_digest_a5f219c7e8fd8991f91570be61d25fd7 = UNSTREAM_STRING_ASCII( &constant_bin[ 117036 ], 23, 0 );
    const_str_plain__act_mrk = UNSTREAM_STRING_ASCII( &constant_bin[ 117059 ], 8, 1 );
    const_str_plain_winfo_x = UNSTREAM_STRING_ASCII( &constant_bin[ 117067 ], 7, 1 );
    const_str_digest_0105c2e4e6b8955907874e1dbe95f1fd = UNSTREAM_STRING_ASCII( &constant_bin[ 117074 ], 13, 0 );
    const_str_digest_10a4fb838c96bd91726226a1df02e818 = UNSTREAM_STRING_ASCII( &constant_bin[ 117087 ], 29, 0 );
    const_str_plain_remove_marker_points = UNSTREAM_STRING_ASCII( &constant_bin[ 117116 ], 20, 1 );
    const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple, 1, const_str_plain_new_name ); Py_INCREF( const_str_plain_new_name );
    const_str_plain_new_x = UNSTREAM_STRING_ASCII( &constant_bin[ 117136 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple, 2, const_str_plain_new_x ); Py_INCREF( const_str_plain_new_x );
    const_str_plain_new_y = UNSTREAM_STRING_ASCII( &constant_bin[ 117141 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple, 3, const_str_plain_new_y ); Py_INCREF( const_str_plain_new_y );
    const_str_plain_draw_grid_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 117007 ], 13, 1 );
    const_str_digest_45b66455e94b518712a40e6124dad7bc = UNSTREAM_STRING_ASCII( &constant_bin[ 117146 ], 28, 0 );
    const_str_plain_zoom_out_img = UNSTREAM_STRING_ASCII( &constant_bin[ 117174 ], 12, 1 );
    const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple, 0, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple, 2, const_str_plain_wstep ); Py_INCREF( const_str_plain_wstep );
    const_str_plain_tag_configure = UNSTREAM_STRING_ASCII( &constant_bin[ 117186 ], 13, 1 );
    const_str_digest_abf8b776d50cfbab6678e38b6d16f548 = UNSTREAM_STRING_ASCII( &constant_bin[ 117199 ], 172, 0 );
    const_dict_d5a93c3679de1e33f30e478c6869828b = _PyDict_NewPresized( 1 );
    const_str_digest_480fc8b97596af5d9f11310225eb2ebf = UNSTREAM_STRING_ASCII( &constant_bin[ 117371 ], 46, 0 );
    PyDict_SetItem( const_dict_d5a93c3679de1e33f30e478c6869828b, const_str_plain_text, const_str_digest_480fc8b97596af5d9f11310225eb2ebf );
    assert( PyDict_Size( const_dict_d5a93c3679de1e33f30e478c6869828b ) == 1 );
    const_str_digest_00172c2c0d2413c7b279dec91fcb7085 = UNSTREAM_STRING_ASCII( &constant_bin[ 117417 ], 55, 0 );
    const_str_plain_minsize = UNSTREAM_STRING_ASCII( &constant_bin[ 117472 ], 7, 1 );
    const_str_plain_minwidth = UNSTREAM_STRING_ASCII( &constant_bin[ 117479 ], 8, 1 );
    const_str_digest_533c974ac3262d16e2fa6f5a14cda1ba = UNSTREAM_STRING_ASCII( &constant_bin[ 117487 ], 28, 0 );
    const_str_plain_get_children = UNSTREAM_STRING_ASCII( &constant_bin[ 117515 ], 12, 1 );
    const_tuple_str_digest_eeb1379f1e97d50b95bacdca6f3396ac_tuple = PyTuple_New( 1 );
    const_str_digest_eeb1379f1e97d50b95bacdca6f3396ac = UNSTREAM_STRING_ASCII( &constant_bin[ 117527 ], 23, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_eeb1379f1e97d50b95bacdca6f3396ac_tuple, 0, const_str_digest_eeb1379f1e97d50b95bacdca6f3396ac ); Py_INCREF( const_str_digest_eeb1379f1e97d50b95bacdca6f3396ac );
    const_str_plain_jpg = UNSTREAM_STRING_ASCII( &constant_bin[ 8040 ], 3, 1 );
    const_dict_61a7fd64943dba580017d10d3bca2711 = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_61a7fd64943dba580017d10d3bca2711, const_str_plain_side, const_str_plain_top );
    PyDict_SetItem( const_dict_61a7fd64943dba580017d10d3bca2711, const_str_plain_fill, const_str_plain_x );
    PyDict_SetItem( const_dict_61a7fd64943dba580017d10d3bca2711, const_str_plain_expand, const_str_plain_False );
    PyDict_SetItem( const_dict_61a7fd64943dba580017d10d3bca2711, const_str_plain_anchor, const_str_plain_nw );
    assert( PyDict_Size( const_dict_61a7fd64943dba580017d10d3bca2711 ) == 4 );
    const_str_digest_6115d3419b96dfbdef52fc8cf0dfe523 = UNSTREAM_STRING_ASCII( &constant_bin[ 117550 ], 26, 0 );
    const_str_plain_defaultextension = UNSTREAM_STRING_ASCII( &constant_bin[ 117576 ], 16, 1 );
    const_str_plain_save_img = UNSTREAM_STRING_ASCII( &constant_bin[ 117592 ], 8, 1 );
    const_str_plain_askcolor = UNSTREAM_STRING_ASCII( &constant_bin[ 117600 ], 8, 1 );
    const_str_digest_b63b71117d022038ada56c3ecf438060 = UNSTREAM_STRING_ASCII( &constant_bin[ 117608 ], 8, 0 );
    const_str_plain_del_btn_img = UNSTREAM_STRING_ASCII( &constant_bin[ 117616 ], 11, 1 );
    const_str_plain_all_saved = UNSTREAM_STRING_ASCII( &constant_bin[ 117627 ], 9, 1 );
    const_str_digest_37dcde0202eb7af14b0dc333d1b93a12 = UNSTREAM_STRING_ASCII( &constant_bin[ 117636 ], 7, 0 );
    const_str_angle_module = UNSTREAM_STRING_ASCII( &constant_bin[ 117643 ], 8, 0 );
    const_str_plain_mainloop = UNSTREAM_STRING_ASCII( &constant_bin[ 117651 ], 8, 1 );
    const_str_digest_4177e5d1da0875775db706dbda998159 = UNSTREAM_STRING_ASCII( &constant_bin[ 888 ], 2, 0 );
    const_tuple_str_plain_self_str_plain_event_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_event_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_event_tuple, 1, const_str_plain_event ); Py_INCREF( const_str_plain_event );
    const_dict_53232a9b0f1c9c3739814e5eff6d249e = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_53232a9b0f1c9c3739814e5eff6d249e, const_str_plain_maxsplit, const_int_pos_2 );
    assert( PyDict_Size( const_dict_53232a9b0f1c9c3739814e5eff6d249e ) == 1 );
    const_str_plain_ctrl_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 117659 ], 10, 1 );
    const_tuple_str_plain_system_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_system_tuple, 0, const_str_plain_system ); Py_INCREF( const_str_plain_system );
    const_tuple_str_plain_x_str_plain_key_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_key_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_key_tuple, 1, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple = PyTuple_New( 2 );
    const_str_digest_11b19aced8caa49fed5176e98b5ceb16 = UNSTREAM_STRING_ASCII( &constant_bin[ 93938 ], 9, 0 );
    PyTuple_SET_ITEM( const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple, 0, const_str_digest_11b19aced8caa49fed5176e98b5ceb16 ); Py_INCREF( const_str_digest_11b19aced8caa49fed5176e98b5ceb16 );
    PyTuple_SET_ITEM( const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple, 1, const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248 ); Py_INCREF( const_str_digest_e3aa7b6b03c3cda01d2f344acab1c248 );
    const_str_plain_create_line = UNSTREAM_STRING_ASCII( &constant_bin[ 117669 ], 11, 1 );
    const_str_plain_open_img = UNSTREAM_STRING_ASCII( &constant_bin[ 117680 ], 8, 1 );
    const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple, 1, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple, 2, const_str_plain_new_marker_name ); Py_INCREF( const_str_plain_new_marker_name );
    const_int_pos_420 = PyLong_FromUnsignedLong( 420ul );
    const_str_digest_479ed5f8e34c5b603066fce1b59c59d3 = UNSTREAM_STRING_ASCII( &constant_bin[ 117688 ], 22, 0 );
    const_str_plain_hint_label = UNSTREAM_STRING_ASCII( &constant_bin[ 117710 ], 10, 1 );
    const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple, 1, const_str_plain_key_set ); Py_INCREF( const_str_plain_key_set );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    const_str_digest_d7061b71d49c6b02992636cdcd0fc09a = UNSTREAM_STRING_ASCII( &constant_bin[ 117720 ], 33, 0 );
    const_str_digest_fa6e19975889e039b20bacc6da76404b = UNSTREAM_STRING_ASCII( &constant_bin[ 117753 ], 13, 0 );
    const_str_plain_canv_width = UNSTREAM_STRING_ASCII( &constant_bin[ 117766 ], 10, 1 );
    const_dict_21d54f41ccfcb1c44202b6f93553087c = _PyDict_NewPresized( 5 );
    PyDict_SetItem( const_dict_21d54f41ccfcb1c44202b6f93553087c, const_str_plain_relief, const_str_plain_groove );
    PyDict_SetItem( const_dict_21d54f41ccfcb1c44202b6f93553087c, const_str_plain_text, const_str_empty );
    PyDict_SetItem( const_dict_21d54f41ccfcb1c44202b6f93553087c, const_str_plain_foreground, const_str_plain_blue );
    PyDict_SetItem( const_dict_21d54f41ccfcb1c44202b6f93553087c, const_str_plain_justify, const_str_plain_left );
    PyDict_SetItem( const_dict_21d54f41ccfcb1c44202b6f93553087c, const_str_plain_anchor, const_str_plain_w );
    assert( PyDict_Size( const_dict_21d54f41ccfcb1c44202b6f93553087c ) == 5 );
    const_str_digest_978dfa8aaff5cd4268700ea5916fd762 = UNSTREAM_STRING_ASCII( &constant_bin[ 117776 ], 41, 0 );
    const_dict_9b757b99718b3588fd7491e72a547151 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_9b757b99718b3588fd7491e72a547151, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_9b757b99718b3588fd7491e72a547151, const_str_plain_anchor, const_str_plain_w );
    const_str_plain_padx = UNSTREAM_STRING_ASCII( &constant_bin[ 117817 ], 4, 1 );
    PyDict_SetItem( const_dict_9b757b99718b3588fd7491e72a547151, const_str_plain_padx, const_int_pos_2 );
    assert( PyDict_Size( const_dict_9b757b99718b3588fd7491e72a547151 ) == 3 );
    const_str_plain_selection = UNSTREAM_STRING_ASCII( &constant_bin[ 117821 ], 9, 1 );
    const_str_plain_xscrollcommand = UNSTREAM_STRING_ASCII( &constant_bin[ 117830 ], 14, 1 );
    const_tuple_str_plain_b_str_plain_min_dist_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_b_str_plain_min_dist_tuple, 0, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_str_plain_b_str_plain_min_dist_tuple, 1, const_str_plain_min_dist ); Py_INCREF( const_str_plain_min_dist );
    const_dict_1b28b80177f7157d826cfed027094bed = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_1b28b80177f7157d826cfed027094bed, const_str_plain_fill, const_str_plain_x );
    PyDict_SetItem( const_dict_1b28b80177f7157d826cfed027094bed, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_1b28b80177f7157d826cfed027094bed, const_str_plain_side, const_str_plain_bottom );
    PyDict_SetItem( const_dict_1b28b80177f7157d826cfed027094bed, const_str_plain_anchor, const_str_plain_s );
    assert( PyDict_Size( const_dict_1b28b80177f7157d826cfed027094bed ) == 4 );
    const_str_plain_grid_color_dialog = UNSTREAM_STRING_ASCII( &constant_bin[ 115742 ], 17, 1 );
    const_str_plain_wm = UNSTREAM_STRING_ASCII( &constant_bin[ 26300 ], 2, 1 );
    const_tuple_str_plain_Image_str_plain_ImageTk_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Image_str_plain_ImageTk_tuple, 0, const_str_plain_Image ); Py_INCREF( const_str_plain_Image );
    PyTuple_SET_ITEM( const_tuple_str_plain_Image_str_plain_ImageTk_tuple, 1, const_str_plain_ImageTk ); Py_INCREF( const_str_plain_ImageTk );
    const_str_digest_cad5af3a4e7798d6db01e37b19e0fe54 = UNSTREAM_STRING_ASCII( &constant_bin[ 115458 ], 25, 0 );
    const_str_digest_535da19c895faf339dd1db062192393d = UNSTREAM_STRING_ASCII( &constant_bin[ 117844 ], 27, 0 );
    const_str_plain_zf = UNSTREAM_STRING_ASCII( &constant_bin[ 116849 ], 2, 1 );
    const_dict_632bdb133f31db7a2f8b975160559743 = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_632bdb133f31db7a2f8b975160559743, const_str_plain_side, const_str_plain_right );
    PyDict_SetItem( const_dict_632bdb133f31db7a2f8b975160559743, const_str_plain_anchor, const_str_plain_e );
    assert( PyDict_Size( const_dict_632bdb133f31db7a2f8b975160559743 ) == 2 );
    const_str_plain_a_round = UNSTREAM_STRING_ASCII( &constant_bin[ 117871 ], 7, 1 );
    const_str_plain_create_image = UNSTREAM_STRING_ASCII( &constant_bin[ 117878 ], 12, 1 );
    const_str_digest_03982a4b60c2466984ee18366852d28d = UNSTREAM_STRING_ASCII( &constant_bin[ 117890 ], 16, 0 );
    const_str_digest_853e35348d328b0302e354b188c35c30 = UNSTREAM_STRING_ASCII( &constant_bin[ 117906 ], 9, 0 );
    const_str_plain_meta = UNSTREAM_STRING_ASCII( &constant_bin[ 104358 ], 4, 1 );
    const_tuple_c530375e859d477735dca92c794c212c_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 117915 ], 158 );
    const_tuple_str_plain_x_str_plain_self_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_self_tuple, 0, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_str_plain_x_str_plain_self_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_digest_1779fdfe54bac779d90ced3fbb05c75d = UNSTREAM_STRING_ASCII( &constant_bin[ 118073 ], 11, 0 );
    const_dict_e9bcd17dbcefea8e779c4693868d05bc = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_e9bcd17dbcefea8e779c4693868d05bc, const_str_plain_fill, const_str_plain_x );
    PyDict_SetItem( const_dict_e9bcd17dbcefea8e779c4693868d05bc, const_str_plain_expand, Py_False );
    PyDict_SetItem( const_dict_e9bcd17dbcefea8e779c4693868d05bc, const_str_plain_side, const_str_plain_bottom );
    PyDict_SetItem( const_dict_e9bcd17dbcefea8e779c4693868d05bc, const_str_plain_anchor, const_str_plain_s );
    assert( PyDict_Size( const_dict_e9bcd17dbcefea8e779c4693868d05bc ) == 4 );
    const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple = PyTuple_New( 3 );
    const_str_plain_marker_1 = UNSTREAM_STRING_ASCII( &constant_bin[ 118084 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple, 0, const_str_plain_marker_1 ); Py_INCREF( const_str_plain_marker_1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple, 1, const_str_plain_green ); Py_INCREF( const_str_plain_green );
    PyTuple_SET_ITEM( const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_oc = UNSTREAM_STRING_ASCII( &constant_bin[ 2186 ], 2, 1 );
    const_str_plain_cursor_dist = UNSTREAM_STRING_ASCII( &constant_bin[ 118092 ], 11, 1 );
    const_str_plain_wfile = UNSTREAM_STRING_ASCII( &constant_bin[ 118103 ], 5, 1 );
    const_str_digest_6be3e39f1bed78d6d2b5d9685bddb660 = UNSTREAM_STRING_ASCII( &constant_bin[ 118108 ], 18, 0 );
    const_str_digest_5b18b8c9f5f7ce9cdf95ea9d49dd84db = UNSTREAM_STRING_ASCII( &constant_bin[ 118126 ], 11, 0 );
    const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple, 0, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_hstep = UNSTREAM_STRING_ASCII( &constant_bin[ 118137 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple, 2, const_str_plain_hstep ); Py_INCREF( const_str_plain_hstep );
    const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple, 0, const_str_digest_853e35348d328b0302e354b188c35c30 ); Py_INCREF( const_str_digest_853e35348d328b0302e354b188c35c30 );
    PyTuple_SET_ITEM( const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple, 1, const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7 ); Py_INCREF( const_str_digest_97f27e3b4c93e1293d20ad0e1024b4d7 );
    const_str_digest_8edaab80aa908bbb404d0711f8c1a8c6 = UNSTREAM_STRING_ASCII( &constant_bin[ 117776 ], 23, 0 );
    const_str_plain_list_markers = UNSTREAM_STRING_ASCII( &constant_bin[ 118142 ], 12, 1 );
    const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list = PyList_New( 5 );
    PyList_SET_ITEM( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list, 0, const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple ); Py_INCREF( const_tuple_ffb0aab6846ec549770806d3c7c2bc14_tuple );
    PyList_SET_ITEM( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list, 1, const_tuple_2d432bc3f16857b379210a5124c9531c_tuple ); Py_INCREF( const_tuple_2d432bc3f16857b379210a5124c9531c_tuple );
    PyList_SET_ITEM( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list, 2, const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple ); Py_INCREF( const_tuple_db4a436ad37159d7bdc686f42bc7623a_tuple );
    PyList_SET_ITEM( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list, 3, const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple ); Py_INCREF( const_tuple_09150f1ee2c0a95572d3cd6f978ae43c_tuple );
    const_tuple_a5b28a47185bf750381240a61310a4e0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_a5b28a47185bf750381240a61310a4e0_tuple, 0, const_str_digest_eae2951ed9faacdb55d59b23e7879a06 ); Py_INCREF( const_str_digest_eae2951ed9faacdb55d59b23e7879a06 );
    PyTuple_SET_ITEM( const_tuple_a5b28a47185bf750381240a61310a4e0_tuple, 1, const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f ); Py_INCREF( const_str_digest_73bcf0f3a7dcef5cddf521e170c79f6f );
    PyList_SET_ITEM( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list, 4, const_tuple_a5b28a47185bf750381240a61310a4e0_tuple ); Py_INCREF( const_tuple_a5b28a47185bf750381240a61310a4e0_tuple );
    const_str_digest_f61b078e43e4a8b40b68a07b533a1ddb = UNSTREAM_STRING_ASCII( &constant_bin[ 118154 ], 14, 0 );
    const_str_plain_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 = UNSTREAM_STRING_ASCII( &constant_bin[ 118168 ], 36, 1 );
    const_str_plain_grid_color_img = UNSTREAM_STRING_ASCII( &constant_bin[ 118204 ], 14, 1 );
    const_str_plain_parent = UNSTREAM_STRING_ASCII( &constant_bin[ 3851 ], 6, 1 );
    const_str_plain_vertical = UNSTREAM_STRING_ASCII( &constant_bin[ 51754 ], 8, 1 );
    const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 2, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 3, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 4, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_plain_p_names = UNSTREAM_STRING_ASCII( &constant_bin[ 118218 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 5, const_str_plain_p_names ); Py_INCREF( const_str_plain_p_names );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 6, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 7, const_str_plain_px ); Py_INCREF( const_str_plain_px );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 8, const_str_plain_py ); Py_INCREF( const_str_plain_py );
    PyTuple_SET_ITEM( const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 9, const_str_plain_dist ); Py_INCREF( const_str_plain_dist );
    const_str_plain__markers = UNSTREAM_STRING_ASCII( &constant_bin[ 117108 ], 8, 1 );
    const_str_plain_simd = UNSTREAM_STRING_ASCII( &constant_bin[ 118225 ], 4, 1 );
    const_str_digest_dbed1b28aded01c5a308ca7ef04b4c9e = UNSTREAM_STRING_ASCII( &constant_bin[ 118229 ], 51, 0 );
    const_str_plain_browse = UNSTREAM_STRING_ASCII( &constant_bin[ 118280 ], 6, 1 );
    const_str_angle_Motion = UNSTREAM_STRING_ASCII( &constant_bin[ 118286 ], 8, 0 );
    const_str_plain__grid_color = UNSTREAM_STRING_ASCII( &constant_bin[ 118294 ], 11, 1 );
    const_str_chr_92 = UNSTREAM_STRING_ASCII( &constant_bin[ 793 ], 1, 0 );
    const_dict_dfd7982266194fee87015b2199b24d40 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_dfd7982266194fee87015b2199b24d40, const_str_plain_bg, const_str_plain_red );
    assert( PyDict_Size( const_dict_dfd7982266194fee87015b2199b24d40 ) == 1 );
    const_str_plain_scroll_canvas = UNSTREAM_STRING_ASCII( &constant_bin[ 117858 ], 13, 1 );
    const_str_digest_20040adeb7ecd82d1ad664c5d087baa1 = UNSTREAM_STRING_ASCII( &constant_bin[ 118305 ], 11, 0 );
    const_str_digest_dc166b1b7db229c019bf1e02a4bdd4be = UNSTREAM_STRING_ASCII( &constant_bin[ 118316 ], 34, 0 );
    const_str_digest_aa2ec49d4aec211af747ecb45eb68955 = UNSTREAM_STRING_ASCII( &constant_bin[ 118350 ], 8, 0 );
    const_str_plain_delete_nearest = UNSTREAM_STRING_ASCII( &constant_bin[ 118358 ], 14, 1 );
    const_str_plain_MW = UNSTREAM_STRING_ASCII( &constant_bin[ 75852 ], 2, 1 );
    const_str_plain_reg_marker = UNSTREAM_STRING_ASCII( &constant_bin[ 117566 ], 10, 1 );
    const_str_plain__increment = UNSTREAM_STRING_ASCII( &constant_bin[ 116513 ], 10, 1 );
    const_str_plain_renderer = UNSTREAM_STRING_ASCII( &constant_bin[ 118372 ], 8, 1 );
    const_str_plain_filetypes = UNSTREAM_STRING_ASCII( &constant_bin[ 118380 ], 9, 1 );
    const_dict_39ca36b2ad91eb500a98a2faae94b20a = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_39ca36b2ad91eb500a98a2faae94b20a, const_str_plain_fill, const_str_plain_y );
    PyDict_SetItem( const_dict_39ca36b2ad91eb500a98a2faae94b20a, const_str_plain_expand, Py_False );
    PyDict_SetItem( const_dict_39ca36b2ad91eb500a98a2faae94b20a, const_str_plain_side, const_str_plain_right );
    assert( PyDict_Size( const_dict_39ca36b2ad91eb500a98a2faae94b20a ) == 3 );
    const_str_digest_18185c3a907c423e15b284dfcd45864b = UNSTREAM_STRING_ASCII( &constant_bin[ 118389 ], 29, 0 );
    const_str_plain_save_markers_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 118418 ], 16, 1 );
    const_str_digest_2d6badb92fb03a65764e0b33d3000873 = UNSTREAM_STRING_ASCII( &constant_bin[ 118434 ], 28, 0 );
    const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_photo_file = UNSTREAM_STRING_ASCII( &constant_bin[ 118462 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 1, const_str_plain_photo_file ); Py_INCREF( const_str_plain_photo_file );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 2, const_str_plain_height ); Py_INCREF( const_str_plain_height );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 3, const_str_plain_width ); Py_INCREF( const_str_plain_width );
    const_str_plain_new_height = UNSTREAM_STRING_ASCII( &constant_bin[ 118472 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 4, const_str_plain_new_height ); Py_INCREF( const_str_plain_new_height );
    const_str_plain_new_width = UNSTREAM_STRING_ASCII( &constant_bin[ 118482 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 5, const_str_plain_new_width ); Py_INCREF( const_str_plain_new_width );
    PyTuple_SET_ITEM( const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 6, const_str_plain_renderer ); Py_INCREF( const_str_plain_renderer );
    const_str_digest_4fc0f3cb1ee2d65b94af894f9bd0869f = UNSTREAM_STRING_ASCII( &constant_bin[ 118491 ], 14, 0 );
    const_str_plain_winfo_y = UNSTREAM_STRING_ASCII( &constant_bin[ 118505 ], 7, 1 );
    const_str_digest_45eb3e971e3b95fddc0f286f5b7bdca9 = UNSTREAM_STRING_ASCII( &constant_bin[ 118512 ], 48, 0 );
    const_str_digest_3d7098de101b2d50ae06ab55dc3b69ef = UNSTREAM_STRING_ASCII( &constant_bin[ 118560 ], 44, 0 );
    const_str_digest_83f55308ed344de463ffdc78f04a35bd = UNSTREAM_STRING_ASCII( &constant_bin[ 118604 ], 20, 0 );
    const_str_digest_0bc01304183f169c6eafdf394be67114 = UNSTREAM_STRING_ASCII( &constant_bin[ 118624 ], 19, 0 );
    const_str_plain_some = UNSTREAM_STRING_ASCII( &constant_bin[ 2690 ], 4, 1 );
    const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 1, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    PyTuple_SET_ITEM( const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 2, const_str_plain_wfile ); Py_INCREF( const_str_plain_wfile );
    PyTuple_SET_ITEM( const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 3, const_str_plain_meta ); Py_INCREF( const_str_plain_meta );
    PyTuple_SET_ITEM( const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 4, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_digest_cc66b487c4c2e4e68f7098ebd678113a = UNSTREAM_STRING_ASCII( &constant_bin[ 118643 ], 14, 0 );
    const_str_plain_restore_markers_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 118657 ], 19, 1 );
    const_str_plain_delete_point = UNSTREAM_STRING_ASCII( &constant_bin[ 115666 ], 12, 1 );
    const_str_plain_dereg_marker_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 118676 ], 16, 1 );
    const_str_plain_yscrollcommand = UNSTREAM_STRING_ASCII( &constant_bin[ 118692 ], 14, 1 );
    const_str_plain_create_oval = UNSTREAM_STRING_ASCII( &constant_bin[ 118706 ], 11, 1 );
    const_str_digest_ddb918f39efc5bec3b0745d2ee48459e = UNSTREAM_STRING_ASCII( &constant_bin[ 118717 ], 28, 0 );
    const_str_digest_af814221305a5b80a0f017120c5947f0 = UNSTREAM_STRING_ASCII( &constant_bin[ 118745 ], 10, 0 );
    const_dict_6567b5349b15cc01325b1e3b73731e75 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_6567b5349b15cc01325b1e3b73731e75, const_str_plain_bg, const_str_plain_green );
    assert( PyDict_Size( const_dict_6567b5349b15cc01325b1e3b73731e75 ) == 1 );
    const_str_plain_edit_mt_item = UNSTREAM_STRING_ASCII( &constant_bin[ 115399 ], 12, 1 );
    const_str_plain_iconbitmap = UNSTREAM_STRING_ASCII( &constant_bin[ 118755 ], 10, 1 );
    const_dict_04f25dca3d4d6c90e2b5523257528f5e = _PyDict_NewPresized( 5 );
    PyDict_SetItem( const_dict_04f25dca3d4d6c90e2b5523257528f5e, const_str_plain_text, const_str_plain_check );
    PyDict_SetItem( const_dict_04f25dca3d4d6c90e2b5523257528f5e, const_str_plain_justify, const_str_plain_right );
    const_str_plain_silver = UNSTREAM_STRING_ASCII( &constant_bin[ 58872 ], 6, 1 );
    PyDict_SetItem( const_dict_04f25dca3d4d6c90e2b5523257528f5e, const_str_plain_bg, const_str_plain_silver );
    PyDict_SetItem( const_dict_04f25dca3d4d6c90e2b5523257528f5e, const_str_plain_relief, const_str_plain_flat );
    PyDict_SetItem( const_dict_04f25dca3d4d6c90e2b5523257528f5e, const_str_plain_width, const_int_pos_20 );
    assert( PyDict_Size( const_dict_04f25dca3d4d6c90e2b5523257528f5e ) == 5 );
    const_str_plain_JpgCanvas = UNSTREAM_STRING_ASCII( &constant_bin[ 118765 ], 9, 1 );
    const_tuple_int_0_int_0_int_pos_9_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_pos_9_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_pos_9_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_int_0_int_pos_9_tuple, 2, const_int_pos_9 ); Py_INCREF( const_int_pos_9 );
    const_str_plain_dereg_marker = UNSTREAM_STRING_ASCII( &constant_bin[ 117564 ], 12, 1 );
    const_dict_cd18443782360158901000a04a62f9b8 = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_cd18443782360158901000a04a62f9b8, const_str_plain_fill, const_str_plain_both );
    PyDict_SetItem( const_dict_cd18443782360158901000a04a62f9b8, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_cd18443782360158901000a04a62f9b8, const_str_plain_side, const_str_plain_top );
    PyDict_SetItem( const_dict_cd18443782360158901000a04a62f9b8, const_str_plain_anchor, const_str_plain_n );
    assert( PyDict_Size( const_dict_cd18443782360158901000a04a62f9b8 ) == 4 );
    const_str_digest_c36c140071b9199d6e2a034118d1de51 = UNSTREAM_STRING_ASCII( &constant_bin[ 118774 ], 10, 0 );
    const_str_digest_869e1da944f24734e75b205c837ec843 = UNSTREAM_STRING_ASCII( &constant_bin[ 118784 ], 44, 0 );
    const_str_digest_7ac06338f0d3a3c40fdf3e9d84c9bb52 = UNSTREAM_STRING_ASCII( &constant_bin[ 118828 ], 24, 0 );
    const_str_digest_03941c600898473130bdd80b65ebc76b = UNSTREAM_STRING_ASCII( &constant_bin[ 118852 ], 129, 0 );
    const_dict_843f8dee56a2d8d35350c85cedbea8e9 = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_843f8dee56a2d8d35350c85cedbea8e9, const_str_plain_fill, const_str_plain_both );
    PyDict_SetItem( const_dict_843f8dee56a2d8d35350c85cedbea8e9, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_843f8dee56a2d8d35350c85cedbea8e9, const_str_plain_side, const_str_plain_top );
    PyDict_SetItem( const_dict_843f8dee56a2d8d35350c85cedbea8e9, const_str_plain_anchor, const_str_plain_nw );
    assert( PyDict_Size( const_dict_843f8dee56a2d8d35350c85cedbea8e9 ) == 4 );
    const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple, 2, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_Treeview = UNSTREAM_STRING_ASCII( &constant_bin[ 118110 ], 8, 1 );
    const_str_plain_cursor = UNSTREAM_STRING_ASCII( &constant_bin[ 118092 ], 6, 1 );
    const_str_plain_scroll = UNSTREAM_STRING_ASCII( &constant_bin[ 117831 ], 6, 1 );
    const_str_plain_rest_img = UNSTREAM_STRING_ASCII( &constant_bin[ 118981 ], 8, 1 );
    const_str_plain_Scale = UNSTREAM_STRING_ASCII( &constant_bin[ 68487 ], 5, 1 );
    const_str_plain_scrollregion = UNSTREAM_STRING_ASCII( &constant_bin[ 118989 ], 12, 1 );
    const_str_digest_1ed1bb1688ad4d64f6c436f196c95e52 = UNSTREAM_STRING_ASCII( &constant_bin[ 119001 ], 32, 0 );
    const_str_plain_Tk = UNSTREAM_STRING_ASCII( &constant_bin[ 76899 ], 2, 1 );
    const_str_plain_Canvas = UNSTREAM_STRING_ASCII( &constant_bin[ 118768 ], 6, 1 );
    const_str_digest_22a56652470931e1ca9fb48730e47674 = UNSTREAM_STRING_ASCII( &constant_bin[ 119033 ], 151, 0 );
    const_str_plain_last_point = UNSTREAM_STRING_ASCII( &constant_bin[ 119184 ], 10, 1 );
    const_str_digest_be0b7f707e2c7d3b2b6e31f01ac24601 = UNSTREAM_STRING_ASCII( &constant_bin[ 119194 ], 29, 0 );
    const_dict_954798d046aec4035b0ebd54d4afd999 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_954798d046aec4035b0ebd54d4afd999, const_str_plain_r, const_int_pos_9 );
    assert( PyDict_Size( const_dict_954798d046aec4035b0ebd54d4afd999 ) == 1 );
    const_str_digest_2fa4183c3f41794a0df2fe4af5bcff16 = UNSTREAM_STRING_ASCII( &constant_bin[ 119223 ], 13, 0 );
    const_str_plain_recalculate_points_positions = UNSTREAM_STRING_ASCII( &constant_bin[ 115814 ], 28, 1 );
    const_str_plain_VertImgScroll = UNSTREAM_STRING_ASCII( &constant_bin[ 119236 ], 13, 1 );
    const_str_plain_scan_dragto = UNSTREAM_STRING_ASCII( &constant_bin[ 119249 ], 11, 1 );
    const_str_plain_v_scroll_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 119260 ], 14, 1 );
    const_str_plain_redraw_grid = UNSTREAM_STRING_ASCII( &constant_bin[ 119274 ], 11, 1 );
    const_dict_387ffba8c6007802d2ff1057b76f718d = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_387ffba8c6007802d2ff1057b76f718d, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_387ffba8c6007802d2ff1057b76f718d, const_str_plain_fill, const_str_plain_y );
    PyDict_SetItem( const_dict_387ffba8c6007802d2ff1057b76f718d, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_387ffba8c6007802d2ff1057b76f718d, const_str_plain_anchor, const_str_plain_e );
    assert( PyDict_Size( const_dict_387ffba8c6007802d2ff1057b76f718d ) == 4 );
    const_str_digest_1cb6bcc50333534b80b0dbdb17ec0142 = UNSTREAM_STRING_ASCII( &constant_bin[ 119285 ], 11, 0 );
    const_str_plain_scan_mark = UNSTREAM_STRING_ASCII( &constant_bin[ 119296 ], 9, 1 );
    const_dict_c8f191ee18e314cbd54f4429f11fd237 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_c8f191ee18e314cbd54f4429f11fd237, const_str_plain_expand, Py_False );
    PyDict_SetItem( const_dict_c8f191ee18e314cbd54f4429f11fd237, const_str_plain_side, const_str_plain_right );
    PyDict_SetItem( const_dict_c8f191ee18e314cbd54f4429f11fd237, const_str_plain_anchor, const_str_plain_se );
    assert( PyDict_Size( const_dict_c8f191ee18e314cbd54f4429f11fd237 ) == 3 );
    const_str_digest_6c92efcbf38cda1e8f529735f36d5913 = UNSTREAM_STRING_ASCII( &constant_bin[ 119305 ], 10, 0 );
    const_str_plain__index_of = UNSTREAM_STRING_ASCII( &constant_bin[ 117790 ], 9, 1 );
    const_str_plain_ifexit = UNSTREAM_STRING_ASCII( &constant_bin[ 119315 ], 6, 1 );
    const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 1, const_str_plain_color ); Py_INCREF( const_str_plain_color );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 2, const_str_plain_ratio ); Py_INCREF( const_str_plain_ratio );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 3, const_str_plain_canv_width ); Py_INCREF( const_str_plain_canv_width );
    const_str_plain_canv_height = UNSTREAM_STRING_ASCII( &constant_bin[ 119321 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 4, const_str_plain_canv_height ); Py_INCREF( const_str_plain_canv_height );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 5, const_str_plain_wstep ); Py_INCREF( const_str_plain_wstep );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 6, const_str_plain_hstep ); Py_INCREF( const_str_plain_hstep );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 7, const_str_plain_wn ); Py_INCREF( const_str_plain_wn );
    const_str_plain_hn = UNSTREAM_STRING_ASCII( &constant_bin[ 119332 ], 2, 1 );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 8, const_str_plain_hn ); Py_INCREF( const_str_plain_hn );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 9, const_str_plain_horiz_lines ); Py_INCREF( const_str_plain_horiz_lines );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 10, const_str_plain_vert_lines ); Py_INCREF( const_str_plain_vert_lines );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 11, const_str_plain_lines ); Py_INCREF( const_str_plain_lines );
    PyTuple_SET_ITEM( const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 12, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_str_plain_restore_markers = UNSTREAM_STRING_ASCII( &constant_bin[ 117101 ], 15, 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_name_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_name_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_name_tuple, 1, const_str_plain_p_name ); Py_INCREF( const_str_plain_p_name );
    const_str_digest_8c020ebcc4e366f17cbdf0ddaf8201a4 = UNSTREAM_STRING_ASCII( &constant_bin[ 119334 ], 28, 0 );
    const_str_plain_mouse_x = UNSTREAM_STRING_ASCII( &constant_bin[ 119362 ], 7, 1 );
    const_str_digest_341f627abde4738a7ba7c80d7016af84 = UNSTREAM_STRING_ASCII( &constant_bin[ 119369 ], 26, 0 );
    const_dict_c81e51d900f46841d2257bc020593429 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_c81e51d900f46841d2257bc020593429, const_str_plain_side, const_str_plain_left );
    assert( PyDict_Size( const_dict_c81e51d900f46841d2257bc020593429 ) == 1 );
    const_str_digest_a7a395a6f5b786b2837acf466cf590f4 = UNSTREAM_STRING_ASCII( &constant_bin[ 119395 ], 34, 0 );
    const_str_digest_2afb393e5bf92d069ac752bb2020a148 = UNSTREAM_STRING_ASCII( &constant_bin[ 119429 ], 33, 0 );
    const_str_digest_e0c1d1b1847f096d71ec514176536240 = UNSTREAM_STRING_ASCII( &constant_bin[ 119462 ], 8, 0 );
    const_str_plain_Frame = UNSTREAM_STRING_ASCII( &constant_bin[ 35364 ], 5, 1 );
    const_str_plain_add_btn_action = UNSTREAM_STRING_ASCII( &constant_bin[ 118448 ], 14, 1 );
    const_str_plain_NO = UNSTREAM_STRING_ASCII( &constant_bin[ 28269 ], 2, 1 );
    const_str_digest_1e015f729cf96517bd39715d84674b71 = UNSTREAM_STRING_ASCII( &constant_bin[ 119470 ], 8, 0 );
    const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple, 1, const_str_plain_formats ); Py_INCREF( const_str_plain_formats );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple, 2, const_str_plain_filename ); Py_INCREF( const_str_plain_filename );
    const_str_digest_3ada7868ab79bf6ab657778950f2bb14 = UNSTREAM_STRING_ASCII( &constant_bin[ 119478 ], 41, 0 );
    const_str_plain_zoom_factor_label = UNSTREAM_STRING_ASCII( &constant_bin[ 119519 ], 17, 1 );
    const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 2, const_str_plain_y ); Py_INCREF( const_str_plain_y );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 3, const_str_plain_nearest_points ); Py_INCREF( const_str_plain_nearest_points );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 4, const_str_plain_marker_name ); Py_INCREF( const_str_plain_marker_name );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 5, const_str_plain_point_name ); Py_INCREF( const_str_plain_point_name );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 6, const_str_plain_px ); Py_INCREF( const_str_plain_px );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 7, const_str_plain_py ); Py_INCREF( const_str_plain_py );
    PyTuple_SET_ITEM( const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 8, const_str_plain_cursor_dist ); Py_INCREF( const_str_plain_cursor_dist );
    const_str_plain_reg_marker_btn = UNSTREAM_STRING_ASCII( &constant_bin[ 118678 ], 14, 1 );
    const_str_digest_ab2827542477cf85f83a30583bea4580 = UNSTREAM_STRING_ASCII( &constant_bin[ 119536 ], 8, 0 );
    const_str_plain_save_markers = UNSTREAM_STRING_ASCII( &constant_bin[ 118418 ], 12, 1 );
    const_str_plain_xview = UNSTREAM_STRING_ASCII( &constant_bin[ 119544 ], 5, 1 );
    const_str_plain_del_btn_action = UNSTREAM_STRING_ASCII( &constant_bin[ 117501 ], 14, 1 );
    const_dict_9a135619cf9f4e2dc0e57013204896a8 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_9a135619cf9f4e2dc0e57013204896a8, const_str_plain_value, const_float_1_5 );
    assert( PyDict_Size( const_dict_9a135619cf9f4e2dc0e57013204896a8 ) == 1 );
    const_tuple_str_plain_self_str_plain_zfactor_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_zfactor_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_zfactor_tuple, 1, const_str_plain_zfactor ); Py_INCREF( const_str_plain_zfactor );
    const_str_digest_91369a51db914682b7b489fb669b7d4a = UNSTREAM_STRING_ASCII( &constant_bin[ 119549 ], 18, 0 );
    const_str_plain_Entry = UNSTREAM_STRING_ASCII( &constant_bin[ 80104 ], 5, 1 );
    const_str_digest_52236fb712fbcfd75011618e94986a01 = UNSTREAM_STRING_ASCII( &constant_bin[ 119567 ], 255, 0 );
    const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple, 1, const_str_plain_zf ); Py_INCREF( const_str_plain_zf );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple, 2, const_str_plain_new_zoom_factor ); Py_INCREF( const_str_plain_new_zoom_factor );
    const_str_plain_color_box = UNSTREAM_STRING_ASCII( &constant_bin[ 119822 ], 9, 1 );
    const_str_digest_484045dd99bc1aa516b6975ab5488c88 = UNSTREAM_STRING_ASCII( &constant_bin[ 119831 ], 19, 0 );
    const_str_digest_1d315cd69fb8867c96afa445af2e8202 = UNSTREAM_STRING_ASCII( &constant_bin[ 119850 ], 27, 0 );
    const_str_plain_zoom_bar = UNSTREAM_STRING_ASCII( &constant_bin[ 119877 ], 8, 1 );
    const_str_plain_horizontal = UNSTREAM_STRING_ASCII( &constant_bin[ 51709 ], 10, 1 );
    const_tuple_int_pos_600_int_pos_600_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_600_int_pos_600_tuple, 0, const_int_pos_600 ); Py_INCREF( const_int_pos_600 );
    PyTuple_SET_ITEM( const_tuple_int_pos_600_int_pos_600_tuple, 1, const_int_pos_600 ); Py_INCREF( const_int_pos_600 );
    const_dict_ab6f30f3f2c3c07dd8fbd56f4ec662bd = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_ab6f30f3f2c3c07dd8fbd56f4ec662bd, const_str_plain_text, const_str_digest_9c7d5cb723beb3c9a6dec588cdb24cc3 );
    assert( PyDict_Size( const_dict_ab6f30f3f2c3c07dd8fbd56f4ec662bd ) == 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 1, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    const_dict_7cc8ea2452b7529ef5642e9b0f43bebd = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd, const_str_plain_fill, const_str_plain_both );
    PyDict_SetItem( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd, const_str_plain_anchor, const_str_plain_w );
    assert( PyDict_Size( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd ) == 4 );
    const_str_digest_8800f774b27d44e11f6e7dc799e181fc = UNSTREAM_STRING_ASCII( &constant_bin[ 119885 ], 12, 0 );
    const_str_digest_a2135bac7a55a5f1c007dd16df1fb6fc = UNSTREAM_STRING_ASCII( &constant_bin[ 119897 ], 20, 0 );
    const_str_plain_winfo_width = UNSTREAM_STRING_ASCII( &constant_bin[ 119917 ], 11, 1 );
    const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7, const_str_plain_text, const_str_digest_0bc01304183f169c6eafdf394be67114 );
    assert( PyDict_Size( const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7 ) == 1 );
    const_str_plain_orient = UNSTREAM_STRING_ASCII( &constant_bin[ 119928 ], 6, 1 );
    const_tuple_str_plain_ttk_str_plain_messagebox_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ttk_str_plain_messagebox_tuple, 0, const_str_plain_ttk ); Py_INCREF( const_str_plain_ttk );
    PyTuple_SET_ITEM( const_tuple_str_plain_ttk_str_plain_messagebox_tuple, 1, const_str_plain_messagebox ); Py_INCREF( const_str_plain_messagebox );
    const_str_plain_askstring = UNSTREAM_STRING_ASCII( &constant_bin[ 119934 ], 9, 1 );
    const_str_digest_f7ea88360407b5af8f2057be79d397f7 = UNSTREAM_STRING_ASCII( &constant_bin[ 119943 ], 25, 0 );
    const_str_digest_0671ae41e24608f4baed6f6736e6f766 = UNSTREAM_STRING_ASCII( &constant_bin[ 119968 ], 47, 0 );
    const_str_digest_58f35236723a163685990d21d3e8852f = UNSTREAM_STRING_ASCII( &constant_bin[ 120015 ], 26, 0 );
    const_str_digest_a776a2e35d80570c0434d801d80ee1e0 = UNSTREAM_STRING_ASCII( &constant_bin[ 120041 ], 46, 0 );
    const_str_digest_c0c6b393b34855ffa199d0a9f4a999a9 = UNSTREAM_STRING_ASCII( &constant_bin[ 120087 ], 21, 0 );
    const_str_digest_a6c24e7eda67112764a21ae5ba836efb = UNSTREAM_STRING_ASCII( &constant_bin[ 120108 ], 5, 0 );
    const_str_plain_coordinates = UNSTREAM_STRING_ASCII( &constant_bin[ 64680 ], 11, 1 );
    const_str_digest_64f21f796b58f0181825b26e02898373 = UNSTREAM_STRING_ASCII( &constant_bin[ 120113 ], 22, 0 );
    const_str_digest_071d198a42c91039f0e324fe46862605 = UNSTREAM_STRING_ASCII( &constant_bin[ 120135 ], 9, 0 );
    const_tuple_73825a395eede51bac87df279c13d87a_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_73825a395eede51bac87df279c13d87a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_73825a395eede51bac87df279c13d87a_tuple, 1, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_73825a395eede51bac87df279c13d87a_tuple, 2, const_str_plain_color ); Py_INCREF( const_str_plain_color );
    const_str_plain_counter = UNSTREAM_STRING_ASCII( &constant_bin[ 35953 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_73825a395eede51bac87df279c13d87a_tuple, 3, const_str_plain_counter ); Py_INCREF( const_str_plain_counter );
    const_dict_81900f1fa71706159eeaded4993b6386 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_81900f1fa71706159eeaded4993b6386, const_str_plain_text, const_str_digest_92515876b38379efe30c6b0d0a2885ae );
    assert( PyDict_Size( const_dict_81900f1fa71706159eeaded4993b6386 ) == 1 );
    const_str_plain_destroy = UNSTREAM_STRING_ASCII( &constant_bin[ 18204 ], 7, 1 );
    const_dict_644eea9536c311d40bcda6e9823e381c = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_644eea9536c311d40bcda6e9823e381c, const_str_plain_sequence, Py_None );
    PyDict_SetItem( const_dict_644eea9536c311d40bcda6e9823e381c, const_str_plain_callback, Py_None );
    assert( PyDict_Size( const_dict_644eea9536c311d40bcda6e9823e381c ) == 2 );
    const_str_plain_WM_DELETE_WINDOW = UNSTREAM_STRING_ASCII( &constant_bin[ 120144 ], 16, 1 );
    const_str_digest_06796b648e08ddbc99b55cf216966b9a = UNSTREAM_STRING_ASCII( &constant_bin[ 119395 ], 23, 0 );
    const_tuple_str_plain_self_str_plain___str_plain_value_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_value_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_value_tuple, 1, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain___str_plain_value_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_mouse_y = UNSTREAM_STRING_ASCII( &constant_bin[ 120160 ], 7, 1 );
    const_str_plain_place_marker_point = UNSTREAM_STRING_ASCII( &constant_bin[ 119015 ], 18, 1 );
    const_dict_7a96c67f653e4bbdc849976097e96fb5 = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_7a96c67f653e4bbdc849976097e96fb5, const_str_plain_defaultextension, const_str_plain_oc );
    PyDict_SetItem( const_dict_7a96c67f653e4bbdc849976097e96fb5, const_str_plain_filetypes, const_list_tuple_3c1cf3afadc2e518b538f78b61c02550_tuple_list );
    assert( PyDict_Size( const_dict_7a96c67f653e4bbdc849976097e96fb5 ) == 2 );
    const_str_plain_namegen = UNSTREAM_STRING_ASCII( &constant_bin[ 116130 ], 7, 1 );
    const_str_plain_image_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 120167 ], 11, 1 );
    const_str_plain_Combobox = UNSTREAM_STRING_ASCII( &constant_bin[ 120178 ], 8, 1 );
    const_str_digest_b5bc58a36ade8b28c32452d7a339d9ac = UNSTREAM_STRING_ASCII( &constant_bin[ 120186 ], 44, 0 );
    const_dict_0bb445399fe88d6da125b1ba538ec20c = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_0bb445399fe88d6da125b1ba538ec20c, const_str_plain_text, const_str_plain_Count );
    PyDict_SetItem( const_dict_0bb445399fe88d6da125b1ba538ec20c, const_str_plain_anchor, const_str_plain_w );
    assert( PyDict_Size( const_dict_0bb445399fe88d6da125b1ba538ec20c ) == 2 );
    const_tuple_str_plain_red_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_red_tuple, 0, const_str_plain_red ); Py_INCREF( const_str_plain_red );
    const_dict_9a3fa329eccba2f298c8181d957f35f2 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_9a3fa329eccba2f298c8181d957f35f2, const_str_plain_text, const_str_digest_f09db1b2c387038946fbd47fd97ce655 );
    assert( PyDict_Size( const_dict_9a3fa329eccba2f298c8181d957f35f2 ) == 1 );
    const_tuple_str_plain_self_str_plain_ifexit_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifexit_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_ifexit_tuple, 1, const_str_plain_ifexit ); Py_INCREF( const_str_plain_ifexit );
    const_str_plain_column = UNSTREAM_STRING_ASCII( &constant_bin[ 117000 ], 6, 1 );
    const_str_digest_18dba6422046979b1801ec5903c968d0 = UNSTREAM_STRING_ASCII( &constant_bin[ 120230 ], 39, 0 );
    const_dict_9bebc746c58a0156de1440cf5c4adafb = _PyDict_NewPresized( 1 );
    const_str_digest_63ff4c5cb59d6cdc351fd21bc2be98e6 = UNSTREAM_STRING_ASCII( &constant_bin[ 120269 ], 21, 0 );
    PyDict_SetItem( const_dict_9bebc746c58a0156de1440cf5c4adafb, const_str_plain_text, const_str_digest_63ff4c5cb59d6cdc351fd21bc2be98e6 );
    assert( PyDict_Size( const_dict_9bebc746c58a0156de1440cf5c4adafb ) == 1 );
    const_str_digest_c3983cdf52a3b805b4ae9a8560f2cd66 = UNSTREAM_STRING_ASCII( &constant_bin[ 120290 ], 35, 0 );
    const_str_plain_Button = UNSTREAM_STRING_ASCII( &constant_bin[ 116828 ], 6, 1 );
    const_str_plain_stretch = UNSTREAM_STRING_ASCII( &constant_bin[ 120325 ], 7, 1 );
    const_dict_29192ed75dad88e4602a2efaaea0cde1 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_29192ed75dad88e4602a2efaaea0cde1, const_str_plain_text, const_str_empty );
    assert( PyDict_Size( const_dict_29192ed75dad88e4602a2efaaea0cde1 ) == 1 );
    const_tuple_str_digest_1779fdfe54bac779d90ced3fbb05c75d_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_1779fdfe54bac779d90ced3fbb05c75d_tuple, 0, const_str_digest_1779fdfe54bac779d90ced3fbb05c75d ); Py_INCREF( const_str_digest_1779fdfe54bac779d90ced3fbb05c75d );
    const_str_digest_3761902b939bcfae63ccb9e5c1056971 = UNSTREAM_STRING_ASCII( &constant_bin[ 120332 ], 15, 0 );
    const_str_plain_h_scroll_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 120347 ], 14, 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_marker_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_marker_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_marker_tuple, 1, const_str_plain_marker ); Py_INCREF( const_str_plain_marker );
    const_str_digest_0cced0d80afacc5b0545a9f16b3a5aa4 = UNSTREAM_STRING_ASCII( &constant_bin[ 120361 ], 10, 0 );
    const_str_digest_0b13918e89a11310bf797ee9b20559b9 = UNSTREAM_STRING_ASCII( &constant_bin[ 120371 ], 21, 0 );
    const_str_plain_HorizImgScroll = UNSTREAM_STRING_ASCII( &constant_bin[ 120392 ], 14, 1 );
    const_str_plain_grid_img = UNSTREAM_STRING_ASCII( &constant_bin[ 120406 ], 8, 1 );
    const_str_plain_internal_frame = UNSTREAM_STRING_ASCII( &constant_bin[ 120414 ], 14, 1 );
    const_str_plain_syst = UNSTREAM_STRING_ASCII( &constant_bin[ 13415 ], 4, 1 );
    const_str_digest_79647c6567c1db57751208265588ef26 = UNSTREAM_STRING_ASCII( &constant_bin[ 120428 ], 24, 0 );
    const_str_plain_selectmode = UNSTREAM_STRING_ASCII( &constant_bin[ 120452 ], 10, 1 );
    const_dict_595ce05fed954a5be4fec998da079e83 = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_595ce05fed954a5be4fec998da079e83, const_str_plain_bg, const_str_plain_red );
    PyDict_SetItem( const_dict_595ce05fed954a5be4fec998da079e83, const_str_plain_width, const_int_pos_420 );
    assert( PyDict_Size( const_dict_595ce05fed954a5be4fec998da079e83 ) == 2 );
    const_str_plain__count = UNSTREAM_STRING_ASCII( &constant_bin[ 4023 ], 6, 1 );
    const_dict_e774fcf6597a6add02277f245bf9520e = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_e774fcf6597a6add02277f245bf9520e, const_str_plain_side, const_str_plain_left );
    PyDict_SetItem( const_dict_e774fcf6597a6add02277f245bf9520e, const_str_plain_padx, const_int_pos_2 );
    assert( PyDict_Size( const_dict_e774fcf6597a6add02277f245bf9520e ) == 2 );
    const_str_plain_zoom_out = UNSTREAM_STRING_ASCII( &constant_bin[ 116837 ], 8, 1 );
    const_str_plain_tag_bind = UNSTREAM_STRING_ASCII( &constant_bin[ 120462 ], 8, 1 );
    const_dict_3584f923e93519852eb3b60cbfff8c61 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_3584f923e93519852eb3b60cbfff8c61, const_str_plain_fill, const_str_plain_both );
    PyDict_SetItem( const_dict_3584f923e93519852eb3b60cbfff8c61, const_str_plain_expand, Py_True );
    PyDict_SetItem( const_dict_3584f923e93519852eb3b60cbfff8c61, const_str_plain_side, const_str_plain_left );
    assert( PyDict_Size( const_dict_3584f923e93519852eb3b60cbfff8c61 ) == 3 );
    const_str_digest_c9dbca89b60e23dab81d05bd0125ba17 = UNSTREAM_STRING_ASCII( &constant_bin[ 116403 ], 26, 0 );
    const_str_plain_homedir = UNSTREAM_STRING_ASCII( &constant_bin[ 120470 ], 7, 1 );
    const_str_plain_xyentry = UNSTREAM_STRING_ASCII( &constant_bin[ 120477 ], 7, 1 );
    const_str_plain_crosshair = UNSTREAM_STRING_ASCII( &constant_bin[ 120484 ], 9, 1 );
    const_str_plain_askopenfilename = UNSTREAM_STRING_ASCII( &constant_bin[ 120493 ], 15, 1 );
    const_str_angle_Configure = UNSTREAM_STRING_ASCII( &constant_bin[ 120508 ], 11, 0 );
    const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5 = UNSTREAM_STRING_ASCII( &constant_bin[ 120519 ], 40, 0 );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants___main__( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_c59dfaa52a0eab1e739302da6b125c22;
static PyCodeObject *codeobj_aa6581d0dfab87d1c009a5155d5e7459;
static PyCodeObject *codeobj_9efefce32922980f0b0390c28456cbce;
static PyCodeObject *codeobj_d2195ec170930a631d2b03017cec7030;
static PyCodeObject *codeobj_c4c2cc39eeb8ca1d1cddc8dfd8763cae;
static PyCodeObject *codeobj_83a35bf7b8d527b9648893b95e71fe58;
static PyCodeObject *codeobj_6179a74b43be2a79f261110af601a1d8;
static PyCodeObject *codeobj_20258b4d00d6883e23c28deed98177c9;
static PyCodeObject *codeobj_60adaa08deb7bb51ee9e1d7f87db2d2e;
static PyCodeObject *codeobj_1915abd295538b85adb96110a3ffcd81;
static PyCodeObject *codeobj_863a1671359477bab0df6f7a770b4195;
static PyCodeObject *codeobj_5ed4068f26894757e57b82c59e82b3f9;
static PyCodeObject *codeobj_8ebd3f823bc7c63e26ecd0134f5607a0;
static PyCodeObject *codeobj_a68246feddf0c0fedded079bc3c1a935;
static PyCodeObject *codeobj_b4a17be0c3e5c613963efae7a5065b73;
static PyCodeObject *codeobj_e5712b9e117201cf4ef39e1f907c2190;
static PyCodeObject *codeobj_d32dd44607baab9ff4ec845c9e85fa38;
static PyCodeObject *codeobj_5c2637fcdb4e4148e2112555d75df96c;
static PyCodeObject *codeobj_13acc59ade367ff2c72305c80a9ad1db;
static PyCodeObject *codeobj_81fe453425470136de53052b8b5d2cfc;
static PyCodeObject *codeobj_5a4f49d4a689dfca3b0d0bef829e6e74;
static PyCodeObject *codeobj_615958cbdcd5ba77bb7bd3f4c3a9f250;
static PyCodeObject *codeobj_0396916f5d91e70e9ce022bec2a94f25;
static PyCodeObject *codeobj_9eb2c242aa975a043a79c48514acfbe2;
static PyCodeObject *codeobj_dbf48a8b044c67f61b445f9edaf89f61;
static PyCodeObject *codeobj_4c77c948c5e57eadf44c9f712ef65481;
static PyCodeObject *codeobj_c13c2c98256bbecc4767973a540e5729;
static PyCodeObject *codeobj_d0c3b0fbe75c1187491841103b74e088;
static PyCodeObject *codeobj_2ae5aee66bc783bb404fe06e053d6cf3;
static PyCodeObject *codeobj_29b42187ef986eae1f1a1688bdf32bba;
static PyCodeObject *codeobj_d945ec97314d2978adb7e4ecc0916009;
static PyCodeObject *codeobj_05fc906c0588f7e117725864f391306c;
static PyCodeObject *codeobj_f78450d223e6fbdc5cb47d0d0172f473;
static PyCodeObject *codeobj_ad10a616083812422069e1a160e73a91;
static PyCodeObject *codeobj_9aa7262a7417816a6cb57960342d3e7c;
static PyCodeObject *codeobj_04732c936e12ba8923892a44f621943f;
static PyCodeObject *codeobj_f6e016ed06d156761cdca4a3dfd85435;
static PyCodeObject *codeobj_e76650cc78ad456b9551ebe63c1cbd86;
static PyCodeObject *codeobj_45b689814bd4e3f025436fdcba32e0f5;
static PyCodeObject *codeobj_052470c091f66b71ce795db70fa7a456;
static PyCodeObject *codeobj_a5d87279d711d228102021bfeeb44c8e;
static PyCodeObject *codeobj_23e0933a40be4b58aced2fc8491e9cc9;
static PyCodeObject *codeobj_98bfa4a11297bbee76388d763c717d98;
static PyCodeObject *codeobj_f2aed35b33d5273377057c330726e066;
static PyCodeObject *codeobj_00563a3da54566a75fd89930386946fb;
static PyCodeObject *codeobj_04215aac000759f635cebe6dea1aabd2;
static PyCodeObject *codeobj_a3e864f72c756fbd7103569806094828;
static PyCodeObject *codeobj_d34e7fa9d0a9a073e3e2919ce741ac99;
static PyCodeObject *codeobj_7f08bde89c33459989b884612429b130;
static PyCodeObject *codeobj_dfeb6940a35cfe855e683a38ee67468c;
static PyCodeObject *codeobj_f48487147fee7e31eb6d7087379f13f8;
static PyCodeObject *codeobj_d4944c88126375dcac2edbf204e19b57;
static PyCodeObject *codeobj_b7f2c45e025ecfb4ad6ed378b33cbc9a;
static PyCodeObject *codeobj_fc50c94cc3ce74fac9e18c71da769a44;
static PyCodeObject *codeobj_aa15595a07904665550c439c24c442cb;
static PyCodeObject *codeobj_306ae42acea7e19776a0ffa12bf95616;
static PyCodeObject *codeobj_bd5fdcdfd0ce72c5e520d9d7231ee5bd;
static PyCodeObject *codeobj_0f564916d75403bde61af54b601a300e;
static PyCodeObject *codeobj_5093a7f2667b9fd6ee6de026537c4829;
static PyCodeObject *codeobj_c18309fa505600f319d8328692f242e4;
static PyCodeObject *codeobj_2b639762675c06ef3a512489999ce58c;
static PyCodeObject *codeobj_9f609fa269289bcf1b79297665bdc200;
static PyCodeObject *codeobj_1aa80365393d9c0d40eb735708031842;
static PyCodeObject *codeobj_b6ad20f8157965bc9190dc2cf549ef7f;
static PyCodeObject *codeobj_b84213c719d78f914fd3a822835e46e9;
static PyCodeObject *codeobj_3912294cfaee0b8a1e51595392aebe00;
static PyCodeObject *codeobj_a1e1081c33ded1afeceb4b7992874b65;
static PyCodeObject *codeobj_0601cb44e1d3dbac1c9c1ed9bd64d329;
static PyCodeObject *codeobj_28b089b36592534c770a1c41c4ac0f8d;
static PyCodeObject *codeobj_6f7a4ccb51d7f6c845afac160b7fd6de;
static PyCodeObject *codeobj_ea2dc45aabc375cc0985145b68092107;
static PyCodeObject *codeobj_893f4d1d1c46326b9e5e29a86d292112;
static PyCodeObject *codeobj_96efac828c2ad4830615f0b05185ef73;
static PyCodeObject *codeobj_06d7943efe45ad4d3bea7629bb034d6c;
static PyCodeObject *codeobj_e3e76553c866db3adc7baac9e4d6d91e;
static PyCodeObject *codeobj_32920aa5f3b517db33ef7204959dae9a;
static PyCodeObject *codeobj_f049f63b6d73a6fb1e74e05f9f07e3bd;
static PyCodeObject *codeobj_fc8a0ad495fd8a6c24d3588227fe8dba;
static PyCodeObject *codeobj_5cec786ff60c840a926e77af5ae11910;
static PyCodeObject *codeobj_cdbdff9a801e5d6cc0a1ff37748eed35;
static PyCodeObject *codeobj_3bd0444e98b2d6ccc033e8b82127ccb8;
static PyCodeObject *codeobj_a3e089abf62f20c3c7c2fcee0a18e4e4;
static PyCodeObject *codeobj_10e5664f7147aa48ebd58e303d58d64d;
static PyCodeObject *codeobj_f2e61f5c817f824e5e1f9a37ef8331b3;
static PyCodeObject *codeobj_b5ce2a2876be695820399f7da656c505;
static PyCodeObject *codeobj_2c886d5469f0d5cb2bfbae5db4226953;
static PyCodeObject *codeobj_1db7e7340eebefc5fadeb56dd4c3c657;
static PyCodeObject *codeobj_3da858d213a48bb919b6dc1fb8a74947;
static PyCodeObject *codeobj_19de68df3db709326c639c242a9d6fb6;
static PyCodeObject *codeobj_cd4b778f360947e189967d105c8a312a;
static PyCodeObject *codeobj_6b1c92a4ca51a735ca72bd2b3d6b667a;
static PyCodeObject *codeobj_f4c2ba195324edc8c1b7da3b00db9761;
static PyCodeObject *codeobj_11662a9166233f3c1a50c68254e64daf;
static PyCodeObject *codeobj_353f723f7684e2d6c3de7645b7732a1d;
static PyCodeObject *codeobj_aae6779c8b6c4aa5639ef12110c659f9;
static PyCodeObject *codeobj_51fd03b412c69713fdca43197a4befc3;
static PyCodeObject *codeobj_e47322421c523655a14637d710d50322;
static PyCodeObject *codeobj_3c16bdab477ac61e4648571f59066c8f;
static PyCodeObject *codeobj_b4e137898b984a693682ab5a9bc843a9;
static PyCodeObject *codeobj_d167e93036e9996d422f18aaa3bedb57;
static PyCodeObject *codeobj_a78de3219b0cd1f28da91f2e11a39d19;
/* For use in "MainProgram.c". */
PyCodeObject *codeobj_main = NULL;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_37dcde0202eb7af14b0dc333d1b93a12 );
    codeobj_c59dfaa52a0eab1e739302da6b125c22 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 41, const_tuple_aaaa20f15a850620b2ec0b2fd746062e_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_aa6581d0dfab87d1c009a5155d5e7459 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 69, const_tuple_a81ae0e8e77066ad9cb26ef4d3bff3d8_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9efefce32922980f0b0390c28456cbce = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 307, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_marker_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d2195ec170930a631d2b03017cec7030 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 506, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_i_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c4c2cc39eeb8ca1d1cddc8dfd8763cae = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 525, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_p_name_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_83a35bf7b8d527b9648893b95e71fe58 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 626, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_c_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6179a74b43be2a79f261110af601a1d8 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 190, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_20258b4d00d6883e23c28deed98177c9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 191, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_60adaa08deb7bb51ee9e1d7f87db2d2e = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 193, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_1915abd295538b85adb96110a3ffcd81 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 194, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_863a1671359477bab0df6f7a770b4195 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 196, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_5ed4068f26894757e57b82c59e82b3f9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 197, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_8ebd3f823bc7c63e26ecd0134f5607a0 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 199, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_a68246feddf0c0fedded079bc3c1a935 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 200, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_b4a17be0c3e5c613963efae7a5065b73 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 202, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_e5712b9e117201cf4ef39e1f907c2190 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 203, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_d32dd44607baab9ff4ec845c9e85fa38 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 205, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_5c2637fcdb4e4148e2112555d75df96c = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 206, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_13acc59ade367ff2c72305c80a9ad1db = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 208, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_81fe453425470136de53052b8b5d2cfc = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 209, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_5a4f49d4a689dfca3b0d0bef829e6e74 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 211, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_615958cbdcd5ba77bb7bd3f4c3a9f250 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 212, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_0396916f5d91e70e9ce022bec2a94f25 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 214, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_9eb2c242aa975a043a79c48514acfbe2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 216, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_dbf48a8b044c67f61b445f9edaf89f61 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 218, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_4c77c948c5e57eadf44c9f712ef65481 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 219, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_c13c2c98256bbecc4767973a540e5729 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 221, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_d0c3b0fbe75c1187491841103b74e088 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 222, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_2ae5aee66bc783bb404fe06e053d6cf3 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 224, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_29b42187ef986eae1f1a1688bdf32bba = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 225, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_d945ec97314d2978adb7e4ecc0916009 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 227, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_05fc906c0588f7e117725864f391306c = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 228, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_f78450d223e6fbdc5cb47d0d0172f473 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 230, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_ad10a616083812422069e1a160e73a91 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 231, const_tuple_str_plain_x_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_9aa7262a7417816a6cb57960342d3e7c = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 296, const_tuple_str_plain_x_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_04732c936e12ba8923892a44f621943f = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 300, const_tuple_str_plain_x_str_plain_key_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_f6e016ed06d156761cdca4a3dfd85435 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 310, const_tuple_str_plain_x_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e76650cc78ad456b9551ebe63c1cbd86 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 507, const_tuple_str_plain_a_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_45b689814bd4e3f025436fdcba32e0f5 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 507, const_tuple_str_plain_b_str_plain_min_dist_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_052470c091f66b71ce795db70fa7a456 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 317, const_tuple_str_plain_m_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a5d87279d711d228102021bfeeb44c8e = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 355, const_tuple_str_plain_i_str_plain_self_str_plain_wstep_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_23e0933a40be4b58aced2fc8491e9cc9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 357, const_tuple_str_plain_i_str_plain_self_str_plain_hstep_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_98bfa4a11297bbee76388d763c717d98 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 502, const_tuple_str_plain_mrk_str_plain_pnt_str_plain_x_str_plain_y_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f2aed35b33d5273377057c330726e066 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 554, const_tuple_str_plain_p_name_str_plain_self_str_plain_m_name_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_00563a3da54566a75fd89930386946fb = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 561, const_tuple_str_plain_p_name_str_plain_marker_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_04215aac000759f635cebe6dea1aabd2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_module, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_main = codeobj_04215aac000759f635cebe6dea1aabd2;
    codeobj_a3e864f72c756fbd7103569806094828 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Marker, 32, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_d34e7fa9d0a9a073e3e2919ce741ac99 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ObjectCounter, 73, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_7f08bde89c33459989b884612429b130 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Point, 15, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_dfeb6940a35cfe855e683a38ee67468c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___contains__, 295, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f48487147fee7e31eb6d7087379f13f8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___getitem__, 298, const_tuple_str_plain_self_str_plain_key_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d4944c88126375dcac2edbf204e19b57 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 16, const_tuple_a11647cf1df8afa2b49f9b1f9b403e51_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b7f2c45e025ecfb4ad6ed378b33cbc9a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 33, const_tuple_73825a395eede51bac87df279c13d87a_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fc50c94cc3ce74fac9e18c71da769a44 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 74, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_aa15595a07904665550c439c24c442cb = MAKE_CODEOBJ( module_filename_obj, const_str_plain___iter__, 306, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_306ae42acea7e19776a0ffa12bf95616 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___len__, 292, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bd5fdcdfd0ce72c5e520d9d7231ee5bd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 24, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0f564916d75403bde61af54b601a300e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___str__, 21, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5093a7f2667b9fd6ee6de026537c4829 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___str__, 40, const_tuple_str_plain_self_str_plain_points_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c18309fa505600f319d8328692f242e4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__decrement, 51, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2b639762675c06ef3a512489999ce58c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__increment, 48, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9f609fa269289bcf1b79297665bdc200 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__index_of, 309, const_tuple_str_plain_self_str_plain_mark_name_str_plain_new_tuple_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1aa80365393d9c0d40eb735708031842 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_btn_action, 412, const_tuple_str_plain_self_str_plain_marker_name_str_plain_marker_color_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b6ad20f8157965bc9190dc2cf549ef7f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_point, 54, const_tuple_str_plain_self_str_plain_x_str_plain_y_str_plain_name_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b84213c719d78f914fd3a822835e46e9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_config_buttons, 387, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3912294cfaee0b8a1e51595392aebe00 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_coordinates, 27, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a1e1081c33ded1afeceb4b7992874b65 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_counter, 44, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0601cb44e1d3dbac1c9c1ed9bd64d329 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_del_btn_action, 419, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_28b089b36592534c770a1c41c4ac0f8d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_delete_covered, 523, const_tuple_9647f3cd67e95c24e19cda23b92c6ce3_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6f7a4ccb51d7f6c845afac160b7fd6de = MAKE_CODEOBJ( module_filename_obj, const_str_plain_delete_nearest, 511, const_tuple_ef22585ef0a15d1fdd17b81ee3229f4f_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ea2dc45aabc375cc0985145b68092107 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_delete_point, 60, const_tuple_str_plain_self_str_plain_name_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_893f4d1d1c46326b9e5e29a86d292112 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dereg_marker, 379, const_tuple_str_plain_self_str_plain_mark_name_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_96efac828c2ad4830615f0b05185ef73 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_draw_grid, 342, const_tuple_d6964d51a30f59ba841e4ecc54a2225e_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_06d7943efe45ad4d3bea7629bb034d6c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_draw_grid_btn_action, 330, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e3e76553c866db3adc7baac9e4d6d91e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_draw_marker, 545, const_tuple_0973355e7733aa362f4df09dc2a12073_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_32920aa5f3b517db33ef7204959dae9a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_edit_mt_item, 425, const_tuple_str_plain_self_str_plain___str_plain_new_marker_name_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f049f63b6d73a6fb1e74e05f9f07e3bd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_find_nearest, 501, const_tuple_79171cb7bc5169852d4a4b87644be836_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fc8a0ad495fd8a6c24d3588227fe8dba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_grid_color_dialog, 325, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5cec786ff60c840a926e77af5ae11910 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_list_markers, 393, const_tuple_7dc73710e87aa04d8cadac9b5f289838_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cdbdff9a801e5d6cc0a1ff37748eed35 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load_btn_action, 401, const_tuple_str_plain_self_str_plain_formats_str_plain_filename_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3bd0444e98b2d6ccc033e8b82127ccb8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_main, 639, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a3e089abf62f20c3c7c2fcee0a18e4e4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_marker_select, 322, const_tuple_str_plain_self_str_plain___tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_10e5664f7147aa48ebd58e303d58d64d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_namegen, 65, const_tuple_str_plain_self_str_plain_key_set_str_plain_name_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f2e61f5c817f824e5e1f9a37ef8331b3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_place_marker_point, 490, const_tuple_b3745be60634e8159f2d90d701687747_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b5ce2a2876be695820399f7da656c505 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_recalculate_points_positions, 573, const_tuple_51d4fca747f746d25a0febff62952ff9_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2c886d5469f0d5cb2bfbae5db4226953 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_redraw_grid, 339, const_tuple_str_plain_self_str_plain___tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1db7e7340eebefc5fadeb56dd4c3c657 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_reg_marker, 367, const_tuple_be1deddea78092a669e6364afea2bdf9_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3da858d213a48bb919b6dc1fb8a74947 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_remove_marker_points, 537, const_tuple_b3745be60634e8159f2d90d701687747_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_19de68df3db709326c639c242a9d6fb6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_restore_markers, 597, const_tuple_c530375e859d477735dca92c794c212c_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cd4b778f360947e189967d105c8a312a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_save_markers, 585, const_tuple_2c6e60a301c3b936241c99ba1e4ca6dd_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6b1c92a4ca51a735ca72bd2b3d6b667a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_scroll_canvas, 486, const_tuple_str_plain_self_str_plain_event_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f4c2ba195324edc8c1b7da3b00db9761 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_show_image, 437, const_tuple_c3841b9b6a5cb1cb94fc20755c0cba04_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_11662a9166233f3c1a50c68254e64daf = MAKE_CODEOBJ( module_filename_obj, const_str_plain_show_zoom, 478, const_tuple_str_plain_self_str_plain___str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_353f723f7684e2d6c3de7645b7732a1d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_showxy, 473, const_tuple_str_plain_self_str_plain_event_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_aae6779c8b6c4aa5639ef12110c659f9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_start, 277, const_tuple_str_plain_self_str_plain_value_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_51fd03b412c69713fdca43197a4befc3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stop, 286, const_tuple_str_plain_self_str_plain_ifexit_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e47322421c523655a14637d710d50322 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_store_mouse_pos, 482, const_tuple_str_plain_self_str_plain_event_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3c16bdab477ac61e4648571f59066c8f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wipe, 316, const_tuple_str_plain_self_str_plain_names_str_plain_name_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b4e137898b984a693682ab5a9bc843a9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_zoom, 460, const_tuple_str_plain_self_str_plain_zf_str_plain_new_zoom_factor_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d167e93036e9996d422f18aaa3bedb57 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_zoom_in, 452, const_tuple_str_plain_self_str_plain_zfactor_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a78de3219b0cd1f28da91f2e11a39d19 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_zoom_out, 456, const_tuple_str_plain_self_str_plain_zfactor_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *__main__$$$function_6___str__$$$genexpr_1_genexpr_maker( void );


static PyObject *__main__$$$function_12_namegen$$$genexpr_1_genexpr_maker( void );


static PyObject *__main__$$$function_19___iter__$$$genexpr_1_genexpr_maker( void );


static PyObject *__main__$$$function_44_find_nearest$$$genexpr_1_genexpr_maker( void );


static PyObject *__main__$$$function_46_delete_covered$$$genexpr_1_genexpr_maker( void );


static PyObject *__main__$$$function_51_restore_markers$$$genexpr_1_genexpr_maker( void );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1_complex_call_helper_star_list( PyObject **python_pars );


static PyObject *MAKE_FUNCTION___main__$$$function_10_add_point( PyObject *annotations );


static PyObject *MAKE_FUNCTION___main__$$$function_11_delete_point( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_12_namegen(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_10_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_11_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_12_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_13_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_14_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_15_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_16_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_17_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_18_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_19_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_20_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_21_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_22_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_23_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_24_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_25_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_26_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_27_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_28_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_2_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_3_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_4_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_5_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_6_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_7_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_8_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_9_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_14_start(  );


static PyObject *MAKE_FUNCTION___main__$$$function_15_stop(  );


static PyObject *MAKE_FUNCTION___main__$$$function_16___len__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_17___contains__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_17___contains__$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_18___getitem__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_18___getitem__$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_19___iter__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_20__index_of(  );


static PyObject *MAKE_FUNCTION___main__$$$function_20__index_of$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_21_wipe(  );


static PyObject *MAKE_FUNCTION___main__$$$function_22_marker_select(  );


static PyObject *MAKE_FUNCTION___main__$$$function_23_grid_color_dialog(  );


static PyObject *MAKE_FUNCTION___main__$$$function_24_draw_grid_btn_action(  );


static PyObject *MAKE_FUNCTION___main__$$$function_25_redraw_grid(  );


static PyObject *MAKE_FUNCTION___main__$$$function_26_draw_grid( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_27_reg_marker( PyObject *annotations );


static PyObject *MAKE_FUNCTION___main__$$$function_28_dereg_marker(  );


static PyObject *MAKE_FUNCTION___main__$$$function_29_config_buttons(  );


static PyObject *MAKE_FUNCTION___main__$$$function_2___str__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_30_list_markers(  );


static PyObject *MAKE_FUNCTION___main__$$$function_31_load_btn_action(  );


static PyObject *MAKE_FUNCTION___main__$$$function_32_add_btn_action(  );


static PyObject *MAKE_FUNCTION___main__$$$function_33_del_btn_action(  );


static PyObject *MAKE_FUNCTION___main__$$$function_34_edit_mt_item(  );


static PyObject *MAKE_FUNCTION___main__$$$function_35_show_image(  );


static PyObject *MAKE_FUNCTION___main__$$$function_36_zoom_in(  );


static PyObject *MAKE_FUNCTION___main__$$$function_37_zoom_out(  );


static PyObject *MAKE_FUNCTION___main__$$$function_38_zoom( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_39_showxy(  );


static PyObject *MAKE_FUNCTION___main__$$$function_3___repr__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_40_show_zoom(  );


static PyObject *MAKE_FUNCTION___main__$$$function_41_store_mouse_pos(  );


static PyObject *MAKE_FUNCTION___main__$$$function_42_scroll_canvas(  );


static PyObject *MAKE_FUNCTION___main__$$$function_43_place_marker_point(  );


static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_2_lambda(  );


static PyObject *MAKE_FUNCTION___main__$$$function_45_delete_nearest( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_46_delete_covered( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_47_remove_marker_points(  );


static PyObject *MAKE_FUNCTION___main__$$$function_48_draw_marker( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_49_recalculate_points_positions( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_4_coordinates(  );


static PyObject *MAKE_FUNCTION___main__$$$function_50_save_markers(  );


static PyObject *MAKE_FUNCTION___main__$$$function_51_restore_markers(  );


static PyObject *MAKE_FUNCTION___main__$$$function_52_main(  );


static PyObject *MAKE_FUNCTION___main__$$$function_5___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION___main__$$$function_6___str__(  );


static PyObject *MAKE_FUNCTION___main__$$$function_7_counter(  );


static PyObject *MAKE_FUNCTION___main__$$$function_8__increment(  );


static PyObject *MAKE_FUNCTION___main__$$$function_9__decrement(  );


// The module function definitions.
static PyObject *impl___main__$$$function_1___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_new_name = python_pars[ 1 ];
    PyObject *par_new_x = python_pars[ 2 ];
    PyObject *par_new_y = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_d4944c88126375dcac2edbf204e19b57;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d4944c88126375dcac2edbf204e19b57 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d4944c88126375dcac2edbf204e19b57, codeobj_d4944c88126375dcac2edbf204e19b57, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d4944c88126375dcac2edbf204e19b57 = cache_frame_d4944c88126375dcac2edbf204e19b57;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d4944c88126375dcac2edbf204e19b57 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d4944c88126375dcac2edbf204e19b57 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_new_x );
        tmp_int_arg_1 = par_new_x;
        tmp_assattr_name_1 = PyNumber_Int( tmp_int_arg_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 17;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_x, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 17;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_int_arg_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_new_y );
        tmp_int_arg_2 = par_new_y;
        tmp_assattr_name_2 = PyNumber_Int( tmp_int_arg_2 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 18;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_y, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 18;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_new_name );
        tmp_assattr_name_3 = par_new_name;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_name, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 19;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d4944c88126375dcac2edbf204e19b57 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d4944c88126375dcac2edbf204e19b57 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d4944c88126375dcac2edbf204e19b57, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d4944c88126375dcac2edbf204e19b57->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d4944c88126375dcac2edbf204e19b57, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d4944c88126375dcac2edbf204e19b57,
        type_description_1,
        par_self,
        par_new_name,
        par_new_x,
        par_new_y
    );


    // Release cached frame.
    if ( frame_d4944c88126375dcac2edbf204e19b57 == cache_frame_d4944c88126375dcac2edbf204e19b57 )
    {
        Py_DECREF( frame_d4944c88126375dcac2edbf204e19b57 );
    }
    cache_frame_d4944c88126375dcac2edbf204e19b57 = NULL;

    assertFrameObject( frame_d4944c88126375dcac2edbf204e19b57 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_new_name );
    Py_DECREF( par_new_name );
    par_new_name = NULL;

    CHECK_OBJECT( (PyObject *)par_new_x );
    Py_DECREF( par_new_x );
    par_new_x = NULL;

    CHECK_OBJECT( (PyObject *)par_new_y );
    Py_DECREF( par_new_y );
    par_new_y = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_new_name );
    Py_DECREF( par_new_name );
    par_new_name = NULL;

    CHECK_OBJECT( (PyObject *)par_new_x );
    Py_DECREF( par_new_x );
    par_new_x = NULL;

    CHECK_OBJECT( (PyObject *)par_new_y );
    Py_DECREF( par_new_y );
    par_new_y = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_2___str__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0f564916d75403bde61af54b601a300e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0f564916d75403bde61af54b601a300e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0f564916d75403bde61af54b601a300e, codeobj_0f564916d75403bde61af54b601a300e, module___main__, sizeof(void *) );
    frame_0f564916d75403bde61af54b601a300e = cache_frame_0f564916d75403bde61af54b601a300e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0f564916d75403bde61af54b601a300e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0f564916d75403bde61af54b601a300e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        tmp_source_name_1 = const_str_digest_a6c24e7eda67112764a21ae5ba836efb;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_x );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 22;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_y );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 22;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_0f564916d75403bde61af54b601a300e->m_frame.f_lineno = 22;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 22;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f564916d75403bde61af54b601a300e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f564916d75403bde61af54b601a300e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f564916d75403bde61af54b601a300e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0f564916d75403bde61af54b601a300e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0f564916d75403bde61af54b601a300e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0f564916d75403bde61af54b601a300e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0f564916d75403bde61af54b601a300e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0f564916d75403bde61af54b601a300e == cache_frame_0f564916d75403bde61af54b601a300e )
    {
        Py_DECREF( frame_0f564916d75403bde61af54b601a300e );
    }
    cache_frame_0f564916d75403bde61af54b601a300e = NULL;

    assertFrameObject( frame_0f564916d75403bde61af54b601a300e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_2___str__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_2___str__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_3___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd, codeobj_bd5fdcdfd0ce72c5e520d9d7231ee5bd, module___main__, sizeof(void *) );
    frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd = cache_frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_4;
        tmp_source_name_1 = const_str_digest_a2135bac7a55a5f1c007dd16df1fb6fc;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_name );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 25;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_x );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 25;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_y );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 25;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd->m_frame.f_lineno = 25;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 25;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd == cache_frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd )
    {
        Py_DECREF( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );
    }
    cache_frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd = NULL;

    assertFrameObject( frame_bd5fdcdfd0ce72c5e520d9d7231ee5bd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_3___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_3___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_4_coordinates( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_3912294cfaee0b8a1e51595392aebe00;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3912294cfaee0b8a1e51595392aebe00 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3912294cfaee0b8a1e51595392aebe00, codeobj_3912294cfaee0b8a1e51595392aebe00, module___main__, sizeof(void *) );
    frame_3912294cfaee0b8a1e51595392aebe00 = cache_frame_3912294cfaee0b8a1e51595392aebe00;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3912294cfaee0b8a1e51595392aebe00 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3912294cfaee0b8a1e51595392aebe00 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_x );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 29;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_y );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_return_value );

            exception_lineno = 29;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3912294cfaee0b8a1e51595392aebe00 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3912294cfaee0b8a1e51595392aebe00 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3912294cfaee0b8a1e51595392aebe00 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3912294cfaee0b8a1e51595392aebe00, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3912294cfaee0b8a1e51595392aebe00->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3912294cfaee0b8a1e51595392aebe00, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3912294cfaee0b8a1e51595392aebe00,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_3912294cfaee0b8a1e51595392aebe00 == cache_frame_3912294cfaee0b8a1e51595392aebe00 )
    {
        Py_DECREF( frame_3912294cfaee0b8a1e51595392aebe00 );
    }
    cache_frame_3912294cfaee0b8a1e51595392aebe00 = NULL;

    assertFrameObject( frame_3912294cfaee0b8a1e51595392aebe00 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_4_coordinates );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_4_coordinates );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_5___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_color = python_pars[ 2 ];
    PyObject *par_counter = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_b7f2c45e025ecfb4ad6ed378b33cbc9a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b7f2c45e025ecfb4ad6ed378b33cbc9a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b7f2c45e025ecfb4ad6ed378b33cbc9a, codeobj_b7f2c45e025ecfb4ad6ed378b33cbc9a, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b7f2c45e025ecfb4ad6ed378b33cbc9a = cache_frame_b7f2c45e025ecfb4ad6ed378b33cbc9a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_name );
        tmp_assattr_name_1 = par_name;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 34;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_color );
        tmp_assattr_name_2 = par_color;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_color, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 35;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_counter );
        tmp_assattr_name_3 = par_counter;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__count, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_name_4 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_points, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 37;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = const_str_empty;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_last_point, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 38;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b7f2c45e025ecfb4ad6ed378b33cbc9a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b7f2c45e025ecfb4ad6ed378b33cbc9a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b7f2c45e025ecfb4ad6ed378b33cbc9a,
        type_description_1,
        par_self,
        par_name,
        par_color,
        par_counter
    );


    // Release cached frame.
    if ( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a == cache_frame_b7f2c45e025ecfb4ad6ed378b33cbc9a )
    {
        Py_DECREF( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a );
    }
    cache_frame_b7f2c45e025ecfb4ad6ed378b33cbc9a = NULL;

    assertFrameObject( frame_b7f2c45e025ecfb4ad6ed378b33cbc9a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_5___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    CHECK_OBJECT( (PyObject *)par_counter );
    Py_DECREF( par_counter );
    par_counter = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    CHECK_OBJECT( (PyObject *)par_counter );
    Py_DECREF( par_counter );
    par_counter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_5___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_6___str__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *var_points = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_5093a7f2667b9fd6ee6de026537c4829;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_5093a7f2667b9fd6ee6de026537c4829 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5093a7f2667b9fd6ee6de026537c4829, codeobj_5093a7f2667b9fd6ee6de026537c4829, module___main__, sizeof(void *)+sizeof(void *) );
    frame_5093a7f2667b9fd6ee6de026537c4829 = cache_frame_5093a7f2667b9fd6ee6de026537c4829;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5093a7f2667b9fd6ee6de026537c4829 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5093a7f2667b9fd6ee6de026537c4829 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_str_chr_59;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( PyCell_GET( par_self ) );
            tmp_source_name_2 = PyCell_GET( par_self );
            tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_points );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 41;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 41;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_2;
        }
        // Tried code:
        tmp_args_element_name_1 = __main__$$$function_6___str__$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] = par_self;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_6___str__ );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__$$$function_6___str__ );
        return NULL;
        outline_result_1:;
        frame_5093a7f2667b9fd6ee6de026537c4829->m_frame.f_lineno = 41;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 41;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        assert( var_points == NULL );
        var_points = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_4;
        tmp_source_name_3 = const_str_digest_8800f774b27d44e11f6e7dc799e181fc;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_4 = PyCell_GET( par_self );
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_name );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 42;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_5 = PyCell_GET( par_self );
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_color );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 42;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_points );
        tmp_args_element_name_4 = var_points;
        frame_5093a7f2667b9fd6ee6de026537c4829->m_frame.f_lineno = 42;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_called_instance_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 42;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        frame_5093a7f2667b9fd6ee6de026537c4829->m_frame.f_lineno = 42;
        tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_91_str_chr_123_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 42;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        frame_5093a7f2667b9fd6ee6de026537c4829->m_frame.f_lineno = 42;
        tmp_return_value = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_93_str_chr_125_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 42;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5093a7f2667b9fd6ee6de026537c4829 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5093a7f2667b9fd6ee6de026537c4829 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5093a7f2667b9fd6ee6de026537c4829 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5093a7f2667b9fd6ee6de026537c4829, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5093a7f2667b9fd6ee6de026537c4829->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5093a7f2667b9fd6ee6de026537c4829, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5093a7f2667b9fd6ee6de026537c4829,
        type_description_1,
        par_self,
        var_points
    );


    // Release cached frame.
    if ( frame_5093a7f2667b9fd6ee6de026537c4829 == cache_frame_5093a7f2667b9fd6ee6de026537c4829 )
    {
        Py_DECREF( frame_5093a7f2667b9fd6ee6de026537c4829 );
    }
    cache_frame_5093a7f2667b9fd6ee6de026537c4829 = NULL;

    assertFrameObject( frame_5093a7f2667b9fd6ee6de026537c4829 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_6___str__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_points );
    Py_DECREF( var_points );
    var_points = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_points );
    var_points = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_6___str__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_6___str__$$$genexpr_1_genexpr_locals {
    PyObject *var_name;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_6___str__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_6___str__$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_6___str__$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_name = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_c59dfaa52a0eab1e739302da6b125c22, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 41;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_name;
            generator_heap->var_name = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_name );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_unicode_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = PyCell_GET( generator->m_closure[1] );
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( generator_heap->var_name );
        tmp_subscript_name_1 = generator_heap->var_name;
        tmp_unicode_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_unicode_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_expression_name_1 = PyObject_Unicode( tmp_unicode_arg_1 );
        Py_DECREF( tmp_unicode_arg_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_unicode_arg_1, sizeof(PyObject *), &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_unicode_arg_1, sizeof(PyObject *), &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 41;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 41;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_name,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_name );
    generator_heap->var_name = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_name );
    generator_heap->var_name = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_6___str__$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_6___str__$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_d7061b71d49c6b02992636cdcd0fc09a,
#endif
        codeobj_c59dfaa52a0eab1e739302da6b125c22,
        2,
        sizeof(struct __main__$$$function_6___str__$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_7_counter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_a1e1081c33ded1afeceb4b7992874b65;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a1e1081c33ded1afeceb4b7992874b65 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a1e1081c33ded1afeceb4b7992874b65, codeobj_a1e1081c33ded1afeceb4b7992874b65, module___main__, sizeof(void *) );
    frame_a1e1081c33ded1afeceb4b7992874b65 = cache_frame_a1e1081c33ded1afeceb4b7992874b65;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a1e1081c33ded1afeceb4b7992874b65 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a1e1081c33ded1afeceb4b7992874b65 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__count );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 46;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a1e1081c33ded1afeceb4b7992874b65 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a1e1081c33ded1afeceb4b7992874b65 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a1e1081c33ded1afeceb4b7992874b65 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a1e1081c33ded1afeceb4b7992874b65, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a1e1081c33ded1afeceb4b7992874b65->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a1e1081c33ded1afeceb4b7992874b65, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a1e1081c33ded1afeceb4b7992874b65,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a1e1081c33ded1afeceb4b7992874b65 == cache_frame_a1e1081c33ded1afeceb4b7992874b65 )
    {
        Py_DECREF( frame_a1e1081c33ded1afeceb4b7992874b65 );
    }
    cache_frame_a1e1081c33ded1afeceb4b7992874b65 = NULL;

    assertFrameObject( frame_a1e1081c33ded1afeceb4b7992874b65 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_7_counter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_7_counter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_8__increment( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    struct Nuitka_FrameObject *frame_2b639762675c06ef3a512489999ce58c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_2b639762675c06ef3a512489999ce58c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2b639762675c06ef3a512489999ce58c, codeobj_2b639762675c06ef3a512489999ce58c, module___main__, sizeof(void *) );
    frame_2b639762675c06ef3a512489999ce58c = cache_frame_2b639762675c06ef3a512489999ce58c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2b639762675c06ef3a512489999ce58c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2b639762675c06ef3a512489999ce58c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__count );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_1__start == NULL );
        tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;
            type_description_1 = "o";
            goto try_except_handler_2;
        }
        assert( tmp_inplace_assign_attr_1__end == NULL );
        tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__count, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;
            type_description_1 = "o";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2b639762675c06ef3a512489999ce58c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2b639762675c06ef3a512489999ce58c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2b639762675c06ef3a512489999ce58c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2b639762675c06ef3a512489999ce58c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2b639762675c06ef3a512489999ce58c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2b639762675c06ef3a512489999ce58c,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2b639762675c06ef3a512489999ce58c == cache_frame_2b639762675c06ef3a512489999ce58c )
    {
        Py_DECREF( frame_2b639762675c06ef3a512489999ce58c );
    }
    cache_frame_2b639762675c06ef3a512489999ce58c = NULL;

    assertFrameObject( frame_2b639762675c06ef3a512489999ce58c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_8__increment );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_8__increment );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_9__decrement( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    struct Nuitka_FrameObject *frame_c18309fa505600f319d8328692f242e4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_c18309fa505600f319d8328692f242e4 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c18309fa505600f319d8328692f242e4, codeobj_c18309fa505600f319d8328692f242e4, module___main__, sizeof(void *) );
    frame_c18309fa505600f319d8328692f242e4 = cache_frame_c18309fa505600f319d8328692f242e4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c18309fa505600f319d8328692f242e4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c18309fa505600f319d8328692f242e4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__count );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 52;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_1__start == NULL );
        tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 52;
            type_description_1 = "o";
            goto try_except_handler_2;
        }
        assert( tmp_inplace_assign_attr_1__end == NULL );
        tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__count, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 52;
            type_description_1 = "o";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c18309fa505600f319d8328692f242e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c18309fa505600f319d8328692f242e4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c18309fa505600f319d8328692f242e4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c18309fa505600f319d8328692f242e4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c18309fa505600f319d8328692f242e4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c18309fa505600f319d8328692f242e4,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c18309fa505600f319d8328692f242e4 == cache_frame_c18309fa505600f319d8328692f242e4 )
    {
        Py_DECREF( frame_c18309fa505600f319d8328692f242e4 );
    }
    cache_frame_c18309fa505600f319d8328692f242e4 = NULL;

    assertFrameObject( frame_c18309fa505600f319d8328692f242e4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_9__decrement );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_9__decrement );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_10_add_point( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_x = python_pars[ 1 ];
    PyObject *par_y = python_pars[ 2 ];
    PyObject *var_name = NULL;
    struct Nuitka_FrameObject *frame_b6ad20f8157965bc9190dc2cf549ef7f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b6ad20f8157965bc9190dc2cf549ef7f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b6ad20f8157965bc9190dc2cf549ef7f, codeobj_b6ad20f8157965bc9190dc2cf549ef7f, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b6ad20f8157965bc9190dc2cf549ef7f = cache_frame_b6ad20f8157965bc9190dc2cf549ef7f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b6ad20f8157965bc9190dc2cf549ef7f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b6ad20f8157965bc9190dc2cf549ef7f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_b6ad20f8157965bc9190dc2cf549ef7f->m_frame.f_lineno = 55;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_namegen );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 55;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_name == NULL );
        var_name = tmp_assign_source_1;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_ass_subscript_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Point );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Point );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Point" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 56;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( var_name );
        tmp_args_element_name_1 = var_name;
        CHECK_OBJECT( par_x );
        tmp_args_element_name_2 = par_x;
        CHECK_OBJECT( par_y );
        tmp_args_element_name_3 = par_y;
        frame_b6ad20f8157965bc9190dc2cf549ef7f->m_frame.f_lineno = 56;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 56;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
        if ( tmp_ass_subscribed_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_ass_subvalue_1 );

            exception_lineno = 56;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_name );
        tmp_ass_subscript_1 = var_name;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscribed_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 56;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_b6ad20f8157965bc9190dc2cf549ef7f->m_frame.f_lineno = 57;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain__increment );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_name );
        tmp_assattr_name_1 = var_name;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_last_point, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 58;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b6ad20f8157965bc9190dc2cf549ef7f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b6ad20f8157965bc9190dc2cf549ef7f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b6ad20f8157965bc9190dc2cf549ef7f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b6ad20f8157965bc9190dc2cf549ef7f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b6ad20f8157965bc9190dc2cf549ef7f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b6ad20f8157965bc9190dc2cf549ef7f,
        type_description_1,
        par_self,
        par_x,
        par_y,
        var_name
    );


    // Release cached frame.
    if ( frame_b6ad20f8157965bc9190dc2cf549ef7f == cache_frame_b6ad20f8157965bc9190dc2cf549ef7f )
    {
        Py_DECREF( frame_b6ad20f8157965bc9190dc2cf549ef7f );
    }
    cache_frame_b6ad20f8157965bc9190dc2cf549ef7f = NULL;

    assertFrameObject( frame_b6ad20f8157965bc9190dc2cf549ef7f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_10_add_point );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    CHECK_OBJECT( (PyObject *)var_name );
    Py_DECREF( var_name );
    var_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_10_add_point );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_11_delete_point( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_ea2dc45aabc375cc0985145b68092107;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ea2dc45aabc375cc0985145b68092107 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ea2dc45aabc375cc0985145b68092107, codeobj_ea2dc45aabc375cc0985145b68092107, module___main__, sizeof(void *)+sizeof(void *) );
    frame_ea2dc45aabc375cc0985145b68092107 = cache_frame_ea2dc45aabc375cc0985145b68092107;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ea2dc45aabc375cc0985145b68092107 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ea2dc45aabc375cc0985145b68092107 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_name );
        tmp_compexpr_left_1 = par_name;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 61;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 61;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_delsubscr_target_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_delsubscr_subscript_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_delsubscr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_points );
            if ( tmp_delsubscr_target_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 62;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_name );
            tmp_delsubscr_subscript_1 = par_name;
            tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
            Py_DECREF( tmp_delsubscr_target_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 62;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_ea2dc45aabc375cc0985145b68092107->m_frame.f_lineno = 63;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__decrement );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 63;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ea2dc45aabc375cc0985145b68092107 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ea2dc45aabc375cc0985145b68092107 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ea2dc45aabc375cc0985145b68092107, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ea2dc45aabc375cc0985145b68092107->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ea2dc45aabc375cc0985145b68092107, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ea2dc45aabc375cc0985145b68092107,
        type_description_1,
        par_self,
        par_name
    );


    // Release cached frame.
    if ( frame_ea2dc45aabc375cc0985145b68092107 == cache_frame_ea2dc45aabc375cc0985145b68092107 )
    {
        Py_DECREF( frame_ea2dc45aabc375cc0985145b68092107 );
    }
    cache_frame_ea2dc45aabc375cc0985145b68092107 = NULL;

    assertFrameObject( frame_ea2dc45aabc375cc0985145b68092107 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_11_delete_point );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_11_delete_point );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_12_namegen( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *var_key_set = PyCell_EMPTY();
    PyObject *var_name = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_10e5664f7147aa48ebd58e303d58d64d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_10e5664f7147aa48ebd58e303d58d64d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_plain_ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789;
        assert( PyCell_GET( var_key_set ) == NULL );
        Py_INCREF( tmp_assign_source_1 );
        PyCell_SET( var_key_set, tmp_assign_source_1 );

    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_str_empty;
        assert( var_name == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_name = tmp_assign_source_2;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_10e5664f7147aa48ebd58e303d58d64d, codeobj_10e5664f7147aa48ebd58e303d58d64d, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_10e5664f7147aa48ebd58e303d58d64d = cache_frame_10e5664f7147aa48ebd58e303d58d64d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_10e5664f7147aa48ebd58e303d58d64d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_10e5664f7147aa48ebd58e303d58d64d ) == 2 ); // Frame stack

    // Framed code:
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( var_name );
        tmp_compexpr_left_1 = var_name;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "oco";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "oco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_name );
        tmp_operand_name_2 = var_name;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "oco";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res == 0 ) ? Py_True : Py_False;
        tmp_operand_name_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_operand_name_1 = tmp_or_left_value_1;
        or_end_1:;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "oco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_2 = const_str_empty;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_kw_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_n_repeat );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_n_repeat );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "n_repeat" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 69;
                type_description_1 = "oco";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_1;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_randint );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_randint );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "randint" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 69;
                type_description_1 = "oco";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_2;
            tmp_args_name_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            tmp_tuple_element_1 = const_int_pos_5;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            tmp_kw_name_1 = PyDict_Copy( const_dict_1a9f45c4f6fc80524900a0b81a21cc2c );
            frame_10e5664f7147aa48ebd58e303d58d64d->m_frame.f_lineno = 69;
            tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 69;
                type_description_1 = "oco";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 69;
                type_description_1 = "oco";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = tmp_genexpr_1__$0;
                tmp_genexpr_1__$0 = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        tmp_args_element_name_1 = __main__$$$function_12_namegen$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] = var_key_set;
        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[1] );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_12_namegen );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__$$$function_12_namegen );
        return NULL;
        outline_result_1:;
        frame_10e5664f7147aa48ebd58e303d58d64d->m_frame.f_lineno = 69;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;
            type_description_1 = "oco";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_name;
            assert( old != NULL );
            var_name = tmp_assign_source_3;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 68;
        type_description_1 = "oco";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_10e5664f7147aa48ebd58e303d58d64d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_10e5664f7147aa48ebd58e303d58d64d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_10e5664f7147aa48ebd58e303d58d64d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_10e5664f7147aa48ebd58e303d58d64d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_10e5664f7147aa48ebd58e303d58d64d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_10e5664f7147aa48ebd58e303d58d64d,
        type_description_1,
        par_self,
        var_key_set,
        var_name
    );


    // Release cached frame.
    if ( frame_10e5664f7147aa48ebd58e303d58d64d == cache_frame_10e5664f7147aa48ebd58e303d58d64d )
    {
        Py_DECREF( frame_10e5664f7147aa48ebd58e303d58d64d );
    }
    cache_frame_10e5664f7147aa48ebd58e303d58d64d = NULL;

    assertFrameObject( frame_10e5664f7147aa48ebd58e303d58d64d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_name );
    tmp_return_value = var_name;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_12_namegen );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_key_set );
    Py_DECREF( var_key_set );
    var_key_set = NULL;

    CHECK_OBJECT( (PyObject *)var_name );
    Py_DECREF( var_name );
    var_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_key_set );
    Py_DECREF( var_key_set );
    var_key_set = NULL;

    CHECK_OBJECT( (PyObject *)var_name );
    Py_DECREF( var_name );
    var_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_12_namegen );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_12_namegen$$$genexpr_1_genexpr_locals {
    PyObject *var_n;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_12_namegen$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_12_namegen$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_12_namegen$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_n = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_aa6581d0dfab87d1c009a5155d5e7459, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 69;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_n;
            generator_heap->var_n = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_n );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "key_set" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 69;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_subscribed_name_1 = PyCell_GET( generator->m_closure[1] );
        CHECK_OBJECT( generator_heap->var_n );
        tmp_subscript_name_1 = generator_heap->var_n;
        tmp_expression_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 69;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 69;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 69;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_n,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_n );
    generator_heap->var_n = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_n );
    generator_heap->var_n = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_12_namegen$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_12_namegen$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_2afb393e5bf92d069ac752bb2020a148,
#endif
        codeobj_aa6581d0dfab87d1c009a5155d5e7459,
        2,
        sizeof(struct __main__$$$function_12_namegen$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_13___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_FrameObject *frame_fc50c94cc3ce74fac9e18c71da769a44;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_fc50c94cc3ce74fac9e18c71da769a44 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fc50c94cc3ce74fac9e18c71da769a44, codeobj_fc50c94cc3ce74fac9e18c71da769a44, module___main__, sizeof(void *) );
    frame_fc50c94cc3ce74fac9e18c71da769a44 = cache_frame_fc50c94cc3ce74fac9e18c71da769a44;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fc50c94cc3ce74fac9e18c71da769a44 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fc50c94cc3ce74fac9e18c71da769a44 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 75;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 75;
        tmp_assattr_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_Tk );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 75;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_1 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_MW, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 75;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_assattr_target_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 76;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_DoubleVar );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 76;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_9a135619cf9f4e2dc0e57013204896a8 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 76;
        tmp_assattr_name_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 76;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_2 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__zoom_factor, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 76;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_2 = PyCell_GET( par_self );
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_MW );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 77;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_minsize, &PyTuple_GET_ITEM( const_tuple_int_pos_600_int_pos_600_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_4 = PyCell_GET( par_self );
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_MW );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 78;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_protocol );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 78;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_plain_WM_DELETE_WINDOW;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_5 = PyCell_GET( par_self );
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stop );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 78;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 78;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 78;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_6 = PyCell_GET( par_self );
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_MW );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 79;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 79;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_title, &PyTuple_GET_ITEM( const_tuple_str_digest_eeb1379f1e97d50b95bacdca6f3396ac_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 79;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_right_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_name_5;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_assattr_target_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_path );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_path );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "path" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_3;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_dirname );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_path );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_path );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "path" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_4;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_realpath );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___file__ );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___file__ );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "__file__" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_4 = tmp_mvar_value_5;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 81;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 81;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_left_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_left_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_5 = tmp_mvar_value_6;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 81;
        tmp_compexpr_left_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_right_name_1 = const_str_chr_92;
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_right_name_1 = const_str_chr_47;
        condexpr_end_1:;
        tmp_assattr_name_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_3 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_homedir, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 81;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_name_1;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_2;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_called_name_7;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_right_name_3;
        PyObject *tmp_assattr_target_4;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_7;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_Image );
        if ( tmp_called_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_1 = const_tuple_str_plain_photo_tuple;
        tmp_dict_key_1 = const_str_plain_file;
        tmp_left_name_3 = const_str_plain_img;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_8 == NULL )
        {
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_7 = tmp_mvar_value_8;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 84;
        tmp_compexpr_left_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_7 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        tmp_right_name_2 = const_str_chr_92;
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_right_name_2 = const_str_chr_47;
        condexpr_end_2:;
        tmp_left_name_2 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_2 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_3 = const_str_digest_ab2827542477cf85f83a30583bea4580;
        tmp_dict_value_1 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_2, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 84;
        tmp_assattr_name_4 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_1, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_4 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_iconimg, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 84;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_called_name_8;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 85;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_8 = tmp_mvar_value_9;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 85;
        tmp_compexpr_left_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_8 );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 85;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 85;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_10;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( PyCell_GET( par_self ) );
            tmp_source_name_10 = PyCell_GET( par_self );
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_MW );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                type_description_1 = "c";
                goto frame_exception_exit_1;
            }
            frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 86;
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_iconbitmap, &PyTuple_GET_ITEM( const_tuple_str_digest_bac2fab41082fba55cf3968b78192136_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                type_description_1 = "c";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            PyObject *tmp_called_name_9;
            PyObject *tmp_mvar_value_10;
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

            if (unlikely( tmp_mvar_value_10 == NULL ))
            {
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
            }

            if ( tmp_mvar_value_10 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 87;
                type_description_1 = "c";
                goto frame_exception_exit_1;
            }

            tmp_called_name_9 = tmp_mvar_value_10;
            frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 87;
            tmp_compexpr_left_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_9 );
            if ( tmp_compexpr_left_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 87;
                type_description_1 = "c";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_4 = const_str_plain_Linux;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            Py_DECREF( tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 87;
                type_description_1 = "c";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_name_10;
                PyObject *tmp_source_name_11;
                PyObject *tmp_source_name_12;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_source_name_13;
                PyObject *tmp_source_name_14;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_source_name_15;
                CHECK_OBJECT( PyCell_GET( par_self ) );
                tmp_source_name_12 = PyCell_GET( par_self );
                tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_MW );
                if ( tmp_source_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_call );
                Py_DECREF( tmp_source_name_11 );
                if ( tmp_called_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_5 = const_str_plain_wm;
                tmp_args_element_name_6 = const_str_plain_iconphoto;
                CHECK_OBJECT( PyCell_GET( par_self ) );
                tmp_source_name_14 = PyCell_GET( par_self );
                tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_MW );
                if ( tmp_source_name_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_10 );

                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__w );
                Py_DECREF( tmp_source_name_13 );
                if ( tmp_args_element_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_10 );

                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( PyCell_GET( par_self ) );
                tmp_source_name_15 = PyCell_GET( par_self );
                tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_iconimg );
                if ( tmp_args_element_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_10 );
                    Py_DECREF( tmp_args_element_name_7 );

                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 88;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_10, call_args );
                }

                Py_DECREF( tmp_called_name_10 );
                Py_DECREF( tmp_args_element_name_7 );
                Py_DECREF( tmp_args_element_name_8 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 88;
                    type_description_1 = "c";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            branch_no_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_16;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_source_name_17;
        PyObject *tmp_assattr_target_5;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 90;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_16 = tmp_mvar_value_11;
        tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_Frame );
        if ( tmp_called_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 90;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_17 = PyCell_GET( par_self );
        tmp_args_element_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_MW );
        if ( tmp_args_element_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_11 );

            exception_lineno = 90;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 90;
        {
            PyObject *call_args[] = { tmp_args_element_name_9 };
            tmp_assattr_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
        }

        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_9 );
        if ( tmp_assattr_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 90;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_5 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_left_frame, tmp_assattr_name_5 );
        Py_DECREF( tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 90;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_called_name_12;
        PyObject *tmp_source_name_18;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_args_name_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_19;
        PyObject *tmp_kw_name_3;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_12 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 91;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_18 = tmp_mvar_value_12;
        tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_Frame );
        if ( tmp_called_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 91;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_19 = PyCell_GET( par_self );
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_left_frame );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_12 );

            exception_lineno = 91;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_2 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_1 );
        tmp_kw_name_3 = PyDict_Copy( const_dict_6567b5349b15cc01325b1e3b73731e75 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 91;
        tmp_assattr_name_6 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_2, tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_3 );
        if ( tmp_assattr_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 91;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_6 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_internal_frame, tmp_assattr_name_6 );
        Py_DECREF( tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 91;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_called_name_13;
        PyObject *tmp_source_name_20;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_source_name_21;
        PyObject *tmp_assattr_target_7;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 92;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_20 = tmp_mvar_value_13;
        tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_Frame );
        if ( tmp_called_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 92;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_21 = PyCell_GET( par_self );
        tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_left_frame );
        if ( tmp_args_element_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_13 );

            exception_lineno = 92;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 92;
        {
            PyObject *call_args[] = { tmp_args_element_name_10 };
            tmp_assattr_name_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
        }

        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_10 );
        if ( tmp_assattr_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 92;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_7 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_h_scroll_frame, tmp_assattr_name_7 );
        Py_DECREF( tmp_assattr_name_7 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 92;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_22;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_source_name_23;
        PyObject *tmp_assattr_target_8;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 93;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_22 = tmp_mvar_value_14;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_Frame );
        if ( tmp_called_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 93;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_23 = PyCell_GET( par_self );
        tmp_args_element_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_internal_frame );
        if ( tmp_args_element_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );

            exception_lineno = 93;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 93;
        {
            PyObject *call_args[] = { tmp_args_element_name_11 };
            tmp_assattr_name_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_11 );
        if ( tmp_assattr_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 93;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_8 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain_image_frame, tmp_assattr_name_8 );
        Py_DECREF( tmp_assattr_name_8 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 93;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_called_name_15;
        PyObject *tmp_source_name_24;
        PyObject *tmp_mvar_value_15;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_source_name_25;
        PyObject *tmp_assattr_target_9;
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_15 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 94;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_24 = tmp_mvar_value_15;
        tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_Frame );
        if ( tmp_called_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_25 = PyCell_GET( par_self );
        tmp_args_element_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_internal_frame );
        if ( tmp_args_element_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_15 );

            exception_lineno = 94;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 94;
        {
            PyObject *call_args[] = { tmp_args_element_name_12 };
            tmp_assattr_name_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
        }

        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_12 );
        if ( tmp_assattr_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_9 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain_v_scroll_frame, tmp_assattr_name_9 );
        Py_DECREF( tmp_assattr_name_9 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_10;
        PyObject *tmp_called_name_16;
        PyObject *tmp_source_name_26;
        PyObject *tmp_mvar_value_16;
        PyObject *tmp_args_name_3;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_27;
        PyObject *tmp_kw_name_4;
        PyObject *tmp_assattr_target_10;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_16 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 96;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_26 = tmp_mvar_value_16;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_Frame );
        if ( tmp_called_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 96;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_27 = PyCell_GET( par_self );
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_MW );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_16 );

            exception_lineno = 96;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_3 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_2 );
        tmp_kw_name_4 = PyDict_Copy( const_dict_595ce05fed954a5be4fec998da079e83 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 96;
        tmp_assattr_name_10 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_3, tmp_kw_name_4 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_args_name_3 );
        Py_DECREF( tmp_kw_name_4 );
        if ( tmp_assattr_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 96;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_10 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain_ctrl_frame, tmp_assattr_name_10 );
        Py_DECREF( tmp_assattr_name_10 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 96;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_11;
        PyObject *tmp_called_name_17;
        PyObject *tmp_source_name_28;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_source_name_29;
        PyObject *tmp_assattr_target_11;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_17 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_28 = tmp_mvar_value_17;
        tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_Frame );
        if ( tmp_called_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_29 = PyCell_GET( par_self );
        tmp_args_element_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_ctrl_frame );
        if ( tmp_args_element_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_17 );

            exception_lineno = 97;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 97;
        {
            PyObject *call_args[] = { tmp_args_element_name_13 };
            tmp_assattr_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
        }

        Py_DECREF( tmp_called_name_17 );
        Py_DECREF( tmp_args_element_name_13 );
        if ( tmp_assattr_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_11 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain_btn_frame, tmp_assattr_name_11 );
        Py_DECREF( tmp_assattr_name_11 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_12;
        PyObject *tmp_called_name_18;
        PyObject *tmp_source_name_30;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_source_name_31;
        PyObject *tmp_assattr_target_12;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_18 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 98;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_30 = tmp_mvar_value_18;
        tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_Frame );
        if ( tmp_called_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 98;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_31 = PyCell_GET( par_self );
        tmp_args_element_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_ctrl_frame );
        if ( tmp_args_element_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_18 );

            exception_lineno = 98;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 98;
        {
            PyObject *call_args[] = { tmp_args_element_name_14 };
            tmp_assattr_name_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
        }

        Py_DECREF( tmp_called_name_18 );
        Py_DECREF( tmp_args_element_name_14 );
        if ( tmp_assattr_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 98;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_12 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain_table_frame, tmp_assattr_name_12 );
        Py_DECREF( tmp_assattr_name_12 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 98;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_13;
        PyObject *tmp_called_name_19;
        PyObject *tmp_source_name_32;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_source_name_33;
        PyObject *tmp_assattr_target_13;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_19 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_32 = tmp_mvar_value_19;
        tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_Frame );
        if ( tmp_called_name_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_33 = PyCell_GET( par_self );
        tmp_args_element_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_ctrl_frame );
        if ( tmp_args_element_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_19 );

            exception_lineno = 99;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 99;
        {
            PyObject *call_args[] = { tmp_args_element_name_15 };
            tmp_assattr_name_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
        }

        Py_DECREF( tmp_called_name_19 );
        Py_DECREF( tmp_args_element_name_15 );
        if ( tmp_assattr_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_13 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_13, const_str_plain_sec_btn_frame, tmp_assattr_name_13 );
        Py_DECREF( tmp_assattr_name_13 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_14;
        PyObject *tmp_called_name_20;
        PyObject *tmp_source_name_34;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_source_name_35;
        PyObject *tmp_assattr_target_14;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_20 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_34 = tmp_mvar_value_20;
        tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_Canvas );
        if ( tmp_called_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 100;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_35 = PyCell_GET( par_self );
        tmp_args_element_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_image_frame );
        if ( tmp_args_element_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_20 );

            exception_lineno = 100;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 100;
        {
            PyObject *call_args[] = { tmp_args_element_name_16 };
            tmp_assattr_name_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
        }

        Py_DECREF( tmp_called_name_20 );
        Py_DECREF( tmp_args_element_name_16 );
        if ( tmp_assattr_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 100;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_14 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_14, const_str_plain_JpgCanvas, tmp_assattr_name_14 );
        Py_DECREF( tmp_assattr_name_14 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 100;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_15;
        PyObject *tmp_called_name_21;
        PyObject *tmp_source_name_36;
        PyObject *tmp_mvar_value_21;
        PyObject *tmp_args_name_4;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_source_name_37;
        PyObject *tmp_kw_name_5;
        PyObject *tmp_assattr_target_15;
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_21 == NULL ))
        {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_21 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 101;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_36 = tmp_mvar_value_21;
        tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_Entry );
        if ( tmp_called_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 101;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_37 = PyCell_GET( par_self );
        tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_JpgCanvas );
        if ( tmp_tuple_element_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_21 );

            exception_lineno = 101;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_4 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_3 );
        tmp_kw_name_5 = PyDict_Copy( const_dict_04f25dca3d4d6c90e2b5523257528f5e );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 101;
        tmp_assattr_name_15 = CALL_FUNCTION( tmp_called_name_21, tmp_args_name_4, tmp_kw_name_5 );
        Py_DECREF( tmp_called_name_21 );
        Py_DECREF( tmp_args_name_4 );
        Py_DECREF( tmp_kw_name_5 );
        if ( tmp_assattr_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 101;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_15 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_15, const_str_plain_xyentry, tmp_assattr_name_15 );
        Py_DECREF( tmp_assattr_name_15 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 101;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_16;
        PyObject *tmp_called_name_22;
        PyObject *tmp_source_name_38;
        PyObject *tmp_mvar_value_22;
        PyObject *tmp_args_name_5;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_39;
        PyObject *tmp_kw_name_6;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_source_name_40;
        PyObject *tmp_source_name_41;
        PyObject *tmp_assattr_target_16;
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_22 == NULL ))
        {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_22 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_38 = tmp_mvar_value_22;
        tmp_called_name_22 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_Scrollbar );
        if ( tmp_called_name_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_39 = PyCell_GET( par_self );
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_v_scroll_frame );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_22 );

            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_5 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_4 );
        tmp_dict_key_2 = const_str_plain_orient;
        tmp_dict_value_2 = const_str_plain_vertical;
        tmp_kw_name_6 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_41 = PyCell_GET( par_self );
        tmp_source_name_40 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_JpgCanvas );
        if ( tmp_source_name_40 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_args_name_5 );
            Py_DECREF( tmp_kw_name_6 );

            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_yview );
        Py_DECREF( tmp_source_name_40 );
        if ( tmp_dict_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_22 );
            Py_DECREF( tmp_args_name_5 );
            Py_DECREF( tmp_kw_name_6 );

            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_6, tmp_dict_key_3, tmp_dict_value_3 );
        Py_DECREF( tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 103;
        tmp_assattr_name_16 = CALL_FUNCTION( tmp_called_name_22, tmp_args_name_5, tmp_kw_name_6 );
        Py_DECREF( tmp_called_name_22 );
        Py_DECREF( tmp_args_name_5 );
        Py_DECREF( tmp_kw_name_6 );
        if ( tmp_assattr_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_16 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_16, const_str_plain_VertImgScroll, tmp_assattr_name_16 );
        Py_DECREF( tmp_assattr_name_16 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 103;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_17;
        PyObject *tmp_called_name_23;
        PyObject *tmp_source_name_42;
        PyObject *tmp_mvar_value_23;
        PyObject *tmp_args_name_6;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_source_name_43;
        PyObject *tmp_kw_name_7;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_dict_key_5;
        PyObject *tmp_dict_value_5;
        PyObject *tmp_source_name_44;
        PyObject *tmp_source_name_45;
        PyObject *tmp_assattr_target_17;
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_23 == NULL ))
        {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_23 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_42 = tmp_mvar_value_23;
        tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_Scrollbar );
        if ( tmp_called_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_43 = PyCell_GET( par_self );
        tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_h_scroll_frame );
        if ( tmp_tuple_element_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_23 );

            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_6 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_5 );
        tmp_dict_key_4 = const_str_plain_orient;
        tmp_dict_value_4 = const_str_plain_horizontal;
        tmp_kw_name_7 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_4, tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_5 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_45 = PyCell_GET( par_self );
        tmp_source_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_JpgCanvas );
        if ( tmp_source_name_44 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_args_name_6 );
            Py_DECREF( tmp_kw_name_7 );

            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_xview );
        Py_DECREF( tmp_source_name_44 );
        if ( tmp_dict_value_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_args_name_6 );
            Py_DECREF( tmp_kw_name_7 );

            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_7, tmp_dict_key_5, tmp_dict_value_5 );
        Py_DECREF( tmp_dict_value_5 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 104;
        tmp_assattr_name_17 = CALL_FUNCTION( tmp_called_name_23, tmp_args_name_6, tmp_kw_name_7 );
        Py_DECREF( tmp_called_name_23 );
        Py_DECREF( tmp_args_name_6 );
        Py_DECREF( tmp_kw_name_7 );
        if ( tmp_assattr_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_17 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_17, const_str_plain_HorizImgScroll, tmp_assattr_name_17 );
        Py_DECREF( tmp_assattr_name_17 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 104;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_24;
        PyObject *tmp_source_name_46;
        PyObject *tmp_source_name_47;
        PyObject *tmp_call_result_6;
        PyObject *tmp_kw_name_8;
        PyObject *tmp_dict_key_6;
        PyObject *tmp_dict_value_6;
        PyObject *tmp_source_name_48;
        PyObject *tmp_source_name_49;
        PyObject *tmp_dict_key_7;
        PyObject *tmp_dict_value_7;
        PyObject *tmp_source_name_50;
        PyObject *tmp_source_name_51;
        PyObject *tmp_dict_key_8;
        PyObject *tmp_dict_value_8;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_47 = PyCell_GET( par_self );
        tmp_source_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_JpgCanvas );
        if ( tmp_source_name_46 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_configure );
        Py_DECREF( tmp_source_name_46 );
        if ( tmp_called_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_6 = const_str_plain_yscrollcommand;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_49 = PyCell_GET( par_self );
        tmp_source_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_VertImgScroll );
        if ( tmp_source_name_48 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_24 );

            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_6 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_set );
        Py_DECREF( tmp_source_name_48 );
        if ( tmp_dict_value_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_24 );

            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_8 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_6, tmp_dict_value_6 );
        Py_DECREF( tmp_dict_value_6 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_7 = const_str_plain_xscrollcommand;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_51 = PyCell_GET( par_self );
        tmp_source_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_HorizImgScroll );
        if ( tmp_source_name_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_kw_name_8 );

            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_7 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_set );
        Py_DECREF( tmp_source_name_50 );
        if ( tmp_dict_value_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_24 );
            Py_DECREF( tmp_kw_name_8 );

            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_7, tmp_dict_value_7 );
        Py_DECREF( tmp_dict_value_7 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_8 = const_str_plain_cursor;
        tmp_dict_value_8 = const_str_plain_crosshair;
        tmp_res = PyDict_SetItem( tmp_kw_name_8, tmp_dict_key_8, tmp_dict_value_8 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 105;
        tmp_call_result_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_24, tmp_kw_name_8 );
        Py_DECREF( tmp_called_name_24 );
        Py_DECREF( tmp_kw_name_8 );
        if ( tmp_call_result_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_6 );
    }
    {
        PyObject *tmp_assattr_name_18;
        PyObject *tmp_called_name_25;
        PyObject *tmp_source_name_52;
        PyObject *tmp_mvar_value_24;
        PyObject *tmp_kw_name_9;
        PyObject *tmp_dict_key_9;
        PyObject *tmp_dict_value_9;
        PyObject *tmp_left_name_4;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_4;
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_called_name_26;
        PyObject *tmp_mvar_value_25;
        PyObject *tmp_right_name_5;
        PyObject *tmp_assattr_target_18;
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_24 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_52 = tmp_mvar_value_24;
        tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_PhotoImage );
        if ( tmp_called_name_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_9 = const_str_plain_file;
        tmp_left_name_5 = const_str_plain_img;
        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_25 == NULL ))
        {
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_25 == NULL )
        {
            Py_DECREF( tmp_called_name_25 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_26 = tmp_mvar_value_25;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 107;
        tmp_compexpr_left_5 = CALL_FUNCTION_NO_ARGS( tmp_called_name_26 );
        if ( tmp_compexpr_left_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_25 );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_5 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
        Py_DECREF( tmp_compexpr_left_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_25 );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        tmp_right_name_4 = const_str_chr_92;
        goto condexpr_end_3;
        condexpr_false_3:;
        tmp_right_name_4 = const_str_chr_47;
        condexpr_end_3:;
        tmp_left_name_4 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_5, tmp_right_name_4 );
        if ( tmp_left_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_25 );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_5 = const_str_digest_b63b71117d022038ada56c3ecf438060;
        tmp_dict_value_9 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_4, tmp_right_name_5 );
        Py_DECREF( tmp_left_name_4 );
        if ( tmp_dict_value_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_25 );

            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_9 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_9, tmp_dict_key_9, tmp_dict_value_9 );
        Py_DECREF( tmp_dict_value_9 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 107;
        tmp_assattr_name_18 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_25, tmp_kw_name_9 );
        Py_DECREF( tmp_called_name_25 );
        Py_DECREF( tmp_kw_name_9 );
        if ( tmp_assattr_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_18 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_18, const_str_plain_add_btn_img, tmp_assattr_name_18 );
        Py_DECREF( tmp_assattr_name_18 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 107;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_19;
        PyObject *tmp_called_name_27;
        PyObject *tmp_source_name_53;
        PyObject *tmp_mvar_value_26;
        PyObject *tmp_kw_name_10;
        PyObject *tmp_dict_key_10;
        PyObject *tmp_dict_value_10;
        PyObject *tmp_left_name_6;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_6;
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_called_name_28;
        PyObject *tmp_mvar_value_27;
        PyObject *tmp_right_name_7;
        PyObject *tmp_assattr_target_19;
        tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_26 == NULL ))
        {
            tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_26 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_53 = tmp_mvar_value_26;
        tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_PhotoImage );
        if ( tmp_called_name_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_10 = const_str_plain_file;
        tmp_left_name_7 = const_str_plain_img;
        tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_27 == NULL ))
        {
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_27 == NULL )
        {
            Py_DECREF( tmp_called_name_27 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_28 = tmp_mvar_value_27;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 108;
        tmp_compexpr_left_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_28 );
        if ( tmp_compexpr_left_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_27 );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_6 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        Py_DECREF( tmp_compexpr_left_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_27 );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        tmp_right_name_6 = const_str_chr_92;
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_right_name_6 = const_str_chr_47;
        condexpr_end_4:;
        tmp_left_name_6 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_7, tmp_right_name_6 );
        if ( tmp_left_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_27 );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_7 = const_str_digest_071d198a42c91039f0e324fe46862605;
        tmp_dict_value_10 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_6, tmp_right_name_7 );
        Py_DECREF( tmp_left_name_6 );
        if ( tmp_dict_value_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_27 );

            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_10 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_10, tmp_dict_key_10, tmp_dict_value_10 );
        Py_DECREF( tmp_dict_value_10 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 108;
        tmp_assattr_name_19 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_27, tmp_kw_name_10 );
        Py_DECREF( tmp_called_name_27 );
        Py_DECREF( tmp_kw_name_10 );
        if ( tmp_assattr_name_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_19 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_19, const_str_plain_del_btn_img, tmp_assattr_name_19 );
        Py_DECREF( tmp_assattr_name_19 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_20;
        PyObject *tmp_called_name_29;
        PyObject *tmp_source_name_54;
        PyObject *tmp_mvar_value_28;
        PyObject *tmp_kw_name_11;
        PyObject *tmp_dict_key_11;
        PyObject *tmp_dict_value_11;
        PyObject *tmp_left_name_8;
        PyObject *tmp_left_name_9;
        PyObject *tmp_right_name_8;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_called_name_30;
        PyObject *tmp_mvar_value_29;
        PyObject *tmp_right_name_9;
        PyObject *tmp_assattr_target_20;
        tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_28 == NULL ))
        {
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_28 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_54 = tmp_mvar_value_28;
        tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_PhotoImage );
        if ( tmp_called_name_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_11 = const_str_plain_file;
        tmp_left_name_9 = const_str_plain_img;
        tmp_mvar_value_29 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_29 == NULL ))
        {
            tmp_mvar_value_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_29 == NULL )
        {
            Py_DECREF( tmp_called_name_29 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_30 = tmp_mvar_value_29;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 109;
        tmp_compexpr_left_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_30 );
        if ( tmp_compexpr_left_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_29 );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_7 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        Py_DECREF( tmp_compexpr_left_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_29 );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_5;
        }
        else
        {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        tmp_right_name_8 = const_str_chr_92;
        goto condexpr_end_5;
        condexpr_false_5:;
        tmp_right_name_8 = const_str_chr_47;
        condexpr_end_5:;
        tmp_left_name_8 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_9, tmp_right_name_8 );
        if ( tmp_left_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_29 );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_9 = const_str_digest_6c92efcbf38cda1e8f529735f36d5913;
        tmp_dict_value_11 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_8, tmp_right_name_9 );
        Py_DECREF( tmp_left_name_8 );
        if ( tmp_dict_value_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_29 );

            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_11 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_11, tmp_dict_key_11, tmp_dict_value_11 );
        Py_DECREF( tmp_dict_value_11 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 109;
        tmp_assattr_name_20 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_29, tmp_kw_name_11 );
        Py_DECREF( tmp_called_name_29 );
        Py_DECREF( tmp_kw_name_11 );
        if ( tmp_assattr_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_20 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_20, const_str_plain_zoom_in_img, tmp_assattr_name_20 );
        Py_DECREF( tmp_assattr_name_20 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 109;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_21;
        PyObject *tmp_called_name_31;
        PyObject *tmp_source_name_55;
        PyObject *tmp_mvar_value_30;
        PyObject *tmp_kw_name_12;
        PyObject *tmp_dict_key_12;
        PyObject *tmp_dict_value_12;
        PyObject *tmp_left_name_10;
        PyObject *tmp_left_name_11;
        PyObject *tmp_right_name_10;
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        PyObject *tmp_called_name_32;
        PyObject *tmp_mvar_value_31;
        PyObject *tmp_right_name_11;
        PyObject *tmp_assattr_target_21;
        tmp_mvar_value_30 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_30 == NULL ))
        {
            tmp_mvar_value_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_30 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_55 = tmp_mvar_value_30;
        tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_PhotoImage );
        if ( tmp_called_name_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_12 = const_str_plain_file;
        tmp_left_name_11 = const_str_plain_img;
        tmp_mvar_value_31 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_31 == NULL ))
        {
            tmp_mvar_value_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_31 == NULL )
        {
            Py_DECREF( tmp_called_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_32 = tmp_mvar_value_31;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 110;
        tmp_compexpr_left_8 = CALL_FUNCTION_NO_ARGS( tmp_called_name_32 );
        if ( tmp_compexpr_left_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_31 );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_8 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        Py_DECREF( tmp_compexpr_left_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_31 );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_6;
        }
        else
        {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        tmp_right_name_10 = const_str_chr_92;
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_right_name_10 = const_str_chr_47;
        condexpr_end_6:;
        tmp_left_name_10 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_11, tmp_right_name_10 );
        if ( tmp_left_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_31 );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_11 = const_str_digest_5b18b8c9f5f7ce9cdf95ea9d49dd84db;
        tmp_dict_value_12 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_10, tmp_right_name_11 );
        Py_DECREF( tmp_left_name_10 );
        if ( tmp_dict_value_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_31 );

            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_12 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_12, tmp_dict_key_12, tmp_dict_value_12 );
        Py_DECREF( tmp_dict_value_12 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 110;
        tmp_assattr_name_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_31, tmp_kw_name_12 );
        Py_DECREF( tmp_called_name_31 );
        Py_DECREF( tmp_kw_name_12 );
        if ( tmp_assattr_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_21 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_21, const_str_plain_zoom_out_img, tmp_assattr_name_21 );
        Py_DECREF( tmp_assattr_name_21 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 110;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_22;
        PyObject *tmp_called_name_33;
        PyObject *tmp_source_name_56;
        PyObject *tmp_mvar_value_32;
        PyObject *tmp_kw_name_13;
        PyObject *tmp_dict_key_13;
        PyObject *tmp_dict_value_13;
        PyObject *tmp_left_name_12;
        PyObject *tmp_left_name_13;
        PyObject *tmp_right_name_12;
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_called_name_34;
        PyObject *tmp_mvar_value_33;
        PyObject *tmp_right_name_13;
        PyObject *tmp_assattr_target_22;
        tmp_mvar_value_32 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_32 == NULL ))
        {
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_32 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_56 = tmp_mvar_value_32;
        tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_PhotoImage );
        if ( tmp_called_name_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_13 = const_str_plain_file;
        tmp_left_name_13 = const_str_plain_img;
        tmp_mvar_value_33 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_33 == NULL ))
        {
            tmp_mvar_value_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_33 == NULL )
        {
            Py_DECREF( tmp_called_name_33 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_34 = tmp_mvar_value_33;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 111;
        tmp_compexpr_left_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_34 );
        if ( tmp_compexpr_left_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_33 );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_9 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
        Py_DECREF( tmp_compexpr_left_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_33 );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_7;
        }
        else
        {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        tmp_right_name_12 = const_str_chr_92;
        goto condexpr_end_7;
        condexpr_false_7:;
        tmp_right_name_12 = const_str_chr_47;
        condexpr_end_7:;
        tmp_left_name_12 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_13, tmp_right_name_12 );
        if ( tmp_left_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_33 );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_13 = const_str_digest_1e015f729cf96517bd39715d84674b71;
        tmp_dict_value_13 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_12, tmp_right_name_13 );
        Py_DECREF( tmp_left_name_12 );
        if ( tmp_dict_value_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_33 );

            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_13 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_13, tmp_dict_key_13, tmp_dict_value_13 );
        Py_DECREF( tmp_dict_value_13 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 111;
        tmp_assattr_name_22 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_33, tmp_kw_name_13 );
        Py_DECREF( tmp_called_name_33 );
        Py_DECREF( tmp_kw_name_13 );
        if ( tmp_assattr_name_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_22 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_22, const_str_plain_open_img, tmp_assattr_name_22 );
        Py_DECREF( tmp_assattr_name_22 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_23;
        PyObject *tmp_called_name_35;
        PyObject *tmp_source_name_57;
        PyObject *tmp_mvar_value_34;
        PyObject *tmp_kw_name_14;
        PyObject *tmp_dict_key_14;
        PyObject *tmp_dict_value_14;
        PyObject *tmp_left_name_14;
        PyObject *tmp_left_name_15;
        PyObject *tmp_right_name_14;
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        PyObject *tmp_called_name_36;
        PyObject *tmp_mvar_value_35;
        PyObject *tmp_right_name_15;
        PyObject *tmp_assattr_target_23;
        tmp_mvar_value_34 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_34 == NULL ))
        {
            tmp_mvar_value_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_34 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_57 = tmp_mvar_value_34;
        tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_PhotoImage );
        if ( tmp_called_name_35 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_14 = const_str_plain_file;
        tmp_left_name_15 = const_str_plain_img;
        tmp_mvar_value_35 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_35 == NULL ))
        {
            tmp_mvar_value_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_35 == NULL )
        {
            Py_DECREF( tmp_called_name_35 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_36 = tmp_mvar_value_35;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 112;
        tmp_compexpr_left_10 = CALL_FUNCTION_NO_ARGS( tmp_called_name_36 );
        if ( tmp_compexpr_left_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_35 );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_10 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
        Py_DECREF( tmp_compexpr_left_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_35 );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_8;
        }
        else
        {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        tmp_right_name_14 = const_str_chr_92;
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_right_name_14 = const_str_chr_47;
        condexpr_end_8:;
        tmp_left_name_14 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_15, tmp_right_name_14 );
        if ( tmp_left_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_35 );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_15 = const_str_digest_e0c1d1b1847f096d71ec514176536240;
        tmp_dict_value_14 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_14, tmp_right_name_15 );
        Py_DECREF( tmp_left_name_14 );
        if ( tmp_dict_value_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_35 );

            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_14 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_14, tmp_dict_key_14, tmp_dict_value_14 );
        Py_DECREF( tmp_dict_value_14 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 112;
        tmp_assattr_name_23 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_35, tmp_kw_name_14 );
        Py_DECREF( tmp_called_name_35 );
        Py_DECREF( tmp_kw_name_14 );
        if ( tmp_assattr_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_23 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_23, const_str_plain_save_img, tmp_assattr_name_23 );
        Py_DECREF( tmp_assattr_name_23 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_24;
        PyObject *tmp_called_name_37;
        PyObject *tmp_source_name_58;
        PyObject *tmp_mvar_value_36;
        PyObject *tmp_kw_name_15;
        PyObject *tmp_dict_key_15;
        PyObject *tmp_dict_value_15;
        PyObject *tmp_left_name_16;
        PyObject *tmp_left_name_17;
        PyObject *tmp_right_name_16;
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_called_name_38;
        PyObject *tmp_mvar_value_37;
        PyObject *tmp_right_name_17;
        PyObject *tmp_assattr_target_24;
        tmp_mvar_value_36 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_36 == NULL ))
        {
            tmp_mvar_value_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_36 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_58 = tmp_mvar_value_36;
        tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain_PhotoImage );
        if ( tmp_called_name_37 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_15 = const_str_plain_file;
        tmp_left_name_17 = const_str_plain_img;
        tmp_mvar_value_37 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_37 == NULL ))
        {
            tmp_mvar_value_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_37 == NULL )
        {
            Py_DECREF( tmp_called_name_37 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_38 = tmp_mvar_value_37;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 113;
        tmp_compexpr_left_11 = CALL_FUNCTION_NO_ARGS( tmp_called_name_38 );
        if ( tmp_compexpr_left_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_37 );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_11 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        Py_DECREF( tmp_compexpr_left_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_37 );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_9;
        }
        else
        {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        tmp_right_name_16 = const_str_chr_92;
        goto condexpr_end_9;
        condexpr_false_9:;
        tmp_right_name_16 = const_str_chr_47;
        condexpr_end_9:;
        tmp_left_name_16 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_17, tmp_right_name_16 );
        if ( tmp_left_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_37 );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_17 = const_str_digest_20040adeb7ecd82d1ad664c5d087baa1;
        tmp_dict_value_15 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_16, tmp_right_name_17 );
        Py_DECREF( tmp_left_name_16 );
        if ( tmp_dict_value_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_37 );

            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_15 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_15, tmp_dict_key_15, tmp_dict_value_15 );
        Py_DECREF( tmp_dict_value_15 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 113;
        tmp_assattr_name_24 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_37, tmp_kw_name_15 );
        Py_DECREF( tmp_called_name_37 );
        Py_DECREF( tmp_kw_name_15 );
        if ( tmp_assattr_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_24 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_24, const_str_plain_rest_img, tmp_assattr_name_24 );
        Py_DECREF( tmp_assattr_name_24 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 113;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_25;
        PyObject *tmp_called_name_39;
        PyObject *tmp_source_name_59;
        PyObject *tmp_mvar_value_38;
        PyObject *tmp_kw_name_16;
        PyObject *tmp_dict_key_16;
        PyObject *tmp_dict_value_16;
        PyObject *tmp_left_name_18;
        PyObject *tmp_left_name_19;
        PyObject *tmp_right_name_18;
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_called_name_40;
        PyObject *tmp_mvar_value_39;
        PyObject *tmp_right_name_19;
        PyObject *tmp_assattr_target_25;
        tmp_mvar_value_38 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_38 == NULL ))
        {
            tmp_mvar_value_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_38 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_59 = tmp_mvar_value_38;
        tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_PhotoImage );
        if ( tmp_called_name_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_16 = const_str_plain_file;
        tmp_left_name_19 = const_str_plain_img;
        tmp_mvar_value_39 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_39 == NULL ))
        {
            tmp_mvar_value_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_39 == NULL )
        {
            Py_DECREF( tmp_called_name_39 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_40 = tmp_mvar_value_39;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 114;
        tmp_compexpr_left_12 = CALL_FUNCTION_NO_ARGS( tmp_called_name_40 );
        if ( tmp_compexpr_left_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_39 );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_12 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
        Py_DECREF( tmp_compexpr_left_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_39 );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_10;
        }
        else
        {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        tmp_right_name_18 = const_str_chr_92;
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_right_name_18 = const_str_chr_47;
        condexpr_end_10:;
        tmp_left_name_18 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_19, tmp_right_name_18 );
        if ( tmp_left_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_39 );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_19 = const_str_digest_aa2ec49d4aec211af747ecb45eb68955;
        tmp_dict_value_16 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_18, tmp_right_name_19 );
        Py_DECREF( tmp_left_name_18 );
        if ( tmp_dict_value_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_39 );

            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_16 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_16, tmp_dict_key_16, tmp_dict_value_16 );
        Py_DECREF( tmp_dict_value_16 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 114;
        tmp_assattr_name_25 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_39, tmp_kw_name_16 );
        Py_DECREF( tmp_called_name_39 );
        Py_DECREF( tmp_kw_name_16 );
        if ( tmp_assattr_name_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_25 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_25, const_str_plain_grid_img, tmp_assattr_name_25 );
        Py_DECREF( tmp_assattr_name_25 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 114;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_26;
        PyObject *tmp_called_name_41;
        PyObject *tmp_source_name_60;
        PyObject *tmp_mvar_value_40;
        PyObject *tmp_kw_name_17;
        PyObject *tmp_dict_key_17;
        PyObject *tmp_dict_value_17;
        PyObject *tmp_left_name_20;
        PyObject *tmp_left_name_21;
        PyObject *tmp_right_name_20;
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        PyObject *tmp_called_name_42;
        PyObject *tmp_mvar_value_41;
        PyObject *tmp_right_name_21;
        PyObject *tmp_assattr_target_26;
        tmp_mvar_value_40 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_40 == NULL ))
        {
            tmp_mvar_value_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_40 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_60 = tmp_mvar_value_40;
        tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_PhotoImage );
        if ( tmp_called_name_41 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_17 = const_str_plain_file;
        tmp_left_name_21 = const_str_plain_img;
        tmp_mvar_value_41 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst );

        if (unlikely( tmp_mvar_value_41 == NULL ))
        {
            tmp_mvar_value_41 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_syst );
        }

        if ( tmp_mvar_value_41 == NULL )
        {
            Py_DECREF( tmp_called_name_41 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "syst" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_42 = tmp_mvar_value_41;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 115;
        tmp_compexpr_left_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_42 );
        if ( tmp_compexpr_left_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_41 );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_13 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
        Py_DECREF( tmp_compexpr_left_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_41 );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_11;
        }
        else
        {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        tmp_right_name_20 = const_str_chr_92;
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_right_name_20 = const_str_chr_47;
        condexpr_end_11:;
        tmp_left_name_20 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_21, tmp_right_name_20 );
        if ( tmp_left_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_41 );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_right_name_21 = const_str_digest_bf8079306be717ea88559cde794acadb;
        tmp_dict_value_17 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_20, tmp_right_name_21 );
        Py_DECREF( tmp_left_name_20 );
        if ( tmp_dict_value_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_41 );

            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_17 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_17, tmp_dict_key_17, tmp_dict_value_17 );
        Py_DECREF( tmp_dict_value_17 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 115;
        tmp_assattr_name_26 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_41, tmp_kw_name_17 );
        Py_DECREF( tmp_called_name_41 );
        Py_DECREF( tmp_kw_name_17 );
        if ( tmp_assattr_name_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_26 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_26, const_str_plain_grid_color_img, tmp_assattr_name_26 );
        Py_DECREF( tmp_assattr_name_26 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 115;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_27;
        PyObject *tmp_called_name_43;
        PyObject *tmp_source_name_61;
        PyObject *tmp_mvar_value_42;
        PyObject *tmp_args_name_7;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_source_name_62;
        PyObject *tmp_kw_name_18;
        PyObject *tmp_dict_key_18;
        PyObject *tmp_dict_value_18;
        PyObject *tmp_source_name_63;
        PyObject *tmp_dict_key_19;
        PyObject *tmp_dict_value_19;
        PyObject *tmp_dict_key_20;
        PyObject *tmp_dict_value_20;
        PyObject *tmp_source_name_64;
        PyObject *tmp_assattr_target_27;
        tmp_mvar_value_42 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_42 == NULL ))
        {
            tmp_mvar_value_42 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_42 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_61 = tmp_mvar_value_42;
        tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_Button );
        if ( tmp_called_name_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_62 = PyCell_GET( par_self );
        tmp_tuple_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain_btn_frame );
        if ( tmp_tuple_element_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_43 );

            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_7 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_6 );
        tmp_dict_key_18 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_63 = PyCell_GET( par_self );
        tmp_dict_value_18 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_open_img );
        if ( tmp_dict_value_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_43 );
            Py_DECREF( tmp_args_name_7 );

            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_18 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_18, tmp_dict_value_18 );
        Py_DECREF( tmp_dict_value_18 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_19 = const_str_plain_underline;
        tmp_dict_value_19 = const_int_0;
        tmp_res = PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_19, tmp_dict_value_19 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_20 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_64 = PyCell_GET( par_self );
        tmp_dict_value_20 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_load_btn_action );
        if ( tmp_dict_value_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_43 );
            Py_DECREF( tmp_args_name_7 );
            Py_DECREF( tmp_kw_name_18 );

            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_18, tmp_dict_key_20, tmp_dict_value_20 );
        Py_DECREF( tmp_dict_value_20 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 117;
        tmp_assattr_name_27 = CALL_FUNCTION( tmp_called_name_43, tmp_args_name_7, tmp_kw_name_18 );
        Py_DECREF( tmp_called_name_43 );
        Py_DECREF( tmp_args_name_7 );
        Py_DECREF( tmp_kw_name_18 );
        if ( tmp_assattr_name_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_27 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_27, const_str_plain_img_open_btn, tmp_assattr_name_27 );
        Py_DECREF( tmp_assattr_name_27 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 117;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_28;
        PyObject *tmp_called_name_44;
        PyObject *tmp_source_name_65;
        PyObject *tmp_mvar_value_43;
        PyObject *tmp_args_name_8;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_source_name_66;
        PyObject *tmp_kw_name_19;
        PyObject *tmp_dict_key_21;
        PyObject *tmp_dict_value_21;
        PyObject *tmp_source_name_67;
        PyObject *tmp_dict_key_22;
        PyObject *tmp_dict_value_22;
        PyObject *tmp_source_name_68;
        PyObject *tmp_assattr_target_28;
        tmp_mvar_value_43 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_43 == NULL ))
        {
            tmp_mvar_value_43 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_43 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_65 = tmp_mvar_value_43;
        tmp_called_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_Button );
        if ( tmp_called_name_44 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_66 = PyCell_GET( par_self );
        tmp_tuple_element_7 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_btn_frame );
        if ( tmp_tuple_element_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_44 );

            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_8 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_7 );
        tmp_dict_key_21 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_67 = PyCell_GET( par_self );
        tmp_dict_value_21 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain_add_btn_img );
        if ( tmp_dict_value_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_44 );
            Py_DECREF( tmp_args_name_8 );

            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_19 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_21, tmp_dict_value_21 );
        Py_DECREF( tmp_dict_value_21 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_22 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_68 = PyCell_GET( par_self );
        tmp_dict_value_22 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_add_btn_action );
        if ( tmp_dict_value_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_44 );
            Py_DECREF( tmp_args_name_8 );
            Py_DECREF( tmp_kw_name_19 );

            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_19, tmp_dict_key_22, tmp_dict_value_22 );
        Py_DECREF( tmp_dict_value_22 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 118;
        tmp_assattr_name_28 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_8, tmp_kw_name_19 );
        Py_DECREF( tmp_called_name_44 );
        Py_DECREF( tmp_args_name_8 );
        Py_DECREF( tmp_kw_name_19 );
        if ( tmp_assattr_name_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_28 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_28, const_str_plain_reg_marker_btn, tmp_assattr_name_28 );
        Py_DECREF( tmp_assattr_name_28 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 118;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_29;
        PyObject *tmp_called_name_45;
        PyObject *tmp_source_name_69;
        PyObject *tmp_mvar_value_44;
        PyObject *tmp_args_name_9;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_source_name_70;
        PyObject *tmp_kw_name_20;
        PyObject *tmp_dict_key_23;
        PyObject *tmp_dict_value_23;
        PyObject *tmp_source_name_71;
        PyObject *tmp_dict_key_24;
        PyObject *tmp_dict_value_24;
        PyObject *tmp_source_name_72;
        PyObject *tmp_assattr_target_29;
        tmp_mvar_value_44 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_44 == NULL ))
        {
            tmp_mvar_value_44 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_44 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_69 = tmp_mvar_value_44;
        tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_Button );
        if ( tmp_called_name_45 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_70 = PyCell_GET( par_self );
        tmp_tuple_element_8 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_btn_frame );
        if ( tmp_tuple_element_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_45 );

            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_9 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_8 );
        tmp_dict_key_23 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_71 = PyCell_GET( par_self );
        tmp_dict_value_23 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_del_btn_img );
        if ( tmp_dict_value_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_45 );
            Py_DECREF( tmp_args_name_9 );

            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_20 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_23, tmp_dict_value_23 );
        Py_DECREF( tmp_dict_value_23 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_24 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_72 = PyCell_GET( par_self );
        tmp_dict_value_24 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain_del_btn_action );
        if ( tmp_dict_value_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_45 );
            Py_DECREF( tmp_args_name_9 );
            Py_DECREF( tmp_kw_name_20 );

            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_20, tmp_dict_key_24, tmp_dict_value_24 );
        Py_DECREF( tmp_dict_value_24 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 119;
        tmp_assattr_name_29 = CALL_FUNCTION( tmp_called_name_45, tmp_args_name_9, tmp_kw_name_20 );
        Py_DECREF( tmp_called_name_45 );
        Py_DECREF( tmp_args_name_9 );
        Py_DECREF( tmp_kw_name_20 );
        if ( tmp_assattr_name_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_29 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_29, const_str_plain_dereg_marker_btn, tmp_assattr_name_29 );
        Py_DECREF( tmp_assattr_name_29 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 119;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_30;
        PyObject *tmp_called_name_46;
        PyObject *tmp_source_name_73;
        PyObject *tmp_mvar_value_45;
        PyObject *tmp_args_name_10;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_source_name_74;
        PyObject *tmp_kw_name_21;
        PyObject *tmp_dict_key_25;
        PyObject *tmp_dict_value_25;
        PyObject *tmp_source_name_75;
        PyObject *tmp_dict_key_26;
        PyObject *tmp_dict_value_26;
        PyObject *tmp_source_name_76;
        PyObject *tmp_assattr_target_30;
        tmp_mvar_value_45 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_45 == NULL ))
        {
            tmp_mvar_value_45 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_45 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_73 = tmp_mvar_value_45;
        tmp_called_name_46 = LOOKUP_ATTRIBUTE( tmp_source_name_73, const_str_plain_Button );
        if ( tmp_called_name_46 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_74 = PyCell_GET( par_self );
        tmp_tuple_element_9 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain_btn_frame );
        if ( tmp_tuple_element_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_46 );

            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_10 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_9 );
        tmp_dict_key_25 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_75 = PyCell_GET( par_self );
        tmp_dict_value_25 = LOOKUP_ATTRIBUTE( tmp_source_name_75, const_str_plain_zoom_in_img );
        if ( tmp_dict_value_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_46 );
            Py_DECREF( tmp_args_name_10 );

            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_21 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_25, tmp_dict_value_25 );
        Py_DECREF( tmp_dict_value_25 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_26 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_76 = PyCell_GET( par_self );
        tmp_dict_value_26 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain_zoom_in );
        if ( tmp_dict_value_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_46 );
            Py_DECREF( tmp_args_name_10 );
            Py_DECREF( tmp_kw_name_21 );

            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_21, tmp_dict_key_26, tmp_dict_value_26 );
        Py_DECREF( tmp_dict_value_26 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 120;
        tmp_assattr_name_30 = CALL_FUNCTION( tmp_called_name_46, tmp_args_name_10, tmp_kw_name_21 );
        Py_DECREF( tmp_called_name_46 );
        Py_DECREF( tmp_args_name_10 );
        Py_DECREF( tmp_kw_name_21 );
        if ( tmp_assattr_name_30 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_30 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_30, const_str_plain_zoom_in_btn, tmp_assattr_name_30 );
        Py_DECREF( tmp_assattr_name_30 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 120;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_31;
        PyObject *tmp_called_name_47;
        PyObject *tmp_source_name_77;
        PyObject *tmp_mvar_value_46;
        PyObject *tmp_args_name_11;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_source_name_78;
        PyObject *tmp_kw_name_22;
        PyObject *tmp_dict_key_27;
        PyObject *tmp_dict_value_27;
        PyObject *tmp_source_name_79;
        PyObject *tmp_dict_key_28;
        PyObject *tmp_dict_value_28;
        PyObject *tmp_source_name_80;
        PyObject *tmp_assattr_target_31;
        tmp_mvar_value_46 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_46 == NULL ))
        {
            tmp_mvar_value_46 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_46 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_77 = tmp_mvar_value_46;
        tmp_called_name_47 = LOOKUP_ATTRIBUTE( tmp_source_name_77, const_str_plain_Button );
        if ( tmp_called_name_47 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_78 = PyCell_GET( par_self );
        tmp_tuple_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain_btn_frame );
        if ( tmp_tuple_element_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_47 );

            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_11 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_10 );
        tmp_dict_key_27 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_79 = PyCell_GET( par_self );
        tmp_dict_value_27 = LOOKUP_ATTRIBUTE( tmp_source_name_79, const_str_plain_zoom_out_img );
        if ( tmp_dict_value_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_args_name_11 );

            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_22 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_27, tmp_dict_value_27 );
        Py_DECREF( tmp_dict_value_27 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_28 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_80 = PyCell_GET( par_self );
        tmp_dict_value_28 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain_zoom_out );
        if ( tmp_dict_value_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_args_name_11 );
            Py_DECREF( tmp_kw_name_22 );

            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_22, tmp_dict_key_28, tmp_dict_value_28 );
        Py_DECREF( tmp_dict_value_28 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 121;
        tmp_assattr_name_31 = CALL_FUNCTION( tmp_called_name_47, tmp_args_name_11, tmp_kw_name_22 );
        Py_DECREF( tmp_called_name_47 );
        Py_DECREF( tmp_args_name_11 );
        Py_DECREF( tmp_kw_name_22 );
        if ( tmp_assattr_name_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_31 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_31, const_str_plain_zoom_out_btn, tmp_assattr_name_31 );
        Py_DECREF( tmp_assattr_name_31 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 121;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_32;
        PyObject *tmp_called_name_48;
        PyObject *tmp_source_name_81;
        PyObject *tmp_mvar_value_47;
        PyObject *tmp_args_name_12;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_source_name_82;
        PyObject *tmp_kw_name_23;
        PyObject *tmp_dict_key_29;
        PyObject *tmp_dict_value_29;
        PyObject *tmp_dict_key_30;
        PyObject *tmp_dict_value_30;
        PyObject *tmp_dict_key_31;
        PyObject *tmp_dict_value_31;
        PyObject *tmp_dict_key_32;
        PyObject *tmp_dict_value_32;
        PyObject *tmp_source_name_83;
        PyObject *tmp_dict_key_33;
        PyObject *tmp_dict_value_33;
        PyObject *tmp_dict_key_34;
        PyObject *tmp_dict_value_34;
        PyObject *tmp_dict_key_35;
        PyObject *tmp_dict_value_35;
        PyObject *tmp_source_name_84;
        PyObject *tmp_assattr_target_32;
        tmp_mvar_value_47 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_47 == NULL ))
        {
            tmp_mvar_value_47 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_47 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 122;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_81 = tmp_mvar_value_47;
        tmp_called_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_81, const_str_plain_Scale );
        if ( tmp_called_name_48 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_82 = PyCell_GET( par_self );
        tmp_tuple_element_11 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain_btn_frame );
        if ( tmp_tuple_element_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_48 );

            exception_lineno = 122;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_12 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_12, 0, tmp_tuple_element_11 );
        tmp_dict_key_29 = const_str_plain_length;
        tmp_dict_value_29 = const_int_pos_100;
        tmp_kw_name_23 = _PyDict_NewPresized( 7 );
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_29, tmp_dict_value_29 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_30 = const_str_plain_value;
        tmp_dict_value_30 = const_float_0_0;
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_30, tmp_dict_value_30 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_31 = const_str_plain_orient;
        tmp_dict_value_31 = const_str_plain_horizontal;
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_31, tmp_dict_value_31 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_32 = const_str_plain_variable;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_83 = PyCell_GET( par_self );
        tmp_dict_value_32 = LOOKUP_ATTRIBUTE( tmp_source_name_83, const_str_plain__zoom_factor );
        if ( tmp_dict_value_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_48 );
            Py_DECREF( tmp_args_name_12 );
            Py_DECREF( tmp_kw_name_23 );

            exception_lineno = 123;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_32, tmp_dict_value_32 );
        Py_DECREF( tmp_dict_value_32 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_33 = const_str_plain_from_;
        tmp_dict_value_33 = const_int_pos_1;
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_33, tmp_dict_value_33 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_34 = const_str_plain_to;
        tmp_dict_value_34 = const_int_pos_3;
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_34, tmp_dict_value_34 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_35 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_84 = PyCell_GET( par_self );
        tmp_dict_value_35 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain_show_zoom );
        if ( tmp_dict_value_35 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_48 );
            Py_DECREF( tmp_args_name_12 );
            Py_DECREF( tmp_kw_name_23 );

            exception_lineno = 123;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_23, tmp_dict_key_35, tmp_dict_value_35 );
        Py_DECREF( tmp_dict_value_35 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 122;
        tmp_assattr_name_32 = CALL_FUNCTION( tmp_called_name_48, tmp_args_name_12, tmp_kw_name_23 );
        Py_DECREF( tmp_called_name_48 );
        Py_DECREF( tmp_args_name_12 );
        Py_DECREF( tmp_kw_name_23 );
        if ( tmp_assattr_name_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_32 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_32, const_str_plain_zoom_bar, tmp_assattr_name_32 );
        Py_DECREF( tmp_assattr_name_32 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_33;
        PyObject *tmp_called_name_49;
        PyObject *tmp_source_name_85;
        PyObject *tmp_mvar_value_48;
        PyObject *tmp_args_name_13;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_source_name_86;
        PyObject *tmp_kw_name_24;
        PyObject *tmp_assattr_target_33;
        tmp_mvar_value_48 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_48 == NULL ))
        {
            tmp_mvar_value_48 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_48 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_85 = tmp_mvar_value_48;
        tmp_called_name_49 = LOOKUP_ATTRIBUTE( tmp_source_name_85, const_str_plain_Label );
        if ( tmp_called_name_49 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 124;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_86 = PyCell_GET( par_self );
        tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_86, const_str_plain_btn_frame );
        if ( tmp_tuple_element_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_49 );

            exception_lineno = 124;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_13 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_12 );
        tmp_kw_name_24 = PyDict_Copy( const_dict_ba0015d6bade45d90a5f5463658c3d76 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 124;
        tmp_assattr_name_33 = CALL_FUNCTION( tmp_called_name_49, tmp_args_name_13, tmp_kw_name_24 );
        Py_DECREF( tmp_called_name_49 );
        Py_DECREF( tmp_args_name_13 );
        Py_DECREF( tmp_kw_name_24 );
        if ( tmp_assattr_name_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 124;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_33 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_33, const_str_plain_zoom_factor_label, tmp_assattr_name_33 );
        Py_DECREF( tmp_assattr_name_33 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 124;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_34;
        PyObject *tmp_called_name_50;
        PyObject *tmp_source_name_87;
        PyObject *tmp_mvar_value_49;
        PyObject *tmp_args_name_14;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_source_name_88;
        PyObject *tmp_kw_name_25;
        PyObject *tmp_assattr_target_34;
        tmp_mvar_value_49 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_49 == NULL ))
        {
            tmp_mvar_value_49 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_49 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_87 = tmp_mvar_value_49;
        tmp_called_name_50 = LOOKUP_ATTRIBUTE( tmp_source_name_87, const_str_plain_Label );
        if ( tmp_called_name_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_88 = PyCell_GET( par_self );
        tmp_tuple_element_13 = LOOKUP_ATTRIBUTE( tmp_source_name_88, const_str_plain_table_frame );
        if ( tmp_tuple_element_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_50 );

            exception_lineno = 126;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_14 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_13 );
        tmp_kw_name_25 = PyDict_Copy( const_dict_21d54f41ccfcb1c44202b6f93553087c );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 126;
        tmp_assattr_name_34 = CALL_FUNCTION( tmp_called_name_50, tmp_args_name_14, tmp_kw_name_25 );
        Py_DECREF( tmp_called_name_50 );
        Py_DECREF( tmp_args_name_14 );
        Py_DECREF( tmp_kw_name_25 );
        if ( tmp_assattr_name_34 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_34 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_34, const_str_plain_hint_label, tmp_assattr_name_34 );
        Py_DECREF( tmp_assattr_name_34 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_35;
        PyObject *tmp_called_name_51;
        PyObject *tmp_source_name_89;
        PyObject *tmp_mvar_value_50;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_source_name_90;
        PyObject *tmp_assattr_target_35;
        tmp_mvar_value_50 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_50 == NULL ))
        {
            tmp_mvar_value_50 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_50 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 129;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_89 = tmp_mvar_value_50;
        tmp_called_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_89, const_str_plain_Treeview );
        if ( tmp_called_name_51 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 129;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_90 = PyCell_GET( par_self );
        tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_90, const_str_plain_table_frame );
        if ( tmp_args_element_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_51 );

            exception_lineno = 129;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 129;
        {
            PyObject *call_args[] = { tmp_args_element_name_17 };
            tmp_assattr_name_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_51, call_args );
        }

        Py_DECREF( tmp_called_name_51 );
        Py_DECREF( tmp_args_element_name_17 );
        if ( tmp_assattr_name_35 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 129;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_35 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_35, const_str_plain_marker_table, tmp_assattr_name_35 );
        Py_DECREF( tmp_assattr_name_35 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 129;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_91;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = const_tuple_str_plain_markname_str_plain_markcount_tuple;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_91 = PyCell_GET( par_self );
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_91, const_str_plain_marker_table );
        if ( tmp_ass_subscribed_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 130;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = const_str_plain_columns;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscribed_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 130;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_36;
        PyObject *tmp_called_name_52;
        PyObject *tmp_source_name_92;
        PyObject *tmp_mvar_value_51;
        PyObject *tmp_args_name_15;
        PyObject *tmp_tuple_element_14;
        PyObject *tmp_source_name_93;
        PyObject *tmp_kw_name_26;
        PyObject *tmp_dict_key_36;
        PyObject *tmp_dict_value_36;
        PyObject *tmp_source_name_94;
        PyObject *tmp_dict_key_37;
        PyObject *tmp_dict_value_37;
        PyObject *tmp_source_name_95;
        PyObject *tmp_assattr_target_36;
        tmp_mvar_value_51 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_51 == NULL ))
        {
            tmp_mvar_value_51 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_51 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_92 = tmp_mvar_value_51;
        tmp_called_name_52 = LOOKUP_ATTRIBUTE( tmp_source_name_92, const_str_plain_Button );
        if ( tmp_called_name_52 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_93 = PyCell_GET( par_self );
        tmp_tuple_element_14 = LOOKUP_ATTRIBUTE( tmp_source_name_93, const_str_plain_sec_btn_frame );
        if ( tmp_tuple_element_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_52 );

            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_15 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_15, 0, tmp_tuple_element_14 );
        tmp_dict_key_36 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_94 = PyCell_GET( par_self );
        tmp_dict_value_36 = LOOKUP_ATTRIBUTE( tmp_source_name_94, const_str_plain_save_img );
        if ( tmp_dict_value_36 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_52 );
            Py_DECREF( tmp_args_name_15 );

            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_26 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_36, tmp_dict_value_36 );
        Py_DECREF( tmp_dict_value_36 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_37 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_95 = PyCell_GET( par_self );
        tmp_dict_value_37 = LOOKUP_ATTRIBUTE( tmp_source_name_95, const_str_plain_save_markers );
        if ( tmp_dict_value_37 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_52 );
            Py_DECREF( tmp_args_name_15 );
            Py_DECREF( tmp_kw_name_26 );

            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_26, tmp_dict_key_37, tmp_dict_value_37 );
        Py_DECREF( tmp_dict_value_37 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 132;
        tmp_assattr_name_36 = CALL_FUNCTION( tmp_called_name_52, tmp_args_name_15, tmp_kw_name_26 );
        Py_DECREF( tmp_called_name_52 );
        Py_DECREF( tmp_args_name_15 );
        Py_DECREF( tmp_kw_name_26 );
        if ( tmp_assattr_name_36 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_36 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_36, const_str_plain_save_markers_btn, tmp_assattr_name_36 );
        Py_DECREF( tmp_assattr_name_36 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_37;
        PyObject *tmp_called_name_53;
        PyObject *tmp_source_name_96;
        PyObject *tmp_mvar_value_52;
        PyObject *tmp_args_name_16;
        PyObject *tmp_tuple_element_15;
        PyObject *tmp_source_name_97;
        PyObject *tmp_kw_name_27;
        PyObject *tmp_dict_key_38;
        PyObject *tmp_dict_value_38;
        PyObject *tmp_source_name_98;
        PyObject *tmp_dict_key_39;
        PyObject *tmp_dict_value_39;
        PyObject *tmp_source_name_99;
        PyObject *tmp_assattr_target_37;
        tmp_mvar_value_52 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_52 == NULL ))
        {
            tmp_mvar_value_52 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_52 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_96 = tmp_mvar_value_52;
        tmp_called_name_53 = LOOKUP_ATTRIBUTE( tmp_source_name_96, const_str_plain_Button );
        if ( tmp_called_name_53 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_97 = PyCell_GET( par_self );
        tmp_tuple_element_15 = LOOKUP_ATTRIBUTE( tmp_source_name_97, const_str_plain_sec_btn_frame );
        if ( tmp_tuple_element_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_53 );

            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_16 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_16, 0, tmp_tuple_element_15 );
        tmp_dict_key_38 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_98 = PyCell_GET( par_self );
        tmp_dict_value_38 = LOOKUP_ATTRIBUTE( tmp_source_name_98, const_str_plain_rest_img );
        if ( tmp_dict_value_38 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_53 );
            Py_DECREF( tmp_args_name_16 );

            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_27 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_38, tmp_dict_value_38 );
        Py_DECREF( tmp_dict_value_38 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_39 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_99 = PyCell_GET( par_self );
        tmp_dict_value_39 = LOOKUP_ATTRIBUTE( tmp_source_name_99, const_str_plain_restore_markers );
        if ( tmp_dict_value_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_53 );
            Py_DECREF( tmp_args_name_16 );
            Py_DECREF( tmp_kw_name_27 );

            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_27, tmp_dict_key_39, tmp_dict_value_39 );
        Py_DECREF( tmp_dict_value_39 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 133;
        tmp_assattr_name_37 = CALL_FUNCTION( tmp_called_name_53, tmp_args_name_16, tmp_kw_name_27 );
        Py_DECREF( tmp_called_name_53 );
        Py_DECREF( tmp_args_name_16 );
        Py_DECREF( tmp_kw_name_27 );
        if ( tmp_assattr_name_37 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_37 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_37, const_str_plain_restore_markers_btn, tmp_assattr_name_37 );
        Py_DECREF( tmp_assattr_name_37 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_38;
        PyObject *tmp_called_name_54;
        PyObject *tmp_source_name_100;
        PyObject *tmp_mvar_value_53;
        PyObject *tmp_args_name_17;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_source_name_101;
        PyObject *tmp_kw_name_28;
        PyObject *tmp_dict_key_40;
        PyObject *tmp_dict_value_40;
        PyObject *tmp_source_name_102;
        PyObject *tmp_dict_key_41;
        PyObject *tmp_dict_value_41;
        PyObject *tmp_source_name_103;
        PyObject *tmp_assattr_target_38;
        tmp_mvar_value_53 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_53 == NULL ))
        {
            tmp_mvar_value_53 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_53 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_100 = tmp_mvar_value_53;
        tmp_called_name_54 = LOOKUP_ATTRIBUTE( tmp_source_name_100, const_str_plain_Button );
        if ( tmp_called_name_54 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_101 = PyCell_GET( par_self );
        tmp_tuple_element_16 = LOOKUP_ATTRIBUTE( tmp_source_name_101, const_str_plain_sec_btn_frame );
        if ( tmp_tuple_element_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_54 );

            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_17 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_17, 0, tmp_tuple_element_16 );
        tmp_dict_key_40 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_102 = PyCell_GET( par_self );
        tmp_dict_value_40 = LOOKUP_ATTRIBUTE( tmp_source_name_102, const_str_plain_grid_img );
        if ( tmp_dict_value_40 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_54 );
            Py_DECREF( tmp_args_name_17 );

            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_28 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_40, tmp_dict_value_40 );
        Py_DECREF( tmp_dict_value_40 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_41 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_103 = PyCell_GET( par_self );
        tmp_dict_value_41 = LOOKUP_ATTRIBUTE( tmp_source_name_103, const_str_plain_draw_grid_btn_action );
        if ( tmp_dict_value_41 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_54 );
            Py_DECREF( tmp_args_name_17 );
            Py_DECREF( tmp_kw_name_28 );

            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_28, tmp_dict_key_41, tmp_dict_value_41 );
        Py_DECREF( tmp_dict_value_41 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 134;
        tmp_assattr_name_38 = CALL_FUNCTION( tmp_called_name_54, tmp_args_name_17, tmp_kw_name_28 );
        Py_DECREF( tmp_called_name_54 );
        Py_DECREF( tmp_args_name_17 );
        Py_DECREF( tmp_kw_name_28 );
        if ( tmp_assattr_name_38 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_38 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_38, const_str_plain_draw_grid_btn, tmp_assattr_name_38 );
        Py_DECREF( tmp_assattr_name_38 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 134;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_39;
        PyObject *tmp_called_name_55;
        PyObject *tmp_source_name_104;
        PyObject *tmp_mvar_value_54;
        PyObject *tmp_args_name_18;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_source_name_105;
        PyObject *tmp_kw_name_29;
        PyObject *tmp_assattr_target_39;
        tmp_mvar_value_54 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_54 == NULL ))
        {
            tmp_mvar_value_54 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_54 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 135;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_104 = tmp_mvar_value_54;
        tmp_called_name_55 = LOOKUP_ATTRIBUTE( tmp_source_name_104, const_str_plain_Combobox );
        if ( tmp_called_name_55 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 135;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_105 = PyCell_GET( par_self );
        tmp_tuple_element_17 = LOOKUP_ATTRIBUTE( tmp_source_name_105, const_str_plain_sec_btn_frame );
        if ( tmp_tuple_element_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_55 );

            exception_lineno = 135;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_18 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_18, 0, tmp_tuple_element_17 );
        tmp_kw_name_29 = PyDict_Copy( const_dict_4c1e1caa9d21b6213c97c860d09b0b94 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 135;
        tmp_assattr_name_39 = CALL_FUNCTION( tmp_called_name_55, tmp_args_name_18, tmp_kw_name_29 );
        Py_DECREF( tmp_called_name_55 );
        Py_DECREF( tmp_args_name_18 );
        Py_DECREF( tmp_kw_name_29 );
        if ( tmp_assattr_name_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 135;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_39 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_39, const_str_plain_grid_size_combo, tmp_assattr_name_39 );
        Py_DECREF( tmp_assattr_name_39 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 135;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_40;
        PyObject *tmp_called_name_56;
        PyObject *tmp_source_name_106;
        PyObject *tmp_mvar_value_55;
        PyObject *tmp_args_name_19;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_source_name_107;
        PyObject *tmp_kw_name_30;
        PyObject *tmp_dict_key_42;
        PyObject *tmp_dict_value_42;
        PyObject *tmp_source_name_108;
        PyObject *tmp_dict_key_43;
        PyObject *tmp_dict_value_43;
        PyObject *tmp_source_name_109;
        PyObject *tmp_assattr_target_40;
        tmp_mvar_value_55 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_55 == NULL ))
        {
            tmp_mvar_value_55 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_55 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_106 = tmp_mvar_value_55;
        tmp_called_name_56 = LOOKUP_ATTRIBUTE( tmp_source_name_106, const_str_plain_Button );
        if ( tmp_called_name_56 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_107 = PyCell_GET( par_self );
        tmp_tuple_element_18 = LOOKUP_ATTRIBUTE( tmp_source_name_107, const_str_plain_sec_btn_frame );
        if ( tmp_tuple_element_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_56 );

            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_19 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_19, 0, tmp_tuple_element_18 );
        tmp_dict_key_42 = const_str_plain_image;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_108 = PyCell_GET( par_self );
        tmp_dict_value_42 = LOOKUP_ATTRIBUTE( tmp_source_name_108, const_str_plain_grid_color_img );
        if ( tmp_dict_value_42 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_56 );
            Py_DECREF( tmp_args_name_19 );

            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_30 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_42, tmp_dict_value_42 );
        Py_DECREF( tmp_dict_value_42 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_43 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_109 = PyCell_GET( par_self );
        tmp_dict_value_43 = LOOKUP_ATTRIBUTE( tmp_source_name_109, const_str_plain_grid_color_dialog );
        if ( tmp_dict_value_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_56 );
            Py_DECREF( tmp_args_name_19 );
            Py_DECREF( tmp_kw_name_30 );

            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_30, tmp_dict_key_43, tmp_dict_value_43 );
        Py_DECREF( tmp_dict_value_43 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 138;
        tmp_assattr_name_40 = CALL_FUNCTION( tmp_called_name_56, tmp_args_name_19, tmp_kw_name_30 );
        Py_DECREF( tmp_called_name_56 );
        Py_DECREF( tmp_args_name_19 );
        Py_DECREF( tmp_kw_name_30 );
        if ( tmp_assattr_name_40 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_40 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_40, const_str_plain_grid_color_btn, tmp_assattr_name_40 );
        Py_DECREF( tmp_assattr_name_40 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 138;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_57;
        PyObject *tmp_source_name_110;
        PyObject *tmp_source_name_111;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_name_20;
        PyObject *tmp_kw_name_31;
        PyObject *tmp_dict_key_44;
        PyObject *tmp_dict_value_44;
        PyObject *tmp_dict_key_45;
        PyObject *tmp_dict_value_45;
        PyObject *tmp_dict_key_46;
        PyObject *tmp_dict_value_46;
        PyObject *tmp_source_name_112;
        PyObject *tmp_mvar_value_56;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_111 = PyCell_GET( par_self );
        tmp_source_name_110 = LOOKUP_ATTRIBUTE( tmp_source_name_111, const_str_plain_marker_table );
        if ( tmp_source_name_110 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_57 = LOOKUP_ATTRIBUTE( tmp_source_name_110, const_str_plain_column );
        Py_DECREF( tmp_source_name_110 );
        if ( tmp_called_name_57 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_20 = const_tuple_str_digest_bb9e58d89eebf4d528f9449426ecd81f_tuple;
        tmp_dict_key_44 = const_str_plain_width;
        tmp_dict_value_44 = const_int_pos_20;
        tmp_kw_name_31 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_44, tmp_dict_value_44 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_45 = const_str_plain_minwidth;
        tmp_dict_value_45 = const_int_pos_20;
        tmp_res = PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_45, tmp_dict_value_45 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_46 = const_str_plain_stretch;
        tmp_mvar_value_56 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_56 == NULL ))
        {
            tmp_mvar_value_56 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_56 == NULL )
        {
            Py_DECREF( tmp_called_name_57 );
            Py_DECREF( tmp_kw_name_31 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 140;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_112 = tmp_mvar_value_56;
        tmp_dict_value_46 = LOOKUP_ATTRIBUTE( tmp_source_name_112, const_str_plain_NO );
        if ( tmp_dict_value_46 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_57 );
            Py_DECREF( tmp_kw_name_31 );

            exception_lineno = 140;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_31, tmp_dict_key_46, tmp_dict_value_46 );
        Py_DECREF( tmp_dict_value_46 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 140;
        tmp_call_result_7 = CALL_FUNCTION( tmp_called_name_57, tmp_args_name_20, tmp_kw_name_31 );
        Py_DECREF( tmp_called_name_57 );
        Py_DECREF( tmp_kw_name_31 );
        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_7 );
    }
    {
        PyObject *tmp_called_name_58;
        PyObject *tmp_source_name_113;
        PyObject *tmp_source_name_114;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_name_21;
        PyObject *tmp_kw_name_32;
        PyObject *tmp_dict_key_47;
        PyObject *tmp_dict_value_47;
        PyObject *tmp_dict_key_48;
        PyObject *tmp_dict_value_48;
        PyObject *tmp_dict_key_49;
        PyObject *tmp_dict_value_49;
        PyObject *tmp_source_name_115;
        PyObject *tmp_mvar_value_57;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_114 = PyCell_GET( par_self );
        tmp_source_name_113 = LOOKUP_ATTRIBUTE( tmp_source_name_114, const_str_plain_marker_table );
        if ( tmp_source_name_113 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_58 = LOOKUP_ATTRIBUTE( tmp_source_name_113, const_str_plain_column );
        Py_DECREF( tmp_source_name_113 );
        if ( tmp_called_name_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_21 = const_tuple_str_plain_markname_tuple;
        tmp_dict_key_47 = const_str_plain_width;
        tmp_dict_value_47 = const_int_pos_200;
        tmp_kw_name_32 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_47, tmp_dict_value_47 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_48 = const_str_plain_minwidth;
        tmp_dict_value_48 = const_int_pos_100;
        tmp_res = PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_48, tmp_dict_value_48 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_49 = const_str_plain_stretch;
        tmp_mvar_value_57 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_57 == NULL ))
        {
            tmp_mvar_value_57 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_57 == NULL )
        {
            Py_DECREF( tmp_called_name_58 );
            Py_DECREF( tmp_kw_name_32 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 141;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_115 = tmp_mvar_value_57;
        tmp_dict_value_49 = LOOKUP_ATTRIBUTE( tmp_source_name_115, const_str_plain_NO );
        if ( tmp_dict_value_49 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_58 );
            Py_DECREF( tmp_kw_name_32 );

            exception_lineno = 141;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_32, tmp_dict_key_49, tmp_dict_value_49 );
        Py_DECREF( tmp_dict_value_49 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 141;
        tmp_call_result_8 = CALL_FUNCTION( tmp_called_name_58, tmp_args_name_21, tmp_kw_name_32 );
        Py_DECREF( tmp_called_name_58 );
        Py_DECREF( tmp_kw_name_32 );
        if ( tmp_call_result_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_8 );
    }
    {
        PyObject *tmp_called_name_59;
        PyObject *tmp_source_name_116;
        PyObject *tmp_source_name_117;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_name_22;
        PyObject *tmp_kw_name_33;
        PyObject *tmp_dict_key_50;
        PyObject *tmp_dict_value_50;
        PyObject *tmp_dict_key_51;
        PyObject *tmp_dict_value_51;
        PyObject *tmp_dict_key_52;
        PyObject *tmp_dict_value_52;
        PyObject *tmp_source_name_118;
        PyObject *tmp_mvar_value_58;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_117 = PyCell_GET( par_self );
        tmp_source_name_116 = LOOKUP_ATTRIBUTE( tmp_source_name_117, const_str_plain_marker_table );
        if ( tmp_source_name_116 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 142;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_59 = LOOKUP_ATTRIBUTE( tmp_source_name_116, const_str_plain_column );
        Py_DECREF( tmp_source_name_116 );
        if ( tmp_called_name_59 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 142;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_22 = const_tuple_str_plain_markcount_tuple;
        tmp_dict_key_50 = const_str_plain_width;
        tmp_dict_value_50 = const_int_pos_50;
        tmp_kw_name_33 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_50, tmp_dict_value_50 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_51 = const_str_plain_minwidth;
        tmp_dict_value_51 = const_int_pos_50;
        tmp_res = PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_51, tmp_dict_value_51 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_52 = const_str_plain_stretch;
        tmp_mvar_value_58 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_58 == NULL ))
        {
            tmp_mvar_value_58 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_58 == NULL )
        {
            Py_DECREF( tmp_called_name_59 );
            Py_DECREF( tmp_kw_name_33 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 142;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_118 = tmp_mvar_value_58;
        tmp_dict_value_52 = LOOKUP_ATTRIBUTE( tmp_source_name_118, const_str_plain_NO );
        if ( tmp_dict_value_52 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_59 );
            Py_DECREF( tmp_kw_name_33 );

            exception_lineno = 142;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_33, tmp_dict_key_52, tmp_dict_value_52 );
        Py_DECREF( tmp_dict_value_52 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 142;
        tmp_call_result_9 = CALL_FUNCTION( tmp_called_name_59, tmp_args_name_22, tmp_kw_name_33 );
        Py_DECREF( tmp_called_name_59 );
        Py_DECREF( tmp_kw_name_33 );
        if ( tmp_call_result_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 142;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_9 );
    }
    {
        PyObject *tmp_called_name_60;
        PyObject *tmp_source_name_119;
        PyObject *tmp_source_name_120;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_name_23;
        PyObject *tmp_kw_name_34;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_120 = PyCell_GET( par_self );
        tmp_source_name_119 = LOOKUP_ATTRIBUTE( tmp_source_name_120, const_str_plain_marker_table );
        if ( tmp_source_name_119 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_60 = LOOKUP_ATTRIBUTE( tmp_source_name_119, const_str_plain_heading );
        Py_DECREF( tmp_source_name_119 );
        if ( tmp_called_name_60 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_23 = const_tuple_str_plain_markname_tuple;
        tmp_kw_name_34 = PyDict_Copy( const_dict_2f5602dc6b887a06485e48254eb1f50f );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 144;
        tmp_call_result_10 = CALL_FUNCTION( tmp_called_name_60, tmp_args_name_23, tmp_kw_name_34 );
        Py_DECREF( tmp_called_name_60 );
        Py_DECREF( tmp_kw_name_34 );
        if ( tmp_call_result_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_10 );
    }
    {
        PyObject *tmp_called_name_61;
        PyObject *tmp_source_name_121;
        PyObject *tmp_source_name_122;
        PyObject *tmp_call_result_11;
        PyObject *tmp_args_name_24;
        PyObject *tmp_kw_name_35;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_122 = PyCell_GET( par_self );
        tmp_source_name_121 = LOOKUP_ATTRIBUTE( tmp_source_name_122, const_str_plain_marker_table );
        if ( tmp_source_name_121 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 145;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_61 = LOOKUP_ATTRIBUTE( tmp_source_name_121, const_str_plain_heading );
        Py_DECREF( tmp_source_name_121 );
        if ( tmp_called_name_61 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 145;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_24 = const_tuple_str_plain_markcount_tuple;
        tmp_kw_name_35 = PyDict_Copy( const_dict_0bb445399fe88d6da125b1ba538ec20c );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 145;
        tmp_call_result_11 = CALL_FUNCTION( tmp_called_name_61, tmp_args_name_24, tmp_kw_name_35 );
        Py_DECREF( tmp_called_name_61 );
        Py_DECREF( tmp_kw_name_35 );
        if ( tmp_call_result_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 145;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_11 );
    }
    {
        PyObject *tmp_assattr_name_41;
        PyObject *tmp_called_name_62;
        PyObject *tmp_source_name_123;
        PyObject *tmp_mvar_value_59;
        PyObject *tmp_args_name_25;
        PyObject *tmp_tuple_element_19;
        PyObject *tmp_source_name_124;
        PyObject *tmp_kw_name_36;
        PyObject *tmp_dict_key_53;
        PyObject *tmp_dict_value_53;
        PyObject *tmp_source_name_125;
        PyObject *tmp_source_name_126;
        PyObject *tmp_assattr_target_41;
        tmp_mvar_value_59 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk );

        if (unlikely( tmp_mvar_value_59 == NULL ))
        {
            tmp_mvar_value_59 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ttk );
        }

        if ( tmp_mvar_value_59 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ttk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_123 = tmp_mvar_value_59;
        tmp_called_name_62 = LOOKUP_ATTRIBUTE( tmp_source_name_123, const_str_plain_Scrollbar );
        if ( tmp_called_name_62 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_124 = PyCell_GET( par_self );
        tmp_tuple_element_19 = LOOKUP_ATTRIBUTE( tmp_source_name_124, const_str_plain_table_frame );
        if ( tmp_tuple_element_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_62 );

            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_25 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_25, 0, tmp_tuple_element_19 );
        tmp_dict_key_53 = const_str_plain_command;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_126 = PyCell_GET( par_self );
        tmp_source_name_125 = LOOKUP_ATTRIBUTE( tmp_source_name_126, const_str_plain_marker_table );
        if ( tmp_source_name_125 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_62 );
            Py_DECREF( tmp_args_name_25 );

            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_53 = LOOKUP_ATTRIBUTE( tmp_source_name_125, const_str_plain_yview );
        Py_DECREF( tmp_source_name_125 );
        if ( tmp_dict_value_53 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_62 );
            Py_DECREF( tmp_args_name_25 );

            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_36 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_36, tmp_dict_key_53, tmp_dict_value_53 );
        Py_DECREF( tmp_dict_value_53 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 147;
        tmp_assattr_name_41 = CALL_FUNCTION( tmp_called_name_62, tmp_args_name_25, tmp_kw_name_36 );
        Py_DECREF( tmp_called_name_62 );
        Py_DECREF( tmp_args_name_25 );
        Py_DECREF( tmp_kw_name_36 );
        if ( tmp_assattr_name_41 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_41 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_41, const_str_plain_scroll, tmp_assattr_name_41 );
        Py_DECREF( tmp_assattr_name_41 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_63;
        PyObject *tmp_source_name_127;
        PyObject *tmp_source_name_128;
        PyObject *tmp_call_result_12;
        PyObject *tmp_kw_name_37;
        PyObject *tmp_dict_key_54;
        PyObject *tmp_dict_value_54;
        PyObject *tmp_source_name_129;
        PyObject *tmp_source_name_130;
        PyObject *tmp_dict_key_55;
        PyObject *tmp_dict_value_55;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_128 = PyCell_GET( par_self );
        tmp_source_name_127 = LOOKUP_ATTRIBUTE( tmp_source_name_128, const_str_plain_marker_table );
        if ( tmp_source_name_127 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 148;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_127, const_str_plain_configure );
        Py_DECREF( tmp_source_name_127 );
        if ( tmp_called_name_63 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 148;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_54 = const_str_plain_yscrollcommand;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_130 = PyCell_GET( par_self );
        tmp_source_name_129 = LOOKUP_ATTRIBUTE( tmp_source_name_130, const_str_plain_scroll );
        if ( tmp_source_name_129 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_63 );

            exception_lineno = 148;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_54 = LOOKUP_ATTRIBUTE( tmp_source_name_129, const_str_plain_set );
        Py_DECREF( tmp_source_name_129 );
        if ( tmp_dict_value_54 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_63 );

            exception_lineno = 148;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_37 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_54, tmp_dict_value_54 );
        Py_DECREF( tmp_dict_value_54 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_55 = const_str_plain_selectmode;
        tmp_dict_value_55 = const_str_plain_browse;
        tmp_res = PyDict_SetItem( tmp_kw_name_37, tmp_dict_key_55, tmp_dict_value_55 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 148;
        tmp_call_result_12 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_63, tmp_kw_name_37 );
        Py_DECREF( tmp_called_name_63 );
        Py_DECREF( tmp_kw_name_37 );
        if ( tmp_call_result_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 148;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_12 );
    }
    {
        PyObject *tmp_called_name_64;
        PyObject *tmp_source_name_131;
        PyObject *tmp_source_name_132;
        PyObject *tmp_call_result_13;
        PyObject *tmp_kw_name_38;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_132 = PyCell_GET( par_self );
        tmp_source_name_131 = LOOKUP_ATTRIBUTE( tmp_source_name_132, const_str_plain_ctrl_frame );
        if ( tmp_source_name_131 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 150;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_64 = LOOKUP_ATTRIBUTE( tmp_source_name_131, const_str_plain_pack );
        Py_DECREF( tmp_source_name_131 );
        if ( tmp_called_name_64 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 150;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_38 = PyDict_Copy( const_dict_39ca36b2ad91eb500a98a2faae94b20a );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 150;
        tmp_call_result_13 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_64, tmp_kw_name_38 );
        Py_DECREF( tmp_called_name_64 );
        Py_DECREF( tmp_kw_name_38 );
        if ( tmp_call_result_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 150;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_13 );
    }
    {
        PyObject *tmp_called_name_65;
        PyObject *tmp_source_name_133;
        PyObject *tmp_source_name_134;
        PyObject *tmp_call_result_14;
        PyObject *tmp_kw_name_39;
        PyObject *tmp_dict_key_56;
        PyObject *tmp_dict_value_56;
        PyObject *tmp_dict_key_57;
        PyObject *tmp_dict_value_57;
        PyObject *tmp_dict_key_58;
        PyObject *tmp_dict_value_58;
        PyObject *tmp_source_name_135;
        PyObject *tmp_mvar_value_60;
        PyObject *tmp_dict_key_59;
        PyObject *tmp_dict_value_59;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_134 = PyCell_GET( par_self );
        tmp_source_name_133 = LOOKUP_ATTRIBUTE( tmp_source_name_134, const_str_plain_btn_frame );
        if ( tmp_source_name_133 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 151;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_133, const_str_plain_pack );
        Py_DECREF( tmp_source_name_133 );
        if ( tmp_called_name_65 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 151;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_56 = const_str_plain_fill;
        tmp_dict_value_56 = const_str_plain_x;
        tmp_kw_name_39 = _PyDict_NewPresized( 4 );
        tmp_res = PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_56, tmp_dict_value_56 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_57 = const_str_plain_expand;
        tmp_dict_value_57 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_57, tmp_dict_value_57 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_58 = const_str_plain_side;
        tmp_mvar_value_60 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_60 == NULL ))
        {
            tmp_mvar_value_60 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_60 == NULL )
        {
            Py_DECREF( tmp_called_name_65 );
            Py_DECREF( tmp_kw_name_39 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 151;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_135 = tmp_mvar_value_60;
        tmp_dict_value_58 = LOOKUP_ATTRIBUTE( tmp_source_name_135, const_str_plain_TOP );
        if ( tmp_dict_value_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_65 );
            Py_DECREF( tmp_kw_name_39 );

            exception_lineno = 151;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_58, tmp_dict_value_58 );
        Py_DECREF( tmp_dict_value_58 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_59 = const_str_plain_anchor;
        tmp_dict_value_59 = const_str_plain_n;
        tmp_res = PyDict_SetItem( tmp_kw_name_39, tmp_dict_key_59, tmp_dict_value_59 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 151;
        tmp_call_result_14 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_65, tmp_kw_name_39 );
        Py_DECREF( tmp_called_name_65 );
        Py_DECREF( tmp_kw_name_39 );
        if ( tmp_call_result_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 151;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_14 );
    }
    {
        PyObject *tmp_called_name_66;
        PyObject *tmp_source_name_136;
        PyObject *tmp_source_name_137;
        PyObject *tmp_call_result_15;
        PyObject *tmp_kw_name_40;
        PyObject *tmp_dict_key_60;
        PyObject *tmp_dict_value_60;
        PyObject *tmp_dict_key_61;
        PyObject *tmp_dict_value_61;
        PyObject *tmp_dict_key_62;
        PyObject *tmp_dict_value_62;
        PyObject *tmp_source_name_138;
        PyObject *tmp_mvar_value_61;
        PyObject *tmp_dict_key_63;
        PyObject *tmp_dict_value_63;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_137 = PyCell_GET( par_self );
        tmp_source_name_136 = LOOKUP_ATTRIBUTE( tmp_source_name_137, const_str_plain_table_frame );
        if ( tmp_source_name_136 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 152;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_66 = LOOKUP_ATTRIBUTE( tmp_source_name_136, const_str_plain_pack );
        Py_DECREF( tmp_source_name_136 );
        if ( tmp_called_name_66 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 152;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_60 = const_str_plain_fill;
        tmp_dict_value_60 = const_str_plain_both;
        tmp_kw_name_40 = _PyDict_NewPresized( 4 );
        tmp_res = PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_60, tmp_dict_value_60 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_61 = const_str_plain_expand;
        tmp_dict_value_61 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_61, tmp_dict_value_61 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_62 = const_str_plain_side;
        tmp_mvar_value_61 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_61 == NULL ))
        {
            tmp_mvar_value_61 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_61 == NULL )
        {
            Py_DECREF( tmp_called_name_66 );
            Py_DECREF( tmp_kw_name_40 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 152;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_138 = tmp_mvar_value_61;
        tmp_dict_value_62 = LOOKUP_ATTRIBUTE( tmp_source_name_138, const_str_plain_TOP );
        if ( tmp_dict_value_62 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_66 );
            Py_DECREF( tmp_kw_name_40 );

            exception_lineno = 152;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_62, tmp_dict_value_62 );
        Py_DECREF( tmp_dict_value_62 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_63 = const_str_plain_anchor;
        tmp_dict_value_63 = const_str_plain_n;
        tmp_res = PyDict_SetItem( tmp_kw_name_40, tmp_dict_key_63, tmp_dict_value_63 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 152;
        tmp_call_result_15 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_66, tmp_kw_name_40 );
        Py_DECREF( tmp_called_name_66 );
        Py_DECREF( tmp_kw_name_40 );
        if ( tmp_call_result_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 152;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_15 );
    }
    {
        PyObject *tmp_called_name_67;
        PyObject *tmp_source_name_139;
        PyObject *tmp_source_name_140;
        PyObject *tmp_call_result_16;
        PyObject *tmp_kw_name_41;
        PyObject *tmp_dict_key_64;
        PyObject *tmp_dict_value_64;
        PyObject *tmp_dict_key_65;
        PyObject *tmp_dict_value_65;
        PyObject *tmp_dict_key_66;
        PyObject *tmp_dict_value_66;
        PyObject *tmp_source_name_141;
        PyObject *tmp_mvar_value_62;
        PyObject *tmp_dict_key_67;
        PyObject *tmp_dict_value_67;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_140 = PyCell_GET( par_self );
        tmp_source_name_139 = LOOKUP_ATTRIBUTE( tmp_source_name_140, const_str_plain_sec_btn_frame );
        if ( tmp_source_name_139 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_67 = LOOKUP_ATTRIBUTE( tmp_source_name_139, const_str_plain_pack );
        Py_DECREF( tmp_source_name_139 );
        if ( tmp_called_name_67 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_64 = const_str_plain_fill;
        tmp_dict_value_64 = const_str_plain_x;
        tmp_kw_name_41 = _PyDict_NewPresized( 4 );
        tmp_res = PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_64, tmp_dict_value_64 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_65 = const_str_plain_expand;
        tmp_dict_value_65 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_65, tmp_dict_value_65 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_66 = const_str_plain_side;
        tmp_mvar_value_62 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_62 == NULL ))
        {
            tmp_mvar_value_62 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_62 == NULL )
        {
            Py_DECREF( tmp_called_name_67 );
            Py_DECREF( tmp_kw_name_41 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 153;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_141 = tmp_mvar_value_62;
        tmp_dict_value_66 = LOOKUP_ATTRIBUTE( tmp_source_name_141, const_str_plain_TOP );
        if ( tmp_dict_value_66 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_67 );
            Py_DECREF( tmp_kw_name_41 );

            exception_lineno = 153;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_66, tmp_dict_value_66 );
        Py_DECREF( tmp_dict_value_66 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_67 = const_str_plain_anchor;
        tmp_dict_value_67 = const_str_plain_s;
        tmp_res = PyDict_SetItem( tmp_kw_name_41, tmp_dict_key_67, tmp_dict_value_67 );
        assert( !(tmp_res != 0) );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 153;
        tmp_call_result_16 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_67, tmp_kw_name_41 );
        Py_DECREF( tmp_called_name_67 );
        Py_DECREF( tmp_kw_name_41 );
        if ( tmp_call_result_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_16 );
    }
    {
        PyObject *tmp_called_name_68;
        PyObject *tmp_source_name_142;
        PyObject *tmp_source_name_143;
        PyObject *tmp_call_result_17;
        PyObject *tmp_kw_name_42;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_143 = PyCell_GET( par_self );
        tmp_source_name_142 = LOOKUP_ATTRIBUTE( tmp_source_name_143, const_str_plain_left_frame );
        if ( tmp_source_name_142 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 155;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_142, const_str_plain_pack );
        Py_DECREF( tmp_source_name_142 );
        if ( tmp_called_name_68 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 155;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_42 = PyDict_Copy( const_dict_3584f923e93519852eb3b60cbfff8c61 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 155;
        tmp_call_result_17 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_68, tmp_kw_name_42 );
        Py_DECREF( tmp_called_name_68 );
        Py_DECREF( tmp_kw_name_42 );
        if ( tmp_call_result_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 155;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_17 );
    }
    {
        PyObject *tmp_called_name_69;
        PyObject *tmp_source_name_144;
        PyObject *tmp_source_name_145;
        PyObject *tmp_call_result_18;
        PyObject *tmp_kw_name_43;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_145 = PyCell_GET( par_self );
        tmp_source_name_144 = LOOKUP_ATTRIBUTE( tmp_source_name_145, const_str_plain_internal_frame );
        if ( tmp_source_name_144 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 156;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_69 = LOOKUP_ATTRIBUTE( tmp_source_name_144, const_str_plain_pack );
        Py_DECREF( tmp_source_name_144 );
        if ( tmp_called_name_69 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 156;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_43 = PyDict_Copy( const_dict_843f8dee56a2d8d35350c85cedbea8e9 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 156;
        tmp_call_result_18 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_69, tmp_kw_name_43 );
        Py_DECREF( tmp_called_name_69 );
        Py_DECREF( tmp_kw_name_43 );
        if ( tmp_call_result_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 156;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_18 );
    }
    {
        PyObject *tmp_called_name_70;
        PyObject *tmp_source_name_146;
        PyObject *tmp_source_name_147;
        PyObject *tmp_call_result_19;
        PyObject *tmp_kw_name_44;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_147 = PyCell_GET( par_self );
        tmp_source_name_146 = LOOKUP_ATTRIBUTE( tmp_source_name_147, const_str_plain_h_scroll_frame );
        if ( tmp_source_name_146 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 157;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_146, const_str_plain_pack );
        Py_DECREF( tmp_source_name_146 );
        if ( tmp_called_name_70 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 157;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_44 = PyDict_Copy( const_dict_e9bcd17dbcefea8e779c4693868d05bc );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 157;
        tmp_call_result_19 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_70, tmp_kw_name_44 );
        Py_DECREF( tmp_called_name_70 );
        Py_DECREF( tmp_kw_name_44 );
        if ( tmp_call_result_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 157;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_19 );
    }
    {
        PyObject *tmp_called_name_71;
        PyObject *tmp_source_name_148;
        PyObject *tmp_source_name_149;
        PyObject *tmp_call_result_20;
        PyObject *tmp_kw_name_45;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_149 = PyCell_GET( par_self );
        tmp_source_name_148 = LOOKUP_ATTRIBUTE( tmp_source_name_149, const_str_plain_image_frame );
        if ( tmp_source_name_148 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_71 = LOOKUP_ATTRIBUTE( tmp_source_name_148, const_str_plain_pack );
        Py_DECREF( tmp_source_name_148 );
        if ( tmp_called_name_71 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_45 = PyDict_Copy( const_dict_3584f923e93519852eb3b60cbfff8c61 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 159;
        tmp_call_result_20 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_71, tmp_kw_name_45 );
        Py_DECREF( tmp_called_name_71 );
        Py_DECREF( tmp_kw_name_45 );
        if ( tmp_call_result_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_20 );
    }
    {
        PyObject *tmp_called_name_72;
        PyObject *tmp_source_name_150;
        PyObject *tmp_source_name_151;
        PyObject *tmp_call_result_21;
        PyObject *tmp_kw_name_46;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_151 = PyCell_GET( par_self );
        tmp_source_name_150 = LOOKUP_ATTRIBUTE( tmp_source_name_151, const_str_plain_v_scroll_frame );
        if ( tmp_source_name_150 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 160;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_72 = LOOKUP_ATTRIBUTE( tmp_source_name_150, const_str_plain_pack );
        Py_DECREF( tmp_source_name_150 );
        if ( tmp_called_name_72 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 160;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_46 = PyDict_Copy( const_dict_39ca36b2ad91eb500a98a2faae94b20a );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 160;
        tmp_call_result_21 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_72, tmp_kw_name_46 );
        Py_DECREF( tmp_called_name_72 );
        Py_DECREF( tmp_kw_name_46 );
        if ( tmp_call_result_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 160;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_21 );
    }
    {
        PyObject *tmp_called_name_73;
        PyObject *tmp_source_name_152;
        PyObject *tmp_source_name_153;
        PyObject *tmp_call_result_22;
        PyObject *tmp_kw_name_47;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_153 = PyCell_GET( par_self );
        tmp_source_name_152 = LOOKUP_ATTRIBUTE( tmp_source_name_153, const_str_plain_JpgCanvas );
        if ( tmp_source_name_152 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 162;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_73 = LOOKUP_ATTRIBUTE( tmp_source_name_152, const_str_plain_pack );
        Py_DECREF( tmp_source_name_152 );
        if ( tmp_called_name_73 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 162;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_47 = PyDict_Copy( const_dict_cd18443782360158901000a04a62f9b8 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 162;
        tmp_call_result_22 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_73, tmp_kw_name_47 );
        Py_DECREF( tmp_called_name_73 );
        Py_DECREF( tmp_kw_name_47 );
        if ( tmp_call_result_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 162;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_22 );
    }
    {
        PyObject *tmp_called_name_74;
        PyObject *tmp_source_name_154;
        PyObject *tmp_source_name_155;
        PyObject *tmp_call_result_23;
        PyObject *tmp_kw_name_48;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_155 = PyCell_GET( par_self );
        tmp_source_name_154 = LOOKUP_ATTRIBUTE( tmp_source_name_155, const_str_plain_xyentry );
        if ( tmp_source_name_154 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 163;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_74 = LOOKUP_ATTRIBUTE( tmp_source_name_154, const_str_plain_pack );
        Py_DECREF( tmp_source_name_154 );
        if ( tmp_called_name_74 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 163;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_48 = PyDict_Copy( const_dict_c8f191ee18e314cbd54f4429f11fd237 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 163;
        tmp_call_result_23 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_74, tmp_kw_name_48 );
        Py_DECREF( tmp_called_name_74 );
        Py_DECREF( tmp_kw_name_48 );
        if ( tmp_call_result_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 163;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_23 );
    }
    {
        PyObject *tmp_called_name_75;
        PyObject *tmp_source_name_156;
        PyObject *tmp_source_name_157;
        PyObject *tmp_call_result_24;
        PyObject *tmp_kw_name_49;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_157 = PyCell_GET( par_self );
        tmp_source_name_156 = LOOKUP_ATTRIBUTE( tmp_source_name_157, const_str_plain_VertImgScroll );
        if ( tmp_source_name_156 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 164;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_75 = LOOKUP_ATTRIBUTE( tmp_source_name_156, const_str_plain_pack );
        Py_DECREF( tmp_source_name_156 );
        if ( tmp_called_name_75 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 164;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_49 = PyDict_Copy( const_dict_8bd173e26c1d838fc770fb6a2be4205f );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 164;
        tmp_call_result_24 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_75, tmp_kw_name_49 );
        Py_DECREF( tmp_called_name_75 );
        Py_DECREF( tmp_kw_name_49 );
        if ( tmp_call_result_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 164;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_24 );
    }
    {
        PyObject *tmp_called_name_76;
        PyObject *tmp_source_name_158;
        PyObject *tmp_source_name_159;
        PyObject *tmp_call_result_25;
        PyObject *tmp_kw_name_50;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_159 = PyCell_GET( par_self );
        tmp_source_name_158 = LOOKUP_ATTRIBUTE( tmp_source_name_159, const_str_plain_HorizImgScroll );
        if ( tmp_source_name_158 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 165;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_76 = LOOKUP_ATTRIBUTE( tmp_source_name_158, const_str_plain_pack );
        Py_DECREF( tmp_source_name_158 );
        if ( tmp_called_name_76 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 165;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_50 = PyDict_Copy( const_dict_1b28b80177f7157d826cfed027094bed );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 165;
        tmp_call_result_25 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_76, tmp_kw_name_50 );
        Py_DECREF( tmp_called_name_76 );
        Py_DECREF( tmp_kw_name_50 );
        if ( tmp_call_result_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 165;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_25 );
    }
    {
        PyObject *tmp_called_name_77;
        PyObject *tmp_source_name_160;
        PyObject *tmp_source_name_161;
        PyObject *tmp_call_result_26;
        PyObject *tmp_kw_name_51;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_161 = PyCell_GET( par_self );
        tmp_source_name_160 = LOOKUP_ATTRIBUTE( tmp_source_name_161, const_str_plain_img_open_btn );
        if ( tmp_source_name_160 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_77 = LOOKUP_ATTRIBUTE( tmp_source_name_160, const_str_plain_pack );
        Py_DECREF( tmp_source_name_160 );
        if ( tmp_called_name_77 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_51 = PyDict_Copy( const_dict_69685cdba574c74e631e147de131a5d7 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 167;
        tmp_call_result_26 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_77, tmp_kw_name_51 );
        Py_DECREF( tmp_called_name_77 );
        Py_DECREF( tmp_kw_name_51 );
        if ( tmp_call_result_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_26 );
    }
    {
        PyObject *tmp_called_name_78;
        PyObject *tmp_source_name_162;
        PyObject *tmp_source_name_163;
        PyObject *tmp_call_result_27;
        PyObject *tmp_kw_name_52;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_163 = PyCell_GET( par_self );
        tmp_source_name_162 = LOOKUP_ATTRIBUTE( tmp_source_name_163, const_str_plain_reg_marker_btn );
        if ( tmp_source_name_162 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 168;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_78 = LOOKUP_ATTRIBUTE( tmp_source_name_162, const_str_plain_pack );
        Py_DECREF( tmp_source_name_162 );
        if ( tmp_called_name_78 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 168;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_52 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 168;
        tmp_call_result_27 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_78, tmp_kw_name_52 );
        Py_DECREF( tmp_called_name_78 );
        Py_DECREF( tmp_kw_name_52 );
        if ( tmp_call_result_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 168;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_27 );
    }
    {
        PyObject *tmp_called_name_79;
        PyObject *tmp_source_name_164;
        PyObject *tmp_source_name_165;
        PyObject *tmp_call_result_28;
        PyObject *tmp_kw_name_53;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_165 = PyCell_GET( par_self );
        tmp_source_name_164 = LOOKUP_ATTRIBUTE( tmp_source_name_165, const_str_plain_dereg_marker_btn );
        if ( tmp_source_name_164 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_79 = LOOKUP_ATTRIBUTE( tmp_source_name_164, const_str_plain_pack );
        Py_DECREF( tmp_source_name_164 );
        if ( tmp_called_name_79 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_53 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 169;
        tmp_call_result_28 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_79, tmp_kw_name_53 );
        Py_DECREF( tmp_called_name_79 );
        Py_DECREF( tmp_kw_name_53 );
        if ( tmp_call_result_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_28 );
    }
    {
        PyObject *tmp_called_name_80;
        PyObject *tmp_source_name_166;
        PyObject *tmp_source_name_167;
        PyObject *tmp_call_result_29;
        PyObject *tmp_kw_name_54;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_167 = PyCell_GET( par_self );
        tmp_source_name_166 = LOOKUP_ATTRIBUTE( tmp_source_name_167, const_str_plain_zoom_in_btn );
        if ( tmp_source_name_166 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_80 = LOOKUP_ATTRIBUTE( tmp_source_name_166, const_str_plain_pack );
        Py_DECREF( tmp_source_name_166 );
        if ( tmp_called_name_80 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_54 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 170;
        tmp_call_result_29 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_80, tmp_kw_name_54 );
        Py_DECREF( tmp_called_name_80 );
        Py_DECREF( tmp_kw_name_54 );
        if ( tmp_call_result_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_29 );
    }
    {
        PyObject *tmp_called_name_81;
        PyObject *tmp_source_name_168;
        PyObject *tmp_source_name_169;
        PyObject *tmp_call_result_30;
        PyObject *tmp_kw_name_55;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_169 = PyCell_GET( par_self );
        tmp_source_name_168 = LOOKUP_ATTRIBUTE( tmp_source_name_169, const_str_plain_zoom_out_btn );
        if ( tmp_source_name_168 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 171;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_81 = LOOKUP_ATTRIBUTE( tmp_source_name_168, const_str_plain_pack );
        Py_DECREF( tmp_source_name_168 );
        if ( tmp_called_name_81 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 171;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_55 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 171;
        tmp_call_result_30 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_81, tmp_kw_name_55 );
        Py_DECREF( tmp_called_name_81 );
        Py_DECREF( tmp_kw_name_55 );
        if ( tmp_call_result_30 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 171;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_30 );
    }
    {
        PyObject *tmp_called_name_82;
        PyObject *tmp_source_name_170;
        PyObject *tmp_source_name_171;
        PyObject *tmp_call_result_31;
        PyObject *tmp_kw_name_56;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_171 = PyCell_GET( par_self );
        tmp_source_name_170 = LOOKUP_ATTRIBUTE( tmp_source_name_171, const_str_plain_zoom_bar );
        if ( tmp_source_name_170 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 172;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_82 = LOOKUP_ATTRIBUTE( tmp_source_name_170, const_str_plain_pack );
        Py_DECREF( tmp_source_name_170 );
        if ( tmp_called_name_82 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 172;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_56 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 172;
        tmp_call_result_31 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_82, tmp_kw_name_56 );
        Py_DECREF( tmp_called_name_82 );
        Py_DECREF( tmp_kw_name_56 );
        if ( tmp_call_result_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 172;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_31 );
    }
    {
        PyObject *tmp_called_name_83;
        PyObject *tmp_source_name_172;
        PyObject *tmp_source_name_173;
        PyObject *tmp_call_result_32;
        PyObject *tmp_kw_name_57;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_173 = PyCell_GET( par_self );
        tmp_source_name_172 = LOOKUP_ATTRIBUTE( tmp_source_name_173, const_str_plain_zoom_factor_label );
        if ( tmp_source_name_172 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 173;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_83 = LOOKUP_ATTRIBUTE( tmp_source_name_172, const_str_plain_pack );
        Py_DECREF( tmp_source_name_172 );
        if ( tmp_called_name_83 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 173;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_57 = PyDict_Copy( const_dict_632bdb133f31db7a2f8b975160559743 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 173;
        tmp_call_result_32 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_83, tmp_kw_name_57 );
        Py_DECREF( tmp_called_name_83 );
        Py_DECREF( tmp_kw_name_57 );
        if ( tmp_call_result_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 173;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_32 );
    }
    {
        PyObject *tmp_called_name_84;
        PyObject *tmp_source_name_174;
        PyObject *tmp_source_name_175;
        PyObject *tmp_call_result_33;
        PyObject *tmp_kw_name_58;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_175 = PyCell_GET( par_self );
        tmp_source_name_174 = LOOKUP_ATTRIBUTE( tmp_source_name_175, const_str_plain_hint_label );
        if ( tmp_source_name_174 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 175;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_84 = LOOKUP_ATTRIBUTE( tmp_source_name_174, const_str_plain_pack );
        Py_DECREF( tmp_source_name_174 );
        if ( tmp_called_name_84 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 175;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_58 = PyDict_Copy( const_dict_61a7fd64943dba580017d10d3bca2711 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 175;
        tmp_call_result_33 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_84, tmp_kw_name_58 );
        Py_DECREF( tmp_called_name_84 );
        Py_DECREF( tmp_kw_name_58 );
        if ( tmp_call_result_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 175;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_33 );
    }
    {
        PyObject *tmp_called_name_85;
        PyObject *tmp_source_name_176;
        PyObject *tmp_source_name_177;
        PyObject *tmp_call_result_34;
        PyObject *tmp_kw_name_59;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_177 = PyCell_GET( par_self );
        tmp_source_name_176 = LOOKUP_ATTRIBUTE( tmp_source_name_177, const_str_plain_marker_table );
        if ( tmp_source_name_176 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 176;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_85 = LOOKUP_ATTRIBUTE( tmp_source_name_176, const_str_plain_pack );
        Py_DECREF( tmp_source_name_176 );
        if ( tmp_called_name_85 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 176;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_59 = PyDict_Copy( const_dict_7cc8ea2452b7529ef5642e9b0f43bebd );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 176;
        tmp_call_result_34 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_85, tmp_kw_name_59 );
        Py_DECREF( tmp_called_name_85 );
        Py_DECREF( tmp_kw_name_59 );
        if ( tmp_call_result_34 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 176;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_34 );
    }
    {
        PyObject *tmp_called_name_86;
        PyObject *tmp_source_name_178;
        PyObject *tmp_source_name_179;
        PyObject *tmp_call_result_35;
        PyObject *tmp_kw_name_60;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_179 = PyCell_GET( par_self );
        tmp_source_name_178 = LOOKUP_ATTRIBUTE( tmp_source_name_179, const_str_plain_scroll );
        if ( tmp_source_name_178 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 177;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_86 = LOOKUP_ATTRIBUTE( tmp_source_name_178, const_str_plain_pack );
        Py_DECREF( tmp_source_name_178 );
        if ( tmp_called_name_86 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 177;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_60 = PyDict_Copy( const_dict_387ffba8c6007802d2ff1057b76f718d );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 177;
        tmp_call_result_35 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_86, tmp_kw_name_60 );
        Py_DECREF( tmp_called_name_86 );
        Py_DECREF( tmp_kw_name_60 );
        if ( tmp_call_result_35 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 177;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_35 );
    }
    {
        PyObject *tmp_called_name_87;
        PyObject *tmp_source_name_180;
        PyObject *tmp_source_name_181;
        PyObject *tmp_call_result_36;
        PyObject *tmp_kw_name_61;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_181 = PyCell_GET( par_self );
        tmp_source_name_180 = LOOKUP_ATTRIBUTE( tmp_source_name_181, const_str_plain_restore_markers_btn );
        if ( tmp_source_name_180 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 178;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_180, const_str_plain_pack );
        Py_DECREF( tmp_source_name_180 );
        if ( tmp_called_name_87 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 178;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_61 = PyDict_Copy( const_dict_607b85ec57ab5596c680ca014e9c8645 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 178;
        tmp_call_result_36 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_87, tmp_kw_name_61 );
        Py_DECREF( tmp_called_name_87 );
        Py_DECREF( tmp_kw_name_61 );
        if ( tmp_call_result_36 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 178;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_36 );
    }
    {
        PyObject *tmp_called_name_88;
        PyObject *tmp_source_name_182;
        PyObject *tmp_source_name_183;
        PyObject *tmp_call_result_37;
        PyObject *tmp_kw_name_62;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_183 = PyCell_GET( par_self );
        tmp_source_name_182 = LOOKUP_ATTRIBUTE( tmp_source_name_183, const_str_plain_save_markers_btn );
        if ( tmp_source_name_182 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_88 = LOOKUP_ATTRIBUTE( tmp_source_name_182, const_str_plain_pack );
        Py_DECREF( tmp_source_name_182 );
        if ( tmp_called_name_88 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_62 = PyDict_Copy( const_dict_607b85ec57ab5596c680ca014e9c8645 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 179;
        tmp_call_result_37 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_88, tmp_kw_name_62 );
        Py_DECREF( tmp_called_name_88 );
        Py_DECREF( tmp_kw_name_62 );
        if ( tmp_call_result_37 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_37 );
    }
    {
        PyObject *tmp_called_name_89;
        PyObject *tmp_source_name_184;
        PyObject *tmp_source_name_185;
        PyObject *tmp_call_result_38;
        PyObject *tmp_kw_name_63;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_185 = PyCell_GET( par_self );
        tmp_source_name_184 = LOOKUP_ATTRIBUTE( tmp_source_name_185, const_str_plain_draw_grid_btn );
        if ( tmp_source_name_184 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 180;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_184, const_str_plain_pack );
        Py_DECREF( tmp_source_name_184 );
        if ( tmp_called_name_89 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 180;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_63 = PyDict_Copy( const_dict_9b757b99718b3588fd7491e72a547151 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 180;
        tmp_call_result_38 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_89, tmp_kw_name_63 );
        Py_DECREF( tmp_called_name_89 );
        Py_DECREF( tmp_kw_name_63 );
        if ( tmp_call_result_38 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 180;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_38 );
    }
    {
        PyObject *tmp_called_name_90;
        PyObject *tmp_source_name_186;
        PyObject *tmp_source_name_187;
        PyObject *tmp_call_result_39;
        PyObject *tmp_kw_name_64;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_187 = PyCell_GET( par_self );
        tmp_source_name_186 = LOOKUP_ATTRIBUTE( tmp_source_name_187, const_str_plain_grid_color_btn );
        if ( tmp_source_name_186 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 181;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_90 = LOOKUP_ATTRIBUTE( tmp_source_name_186, const_str_plain_pack );
        Py_DECREF( tmp_source_name_186 );
        if ( tmp_called_name_90 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 181;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_64 = PyDict_Copy( const_dict_c81e51d900f46841d2257bc020593429 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 181;
        tmp_call_result_39 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_90, tmp_kw_name_64 );
        Py_DECREF( tmp_called_name_90 );
        Py_DECREF( tmp_kw_name_64 );
        if ( tmp_call_result_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 181;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_39 );
    }
    {
        PyObject *tmp_called_name_91;
        PyObject *tmp_source_name_188;
        PyObject *tmp_source_name_189;
        PyObject *tmp_call_result_40;
        PyObject *tmp_kw_name_65;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_189 = PyCell_GET( par_self );
        tmp_source_name_188 = LOOKUP_ATTRIBUTE( tmp_source_name_189, const_str_plain_grid_size_combo );
        if ( tmp_source_name_188 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 182;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_91 = LOOKUP_ATTRIBUTE( tmp_source_name_188, const_str_plain_pack );
        Py_DECREF( tmp_source_name_188 );
        if ( tmp_called_name_91 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 182;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_65 = PyDict_Copy( const_dict_e774fcf6597a6add02277f245bf9520e );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 182;
        tmp_call_result_40 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_91, tmp_kw_name_65 );
        Py_DECREF( tmp_called_name_91 );
        Py_DECREF( tmp_kw_name_65 );
        if ( tmp_call_result_40 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 182;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_40 );
    }
    {
        PyObject *tmp_called_name_92;
        PyObject *tmp_source_name_190;
        PyObject *tmp_source_name_191;
        PyObject *tmp_call_result_41;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_source_name_192;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_191 = PyCell_GET( par_self );
        tmp_source_name_190 = LOOKUP_ATTRIBUTE( tmp_source_name_191, const_str_plain_marker_table );
        if ( tmp_source_name_190 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 185;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_92 = LOOKUP_ATTRIBUTE( tmp_source_name_190, const_str_plain_bind );
        Py_DECREF( tmp_source_name_190 );
        if ( tmp_called_name_92 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 185;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_18 = const_str_digest_6be3e39f1bed78d6d2b5d9685bddb660;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_192 = PyCell_GET( par_self );
        tmp_args_element_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_192, const_str_plain_marker_select );
        if ( tmp_args_element_name_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_92 );

            exception_lineno = 185;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 185;
        {
            PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19 };
            tmp_call_result_41 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_92, call_args );
        }

        Py_DECREF( tmp_called_name_92 );
        Py_DECREF( tmp_args_element_name_19 );
        if ( tmp_call_result_41 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 185;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_41 );
    }
    {
        PyObject *tmp_called_name_93;
        PyObject *tmp_source_name_193;
        PyObject *tmp_source_name_194;
        PyObject *tmp_call_result_42;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_source_name_195;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_194 = PyCell_GET( par_self );
        tmp_source_name_193 = LOOKUP_ATTRIBUTE( tmp_source_name_194, const_str_plain_marker_table );
        if ( tmp_source_name_193 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 186;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_93 = LOOKUP_ATTRIBUTE( tmp_source_name_193, const_str_plain_bind );
        Py_DECREF( tmp_source_name_193 );
        if ( tmp_called_name_93 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 186;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_20 = const_str_digest_5b05b371bb96da05cea21ad6a2e464c1;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_195 = PyCell_GET( par_self );
        tmp_args_element_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_195, const_str_plain_edit_mt_item );
        if ( tmp_args_element_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_93 );

            exception_lineno = 186;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 186;
        {
            PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21 };
            tmp_call_result_42 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_93, call_args );
        }

        Py_DECREF( tmp_called_name_93 );
        Py_DECREF( tmp_args_element_name_21 );
        if ( tmp_call_result_42 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 186;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_42 );
    }
    {
        PyObject *tmp_called_name_94;
        PyObject *tmp_source_name_196;
        PyObject *tmp_source_name_197;
        PyObject *tmp_call_result_43;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_source_name_198;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_197 = PyCell_GET( par_self );
        tmp_source_name_196 = LOOKUP_ATTRIBUTE( tmp_source_name_197, const_str_plain_marker_table );
        if ( tmp_source_name_196 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_94 = LOOKUP_ATTRIBUTE( tmp_source_name_196, const_str_plain_bind );
        Py_DECREF( tmp_source_name_196 );
        if ( tmp_called_name_94 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_22 = const_str_angle_Return;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_198 = PyCell_GET( par_self );
        tmp_args_element_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_198, const_str_plain_edit_mt_item );
        if ( tmp_args_element_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_94 );

            exception_lineno = 187;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 187;
        {
            PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23 };
            tmp_call_result_43 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_94, call_args );
        }

        Py_DECREF( tmp_called_name_94 );
        Py_DECREF( tmp_args_element_name_23 );
        if ( tmp_call_result_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_43 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_199;
        PyObject *tmp_call_result_44;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_199 = PyCell_GET( par_self );
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_199, const_str_plain_img_open_btn );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 189;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_24 = const_str_angle_Enter;
        tmp_args_element_name_25 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_1_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_25)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_25)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 189;
        {
            PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25 };
            tmp_call_result_44 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_5 );
        Py_DECREF( tmp_args_element_name_25 );
        if ( tmp_call_result_44 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 189;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_44 );
    }
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_source_name_200;
        PyObject *tmp_call_result_45;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_200 = PyCell_GET( par_self );
        tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_200, const_str_plain_img_open_btn );
        if ( tmp_called_instance_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_26 = const_str_angle_Leave;
        tmp_args_element_name_27 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_2_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_27)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_27)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 191;
        {
            PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27 };
            tmp_call_result_45 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_6 );
        Py_DECREF( tmp_args_element_name_27 );
        if ( tmp_call_result_45 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_45 );
    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_source_name_201;
        PyObject *tmp_call_result_46;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_201 = PyCell_GET( par_self );
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE( tmp_source_name_201, const_str_plain_zoom_bar );
        if ( tmp_called_instance_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_28 = const_str_angle_Enter;
        tmp_args_element_name_29 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_3_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_29)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_29)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 193;
        {
            PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29 };
            tmp_call_result_46 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_7 );
        Py_DECREF( tmp_args_element_name_29 );
        if ( tmp_call_result_46 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_46 );
    }
    {
        PyObject *tmp_called_instance_8;
        PyObject *tmp_source_name_202;
        PyObject *tmp_call_result_47;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_202 = PyCell_GET( par_self );
        tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_202, const_str_plain_zoom_bar );
        if ( tmp_called_instance_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 194;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_30 = const_str_angle_Leave;
        tmp_args_element_name_31 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_4_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_31)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_31)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 194;
        {
            PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31 };
            tmp_call_result_47 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_8 );
        Py_DECREF( tmp_args_element_name_31 );
        if ( tmp_call_result_47 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 194;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_47 );
    }
    {
        PyObject *tmp_called_instance_9;
        PyObject *tmp_source_name_203;
        PyObject *tmp_call_result_48;
        PyObject *tmp_args_element_name_32;
        PyObject *tmp_args_element_name_33;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_203 = PyCell_GET( par_self );
        tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_203, const_str_plain_reg_marker_btn );
        if ( tmp_called_instance_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 196;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_32 = const_str_angle_Enter;
        tmp_args_element_name_33 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_5_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_33)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_33)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 196;
        {
            PyObject *call_args[] = { tmp_args_element_name_32, tmp_args_element_name_33 };
            tmp_call_result_48 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_9 );
        Py_DECREF( tmp_args_element_name_33 );
        if ( tmp_call_result_48 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 196;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_48 );
    }
    {
        PyObject *tmp_called_instance_10;
        PyObject *tmp_source_name_204;
        PyObject *tmp_call_result_49;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_args_element_name_35;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_204 = PyCell_GET( par_self );
        tmp_called_instance_10 = LOOKUP_ATTRIBUTE( tmp_source_name_204, const_str_plain_reg_marker_btn );
        if ( tmp_called_instance_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_34 = const_str_angle_Leave;
        tmp_args_element_name_35 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_6_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_35)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_35)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 197;
        {
            PyObject *call_args[] = { tmp_args_element_name_34, tmp_args_element_name_35 };
            tmp_call_result_49 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_10 );
        Py_DECREF( tmp_args_element_name_35 );
        if ( tmp_call_result_49 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_49 );
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_source_name_205;
        PyObject *tmp_call_result_50;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_args_element_name_37;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_205 = PyCell_GET( par_self );
        tmp_called_instance_11 = LOOKUP_ATTRIBUTE( tmp_source_name_205, const_str_plain_reg_marker_btn );
        if ( tmp_called_instance_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_36 = const_str_angle_Enter;
        tmp_args_element_name_37 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_7_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_37)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_37)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 199;
        {
            PyObject *call_args[] = { tmp_args_element_name_36, tmp_args_element_name_37 };
            tmp_call_result_50 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_11 );
        Py_DECREF( tmp_args_element_name_37 );
        if ( tmp_call_result_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_50 );
    }
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_source_name_206;
        PyObject *tmp_call_result_51;
        PyObject *tmp_args_element_name_38;
        PyObject *tmp_args_element_name_39;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_206 = PyCell_GET( par_self );
        tmp_called_instance_12 = LOOKUP_ATTRIBUTE( tmp_source_name_206, const_str_plain_reg_marker_btn );
        if ( tmp_called_instance_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_38 = const_str_angle_Leave;
        tmp_args_element_name_39 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_8_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_39)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_39)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 200;
        {
            PyObject *call_args[] = { tmp_args_element_name_38, tmp_args_element_name_39 };
            tmp_call_result_51 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_12 );
        Py_DECREF( tmp_args_element_name_39 );
        if ( tmp_call_result_51 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_51 );
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_source_name_207;
        PyObject *tmp_call_result_52;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_args_element_name_41;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_207 = PyCell_GET( par_self );
        tmp_called_instance_13 = LOOKUP_ATTRIBUTE( tmp_source_name_207, const_str_plain_dereg_marker_btn );
        if ( tmp_called_instance_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_40 = const_str_angle_Enter;
        tmp_args_element_name_41 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_9_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_41)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_41)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 202;
        {
            PyObject *call_args[] = { tmp_args_element_name_40, tmp_args_element_name_41 };
            tmp_call_result_52 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_13 );
        Py_DECREF( tmp_args_element_name_41 );
        if ( tmp_call_result_52 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_52 );
    }
    {
        PyObject *tmp_called_instance_14;
        PyObject *tmp_source_name_208;
        PyObject *tmp_call_result_53;
        PyObject *tmp_args_element_name_42;
        PyObject *tmp_args_element_name_43;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_208 = PyCell_GET( par_self );
        tmp_called_instance_14 = LOOKUP_ATTRIBUTE( tmp_source_name_208, const_str_plain_dereg_marker_btn );
        if ( tmp_called_instance_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_42 = const_str_angle_Leave;
        tmp_args_element_name_43 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_10_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_43)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_43)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 203;
        {
            PyObject *call_args[] = { tmp_args_element_name_42, tmp_args_element_name_43 };
            tmp_call_result_53 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_14, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_14 );
        Py_DECREF( tmp_args_element_name_43 );
        if ( tmp_call_result_53 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_53 );
    }
    {
        PyObject *tmp_called_instance_15;
        PyObject *tmp_source_name_209;
        PyObject *tmp_call_result_54;
        PyObject *tmp_args_element_name_44;
        PyObject *tmp_args_element_name_45;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_209 = PyCell_GET( par_self );
        tmp_called_instance_15 = LOOKUP_ATTRIBUTE( tmp_source_name_209, const_str_plain_zoom_in_btn );
        if ( tmp_called_instance_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_44 = const_str_angle_Enter;
        tmp_args_element_name_45 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_11_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_45)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_45)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 205;
        {
            PyObject *call_args[] = { tmp_args_element_name_44, tmp_args_element_name_45 };
            tmp_call_result_54 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_15, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_15 );
        Py_DECREF( tmp_args_element_name_45 );
        if ( tmp_call_result_54 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_54 );
    }
    {
        PyObject *tmp_called_instance_16;
        PyObject *tmp_source_name_210;
        PyObject *tmp_call_result_55;
        PyObject *tmp_args_element_name_46;
        PyObject *tmp_args_element_name_47;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_210 = PyCell_GET( par_self );
        tmp_called_instance_16 = LOOKUP_ATTRIBUTE( tmp_source_name_210, const_str_plain_zoom_in_btn );
        if ( tmp_called_instance_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_46 = const_str_angle_Leave;
        tmp_args_element_name_47 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_12_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_47)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_47)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 206;
        {
            PyObject *call_args[] = { tmp_args_element_name_46, tmp_args_element_name_47 };
            tmp_call_result_55 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_16, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_16 );
        Py_DECREF( tmp_args_element_name_47 );
        if ( tmp_call_result_55 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_55 );
    }
    {
        PyObject *tmp_called_instance_17;
        PyObject *tmp_source_name_211;
        PyObject *tmp_call_result_56;
        PyObject *tmp_args_element_name_48;
        PyObject *tmp_args_element_name_49;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_211 = PyCell_GET( par_self );
        tmp_called_instance_17 = LOOKUP_ATTRIBUTE( tmp_source_name_211, const_str_plain_zoom_out_btn );
        if ( tmp_called_instance_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_48 = const_str_angle_Enter;
        tmp_args_element_name_49 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_13_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_49)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_49)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 208;
        {
            PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49 };
            tmp_call_result_56 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_17, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_17 );
        Py_DECREF( tmp_args_element_name_49 );
        if ( tmp_call_result_56 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_56 );
    }
    {
        PyObject *tmp_called_instance_18;
        PyObject *tmp_source_name_212;
        PyObject *tmp_call_result_57;
        PyObject *tmp_args_element_name_50;
        PyObject *tmp_args_element_name_51;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_212 = PyCell_GET( par_self );
        tmp_called_instance_18 = LOOKUP_ATTRIBUTE( tmp_source_name_212, const_str_plain_zoom_out_btn );
        if ( tmp_called_instance_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_50 = const_str_angle_Leave;
        tmp_args_element_name_51 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_14_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_51)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_51)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 209;
        {
            PyObject *call_args[] = { tmp_args_element_name_50, tmp_args_element_name_51 };
            tmp_call_result_57 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_18, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_18 );
        Py_DECREF( tmp_args_element_name_51 );
        if ( tmp_call_result_57 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_57 );
    }
    {
        PyObject *tmp_called_instance_19;
        PyObject *tmp_source_name_213;
        PyObject *tmp_call_result_58;
        PyObject *tmp_args_element_name_52;
        PyObject *tmp_args_element_name_53;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_213 = PyCell_GET( par_self );
        tmp_called_instance_19 = LOOKUP_ATTRIBUTE( tmp_source_name_213, const_str_plain_zoom_factor_label );
        if ( tmp_called_instance_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 211;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_52 = const_str_angle_Enter;
        tmp_args_element_name_53 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_15_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_53)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_53)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 211;
        {
            PyObject *call_args[] = { tmp_args_element_name_52, tmp_args_element_name_53 };
            tmp_call_result_58 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_19, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_19 );
        Py_DECREF( tmp_args_element_name_53 );
        if ( tmp_call_result_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 211;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_58 );
    }
    {
        PyObject *tmp_called_instance_20;
        PyObject *tmp_source_name_214;
        PyObject *tmp_call_result_59;
        PyObject *tmp_args_element_name_54;
        PyObject *tmp_args_element_name_55;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_214 = PyCell_GET( par_self );
        tmp_called_instance_20 = LOOKUP_ATTRIBUTE( tmp_source_name_214, const_str_plain_zoom_factor_label );
        if ( tmp_called_instance_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_54 = const_str_angle_Leave;
        tmp_args_element_name_55 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_16_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_55)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_55)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 212;
        {
            PyObject *call_args[] = { tmp_args_element_name_54, tmp_args_element_name_55 };
            tmp_call_result_59 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_20, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_20 );
        Py_DECREF( tmp_args_element_name_55 );
        if ( tmp_call_result_59 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_59 );
    }
    {
        PyObject *tmp_called_instance_21;
        PyObject *tmp_source_name_215;
        PyObject *tmp_call_result_60;
        PyObject *tmp_args_element_name_56;
        PyObject *tmp_args_element_name_57;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_215 = PyCell_GET( par_self );
        tmp_called_instance_21 = LOOKUP_ATTRIBUTE( tmp_source_name_215, const_str_plain_marker_table );
        if ( tmp_called_instance_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_56 = const_str_angle_Enter;
        tmp_args_element_name_57 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_17_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_57)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_57)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 214;
        {
            PyObject *call_args[] = { tmp_args_element_name_56, tmp_args_element_name_57 };
            tmp_call_result_60 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_21, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_21 );
        Py_DECREF( tmp_args_element_name_57 );
        if ( tmp_call_result_60 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_60 );
    }
    {
        PyObject *tmp_called_instance_22;
        PyObject *tmp_source_name_216;
        PyObject *tmp_call_result_61;
        PyObject *tmp_args_element_name_58;
        PyObject *tmp_args_element_name_59;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_216 = PyCell_GET( par_self );
        tmp_called_instance_22 = LOOKUP_ATTRIBUTE( tmp_source_name_216, const_str_plain_marker_table );
        if ( tmp_called_instance_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_58 = const_str_angle_Leave;
        tmp_args_element_name_59 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_18_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_59)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_59)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 216;
        {
            PyObject *call_args[] = { tmp_args_element_name_58, tmp_args_element_name_59 };
            tmp_call_result_61 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_22, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_22 );
        Py_DECREF( tmp_args_element_name_59 );
        if ( tmp_call_result_61 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_61 );
    }
    {
        PyObject *tmp_called_instance_23;
        PyObject *tmp_source_name_217;
        PyObject *tmp_call_result_62;
        PyObject *tmp_args_element_name_60;
        PyObject *tmp_args_element_name_61;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_217 = PyCell_GET( par_self );
        tmp_called_instance_23 = LOOKUP_ATTRIBUTE( tmp_source_name_217, const_str_plain_draw_grid_btn );
        if ( tmp_called_instance_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 218;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_60 = const_str_angle_Enter;
        tmp_args_element_name_61 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_19_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_61)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_61)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 218;
        {
            PyObject *call_args[] = { tmp_args_element_name_60, tmp_args_element_name_61 };
            tmp_call_result_62 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_23, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_23 );
        Py_DECREF( tmp_args_element_name_61 );
        if ( tmp_call_result_62 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 218;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_62 );
    }
    {
        PyObject *tmp_called_instance_24;
        PyObject *tmp_source_name_218;
        PyObject *tmp_call_result_63;
        PyObject *tmp_args_element_name_62;
        PyObject *tmp_args_element_name_63;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_218 = PyCell_GET( par_self );
        tmp_called_instance_24 = LOOKUP_ATTRIBUTE( tmp_source_name_218, const_str_plain_draw_grid_btn );
        if ( tmp_called_instance_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_62 = const_str_angle_Leave;
        tmp_args_element_name_63 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_20_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_63)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_63)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 219;
        {
            PyObject *call_args[] = { tmp_args_element_name_62, tmp_args_element_name_63 };
            tmp_call_result_63 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_24, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_24 );
        Py_DECREF( tmp_args_element_name_63 );
        if ( tmp_call_result_63 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_63 );
    }
    {
        PyObject *tmp_called_instance_25;
        PyObject *tmp_source_name_219;
        PyObject *tmp_call_result_64;
        PyObject *tmp_args_element_name_64;
        PyObject *tmp_args_element_name_65;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_219 = PyCell_GET( par_self );
        tmp_called_instance_25 = LOOKUP_ATTRIBUTE( tmp_source_name_219, const_str_plain_grid_size_combo );
        if ( tmp_called_instance_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 221;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_64 = const_str_angle_Enter;
        tmp_args_element_name_65 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_21_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_65)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_65)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 221;
        {
            PyObject *call_args[] = { tmp_args_element_name_64, tmp_args_element_name_65 };
            tmp_call_result_64 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_25, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_25 );
        Py_DECREF( tmp_args_element_name_65 );
        if ( tmp_call_result_64 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 221;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_64 );
    }
    {
        PyObject *tmp_called_instance_26;
        PyObject *tmp_source_name_220;
        PyObject *tmp_call_result_65;
        PyObject *tmp_args_element_name_66;
        PyObject *tmp_args_element_name_67;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_220 = PyCell_GET( par_self );
        tmp_called_instance_26 = LOOKUP_ATTRIBUTE( tmp_source_name_220, const_str_plain_grid_size_combo );
        if ( tmp_called_instance_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_66 = const_str_angle_Leave;
        tmp_args_element_name_67 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_22_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_67)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_67)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 222;
        {
            PyObject *call_args[] = { tmp_args_element_name_66, tmp_args_element_name_67 };
            tmp_call_result_65 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_26, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_26 );
        Py_DECREF( tmp_args_element_name_67 );
        if ( tmp_call_result_65 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_65 );
    }
    {
        PyObject *tmp_called_instance_27;
        PyObject *tmp_source_name_221;
        PyObject *tmp_call_result_66;
        PyObject *tmp_args_element_name_68;
        PyObject *tmp_args_element_name_69;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_221 = PyCell_GET( par_self );
        tmp_called_instance_27 = LOOKUP_ATTRIBUTE( tmp_source_name_221, const_str_plain_grid_color_btn );
        if ( tmp_called_instance_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_68 = const_str_angle_Enter;
        tmp_args_element_name_69 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_23_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_69)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_69)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 224;
        {
            PyObject *call_args[] = { tmp_args_element_name_68, tmp_args_element_name_69 };
            tmp_call_result_66 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_27, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_27 );
        Py_DECREF( tmp_args_element_name_69 );
        if ( tmp_call_result_66 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_66 );
    }
    {
        PyObject *tmp_called_instance_28;
        PyObject *tmp_source_name_222;
        PyObject *tmp_call_result_67;
        PyObject *tmp_args_element_name_70;
        PyObject *tmp_args_element_name_71;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_222 = PyCell_GET( par_self );
        tmp_called_instance_28 = LOOKUP_ATTRIBUTE( tmp_source_name_222, const_str_plain_grid_color_btn );
        if ( tmp_called_instance_28 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_70 = const_str_angle_Leave;
        tmp_args_element_name_71 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_24_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_71)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_71)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 225;
        {
            PyObject *call_args[] = { tmp_args_element_name_70, tmp_args_element_name_71 };
            tmp_call_result_67 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_28, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_28 );
        Py_DECREF( tmp_args_element_name_71 );
        if ( tmp_call_result_67 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_67 );
    }
    {
        PyObject *tmp_called_instance_29;
        PyObject *tmp_source_name_223;
        PyObject *tmp_call_result_68;
        PyObject *tmp_args_element_name_72;
        PyObject *tmp_args_element_name_73;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_223 = PyCell_GET( par_self );
        tmp_called_instance_29 = LOOKUP_ATTRIBUTE( tmp_source_name_223, const_str_plain_save_markers_btn );
        if ( tmp_called_instance_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_72 = const_str_angle_Enter;
        tmp_args_element_name_73 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_25_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_73)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_73)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 227;
        {
            PyObject *call_args[] = { tmp_args_element_name_72, tmp_args_element_name_73 };
            tmp_call_result_68 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_29, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_29 );
        Py_DECREF( tmp_args_element_name_73 );
        if ( tmp_call_result_68 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_68 );
    }
    {
        PyObject *tmp_called_instance_30;
        PyObject *tmp_source_name_224;
        PyObject *tmp_call_result_69;
        PyObject *tmp_args_element_name_74;
        PyObject *tmp_args_element_name_75;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_224 = PyCell_GET( par_self );
        tmp_called_instance_30 = LOOKUP_ATTRIBUTE( tmp_source_name_224, const_str_plain_save_markers_btn );
        if ( tmp_called_instance_30 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_74 = const_str_angle_Leave;
        tmp_args_element_name_75 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_26_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_75)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_75)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 228;
        {
            PyObject *call_args[] = { tmp_args_element_name_74, tmp_args_element_name_75 };
            tmp_call_result_69 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_30, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_30 );
        Py_DECREF( tmp_args_element_name_75 );
        if ( tmp_call_result_69 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_69 );
    }
    {
        PyObject *tmp_called_instance_31;
        PyObject *tmp_source_name_225;
        PyObject *tmp_call_result_70;
        PyObject *tmp_args_element_name_76;
        PyObject *tmp_args_element_name_77;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_225 = PyCell_GET( par_self );
        tmp_called_instance_31 = LOOKUP_ATTRIBUTE( tmp_source_name_225, const_str_plain_restore_markers_btn );
        if ( tmp_called_instance_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_76 = const_str_angle_Enter;
        tmp_args_element_name_77 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_27_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_77)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_77)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 230;
        {
            PyObject *call_args[] = { tmp_args_element_name_76, tmp_args_element_name_77 };
            tmp_call_result_70 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_31, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_31 );
        Py_DECREF( tmp_args_element_name_77 );
        if ( tmp_call_result_70 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_70 );
    }
    {
        PyObject *tmp_called_instance_32;
        PyObject *tmp_source_name_226;
        PyObject *tmp_call_result_71;
        PyObject *tmp_args_element_name_78;
        PyObject *tmp_args_element_name_79;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_226 = PyCell_GET( par_self );
        tmp_called_instance_32 = LOOKUP_ATTRIBUTE( tmp_source_name_226, const_str_plain_restore_markers_btn );
        if ( tmp_called_instance_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_78 = const_str_angle_Leave;
        tmp_args_element_name_79 = MAKE_FUNCTION___main__$$$function_13___init__$$$function_28_lambda(  );

        ((struct Nuitka_FunctionObject *)tmp_args_element_name_79)->m_closure[0] = par_self;
        Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_79)->m_closure[0] );


        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 231;
        {
            PyObject *call_args[] = { tmp_args_element_name_78, tmp_args_element_name_79 };
            tmp_call_result_71 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_32, const_str_plain_bind, call_args );
        }

        Py_DECREF( tmp_called_instance_32 );
        Py_DECREF( tmp_args_element_name_79 );
        if ( tmp_call_result_71 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_71 );
    }
    {
        PyObject *tmp_called_name_95;
        PyObject *tmp_source_name_227;
        PyObject *tmp_source_name_228;
        PyObject *tmp_call_result_72;
        PyObject *tmp_args_element_name_80;
        PyObject *tmp_args_element_name_81;
        PyObject *tmp_source_name_229;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_228 = PyCell_GET( par_self );
        tmp_source_name_227 = LOOKUP_ATTRIBUTE( tmp_source_name_228, const_str_plain_JpgCanvas );
        if ( tmp_source_name_227 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 233;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_95 = LOOKUP_ATTRIBUTE( tmp_source_name_227, const_str_plain_bind );
        Py_DECREF( tmp_source_name_227 );
        if ( tmp_called_name_95 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 233;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_80 = const_str_digest_1cb6bcc50333534b80b0dbdb17ec0142;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_229 = PyCell_GET( par_self );
        tmp_args_element_name_81 = LOOKUP_ATTRIBUTE( tmp_source_name_229, const_str_plain_scroll_canvas );
        if ( tmp_args_element_name_81 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_95 );

            exception_lineno = 233;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 233;
        {
            PyObject *call_args[] = { tmp_args_element_name_80, tmp_args_element_name_81 };
            tmp_call_result_72 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_95, call_args );
        }

        Py_DECREF( tmp_called_name_95 );
        Py_DECREF( tmp_args_element_name_81 );
        if ( tmp_call_result_72 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 233;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_72 );
    }
    {
        PyObject *tmp_called_name_96;
        PyObject *tmp_source_name_230;
        PyObject *tmp_source_name_231;
        PyObject *tmp_call_result_73;
        PyObject *tmp_args_element_name_82;
        PyObject *tmp_args_element_name_83;
        PyObject *tmp_source_name_232;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_231 = PyCell_GET( par_self );
        tmp_source_name_230 = LOOKUP_ATTRIBUTE( tmp_source_name_231, const_str_plain_JpgCanvas );
        if ( tmp_source_name_230 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 234;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_96 = LOOKUP_ATTRIBUTE( tmp_source_name_230, const_str_plain_bind );
        Py_DECREF( tmp_source_name_230 );
        if ( tmp_called_name_96 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 234;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_82 = const_str_digest_af814221305a5b80a0f017120c5947f0;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_232 = PyCell_GET( par_self );
        tmp_args_element_name_83 = LOOKUP_ATTRIBUTE( tmp_source_name_232, const_str_plain_store_mouse_pos );
        if ( tmp_args_element_name_83 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_96 );

            exception_lineno = 234;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 234;
        {
            PyObject *call_args[] = { tmp_args_element_name_82, tmp_args_element_name_83 };
            tmp_call_result_73 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_96, call_args );
        }

        Py_DECREF( tmp_called_name_96 );
        Py_DECREF( tmp_args_element_name_83 );
        if ( tmp_call_result_73 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 234;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_73 );
    }
    {
        PyObject *tmp_called_name_97;
        PyObject *tmp_source_name_233;
        PyObject *tmp_source_name_234;
        PyObject *tmp_call_result_74;
        PyObject *tmp_args_element_name_84;
        PyObject *tmp_args_element_name_85;
        PyObject *tmp_source_name_235;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_234 = PyCell_GET( par_self );
        tmp_source_name_233 = LOOKUP_ATTRIBUTE( tmp_source_name_234, const_str_plain_JpgCanvas );
        if ( tmp_source_name_233 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 236;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_97 = LOOKUP_ATTRIBUTE( tmp_source_name_233, const_str_plain_bind );
        Py_DECREF( tmp_source_name_233 );
        if ( tmp_called_name_97 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 236;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_84 = const_str_digest_0cced0d80afacc5b0545a9f16b3a5aa4;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_235 = PyCell_GET( par_self );
        tmp_args_element_name_85 = LOOKUP_ATTRIBUTE( tmp_source_name_235, const_str_plain_place_marker_point );
        if ( tmp_args_element_name_85 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_97 );

            exception_lineno = 236;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 236;
        {
            PyObject *call_args[] = { tmp_args_element_name_84, tmp_args_element_name_85 };
            tmp_call_result_74 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_97, call_args );
        }

        Py_DECREF( tmp_called_name_97 );
        Py_DECREF( tmp_args_element_name_85 );
        if ( tmp_call_result_74 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 236;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_74 );
    }
    {
        PyObject *tmp_called_name_98;
        PyObject *tmp_source_name_236;
        PyObject *tmp_source_name_237;
        PyObject *tmp_call_result_75;
        PyObject *tmp_args_element_name_86;
        PyObject *tmp_args_element_name_87;
        PyObject *tmp_source_name_238;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_237 = PyCell_GET( par_self );
        tmp_source_name_236 = LOOKUP_ATTRIBUTE( tmp_source_name_237, const_str_plain_JpgCanvas );
        if ( tmp_source_name_236 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 237;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_98 = LOOKUP_ATTRIBUTE( tmp_source_name_236, const_str_plain_bind );
        Py_DECREF( tmp_source_name_236 );
        if ( tmp_called_name_98 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 237;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_86 = const_str_digest_c36c140071b9199d6e2a034118d1de51;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_238 = PyCell_GET( par_self );
        tmp_args_element_name_87 = LOOKUP_ATTRIBUTE( tmp_source_name_238, const_str_plain_remove_marker_points );
        if ( tmp_args_element_name_87 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_98 );

            exception_lineno = 237;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 237;
        {
            PyObject *call_args[] = { tmp_args_element_name_86, tmp_args_element_name_87 };
            tmp_call_result_75 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_98, call_args );
        }

        Py_DECREF( tmp_called_name_98 );
        Py_DECREF( tmp_args_element_name_87 );
        if ( tmp_call_result_75 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 237;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_75 );
    }
    {
        PyObject *tmp_called_name_99;
        PyObject *tmp_source_name_239;
        PyObject *tmp_source_name_240;
        PyObject *tmp_call_result_76;
        PyObject *tmp_args_element_name_88;
        PyObject *tmp_args_element_name_89;
        PyObject *tmp_source_name_241;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_240 = PyCell_GET( par_self );
        tmp_source_name_239 = LOOKUP_ATTRIBUTE( tmp_source_name_240, const_str_plain_JpgCanvas );
        if ( tmp_source_name_239 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 239;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_called_name_99 = LOOKUP_ATTRIBUTE( tmp_source_name_239, const_str_plain_bind );
        Py_DECREF( tmp_source_name_239 );
        if ( tmp_called_name_99 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 239;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_88 = const_str_angle_Motion;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_241 = PyCell_GET( par_self );
        tmp_args_element_name_89 = LOOKUP_ATTRIBUTE( tmp_source_name_241, const_str_plain_showxy );
        if ( tmp_args_element_name_89 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_99 );

            exception_lineno = 239;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 239;
        {
            PyObject *call_args[] = { tmp_args_element_name_88, tmp_args_element_name_89 };
            tmp_call_result_76 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_99, call_args );
        }

        Py_DECREF( tmp_called_name_99 );
        Py_DECREF( tmp_args_element_name_89 );
        if ( tmp_call_result_76 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 239;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_76 );
    }
    {
        PyObject *tmp_assattr_name_42;
        PyObject *tmp_called_name_100;
        PyObject *tmp_source_name_242;
        PyObject *tmp_mvar_value_63;
        PyObject *tmp_args_name_26;
        PyObject *tmp_tuple_element_20;
        PyObject *tmp_source_name_243;
        PyObject *tmp_kw_name_66;
        PyObject *tmp_assattr_target_42;
        tmp_mvar_value_63 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_63 == NULL ))
        {
            tmp_mvar_value_63 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_63 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 243;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_242 = tmp_mvar_value_63;
        tmp_called_name_100 = LOOKUP_ATTRIBUTE( tmp_source_name_242, const_str_plain_Canvas );
        if ( tmp_called_name_100 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_243 = PyCell_GET( par_self );
        tmp_tuple_element_20 = LOOKUP_ATTRIBUTE( tmp_source_name_243, const_str_plain_MW );
        if ( tmp_tuple_element_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_100 );

            exception_lineno = 243;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        tmp_args_name_26 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_26, 0, tmp_tuple_element_20 );
        tmp_kw_name_66 = PyDict_Copy( const_dict_dfd7982266194fee87015b2199b24d40 );
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 243;
        tmp_assattr_name_42 = CALL_FUNCTION( tmp_called_name_100, tmp_args_name_26, tmp_kw_name_66 );
        Py_DECREF( tmp_called_name_100 );
        Py_DECREF( tmp_args_name_26 );
        Py_DECREF( tmp_kw_name_66 );
        if ( tmp_assattr_name_42 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_42 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_42, const_str_plain_color_box, tmp_assattr_name_42 );
        Py_DECREF( tmp_assattr_name_42 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_43;
        PyObject *tmp_called_name_101;
        PyObject *tmp_source_name_244;
        PyObject *tmp_mvar_value_64;
        PyObject *tmp_args_element_name_90;
        PyObject *tmp_source_name_245;
        PyObject *tmp_assattr_target_43;
        tmp_mvar_value_64 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter );

        if (unlikely( tmp_mvar_value_64 == NULL ))
        {
            tmp_mvar_value_64 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_tkinter );
        }

        if ( tmp_mvar_value_64 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "tkinter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 244;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_source_name_244 = tmp_mvar_value_64;
        tmp_called_name_101 = LOOKUP_ATTRIBUTE( tmp_source_name_244, const_str_plain_Label );
        if ( tmp_called_name_101 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 244;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_245 = PyCell_GET( par_self );
        tmp_args_element_name_90 = LOOKUP_ATTRIBUTE( tmp_source_name_245, const_str_plain_MW );
        if ( tmp_args_element_name_90 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_101 );

            exception_lineno = 244;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 244;
        {
            PyObject *call_args[] = { tmp_args_element_name_90 };
            tmp_assattr_name_43 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_101, call_args );
        }

        Py_DECREF( tmp_called_name_101 );
        Py_DECREF( tmp_args_element_name_90 );
        if ( tmp_assattr_name_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 244;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_43 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_43, const_str_plain_buflabel, tmp_assattr_name_43 );
        Py_DECREF( tmp_assattr_name_43 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 244;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_44;
        PyObject *tmp_assattr_target_44;
        tmp_assattr_name_44 = PyList_New( 0 );
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_44 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_44, const_str_plain__markers, tmp_assattr_name_44 );
        Py_DECREF( tmp_assattr_name_44 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 262;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_45;
        PyObject *tmp_assattr_target_45;
        tmp_assattr_name_45 = const_str_empty;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_45 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_45, const_str_plain__act_mrk, tmp_assattr_name_45 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 263;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_46;
        PyObject *tmp_assattr_target_46;
        tmp_assattr_name_46 = const_str_empty;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_46 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_46, const_str_plain__file_name, tmp_assattr_name_46 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 264;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_47;
        PyObject *tmp_assattr_target_47;
        tmp_assattr_name_47 = const_int_pos_1;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_47 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_47, const_str_plain__actual_zoom, tmp_assattr_name_47 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 265;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_48;
        PyObject *tmp_assattr_target_48;
        tmp_assattr_name_48 = const_int_0;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_48 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_48, const_str_plain_mouse_x, tmp_assattr_name_48 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 267;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_49;
        PyObject *tmp_assattr_target_49;
        tmp_assattr_name_49 = const_int_0;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_49 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_49, const_str_plain_mouse_y, tmp_assattr_name_49 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_50;
        PyObject *tmp_called_name_102;
        PyObject *tmp_mvar_value_65;
        PyObject *tmp_assattr_target_50;
        tmp_mvar_value_65 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_StringVar );

        if (unlikely( tmp_mvar_value_65 == NULL ))
        {
            tmp_mvar_value_65 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_StringVar );
        }

        if ( tmp_mvar_value_65 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "StringVar" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 270;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }

        tmp_called_name_102 = tmp_mvar_value_65;
        frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame.f_lineno = 270;
        tmp_assattr_name_50 = CALL_FUNCTION_NO_ARGS( tmp_called_name_102 );
        if ( tmp_assattr_name_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_50 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_50, const_str_plain__grid_var, tmp_assattr_name_50 );
        Py_DECREF( tmp_assattr_name_50 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_51;
        PyObject *tmp_assattr_target_51;
        tmp_assattr_name_51 = const_str_empty;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_51 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_51, const_str_plain__grid_color, tmp_assattr_name_51 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 271;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_52;
        PyObject *tmp_assattr_target_52;
        tmp_assattr_name_52 = Py_True;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_52 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_52, const_str_plain_all_saved, tmp_assattr_name_52 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 273;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_53;
        PyObject *tmp_assattr_target_53;
        tmp_assattr_name_53 = Py_False;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_assattr_target_53 = PyCell_GET( par_self );
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_53, const_str_plain_grid_visible, tmp_assattr_name_53 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 275;
            type_description_1 = "c";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc50c94cc3ce74fac9e18c71da769a44 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc50c94cc3ce74fac9e18c71da769a44 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fc50c94cc3ce74fac9e18c71da769a44, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fc50c94cc3ce74fac9e18c71da769a44->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fc50c94cc3ce74fac9e18c71da769a44, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fc50c94cc3ce74fac9e18c71da769a44,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_fc50c94cc3ce74fac9e18c71da769a44 == cache_frame_fc50c94cc3ce74fac9e18c71da769a44 )
    {
        Py_DECREF( frame_fc50c94cc3ce74fac9e18c71da769a44 );
    }
    cache_frame_fc50c94cc3ce74fac9e18c71da769a44 = NULL;

    assertFrameObject( frame_fc50c94cc3ce74fac9e18c71da769a44 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_6179a74b43be2a79f261110af601a1d8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6179a74b43be2a79f261110af601a1d8 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6179a74b43be2a79f261110af601a1d8, codeobj_6179a74b43be2a79f261110af601a1d8, module___main__, sizeof(void *)+sizeof(void *) );
    frame_6179a74b43be2a79f261110af601a1d8 = cache_frame_6179a74b43be2a79f261110af601a1d8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6179a74b43be2a79f261110af601a1d8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6179a74b43be2a79f261110af601a1d8 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 190;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 190;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 190;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_738265a1f8ceb6b4670fa18d7056ae21 );
        frame_6179a74b43be2a79f261110af601a1d8->m_frame.f_lineno = 190;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 190;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6179a74b43be2a79f261110af601a1d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6179a74b43be2a79f261110af601a1d8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6179a74b43be2a79f261110af601a1d8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6179a74b43be2a79f261110af601a1d8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6179a74b43be2a79f261110af601a1d8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6179a74b43be2a79f261110af601a1d8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6179a74b43be2a79f261110af601a1d8,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_6179a74b43be2a79f261110af601a1d8 == cache_frame_6179a74b43be2a79f261110af601a1d8 )
    {
        Py_DECREF( frame_6179a74b43be2a79f261110af601a1d8 );
    }
    cache_frame_6179a74b43be2a79f261110af601a1d8 = NULL;

    assertFrameObject( frame_6179a74b43be2a79f261110af601a1d8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_2_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_20258b4d00d6883e23c28deed98177c9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_20258b4d00d6883e23c28deed98177c9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_20258b4d00d6883e23c28deed98177c9, codeobj_20258b4d00d6883e23c28deed98177c9, module___main__, sizeof(void *)+sizeof(void *) );
    frame_20258b4d00d6883e23c28deed98177c9 = cache_frame_20258b4d00d6883e23c28deed98177c9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_20258b4d00d6883e23c28deed98177c9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_20258b4d00d6883e23c28deed98177c9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 191;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_20258b4d00d6883e23c28deed98177c9->m_frame.f_lineno = 191;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20258b4d00d6883e23c28deed98177c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_20258b4d00d6883e23c28deed98177c9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_20258b4d00d6883e23c28deed98177c9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_20258b4d00d6883e23c28deed98177c9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_20258b4d00d6883e23c28deed98177c9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_20258b4d00d6883e23c28deed98177c9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_20258b4d00d6883e23c28deed98177c9,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_20258b4d00d6883e23c28deed98177c9 == cache_frame_20258b4d00d6883e23c28deed98177c9 )
    {
        Py_DECREF( frame_20258b4d00d6883e23c28deed98177c9 );
    }
    cache_frame_20258b4d00d6883e23c28deed98177c9 = NULL;

    assertFrameObject( frame_20258b4d00d6883e23c28deed98177c9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_2_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_2_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_3_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_60adaa08deb7bb51ee9e1d7f87db2d2e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_60adaa08deb7bb51ee9e1d7f87db2d2e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_60adaa08deb7bb51ee9e1d7f87db2d2e, codeobj_60adaa08deb7bb51ee9e1d7f87db2d2e, module___main__, sizeof(void *)+sizeof(void *) );
    frame_60adaa08deb7bb51ee9e1d7f87db2d2e = cache_frame_60adaa08deb7bb51ee9e1d7f87db2d2e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_60adaa08deb7bb51ee9e1d7f87db2d2e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 193;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_f300a543a76e1e5e5a970ab2c143067c );
        frame_60adaa08deb7bb51ee9e1d7f87db2d2e->m_frame.f_lineno = 193;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_60adaa08deb7bb51ee9e1d7f87db2d2e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_60adaa08deb7bb51ee9e1d7f87db2d2e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_60adaa08deb7bb51ee9e1d7f87db2d2e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_60adaa08deb7bb51ee9e1d7f87db2d2e,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_60adaa08deb7bb51ee9e1d7f87db2d2e == cache_frame_60adaa08deb7bb51ee9e1d7f87db2d2e )
    {
        Py_DECREF( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );
    }
    cache_frame_60adaa08deb7bb51ee9e1d7f87db2d2e = NULL;

    assertFrameObject( frame_60adaa08deb7bb51ee9e1d7f87db2d2e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_3_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_3_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_4_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_1915abd295538b85adb96110a3ffcd81;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1915abd295538b85adb96110a3ffcd81 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1915abd295538b85adb96110a3ffcd81, codeobj_1915abd295538b85adb96110a3ffcd81, module___main__, sizeof(void *)+sizeof(void *) );
    frame_1915abd295538b85adb96110a3ffcd81 = cache_frame_1915abd295538b85adb96110a3ffcd81;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1915abd295538b85adb96110a3ffcd81 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1915abd295538b85adb96110a3ffcd81 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 194;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 194;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 194;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_1915abd295538b85adb96110a3ffcd81->m_frame.f_lineno = 194;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 194;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1915abd295538b85adb96110a3ffcd81 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1915abd295538b85adb96110a3ffcd81 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1915abd295538b85adb96110a3ffcd81 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1915abd295538b85adb96110a3ffcd81, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1915abd295538b85adb96110a3ffcd81->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1915abd295538b85adb96110a3ffcd81, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1915abd295538b85adb96110a3ffcd81,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_1915abd295538b85adb96110a3ffcd81 == cache_frame_1915abd295538b85adb96110a3ffcd81 )
    {
        Py_DECREF( frame_1915abd295538b85adb96110a3ffcd81 );
    }
    cache_frame_1915abd295538b85adb96110a3ffcd81 = NULL;

    assertFrameObject( frame_1915abd295538b85adb96110a3ffcd81 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_4_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_4_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_5_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_863a1671359477bab0df6f7a770b4195;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_863a1671359477bab0df6f7a770b4195 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_863a1671359477bab0df6f7a770b4195, codeobj_863a1671359477bab0df6f7a770b4195, module___main__, sizeof(void *)+sizeof(void *) );
    frame_863a1671359477bab0df6f7a770b4195 = cache_frame_863a1671359477bab0df6f7a770b4195;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_863a1671359477bab0df6f7a770b4195 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_863a1671359477bab0df6f7a770b4195 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 196;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 196;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 196;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7 );
        frame_863a1671359477bab0df6f7a770b4195->m_frame.f_lineno = 196;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 196;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_863a1671359477bab0df6f7a770b4195 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_863a1671359477bab0df6f7a770b4195 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_863a1671359477bab0df6f7a770b4195 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_863a1671359477bab0df6f7a770b4195, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_863a1671359477bab0df6f7a770b4195->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_863a1671359477bab0df6f7a770b4195, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_863a1671359477bab0df6f7a770b4195,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_863a1671359477bab0df6f7a770b4195 == cache_frame_863a1671359477bab0df6f7a770b4195 )
    {
        Py_DECREF( frame_863a1671359477bab0df6f7a770b4195 );
    }
    cache_frame_863a1671359477bab0df6f7a770b4195 = NULL;

    assertFrameObject( frame_863a1671359477bab0df6f7a770b4195 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_5_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_5_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_6_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_5ed4068f26894757e57b82c59e82b3f9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5ed4068f26894757e57b82c59e82b3f9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5ed4068f26894757e57b82c59e82b3f9, codeobj_5ed4068f26894757e57b82c59e82b3f9, module___main__, sizeof(void *)+sizeof(void *) );
    frame_5ed4068f26894757e57b82c59e82b3f9 = cache_frame_5ed4068f26894757e57b82c59e82b3f9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5ed4068f26894757e57b82c59e82b3f9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5ed4068f26894757e57b82c59e82b3f9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 197;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_5ed4068f26894757e57b82c59e82b3f9->m_frame.f_lineno = 197;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ed4068f26894757e57b82c59e82b3f9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ed4068f26894757e57b82c59e82b3f9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5ed4068f26894757e57b82c59e82b3f9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5ed4068f26894757e57b82c59e82b3f9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5ed4068f26894757e57b82c59e82b3f9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5ed4068f26894757e57b82c59e82b3f9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5ed4068f26894757e57b82c59e82b3f9,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_5ed4068f26894757e57b82c59e82b3f9 == cache_frame_5ed4068f26894757e57b82c59e82b3f9 )
    {
        Py_DECREF( frame_5ed4068f26894757e57b82c59e82b3f9 );
    }
    cache_frame_5ed4068f26894757e57b82c59e82b3f9 = NULL;

    assertFrameObject( frame_5ed4068f26894757e57b82c59e82b3f9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_6_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_6_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_7_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_8ebd3f823bc7c63e26ecd0134f5607a0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8ebd3f823bc7c63e26ecd0134f5607a0 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8ebd3f823bc7c63e26ecd0134f5607a0, codeobj_8ebd3f823bc7c63e26ecd0134f5607a0, module___main__, sizeof(void *)+sizeof(void *) );
    frame_8ebd3f823bc7c63e26ecd0134f5607a0 = cache_frame_8ebd3f823bc7c63e26ecd0134f5607a0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8ebd3f823bc7c63e26ecd0134f5607a0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_ac75d8a06c1c9898ce9151d5f24c9ca7 );
        frame_8ebd3f823bc7c63e26ecd0134f5607a0->m_frame.f_lineno = 199;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8ebd3f823bc7c63e26ecd0134f5607a0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8ebd3f823bc7c63e26ecd0134f5607a0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8ebd3f823bc7c63e26ecd0134f5607a0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8ebd3f823bc7c63e26ecd0134f5607a0,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_8ebd3f823bc7c63e26ecd0134f5607a0 == cache_frame_8ebd3f823bc7c63e26ecd0134f5607a0 )
    {
        Py_DECREF( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );
    }
    cache_frame_8ebd3f823bc7c63e26ecd0134f5607a0 = NULL;

    assertFrameObject( frame_8ebd3f823bc7c63e26ecd0134f5607a0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_7_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_7_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_8_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_a68246feddf0c0fedded079bc3c1a935;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a68246feddf0c0fedded079bc3c1a935 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a68246feddf0c0fedded079bc3c1a935, codeobj_a68246feddf0c0fedded079bc3c1a935, module___main__, sizeof(void *)+sizeof(void *) );
    frame_a68246feddf0c0fedded079bc3c1a935 = cache_frame_a68246feddf0c0fedded079bc3c1a935;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a68246feddf0c0fedded079bc3c1a935 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a68246feddf0c0fedded079bc3c1a935 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_a68246feddf0c0fedded079bc3c1a935->m_frame.f_lineno = 200;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a68246feddf0c0fedded079bc3c1a935 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a68246feddf0c0fedded079bc3c1a935 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a68246feddf0c0fedded079bc3c1a935 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a68246feddf0c0fedded079bc3c1a935, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a68246feddf0c0fedded079bc3c1a935->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a68246feddf0c0fedded079bc3c1a935, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a68246feddf0c0fedded079bc3c1a935,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_a68246feddf0c0fedded079bc3c1a935 == cache_frame_a68246feddf0c0fedded079bc3c1a935 )
    {
        Py_DECREF( frame_a68246feddf0c0fedded079bc3c1a935 );
    }
    cache_frame_a68246feddf0c0fedded079bc3c1a935 = NULL;

    assertFrameObject( frame_a68246feddf0c0fedded079bc3c1a935 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_8_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_8_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_9_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_b4a17be0c3e5c613963efae7a5065b73;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b4a17be0c3e5c613963efae7a5065b73 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b4a17be0c3e5c613963efae7a5065b73, codeobj_b4a17be0c3e5c613963efae7a5065b73, module___main__, sizeof(void *)+sizeof(void *) );
    frame_b4a17be0c3e5c613963efae7a5065b73 = cache_frame_b4a17be0c3e5c613963efae7a5065b73;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b4a17be0c3e5c613963efae7a5065b73 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b4a17be0c3e5c613963efae7a5065b73 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_7909693c253d0e10e6fb69517ade1d2a );
        frame_b4a17be0c3e5c613963efae7a5065b73->m_frame.f_lineno = 202;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4a17be0c3e5c613963efae7a5065b73 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4a17be0c3e5c613963efae7a5065b73 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4a17be0c3e5c613963efae7a5065b73 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b4a17be0c3e5c613963efae7a5065b73, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b4a17be0c3e5c613963efae7a5065b73->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b4a17be0c3e5c613963efae7a5065b73, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b4a17be0c3e5c613963efae7a5065b73,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_b4a17be0c3e5c613963efae7a5065b73 == cache_frame_b4a17be0c3e5c613963efae7a5065b73 )
    {
        Py_DECREF( frame_b4a17be0c3e5c613963efae7a5065b73 );
    }
    cache_frame_b4a17be0c3e5c613963efae7a5065b73 = NULL;

    assertFrameObject( frame_b4a17be0c3e5c613963efae7a5065b73 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_9_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_9_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_10_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_e5712b9e117201cf4ef39e1f907c2190;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e5712b9e117201cf4ef39e1f907c2190 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e5712b9e117201cf4ef39e1f907c2190, codeobj_e5712b9e117201cf4ef39e1f907c2190, module___main__, sizeof(void *)+sizeof(void *) );
    frame_e5712b9e117201cf4ef39e1f907c2190 = cache_frame_e5712b9e117201cf4ef39e1f907c2190;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e5712b9e117201cf4ef39e1f907c2190 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e5712b9e117201cf4ef39e1f907c2190 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_e5712b9e117201cf4ef39e1f907c2190->m_frame.f_lineno = 203;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e5712b9e117201cf4ef39e1f907c2190 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e5712b9e117201cf4ef39e1f907c2190 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e5712b9e117201cf4ef39e1f907c2190 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e5712b9e117201cf4ef39e1f907c2190, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e5712b9e117201cf4ef39e1f907c2190->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e5712b9e117201cf4ef39e1f907c2190, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e5712b9e117201cf4ef39e1f907c2190,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_e5712b9e117201cf4ef39e1f907c2190 == cache_frame_e5712b9e117201cf4ef39e1f907c2190 )
    {
        Py_DECREF( frame_e5712b9e117201cf4ef39e1f907c2190 );
    }
    cache_frame_e5712b9e117201cf4ef39e1f907c2190 = NULL;

    assertFrameObject( frame_e5712b9e117201cf4ef39e1f907c2190 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_10_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_10_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_11_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_d32dd44607baab9ff4ec845c9e85fa38;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d32dd44607baab9ff4ec845c9e85fa38 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d32dd44607baab9ff4ec845c9e85fa38, codeobj_d32dd44607baab9ff4ec845c9e85fa38, module___main__, sizeof(void *)+sizeof(void *) );
    frame_d32dd44607baab9ff4ec845c9e85fa38 = cache_frame_d32dd44607baab9ff4ec845c9e85fa38;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d32dd44607baab9ff4ec845c9e85fa38 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d32dd44607baab9ff4ec845c9e85fa38 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 205;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_6971a692b5811e69040ac39b14c13b17 );
        frame_d32dd44607baab9ff4ec845c9e85fa38->m_frame.f_lineno = 205;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d32dd44607baab9ff4ec845c9e85fa38 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d32dd44607baab9ff4ec845c9e85fa38 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d32dd44607baab9ff4ec845c9e85fa38 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d32dd44607baab9ff4ec845c9e85fa38, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d32dd44607baab9ff4ec845c9e85fa38->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d32dd44607baab9ff4ec845c9e85fa38, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d32dd44607baab9ff4ec845c9e85fa38,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_d32dd44607baab9ff4ec845c9e85fa38 == cache_frame_d32dd44607baab9ff4ec845c9e85fa38 )
    {
        Py_DECREF( frame_d32dd44607baab9ff4ec845c9e85fa38 );
    }
    cache_frame_d32dd44607baab9ff4ec845c9e85fa38 = NULL;

    assertFrameObject( frame_d32dd44607baab9ff4ec845c9e85fa38 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_11_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_11_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_12_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_5c2637fcdb4e4148e2112555d75df96c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5c2637fcdb4e4148e2112555d75df96c = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5c2637fcdb4e4148e2112555d75df96c, codeobj_5c2637fcdb4e4148e2112555d75df96c, module___main__, sizeof(void *)+sizeof(void *) );
    frame_5c2637fcdb4e4148e2112555d75df96c = cache_frame_5c2637fcdb4e4148e2112555d75df96c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5c2637fcdb4e4148e2112555d75df96c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5c2637fcdb4e4148e2112555d75df96c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 206;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_5c2637fcdb4e4148e2112555d75df96c->m_frame.f_lineno = 206;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5c2637fcdb4e4148e2112555d75df96c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5c2637fcdb4e4148e2112555d75df96c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5c2637fcdb4e4148e2112555d75df96c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5c2637fcdb4e4148e2112555d75df96c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5c2637fcdb4e4148e2112555d75df96c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5c2637fcdb4e4148e2112555d75df96c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5c2637fcdb4e4148e2112555d75df96c,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_5c2637fcdb4e4148e2112555d75df96c == cache_frame_5c2637fcdb4e4148e2112555d75df96c )
    {
        Py_DECREF( frame_5c2637fcdb4e4148e2112555d75df96c );
    }
    cache_frame_5c2637fcdb4e4148e2112555d75df96c = NULL;

    assertFrameObject( frame_5c2637fcdb4e4148e2112555d75df96c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_12_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_12_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_13_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_13acc59ade367ff2c72305c80a9ad1db;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_13acc59ade367ff2c72305c80a9ad1db = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_13acc59ade367ff2c72305c80a9ad1db, codeobj_13acc59ade367ff2c72305c80a9ad1db, module___main__, sizeof(void *)+sizeof(void *) );
    frame_13acc59ade367ff2c72305c80a9ad1db = cache_frame_13acc59ade367ff2c72305c80a9ad1db;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_13acc59ade367ff2c72305c80a9ad1db );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_13acc59ade367ff2c72305c80a9ad1db ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 208;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_2ef0d65eb52a756a69a89bae2d2067a9 );
        frame_13acc59ade367ff2c72305c80a9ad1db->m_frame.f_lineno = 208;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_13acc59ade367ff2c72305c80a9ad1db );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_13acc59ade367ff2c72305c80a9ad1db );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_13acc59ade367ff2c72305c80a9ad1db );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_13acc59ade367ff2c72305c80a9ad1db, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_13acc59ade367ff2c72305c80a9ad1db->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_13acc59ade367ff2c72305c80a9ad1db, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_13acc59ade367ff2c72305c80a9ad1db,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_13acc59ade367ff2c72305c80a9ad1db == cache_frame_13acc59ade367ff2c72305c80a9ad1db )
    {
        Py_DECREF( frame_13acc59ade367ff2c72305c80a9ad1db );
    }
    cache_frame_13acc59ade367ff2c72305c80a9ad1db = NULL;

    assertFrameObject( frame_13acc59ade367ff2c72305c80a9ad1db );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_13_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_13_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_14_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_81fe453425470136de53052b8b5d2cfc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_81fe453425470136de53052b8b5d2cfc = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_81fe453425470136de53052b8b5d2cfc, codeobj_81fe453425470136de53052b8b5d2cfc, module___main__, sizeof(void *)+sizeof(void *) );
    frame_81fe453425470136de53052b8b5d2cfc = cache_frame_81fe453425470136de53052b8b5d2cfc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_81fe453425470136de53052b8b5d2cfc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_81fe453425470136de53052b8b5d2cfc ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 209;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_81fe453425470136de53052b8b5d2cfc->m_frame.f_lineno = 209;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_81fe453425470136de53052b8b5d2cfc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_81fe453425470136de53052b8b5d2cfc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_81fe453425470136de53052b8b5d2cfc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_81fe453425470136de53052b8b5d2cfc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_81fe453425470136de53052b8b5d2cfc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_81fe453425470136de53052b8b5d2cfc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_81fe453425470136de53052b8b5d2cfc,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_81fe453425470136de53052b8b5d2cfc == cache_frame_81fe453425470136de53052b8b5d2cfc )
    {
        Py_DECREF( frame_81fe453425470136de53052b8b5d2cfc );
    }
    cache_frame_81fe453425470136de53052b8b5d2cfc = NULL;

    assertFrameObject( frame_81fe453425470136de53052b8b5d2cfc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_14_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_14_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_15_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_5a4f49d4a689dfca3b0d0bef829e6e74;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5a4f49d4a689dfca3b0d0bef829e6e74 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5a4f49d4a689dfca3b0d0bef829e6e74, codeobj_5a4f49d4a689dfca3b0d0bef829e6e74, module___main__, sizeof(void *)+sizeof(void *) );
    frame_5a4f49d4a689dfca3b0d0bef829e6e74 = cache_frame_5a4f49d4a689dfca3b0d0bef829e6e74;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5a4f49d4a689dfca3b0d0bef829e6e74 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 211;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 211;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 211;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_81900f1fa71706159eeaded4993b6386 );
        frame_5a4f49d4a689dfca3b0d0bef829e6e74->m_frame.f_lineno = 211;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 211;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5a4f49d4a689dfca3b0d0bef829e6e74, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5a4f49d4a689dfca3b0d0bef829e6e74->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5a4f49d4a689dfca3b0d0bef829e6e74, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5a4f49d4a689dfca3b0d0bef829e6e74,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_5a4f49d4a689dfca3b0d0bef829e6e74 == cache_frame_5a4f49d4a689dfca3b0d0bef829e6e74 )
    {
        Py_DECREF( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );
    }
    cache_frame_5a4f49d4a689dfca3b0d0bef829e6e74 = NULL;

    assertFrameObject( frame_5a4f49d4a689dfca3b0d0bef829e6e74 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_15_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_15_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_16_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_615958cbdcd5ba77bb7bd3f4c3a9f250;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_615958cbdcd5ba77bb7bd3f4c3a9f250 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_615958cbdcd5ba77bb7bd3f4c3a9f250, codeobj_615958cbdcd5ba77bb7bd3f4c3a9f250, module___main__, sizeof(void *)+sizeof(void *) );
    frame_615958cbdcd5ba77bb7bd3f4c3a9f250 = cache_frame_615958cbdcd5ba77bb7bd3f4c3a9f250;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 212;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_615958cbdcd5ba77bb7bd3f4c3a9f250->m_frame.f_lineno = 212;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_615958cbdcd5ba77bb7bd3f4c3a9f250, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_615958cbdcd5ba77bb7bd3f4c3a9f250->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_615958cbdcd5ba77bb7bd3f4c3a9f250, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_615958cbdcd5ba77bb7bd3f4c3a9f250,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 == cache_frame_615958cbdcd5ba77bb7bd3f4c3a9f250 )
    {
        Py_DECREF( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );
    }
    cache_frame_615958cbdcd5ba77bb7bd3f4c3a9f250 = NULL;

    assertFrameObject( frame_615958cbdcd5ba77bb7bd3f4c3a9f250 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_16_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_16_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_17_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0396916f5d91e70e9ce022bec2a94f25;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0396916f5d91e70e9ce022bec2a94f25 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0396916f5d91e70e9ce022bec2a94f25, codeobj_0396916f5d91e70e9ce022bec2a94f25, module___main__, sizeof(void *)+sizeof(void *) );
    frame_0396916f5d91e70e9ce022bec2a94f25 = cache_frame_0396916f5d91e70e9ce022bec2a94f25;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0396916f5d91e70e9ce022bec2a94f25 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0396916f5d91e70e9ce022bec2a94f25 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_d5a93c3679de1e33f30e478c6869828b );
        frame_0396916f5d91e70e9ce022bec2a94f25->m_frame.f_lineno = 214;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0396916f5d91e70e9ce022bec2a94f25 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0396916f5d91e70e9ce022bec2a94f25 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0396916f5d91e70e9ce022bec2a94f25 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0396916f5d91e70e9ce022bec2a94f25, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0396916f5d91e70e9ce022bec2a94f25->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0396916f5d91e70e9ce022bec2a94f25, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0396916f5d91e70e9ce022bec2a94f25,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_0396916f5d91e70e9ce022bec2a94f25 == cache_frame_0396916f5d91e70e9ce022bec2a94f25 )
    {
        Py_DECREF( frame_0396916f5d91e70e9ce022bec2a94f25 );
    }
    cache_frame_0396916f5d91e70e9ce022bec2a94f25 = NULL;

    assertFrameObject( frame_0396916f5d91e70e9ce022bec2a94f25 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_17_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_17_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_18_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_9eb2c242aa975a043a79c48514acfbe2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9eb2c242aa975a043a79c48514acfbe2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9eb2c242aa975a043a79c48514acfbe2, codeobj_9eb2c242aa975a043a79c48514acfbe2, module___main__, sizeof(void *)+sizeof(void *) );
    frame_9eb2c242aa975a043a79c48514acfbe2 = cache_frame_9eb2c242aa975a043a79c48514acfbe2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9eb2c242aa975a043a79c48514acfbe2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9eb2c242aa975a043a79c48514acfbe2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 216;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_9eb2c242aa975a043a79c48514acfbe2->m_frame.f_lineno = 216;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9eb2c242aa975a043a79c48514acfbe2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9eb2c242aa975a043a79c48514acfbe2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9eb2c242aa975a043a79c48514acfbe2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9eb2c242aa975a043a79c48514acfbe2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9eb2c242aa975a043a79c48514acfbe2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9eb2c242aa975a043a79c48514acfbe2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9eb2c242aa975a043a79c48514acfbe2,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_9eb2c242aa975a043a79c48514acfbe2 == cache_frame_9eb2c242aa975a043a79c48514acfbe2 )
    {
        Py_DECREF( frame_9eb2c242aa975a043a79c48514acfbe2 );
    }
    cache_frame_9eb2c242aa975a043a79c48514acfbe2 = NULL;

    assertFrameObject( frame_9eb2c242aa975a043a79c48514acfbe2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_18_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_18_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_19_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_dbf48a8b044c67f61b445f9edaf89f61;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_dbf48a8b044c67f61b445f9edaf89f61 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dbf48a8b044c67f61b445f9edaf89f61, codeobj_dbf48a8b044c67f61b445f9edaf89f61, module___main__, sizeof(void *)+sizeof(void *) );
    frame_dbf48a8b044c67f61b445f9edaf89f61 = cache_frame_dbf48a8b044c67f61b445f9edaf89f61;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dbf48a8b044c67f61b445f9edaf89f61 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dbf48a8b044c67f61b445f9edaf89f61 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 218;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 218;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 218;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_ab6f30f3f2c3c07dd8fbd56f4ec662bd );
        frame_dbf48a8b044c67f61b445f9edaf89f61->m_frame.f_lineno = 218;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 218;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbf48a8b044c67f61b445f9edaf89f61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbf48a8b044c67f61b445f9edaf89f61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dbf48a8b044c67f61b445f9edaf89f61 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dbf48a8b044c67f61b445f9edaf89f61, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dbf48a8b044c67f61b445f9edaf89f61->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dbf48a8b044c67f61b445f9edaf89f61, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dbf48a8b044c67f61b445f9edaf89f61,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_dbf48a8b044c67f61b445f9edaf89f61 == cache_frame_dbf48a8b044c67f61b445f9edaf89f61 )
    {
        Py_DECREF( frame_dbf48a8b044c67f61b445f9edaf89f61 );
    }
    cache_frame_dbf48a8b044c67f61b445f9edaf89f61 = NULL;

    assertFrameObject( frame_dbf48a8b044c67f61b445f9edaf89f61 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_19_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_19_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_20_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_4c77c948c5e57eadf44c9f712ef65481;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4c77c948c5e57eadf44c9f712ef65481 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4c77c948c5e57eadf44c9f712ef65481, codeobj_4c77c948c5e57eadf44c9f712ef65481, module___main__, sizeof(void *)+sizeof(void *) );
    frame_4c77c948c5e57eadf44c9f712ef65481 = cache_frame_4c77c948c5e57eadf44c9f712ef65481;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4c77c948c5e57eadf44c9f712ef65481 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4c77c948c5e57eadf44c9f712ef65481 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 219;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_4c77c948c5e57eadf44c9f712ef65481->m_frame.f_lineno = 219;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c77c948c5e57eadf44c9f712ef65481 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c77c948c5e57eadf44c9f712ef65481 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c77c948c5e57eadf44c9f712ef65481 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4c77c948c5e57eadf44c9f712ef65481, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4c77c948c5e57eadf44c9f712ef65481->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4c77c948c5e57eadf44c9f712ef65481, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4c77c948c5e57eadf44c9f712ef65481,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_4c77c948c5e57eadf44c9f712ef65481 == cache_frame_4c77c948c5e57eadf44c9f712ef65481 )
    {
        Py_DECREF( frame_4c77c948c5e57eadf44c9f712ef65481 );
    }
    cache_frame_4c77c948c5e57eadf44c9f712ef65481 = NULL;

    assertFrameObject( frame_4c77c948c5e57eadf44c9f712ef65481 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_20_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_20_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_21_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_c13c2c98256bbecc4767973a540e5729;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c13c2c98256bbecc4767973a540e5729 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c13c2c98256bbecc4767973a540e5729, codeobj_c13c2c98256bbecc4767973a540e5729, module___main__, sizeof(void *)+sizeof(void *) );
    frame_c13c2c98256bbecc4767973a540e5729 = cache_frame_c13c2c98256bbecc4767973a540e5729;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c13c2c98256bbecc4767973a540e5729 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c13c2c98256bbecc4767973a540e5729 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 221;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 221;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 221;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_9bebc746c58a0156de1440cf5c4adafb );
        frame_c13c2c98256bbecc4767973a540e5729->m_frame.f_lineno = 221;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 221;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c13c2c98256bbecc4767973a540e5729 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c13c2c98256bbecc4767973a540e5729 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c13c2c98256bbecc4767973a540e5729 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c13c2c98256bbecc4767973a540e5729, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c13c2c98256bbecc4767973a540e5729->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c13c2c98256bbecc4767973a540e5729, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c13c2c98256bbecc4767973a540e5729,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_c13c2c98256bbecc4767973a540e5729 == cache_frame_c13c2c98256bbecc4767973a540e5729 )
    {
        Py_DECREF( frame_c13c2c98256bbecc4767973a540e5729 );
    }
    cache_frame_c13c2c98256bbecc4767973a540e5729 = NULL;

    assertFrameObject( frame_c13c2c98256bbecc4767973a540e5729 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_21_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_21_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_22_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_d0c3b0fbe75c1187491841103b74e088;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d0c3b0fbe75c1187491841103b74e088 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d0c3b0fbe75c1187491841103b74e088, codeobj_d0c3b0fbe75c1187491841103b74e088, module___main__, sizeof(void *)+sizeof(void *) );
    frame_d0c3b0fbe75c1187491841103b74e088 = cache_frame_d0c3b0fbe75c1187491841103b74e088;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d0c3b0fbe75c1187491841103b74e088 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d0c3b0fbe75c1187491841103b74e088 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 222;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_d0c3b0fbe75c1187491841103b74e088->m_frame.f_lineno = 222;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0c3b0fbe75c1187491841103b74e088 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0c3b0fbe75c1187491841103b74e088 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d0c3b0fbe75c1187491841103b74e088 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d0c3b0fbe75c1187491841103b74e088, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d0c3b0fbe75c1187491841103b74e088->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d0c3b0fbe75c1187491841103b74e088, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d0c3b0fbe75c1187491841103b74e088,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_d0c3b0fbe75c1187491841103b74e088 == cache_frame_d0c3b0fbe75c1187491841103b74e088 )
    {
        Py_DECREF( frame_d0c3b0fbe75c1187491841103b74e088 );
    }
    cache_frame_d0c3b0fbe75c1187491841103b74e088 = NULL;

    assertFrameObject( frame_d0c3b0fbe75c1187491841103b74e088 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_22_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_22_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_23_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_2ae5aee66bc783bb404fe06e053d6cf3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2ae5aee66bc783bb404fe06e053d6cf3 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2ae5aee66bc783bb404fe06e053d6cf3, codeobj_2ae5aee66bc783bb404fe06e053d6cf3, module___main__, sizeof(void *)+sizeof(void *) );
    frame_2ae5aee66bc783bb404fe06e053d6cf3 = cache_frame_2ae5aee66bc783bb404fe06e053d6cf3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2ae5aee66bc783bb404fe06e053d6cf3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2ae5aee66bc783bb404fe06e053d6cf3 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_54e6c67b961a458f372b3d6c307d9b12 );
        frame_2ae5aee66bc783bb404fe06e053d6cf3->m_frame.f_lineno = 224;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5aee66bc783bb404fe06e053d6cf3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5aee66bc783bb404fe06e053d6cf3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ae5aee66bc783bb404fe06e053d6cf3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2ae5aee66bc783bb404fe06e053d6cf3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2ae5aee66bc783bb404fe06e053d6cf3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2ae5aee66bc783bb404fe06e053d6cf3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2ae5aee66bc783bb404fe06e053d6cf3,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_2ae5aee66bc783bb404fe06e053d6cf3 == cache_frame_2ae5aee66bc783bb404fe06e053d6cf3 )
    {
        Py_DECREF( frame_2ae5aee66bc783bb404fe06e053d6cf3 );
    }
    cache_frame_2ae5aee66bc783bb404fe06e053d6cf3 = NULL;

    assertFrameObject( frame_2ae5aee66bc783bb404fe06e053d6cf3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_23_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_23_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_24_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_29b42187ef986eae1f1a1688bdf32bba;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_29b42187ef986eae1f1a1688bdf32bba = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_29b42187ef986eae1f1a1688bdf32bba, codeobj_29b42187ef986eae1f1a1688bdf32bba, module___main__, sizeof(void *)+sizeof(void *) );
    frame_29b42187ef986eae1f1a1688bdf32bba = cache_frame_29b42187ef986eae1f1a1688bdf32bba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_29b42187ef986eae1f1a1688bdf32bba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_29b42187ef986eae1f1a1688bdf32bba ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 225;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_29b42187ef986eae1f1a1688bdf32bba->m_frame.f_lineno = 225;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29b42187ef986eae1f1a1688bdf32bba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_29b42187ef986eae1f1a1688bdf32bba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29b42187ef986eae1f1a1688bdf32bba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_29b42187ef986eae1f1a1688bdf32bba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_29b42187ef986eae1f1a1688bdf32bba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_29b42187ef986eae1f1a1688bdf32bba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_29b42187ef986eae1f1a1688bdf32bba,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_29b42187ef986eae1f1a1688bdf32bba == cache_frame_29b42187ef986eae1f1a1688bdf32bba )
    {
        Py_DECREF( frame_29b42187ef986eae1f1a1688bdf32bba );
    }
    cache_frame_29b42187ef986eae1f1a1688bdf32bba = NULL;

    assertFrameObject( frame_29b42187ef986eae1f1a1688bdf32bba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_24_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_24_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_25_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_d945ec97314d2978adb7e4ecc0916009;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d945ec97314d2978adb7e4ecc0916009 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d945ec97314d2978adb7e4ecc0916009, codeobj_d945ec97314d2978adb7e4ecc0916009, module___main__, sizeof(void *)+sizeof(void *) );
    frame_d945ec97314d2978adb7e4ecc0916009 = cache_frame_d945ec97314d2978adb7e4ecc0916009;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d945ec97314d2978adb7e4ecc0916009 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d945ec97314d2978adb7e4ecc0916009 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 227;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_fc1e67bad2294e4dce8e82715c04d663 );
        frame_d945ec97314d2978adb7e4ecc0916009->m_frame.f_lineno = 227;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d945ec97314d2978adb7e4ecc0916009 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d945ec97314d2978adb7e4ecc0916009 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d945ec97314d2978adb7e4ecc0916009 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d945ec97314d2978adb7e4ecc0916009, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d945ec97314d2978adb7e4ecc0916009->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d945ec97314d2978adb7e4ecc0916009, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d945ec97314d2978adb7e4ecc0916009,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_d945ec97314d2978adb7e4ecc0916009 == cache_frame_d945ec97314d2978adb7e4ecc0916009 )
    {
        Py_DECREF( frame_d945ec97314d2978adb7e4ecc0916009 );
    }
    cache_frame_d945ec97314d2978adb7e4ecc0916009 = NULL;

    assertFrameObject( frame_d945ec97314d2978adb7e4ecc0916009 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_25_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_25_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_26_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_05fc906c0588f7e117725864f391306c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_05fc906c0588f7e117725864f391306c = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_05fc906c0588f7e117725864f391306c, codeobj_05fc906c0588f7e117725864f391306c, module___main__, sizeof(void *)+sizeof(void *) );
    frame_05fc906c0588f7e117725864f391306c = cache_frame_05fc906c0588f7e117725864f391306c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_05fc906c0588f7e117725864f391306c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_05fc906c0588f7e117725864f391306c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_05fc906c0588f7e117725864f391306c->m_frame.f_lineno = 228;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_05fc906c0588f7e117725864f391306c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_05fc906c0588f7e117725864f391306c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_05fc906c0588f7e117725864f391306c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_05fc906c0588f7e117725864f391306c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_05fc906c0588f7e117725864f391306c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_05fc906c0588f7e117725864f391306c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_05fc906c0588f7e117725864f391306c,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_05fc906c0588f7e117725864f391306c == cache_frame_05fc906c0588f7e117725864f391306c )
    {
        Py_DECREF( frame_05fc906c0588f7e117725864f391306c );
    }
    cache_frame_05fc906c0588f7e117725864f391306c = NULL;

    assertFrameObject( frame_05fc906c0588f7e117725864f391306c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_26_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_26_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_27_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f78450d223e6fbdc5cb47d0d0172f473;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f78450d223e6fbdc5cb47d0d0172f473 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f78450d223e6fbdc5cb47d0d0172f473, codeobj_f78450d223e6fbdc5cb47d0d0172f473, module___main__, sizeof(void *)+sizeof(void *) );
    frame_f78450d223e6fbdc5cb47d0d0172f473 = cache_frame_f78450d223e6fbdc5cb47d0d0172f473;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f78450d223e6fbdc5cb47d0d0172f473 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f78450d223e6fbdc5cb47d0d0172f473 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 230;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_9a3fa329eccba2f298c8181d957f35f2 );
        frame_f78450d223e6fbdc5cb47d0d0172f473->m_frame.f_lineno = 230;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f78450d223e6fbdc5cb47d0d0172f473 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f78450d223e6fbdc5cb47d0d0172f473 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f78450d223e6fbdc5cb47d0d0172f473 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f78450d223e6fbdc5cb47d0d0172f473, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f78450d223e6fbdc5cb47d0d0172f473->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f78450d223e6fbdc5cb47d0d0172f473, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f78450d223e6fbdc5cb47d0d0172f473,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_f78450d223e6fbdc5cb47d0d0172f473 == cache_frame_f78450d223e6fbdc5cb47d0d0172f473 )
    {
        Py_DECREF( frame_f78450d223e6fbdc5cb47d0d0172f473 );
    }
    cache_frame_f78450d223e6fbdc5cb47d0d0172f473 = NULL;

    assertFrameObject( frame_f78450d223e6fbdc5cb47d0d0172f473 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_27_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_27_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_13___init__$$$function_28_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_ad10a616083812422069e1a160e73a91;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ad10a616083812422069e1a160e73a91 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ad10a616083812422069e1a160e73a91, codeobj_ad10a616083812422069e1a160e73a91, module___main__, sizeof(void *)+sizeof(void *) );
    frame_ad10a616083812422069e1a160e73a91 = cache_frame_ad10a616083812422069e1a160e73a91;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ad10a616083812422069e1a160e73a91 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ad10a616083812422069e1a160e73a91 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_kw_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 231;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = PyCell_GET( self->m_closure[0] );
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_hint_label );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = PyDict_Copy( const_dict_29192ed75dad88e4602a2efaaea0cde1 );
        frame_ad10a616083812422069e1a160e73a91->m_frame.f_lineno = 231;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad10a616083812422069e1a160e73a91 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad10a616083812422069e1a160e73a91 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad10a616083812422069e1a160e73a91 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ad10a616083812422069e1a160e73a91, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ad10a616083812422069e1a160e73a91->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ad10a616083812422069e1a160e73a91, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ad10a616083812422069e1a160e73a91,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_ad10a616083812422069e1a160e73a91 == cache_frame_ad10a616083812422069e1a160e73a91 )
    {
        Py_DECREF( frame_ad10a616083812422069e1a160e73a91 );
    }
    cache_frame_ad10a616083812422069e1a160e73a91 = NULL;

    assertFrameObject( frame_ad10a616083812422069e1a160e73a91 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_28_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_13___init__$$$function_28_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_14_start( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_value = NULL;
    struct Nuitka_FrameObject *frame_aae6779c8b6c4aa5639ef12110c659f9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_aae6779c8b6c4aa5639ef12110c659f9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_aae6779c8b6c4aa5639ef12110c659f9, codeobj_aae6779c8b6c4aa5639ef12110c659f9, module___main__, sizeof(void *)+sizeof(void *) );
    frame_aae6779c8b6c4aa5639ef12110c659f9 = cache_frame_aae6779c8b6c4aa5639ef12110c659f9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_aae6779c8b6c4aa5639ef12110c659f9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_aae6779c8b6c4aa5639ef12110c659f9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__zoom_factor );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 278;
        tmp_left_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_10;
        tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_10;
        tmp_assign_source_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_value == NULL );
        var_value = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_zoom_factor_label );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_configure );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_text;
        tmp_left_name_3 = const_str_digest_4177e5d1da0875775db706dbda998159;
        CHECK_OBJECT( var_value );
        tmp_unicode_arg_1 = var_value;
        tmp_right_name_3 = PyObject_Unicode( tmp_unicode_arg_1 );
        if ( tmp_right_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 279;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_right_name_3 );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 279;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 279;
        tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_save_markers_btn );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 280;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_configure );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 280;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_state;
        CHECK_OBJECT( par_self );
        tmp_len_arg_1 = par_self;
        tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 280;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        assert( !(tmp_res == -1) );
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_dict_value_2 = const_str_plain_disabled;
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_dict_value_2 = const_str_plain_enabled;
        condexpr_end_1:;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 280;
        tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 280;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 281;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_config_buttons );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 281;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_4;
        PyObject *tmp_kw_name_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_source_name_8;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_grid_size_combo );
        if ( tmp_source_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 282;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_configure );
        Py_DECREF( tmp_source_name_6 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 282;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_3 = const_str_plain_textvariable;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__grid_var );
        if ( tmp_dict_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 282;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_3 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
        Py_DECREF( tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_4 = const_str_plain_state;
        tmp_dict_value_4 = const_str_plain_readonly;
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_4, tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 282;
        tmp_call_result_4 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_3 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 282;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__grid_var );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 283;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 283;
        tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_set, &PyTuple_GET_ITEM( const_tuple_str_digest_92f9edc60183389fa951ade34579539a_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 283;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_source_name_10;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_MW );
        if ( tmp_called_instance_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame.f_lineno = 284;
        tmp_call_result_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_mainloop );
        Py_DECREF( tmp_called_instance_4 );
        if ( tmp_call_result_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_6 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aae6779c8b6c4aa5639ef12110c659f9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aae6779c8b6c4aa5639ef12110c659f9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_aae6779c8b6c4aa5639ef12110c659f9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_aae6779c8b6c4aa5639ef12110c659f9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_aae6779c8b6c4aa5639ef12110c659f9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_aae6779c8b6c4aa5639ef12110c659f9,
        type_description_1,
        par_self,
        var_value
    );


    // Release cached frame.
    if ( frame_aae6779c8b6c4aa5639ef12110c659f9 == cache_frame_aae6779c8b6c4aa5639ef12110c659f9 )
    {
        Py_DECREF( frame_aae6779c8b6c4aa5639ef12110c659f9 );
    }
    cache_frame_aae6779c8b6c4aa5639ef12110c659f9 = NULL;

    assertFrameObject( frame_aae6779c8b6c4aa5639ef12110c659f9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_14_start );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_14_start );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_15_stop( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_ifexit = NULL;
    struct Nuitka_FrameObject *frame_51fd03b412c69713fdca43197a4befc3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_51fd03b412c69713fdca43197a4befc3 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_51fd03b412c69713fdca43197a4befc3, codeobj_51fd03b412c69713fdca43197a4befc3, module___main__, sizeof(void *)+sizeof(void *) );
    frame_51fd03b412c69713fdca43197a4befc3 = cache_frame_51fd03b412c69713fdca43197a4befc3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_51fd03b412c69713fdca43197a4befc3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_51fd03b412c69713fdca43197a4befc3 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_messagebox );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_messagebox );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "messagebox" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_askyesno );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_source_name_2 = const_str_digest_dbed1b28aded01c5a308ca7ef04b4c9e;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_all_saved );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 288;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 288;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_args_element_name_2 = const_str_plain_no;
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_args_element_name_2 = const_str_plain_some;
        condexpr_end_1:;
        frame_51fd03b412c69713fdca43197a4befc3->m_frame.f_lineno = 287;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = const_str_digest_869e1da944f24734e75b205c837ec843;
        frame_51fd03b412c69713fdca43197a4befc3->m_frame.f_lineno = 287;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 287;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_ifexit == NULL );
        var_ifexit = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT( var_ifexit );
        tmp_truth_name_2 = CHECK_IF_TRUE( var_ifexit );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_MW );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 290;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_51fd03b412c69713fdca43197a4befc3->m_frame.f_lineno = 290;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_destroy );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 290;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51fd03b412c69713fdca43197a4befc3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_51fd03b412c69713fdca43197a4befc3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_51fd03b412c69713fdca43197a4befc3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_51fd03b412c69713fdca43197a4befc3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_51fd03b412c69713fdca43197a4befc3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_51fd03b412c69713fdca43197a4befc3,
        type_description_1,
        par_self,
        var_ifexit
    );


    // Release cached frame.
    if ( frame_51fd03b412c69713fdca43197a4befc3 == cache_frame_51fd03b412c69713fdca43197a4befc3 )
    {
        Py_DECREF( frame_51fd03b412c69713fdca43197a4befc3 );
    }
    cache_frame_51fd03b412c69713fdca43197a4befc3 = NULL;

    assertFrameObject( frame_51fd03b412c69713fdca43197a4befc3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_15_stop );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_ifexit );
    Py_DECREF( var_ifexit );
    var_ifexit = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_ifexit );
    var_ifexit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_15_stop );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_16___len__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_306ae42acea7e19776a0ffa12bf95616;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_306ae42acea7e19776a0ffa12bf95616 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_306ae42acea7e19776a0ffa12bf95616, codeobj_306ae42acea7e19776a0ffa12bf95616, module___main__, sizeof(void *) );
    frame_306ae42acea7e19776a0ffa12bf95616 = cache_frame_306ae42acea7e19776a0ffa12bf95616;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_306ae42acea7e19776a0ffa12bf95616 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_306ae42acea7e19776a0ffa12bf95616 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__markers );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 293;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 293;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_306ae42acea7e19776a0ffa12bf95616 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_306ae42acea7e19776a0ffa12bf95616 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_306ae42acea7e19776a0ffa12bf95616 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_306ae42acea7e19776a0ffa12bf95616, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_306ae42acea7e19776a0ffa12bf95616->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_306ae42acea7e19776a0ffa12bf95616, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_306ae42acea7e19776a0ffa12bf95616,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_306ae42acea7e19776a0ffa12bf95616 == cache_frame_306ae42acea7e19776a0ffa12bf95616 )
    {
        Py_DECREF( frame_306ae42acea7e19776a0ffa12bf95616 );
    }
    cache_frame_306ae42acea7e19776a0ffa12bf95616 = NULL;

    assertFrameObject( frame_306ae42acea7e19776a0ffa12bf95616 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_16___len__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_16___len__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_17___contains__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_dfeb6940a35cfe855e683a38ee67468c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_dfeb6940a35cfe855e683a38ee67468c = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dfeb6940a35cfe855e683a38ee67468c, codeobj_dfeb6940a35cfe855e683a38ee67468c, module___main__, sizeof(void *)+sizeof(void *) );
    frame_dfeb6940a35cfe855e683a38ee67468c = cache_frame_dfeb6940a35cfe855e683a38ee67468c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dfeb6940a35cfe855e683a38ee67468c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dfeb6940a35cfe855e683a38ee67468c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_value );
        tmp_compexpr_left_1 = par_value;
        tmp_called_name_1 = (PyObject *)&PyMap_Type;
        tmp_args_element_name_1 = MAKE_FUNCTION___main__$$$function_17___contains__$$$function_1_lambda(  );



        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__markers );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 296;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_dfeb6940a35cfe855e683a38ee67468c->m_frame.f_lineno = 296;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_compexpr_right_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 296;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 296;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = ( tmp_res == 1 ) ? Py_True : Py_False;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfeb6940a35cfe855e683a38ee67468c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfeb6940a35cfe855e683a38ee67468c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dfeb6940a35cfe855e683a38ee67468c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dfeb6940a35cfe855e683a38ee67468c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dfeb6940a35cfe855e683a38ee67468c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dfeb6940a35cfe855e683a38ee67468c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dfeb6940a35cfe855e683a38ee67468c,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_dfeb6940a35cfe855e683a38ee67468c == cache_frame_dfeb6940a35cfe855e683a38ee67468c )
    {
        Py_DECREF( frame_dfeb6940a35cfe855e683a38ee67468c );
    }
    cache_frame_dfeb6940a35cfe855e683a38ee67468c = NULL;

    assertFrameObject( frame_dfeb6940a35cfe855e683a38ee67468c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_17___contains__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_17___contains__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_17___contains__$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_9aa7262a7417816a6cb57960342d3e7c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9aa7262a7417816a6cb57960342d3e7c = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9aa7262a7417816a6cb57960342d3e7c, codeobj_9aa7262a7417816a6cb57960342d3e7c, module___main__, sizeof(void *) );
    frame_9aa7262a7417816a6cb57960342d3e7c = cache_frame_9aa7262a7417816a6cb57960342d3e7c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9aa7262a7417816a6cb57960342d3e7c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9aa7262a7417816a6cb57960342d3e7c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_x );
        tmp_source_name_1 = par_x;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 296;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9aa7262a7417816a6cb57960342d3e7c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9aa7262a7417816a6cb57960342d3e7c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9aa7262a7417816a6cb57960342d3e7c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9aa7262a7417816a6cb57960342d3e7c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9aa7262a7417816a6cb57960342d3e7c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9aa7262a7417816a6cb57960342d3e7c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9aa7262a7417816a6cb57960342d3e7c,
        type_description_1,
        par_x
    );


    // Release cached frame.
    if ( frame_9aa7262a7417816a6cb57960342d3e7c == cache_frame_9aa7262a7417816a6cb57960342d3e7c )
    {
        Py_DECREF( frame_9aa7262a7417816a6cb57960342d3e7c );
    }
    cache_frame_9aa7262a7417816a6cb57960342d3e7c = NULL;

    assertFrameObject( frame_9aa7262a7417816a6cb57960342d3e7c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_17___contains__$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_17___contains__$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_18___getitem__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_CellObject *par_key = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    struct Nuitka_FrameObject *frame_f48487147fee7e31eb6d7087379f13f8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_f48487147fee7e31eb6d7087379f13f8 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f48487147fee7e31eb6d7087379f13f8, codeobj_f48487147fee7e31eb6d7087379f13f8, module___main__, sizeof(void *)+sizeof(void *) );
    frame_f48487147fee7e31eb6d7087379f13f8 = cache_frame_f48487147fee7e31eb6d7087379f13f8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f48487147fee7e31eb6d7087379f13f8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f48487147fee7e31eb6d7087379f13f8 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( PyCell_GET( par_key ) );
        tmp_type_arg_1 = PyCell_GET( par_key );
        tmp_compexpr_left_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        assert( !(tmp_compexpr_left_1 == NULL) );
        tmp_compexpr_right_1 = (PyObject *)&PyUnicode_Type;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( PyCell_GET( par_key ) );
        tmp_compexpr_left_2 = PyCell_GET( par_key );
        CHECK_OBJECT( par_self );
        tmp_compexpr_right_2 = par_self;
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 299;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_value_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_1;
            tmp_called_name_1 = (PyObject *)&PyFilter_Type;
            tmp_args_element_name_1 = MAKE_FUNCTION___main__$$$function_18___getitem__$$$function_1_lambda(  );

            ((struct Nuitka_FunctionObject *)tmp_args_element_name_1)->m_closure[0] = par_key;
            Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_1)->m_closure[0] );


            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__markers );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 300;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            frame_f48487147fee7e31eb6d7087379f13f8->m_frame.f_lineno = 300;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_value_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_value_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 300;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            tmp_return_value = ITERATOR_NEXT( tmp_value_name_1 );
            Py_DECREF( tmp_value_name_1 );
            if ( tmp_return_value == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oc";
                exception_lineno = 300;
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_and_left_truth_2;
            nuitka_bool tmp_and_left_value_2;
            nuitka_bool tmp_and_right_value_2;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_type_arg_2;
            PyObject *tmp_outline_return_value_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( PyCell_GET( par_key ) );
            tmp_type_arg_2 = PyCell_GET( par_key );
            tmp_compexpr_left_3 = BUILTIN_TYPE1( tmp_type_arg_2 );
            assert( !(tmp_compexpr_left_3 == NULL) );
            tmp_compexpr_right_3 = (PyObject *)&PyLong_Type;
            tmp_and_left_value_2 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_compexpr_left_3 );
            tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_2 == 1 )
            {
                goto and_right_2;
            }
            else
            {
                goto and_left_2;
            }
            and_right_2:;
            {
                PyObject *tmp_assign_source_1;
                CHECK_OBJECT( PyCell_GET( par_key ) );
                tmp_assign_source_1 = PyCell_GET( par_key );
                assert( tmp_comparison_chain_1__operand_2 == NULL );
                Py_INCREF( tmp_assign_source_1 );
                tmp_comparison_chain_1__operand_2 = tmp_assign_source_1;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                tmp_compexpr_left_4 = const_int_0;
                CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
                tmp_compexpr_right_4 = tmp_comparison_chain_1__operand_2;
                tmp_assign_source_2 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                if ( tmp_assign_source_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 301;
                    type_description_1 = "oc";
                    goto try_except_handler_2;
                }
                assert( tmp_comparison_chain_1__comparison_result == NULL );
                tmp_comparison_chain_1__comparison_result = tmp_assign_source_2;
            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
                tmp_operand_name_1 = tmp_comparison_chain_1__comparison_result;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 301;
                    type_description_1 = "oc";
                    goto try_except_handler_2;
                }
                tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
                tmp_outline_return_value_1 = tmp_comparison_chain_1__comparison_result;
                Py_INCREF( tmp_outline_return_value_1 );
                goto try_return_handler_2;
                branch_no_3:;
            }
            {
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                PyObject *tmp_len_arg_1;
                CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
                tmp_compexpr_left_5 = tmp_comparison_chain_1__operand_2;
                CHECK_OBJECT( par_self );
                tmp_len_arg_1 = par_self;
                tmp_compexpr_right_5 = BUILTIN_LEN( tmp_len_arg_1 );
                if ( tmp_compexpr_right_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 301;
                    type_description_1 = "oc";
                    goto try_except_handler_2;
                }
                tmp_outline_return_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                Py_DECREF( tmp_compexpr_right_5 );
                if ( tmp_outline_return_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 301;
                    type_description_1 = "oc";
                    goto try_except_handler_2;
                }
                goto try_return_handler_2;
            }
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__ );
            return NULL;
            // Return handler code:
            try_return_handler_2:;
            CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
            Py_DECREF( tmp_comparison_chain_1__operand_2 );
            tmp_comparison_chain_1__operand_2 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__comparison_result );
            Py_DECREF( tmp_comparison_chain_1__comparison_result );
            tmp_comparison_chain_1__comparison_result = NULL;

            goto outline_result_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
            Py_DECREF( tmp_comparison_chain_1__operand_2 );
            tmp_comparison_chain_1__operand_2 = NULL;

            Py_XDECREF( tmp_comparison_chain_1__comparison_result );
            tmp_comparison_chain_1__comparison_result = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto frame_exception_exit_1;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__ );
            return NULL;
            outline_result_1:;
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_outline_return_value_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_outline_return_value_1 );

                exception_lineno = 301;
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_outline_return_value_1 );
            tmp_condition_result_2 = tmp_and_right_value_2;
            goto and_end_2;
            and_left_2:;
            tmp_condition_result_2 = tmp_and_left_value_2;
            and_end_2:;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_source_name_2;
                PyObject *tmp_subscript_name_1;
                CHECK_OBJECT( par_self );
                tmp_source_name_2 = par_self;
                tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__markers );
                if ( tmp_subscribed_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 302;
                    type_description_1 = "oc";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( PyCell_GET( par_key ) );
                tmp_subscript_name_1 = PyCell_GET( par_key );
                tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
                Py_DECREF( tmp_subscribed_name_1 );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 302;
                    type_description_1 = "oc";
                    goto frame_exception_exit_1;
                }
                goto frame_return_exit_1;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_raise_type_1;
                tmp_raise_type_1 = PyExc_IndexError;
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_lineno = 304;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oc";
                goto frame_exception_exit_1;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f48487147fee7e31eb6d7087379f13f8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f48487147fee7e31eb6d7087379f13f8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f48487147fee7e31eb6d7087379f13f8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f48487147fee7e31eb6d7087379f13f8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f48487147fee7e31eb6d7087379f13f8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f48487147fee7e31eb6d7087379f13f8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f48487147fee7e31eb6d7087379f13f8,
        type_description_1,
        par_self,
        par_key
    );


    // Release cached frame.
    if ( frame_f48487147fee7e31eb6d7087379f13f8 == cache_frame_f48487147fee7e31eb6d7087379f13f8 )
    {
        Py_DECREF( frame_f48487147fee7e31eb6d7087379f13f8 );
    }
    cache_frame_f48487147fee7e31eb6d7087379f13f8 = NULL;

    assertFrameObject( frame_f48487147fee7e31eb6d7087379f13f8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_key );
    Py_DECREF( par_key );
    par_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_18___getitem__$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_04732c936e12ba8923892a44f621943f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_04732c936e12ba8923892a44f621943f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_04732c936e12ba8923892a44f621943f, codeobj_04732c936e12ba8923892a44f621943f, module___main__, sizeof(void *)+sizeof(void *) );
    frame_04732c936e12ba8923892a44f621943f = cache_frame_04732c936e12ba8923892a44f621943f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_04732c936e12ba8923892a44f621943f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_04732c936e12ba8923892a44f621943f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_x );
        tmp_source_name_1 = par_x;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 300;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_compexpr_left_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "key" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 300;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = PyCell_GET( self->m_closure[0] );
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 300;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_04732c936e12ba8923892a44f621943f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_04732c936e12ba8923892a44f621943f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_04732c936e12ba8923892a44f621943f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_04732c936e12ba8923892a44f621943f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_04732c936e12ba8923892a44f621943f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_04732c936e12ba8923892a44f621943f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_04732c936e12ba8923892a44f621943f,
        type_description_1,
        par_x,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_04732c936e12ba8923892a44f621943f == cache_frame_04732c936e12ba8923892a44f621943f )
    {
        Py_DECREF( frame_04732c936e12ba8923892a44f621943f );
    }
    cache_frame_04732c936e12ba8923892a44f621943f = NULL;

    assertFrameObject( frame_04732c936e12ba8923892a44f621943f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_18___getitem__$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_19___iter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_aa15595a07904665550c439c24c442cb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_aa15595a07904665550c439c24c442cb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_aa15595a07904665550c439c24c442cb, codeobj_aa15595a07904665550c439c24c442cb, module___main__, sizeof(void *) );
    frame_aa15595a07904665550c439c24c442cb = cache_frame_aa15595a07904665550c439c24c442cb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_aa15595a07904665550c439c24c442cb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_aa15595a07904665550c439c24c442cb ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__markers );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 307;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 307;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        assert( tmp_genexpr_1__$0 == NULL );
        tmp_genexpr_1__$0 = tmp_assign_source_1;
    }
    // Tried code:
    tmp_return_value = __main__$$$function_19___iter__$$$genexpr_1_genexpr_maker();

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


    goto try_return_handler_2;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_19___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    goto outline_result_1;
    // End of try:
    CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
    Py_DECREF( tmp_genexpr_1__$0 );
    tmp_genexpr_1__$0 = NULL;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_19___iter__ );
    return NULL;
    outline_result_1:;
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa15595a07904665550c439c24c442cb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa15595a07904665550c439c24c442cb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aa15595a07904665550c439c24c442cb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_aa15595a07904665550c439c24c442cb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_aa15595a07904665550c439c24c442cb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_aa15595a07904665550c439c24c442cb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_aa15595a07904665550c439c24c442cb,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_aa15595a07904665550c439c24c442cb == cache_frame_aa15595a07904665550c439c24c442cb )
    {
        Py_DECREF( frame_aa15595a07904665550c439c24c442cb );
    }
    cache_frame_aa15595a07904665550c439c24c442cb = NULL;

    assertFrameObject( frame_aa15595a07904665550c439c24c442cb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_19___iter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_19___iter__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_19___iter__$$$genexpr_1_genexpr_locals {
    PyObject *var_marker;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_19___iter__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_19___iter__$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_19___iter__$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_marker = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_9efefce32922980f0b0390c28456cbce, module___main__, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 307;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_marker;
            generator_heap->var_marker = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_marker );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_marker );
        tmp_expression_name_1 = generator_heap->var_marker;
        Py_INCREF( tmp_expression_name_1 );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 307;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 307;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_marker
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_marker );
    generator_heap->var_marker = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_marker );
    generator_heap->var_marker = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_19___iter__$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_19___iter__$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_3ada7868ab79bf6ab657778950f2bb14,
#endif
        codeobj_9efefce32922980f0b0390c28456cbce,
        1,
        sizeof(struct __main__$$$function_19___iter__$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_20__index_of( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_mark_name = python_pars[ 1 ];
    PyObject *var_new_tuple = NULL;
    struct Nuitka_FrameObject *frame_9f609fa269289bcf1b79297665bdc200;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9f609fa269289bcf1b79297665bdc200 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9f609fa269289bcf1b79297665bdc200, codeobj_9f609fa269289bcf1b79297665bdc200, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9f609fa269289bcf1b79297665bdc200 = cache_frame_9f609fa269289bcf1b79297665bdc200;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9f609fa269289bcf1b79297665bdc200 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9f609fa269289bcf1b79297665bdc200 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_tuple_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_1;
        tmp_called_name_1 = (PyObject *)&PyMap_Type;
        tmp_args_element_name_1 = MAKE_FUNCTION___main__$$$function_20__index_of$$$function_1_lambda(  );



        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__markers );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 310;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_9f609fa269289bcf1b79297665bdc200->m_frame.f_lineno = 310;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_tuple_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_tuple_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 310;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 310;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_new_tuple == NULL );
        var_new_tuple = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_mark_name );
        tmp_compexpr_left_1 = par_mark_name;
        CHECK_OBJECT( var_new_tuple );
        tmp_compexpr_right_1 = var_new_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 311;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( var_new_tuple );
            tmp_called_instance_1 = var_new_tuple;
            CHECK_OBJECT( par_mark_name );
            tmp_args_element_name_3 = par_mark_name;
            frame_9f609fa269289bcf1b79297665bdc200->m_frame.f_lineno = 312;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_index, call_args );
            }

            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 312;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_raise_type_1;
            tmp_raise_type_1 = PyExc_KeyError;
            exception_type = tmp_raise_type_1;
            Py_INCREF( tmp_raise_type_1 );
            exception_lineno = 314;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f609fa269289bcf1b79297665bdc200 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f609fa269289bcf1b79297665bdc200 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f609fa269289bcf1b79297665bdc200 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9f609fa269289bcf1b79297665bdc200, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9f609fa269289bcf1b79297665bdc200->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9f609fa269289bcf1b79297665bdc200, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9f609fa269289bcf1b79297665bdc200,
        type_description_1,
        par_self,
        par_mark_name,
        var_new_tuple
    );


    // Release cached frame.
    if ( frame_9f609fa269289bcf1b79297665bdc200 == cache_frame_9f609fa269289bcf1b79297665bdc200 )
    {
        Py_DECREF( frame_9f609fa269289bcf1b79297665bdc200 );
    }
    cache_frame_9f609fa269289bcf1b79297665bdc200 = NULL;

    assertFrameObject( frame_9f609fa269289bcf1b79297665bdc200 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_20__index_of );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mark_name );
    Py_DECREF( par_mark_name );
    par_mark_name = NULL;

    CHECK_OBJECT( (PyObject *)var_new_tuple );
    Py_DECREF( var_new_tuple );
    var_new_tuple = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mark_name );
    Py_DECREF( par_mark_name );
    par_mark_name = NULL;

    Py_XDECREF( var_new_tuple );
    var_new_tuple = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_20__index_of );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_20__index_of$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_x = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f6e016ed06d156761cdca4a3dfd85435;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f6e016ed06d156761cdca4a3dfd85435 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f6e016ed06d156761cdca4a3dfd85435, codeobj_f6e016ed06d156761cdca4a3dfd85435, module___main__, sizeof(void *) );
    frame_f6e016ed06d156761cdca4a3dfd85435 = cache_frame_f6e016ed06d156761cdca4a3dfd85435;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f6e016ed06d156761cdca4a3dfd85435 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f6e016ed06d156761cdca4a3dfd85435 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_x );
        tmp_source_name_1 = par_x;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 310;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6e016ed06d156761cdca4a3dfd85435 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6e016ed06d156761cdca4a3dfd85435 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6e016ed06d156761cdca4a3dfd85435 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f6e016ed06d156761cdca4a3dfd85435, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f6e016ed06d156761cdca4a3dfd85435->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f6e016ed06d156761cdca4a3dfd85435, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f6e016ed06d156761cdca4a3dfd85435,
        type_description_1,
        par_x
    );


    // Release cached frame.
    if ( frame_f6e016ed06d156761cdca4a3dfd85435 == cache_frame_f6e016ed06d156761cdca4a3dfd85435 )
    {
        Py_DECREF( frame_f6e016ed06d156761cdca4a3dfd85435 );
    }
    cache_frame_f6e016ed06d156761cdca4a3dfd85435 = NULL;

    assertFrameObject( frame_f6e016ed06d156761cdca4a3dfd85435 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_20__index_of$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_20__index_of$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_21_wipe( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_names = NULL;
    PyObject *var_name = NULL;
    PyObject *outline_0_var_m = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_3c16bdab477ac61e4648571f59066c8f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_052470c091f66b71ce795db70fa7a456_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_052470c091f66b71ce795db70fa7a456_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3c16bdab477ac61e4648571f59066c8f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3c16bdab477ac61e4648571f59066c8f, codeobj_3c16bdab477ac61e4648571f59066c8f, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3c16bdab477ac61e4648571f59066c8f = cache_frame_3c16bdab477ac61e4648571f59066c8f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3c16bdab477ac61e4648571f59066c8f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3c16bdab477ac61e4648571f59066c8f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_self );
            tmp_iter_arg_1 = par_self;
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 317;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_3;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_052470c091f66b71ce795db70fa7a456_2, codeobj_052470c091f66b71ce795db70fa7a456, module___main__, sizeof(void *) );
        frame_052470c091f66b71ce795db70fa7a456_2 = cache_frame_052470c091f66b71ce795db70fa7a456_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_052470c091f66b71ce795db70fa7a456_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_052470c091f66b71ce795db70fa7a456_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 317;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_5 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_m;
                outline_0_var_m = tmp_assign_source_5;
                Py_INCREF( outline_0_var_m );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT( outline_0_var_m );
            tmp_source_name_1 = outline_0_var_m;
            tmp_append_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_name );
            if ( tmp_append_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 317;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 317;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 317;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_assign_source_1 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_assign_source_1 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_21_wipe );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_052470c091f66b71ce795db70fa7a456_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_052470c091f66b71ce795db70fa7a456_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_052470c091f66b71ce795db70fa7a456_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_052470c091f66b71ce795db70fa7a456_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_052470c091f66b71ce795db70fa7a456_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_052470c091f66b71ce795db70fa7a456_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_052470c091f66b71ce795db70fa7a456_2,
            type_description_2,
            outline_0_var_m
        );


        // Release cached frame.
        if ( frame_052470c091f66b71ce795db70fa7a456_2 == cache_frame_052470c091f66b71ce795db70fa7a456_2 )
        {
            Py_DECREF( frame_052470c091f66b71ce795db70fa7a456_2 );
        }
        cache_frame_052470c091f66b71ce795db70fa7a456_2 = NULL;

        assertFrameObject( frame_052470c091f66b71ce795db70fa7a456_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_21_wipe );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_m );
        outline_0_var_m = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_m );
        outline_0_var_m = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__$$$function_21_wipe );
        return NULL;
        outline_exception_1:;
        exception_lineno = 317;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert( var_names == NULL );
        var_names = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( var_names );
        tmp_iter_arg_2 = var_names;
        tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 318;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_6;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooo";
                exception_lineno = 318;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_8 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_name;
            var_name = tmp_assign_source_8;
            Py_INCREF( var_name );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( var_name );
        tmp_args_element_name_1 = var_name;
        frame_3c16bdab477ac61e4648571f59066c8f->m_frame.f_lineno = 319;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_dereg_marker, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 319;
            type_description_1 = "ooo";
            goto try_except_handler_4;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 318;
        type_description_1 = "ooo";
        goto try_except_handler_4;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = const_str_empty;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__act_mrk, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 320;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3c16bdab477ac61e4648571f59066c8f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3c16bdab477ac61e4648571f59066c8f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3c16bdab477ac61e4648571f59066c8f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3c16bdab477ac61e4648571f59066c8f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3c16bdab477ac61e4648571f59066c8f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3c16bdab477ac61e4648571f59066c8f,
        type_description_1,
        par_self,
        var_names,
        var_name
    );


    // Release cached frame.
    if ( frame_3c16bdab477ac61e4648571f59066c8f == cache_frame_3c16bdab477ac61e4648571f59066c8f )
    {
        Py_DECREF( frame_3c16bdab477ac61e4648571f59066c8f );
    }
    cache_frame_3c16bdab477ac61e4648571f59066c8f = NULL;

    assertFrameObject( frame_3c16bdab477ac61e4648571f59066c8f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_21_wipe );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_names );
    Py_DECREF( var_names );
    var_names = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_names );
    var_names = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_21_wipe );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_22_marker_select( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__ = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_a3e089abf62f20c3c7c2fcee0a18e4e4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a3e089abf62f20c3c7c2fcee0a18e4e4 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a3e089abf62f20c3c7c2fcee0a18e4e4, codeobj_a3e089abf62f20c3c7c2fcee0a18e4e4, module___main__, sizeof(void *)+sizeof(void *) );
    frame_a3e089abf62f20c3c7c2fcee0a18e4e4 = cache_frame_a3e089abf62f20c3c7c2fcee0a18e4e4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_marker_table );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a3e089abf62f20c3c7c2fcee0a18e4e4->m_frame.f_lineno = 323;
        tmp_subscribed_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_selection );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__act_mrk, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a3e089abf62f20c3c7c2fcee0a18e4e4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a3e089abf62f20c3c7c2fcee0a18e4e4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a3e089abf62f20c3c7c2fcee0a18e4e4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a3e089abf62f20c3c7c2fcee0a18e4e4,
        type_description_1,
        par_self,
        par__
    );


    // Release cached frame.
    if ( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 == cache_frame_a3e089abf62f20c3c7c2fcee0a18e4e4 )
    {
        Py_DECREF( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 );
    }
    cache_frame_a3e089abf62f20c3c7c2fcee0a18e4e4 = NULL;

    assertFrameObject( frame_a3e089abf62f20c3c7c2fcee0a18e4e4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_22_marker_select );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_22_marker_select );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_23_grid_color_dialog( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_fc8a0ad495fd8a6c24d3588227fe8dba;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_fc8a0ad495fd8a6c24d3588227fe8dba = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fc8a0ad495fd8a6c24d3588227fe8dba, codeobj_fc8a0ad495fd8a6c24d3588227fe8dba, module___main__, sizeof(void *) );
    frame_fc8a0ad495fd8a6c24d3588227fe8dba = cache_frame_fc8a0ad495fd8a6c24d3588227fe8dba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fc8a0ad495fd8a6c24d3588227fe8dba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fc8a0ad495fd8a6c24d3588227fe8dba ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_cchoser );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cchoser );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "cchoser" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 326;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_fc8a0ad495fd8a6c24d3588227fe8dba->m_frame.f_lineno = 326;
        tmp_subscribed_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_askcolor );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 326;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 326;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__grid_color, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 326;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__grid_color );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 327;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 327;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = const_str_plain_red;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__grid_color, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 328;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc8a0ad495fd8a6c24d3588227fe8dba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fc8a0ad495fd8a6c24d3588227fe8dba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fc8a0ad495fd8a6c24d3588227fe8dba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fc8a0ad495fd8a6c24d3588227fe8dba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fc8a0ad495fd8a6c24d3588227fe8dba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fc8a0ad495fd8a6c24d3588227fe8dba,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_fc8a0ad495fd8a6c24d3588227fe8dba == cache_frame_fc8a0ad495fd8a6c24d3588227fe8dba )
    {
        Py_DECREF( frame_fc8a0ad495fd8a6c24d3588227fe8dba );
    }
    cache_frame_fc8a0ad495fd8a6c24d3588227fe8dba = NULL;

    assertFrameObject( frame_fc8a0ad495fd8a6c24d3588227fe8dba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_23_grid_color_dialog );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_23_grid_color_dialog );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_24_draw_grid_btn_action( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_06d7943efe45ad4d3bea7629bb034d6c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_06d7943efe45ad4d3bea7629bb034d6c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_06d7943efe45ad4d3bea7629bb034d6c, codeobj_06d7943efe45ad4d3bea7629bb034d6c, module___main__, sizeof(void *) );
    frame_06d7943efe45ad4d3bea7629bb034d6c = cache_frame_06d7943efe45ad4d3bea7629bb034d6c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_06d7943efe45ad4d3bea7629bb034d6c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_06d7943efe45ad4d3bea7629bb034d6c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_grid_visible );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_1 = ( tmp_res == 0 ) ? Py_True : Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_grid_visible, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_JpgCanvas );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_bind );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_angle_Configure;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_redraw_grid );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_06d7943efe45ad4d3bea7629bb034d6c->m_frame.f_lineno = 332;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__grid_color );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 334;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 334;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_2;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_draw_grid );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 335;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_1 = const_str_plain_color;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__grid_color );
            if ( tmp_dict_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 335;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            Py_DECREF( tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            frame_06d7943efe45ad4d3bea7629bb034d6c->m_frame.f_lineno = 335;
            tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 335;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_06d7943efe45ad4d3bea7629bb034d6c->m_frame.f_lineno = 337;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_draw_grid );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 337;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_06d7943efe45ad4d3bea7629bb034d6c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_06d7943efe45ad4d3bea7629bb034d6c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_06d7943efe45ad4d3bea7629bb034d6c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_06d7943efe45ad4d3bea7629bb034d6c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_06d7943efe45ad4d3bea7629bb034d6c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_06d7943efe45ad4d3bea7629bb034d6c,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_06d7943efe45ad4d3bea7629bb034d6c == cache_frame_06d7943efe45ad4d3bea7629bb034d6c )
    {
        Py_DECREF( frame_06d7943efe45ad4d3bea7629bb034d6c );
    }
    cache_frame_06d7943efe45ad4d3bea7629bb034d6c = NULL;

    assertFrameObject( frame_06d7943efe45ad4d3bea7629bb034d6c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_24_draw_grid_btn_action );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_24_draw_grid_btn_action );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_25_redraw_grid( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__ = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_2c886d5469f0d5cb2bfbae5db4226953;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2c886d5469f0d5cb2bfbae5db4226953 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2c886d5469f0d5cb2bfbae5db4226953, codeobj_2c886d5469f0d5cb2bfbae5db4226953, module___main__, sizeof(void *)+sizeof(void *) );
    frame_2c886d5469f0d5cb2bfbae5db4226953 = cache_frame_2c886d5469f0d5cb2bfbae5db4226953;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2c886d5469f0d5cb2bfbae5db4226953 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2c886d5469f0d5cb2bfbae5db4226953 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_2c886d5469f0d5cb2bfbae5db4226953->m_frame.f_lineno = 340;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_draw_grid );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 340;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c886d5469f0d5cb2bfbae5db4226953 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2c886d5469f0d5cb2bfbae5db4226953 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2c886d5469f0d5cb2bfbae5db4226953, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2c886d5469f0d5cb2bfbae5db4226953->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2c886d5469f0d5cb2bfbae5db4226953, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2c886d5469f0d5cb2bfbae5db4226953,
        type_description_1,
        par_self,
        par__
    );


    // Release cached frame.
    if ( frame_2c886d5469f0d5cb2bfbae5db4226953 == cache_frame_2c886d5469f0d5cb2bfbae5db4226953 )
    {
        Py_DECREF( frame_2c886d5469f0d5cb2bfbae5db4226953 );
    }
    cache_frame_2c886d5469f0d5cb2bfbae5db4226953 = NULL;

    assertFrameObject( frame_2c886d5469f0d5cb2bfbae5db4226953 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_25_redraw_grid );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_25_redraw_grid );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_26_draw_grid( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_color = python_pars[ 1 ];
    PyObject *var_ratio = NULL;
    PyObject *var_canv_width = NULL;
    PyObject *var_canv_height = NULL;
    PyObject *var_wstep = NULL;
    PyObject *var_hstep = NULL;
    PyObject *var_wn = NULL;
    PyObject *var_hn = NULL;
    PyObject *var_horiz_lines = NULL;
    PyObject *var_vert_lines = NULL;
    PyObject *var_lines = NULL;
    PyObject *var_line = NULL;
    PyObject *outline_0_var_i = NULL;
    PyObject *outline_1_var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_96efac828c2ad4830615f0b05185ef73;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_a5d87279d711d228102021bfeeb44c8e_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_a5d87279d711d228102021bfeeb44c8e_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    struct Nuitka_FrameObject *frame_23e0933a40be4b58aced2fc8491e9cc9_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_23e0933a40be4b58aced2fc8491e9cc9_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_96efac828c2ad4830615f0b05185ef73 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_96efac828c2ad4830615f0b05185ef73, codeobj_96efac828c2ad4830615f0b05185ef73, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_96efac828c2ad4830615f0b05185ef73 = cache_frame_96efac828c2ad4830615f0b05185ef73;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_96efac828c2ad4830615f0b05185ef73 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_96efac828c2ad4830615f0b05185ef73 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_grid_visible );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 343;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 343;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_JpgCanvas );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 345;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 345;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_delete, &PyTuple_GET_ITEM( const_tuple_str_plain_grid_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 345;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_int_arg_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__grid_var );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 346;
            tmp_called_instance_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_get );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 346;
            tmp_int_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_strip, &PyTuple_GET_ITEM( const_tuple_str_chr_37_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_int_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_1 = PyNumber_Int( tmp_int_arg_1 );
            Py_DECREF( tmp_int_arg_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_int_pos_100;
            tmp_assign_source_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_ratio == NULL );
            var_ratio = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_JpgCanvas );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 347;
            tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_winfo_width );
            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_canv_width == NULL );
            var_canv_width = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_JpgCanvas );
            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 348;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 348;
            tmp_assign_source_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_winfo_height );
            Py_DECREF( tmp_called_instance_5 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 348;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_canv_height == NULL );
            var_canv_height = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( var_canv_width );
            tmp_left_name_2 = var_canv_width;
            CHECK_OBJECT( var_ratio );
            tmp_right_name_2 = var_ratio;
            tmp_assign_source_4 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 349;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_wstep == NULL );
            var_wstep = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            CHECK_OBJECT( var_canv_height );
            tmp_left_name_3 = var_canv_height;
            CHECK_OBJECT( var_ratio );
            tmp_right_name_3 = var_ratio;
            tmp_assign_source_5 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 350;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_hstep == NULL );
            var_hstep = tmp_assign_source_5;
        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_int_arg_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_4;
            PyObject *tmp_right_name_4;
            PyObject *tmp_kw_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_a_round );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_a_round );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "a_round" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 352;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( var_canv_width );
            tmp_left_name_4 = var_canv_width;
            CHECK_OBJECT( var_wstep );
            tmp_right_name_4 = var_wstep;
            tmp_tuple_element_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_4, tmp_right_name_4 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 352;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_name_1 = PyTuple_New( 1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            tmp_kw_name_1 = PyDict_Copy( const_dict_8638e2e7734fb2515e9526a7f0773526 );
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 352;
            tmp_int_arg_2 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_int_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 352;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_6 = PyNumber_Int( tmp_int_arg_2 );
            Py_DECREF( tmp_int_arg_2 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 352;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_wn == NULL );
            var_wn = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_int_arg_3;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_left_name_5;
            PyObject *tmp_right_name_5;
            PyObject *tmp_kw_name_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_a_round );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_a_round );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "a_round" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 353;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            CHECK_OBJECT( var_canv_height );
            tmp_left_name_5 = var_canv_height;
            CHECK_OBJECT( var_hstep );
            tmp_right_name_5 = var_hstep;
            tmp_tuple_element_2 = BINARY_OPERATION_TRUEDIV( tmp_left_name_5, tmp_right_name_5 );
            if ( tmp_tuple_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 353;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_name_2 = PyTuple_New( 1 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
            tmp_kw_name_2 = PyDict_Copy( const_dict_8638e2e7734fb2515e9526a7f0773526 );
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 353;
            tmp_int_arg_3 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_int_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 353;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_7 = PyNumber_Int( tmp_int_arg_3 );
            Py_DECREF( tmp_int_arg_3 );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 353;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_hn == NULL );
            var_hn = tmp_assign_source_7;
        }
        {
            PyObject *tmp_assign_source_8;
            // Tried code:
            {
                PyObject *tmp_assign_source_9;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_xrange_low_1;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                CHECK_OBJECT( var_wn );
                tmp_left_name_6 = var_wn;
                tmp_right_name_6 = const_int_pos_1;
                tmp_xrange_low_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_6, tmp_right_name_6 );
                if ( tmp_xrange_low_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 356;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_iter_arg_1 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
                Py_DECREF( tmp_xrange_low_1 );
                if ( tmp_iter_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 356;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                if ( tmp_assign_source_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 355;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_2;
                }
                assert( tmp_listcomp_1__$0 == NULL );
                tmp_listcomp_1__$0 = tmp_assign_source_9;
            }
            {
                PyObject *tmp_assign_source_10;
                tmp_assign_source_10 = PyList_New( 0 );
                assert( tmp_listcomp_1__contraction == NULL );
                tmp_listcomp_1__contraction = tmp_assign_source_10;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_a5d87279d711d228102021bfeeb44c8e_2, codeobj_a5d87279d711d228102021bfeeb44c8e, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
            frame_a5d87279d711d228102021bfeeb44c8e_2 = cache_frame_a5d87279d711d228102021bfeeb44c8e_2;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_a5d87279d711d228102021bfeeb44c8e_2 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_a5d87279d711d228102021bfeeb44c8e_2 ) == 2 ); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_11;
                CHECK_OBJECT( tmp_listcomp_1__$0 );
                tmp_next_source_1 = tmp_listcomp_1__$0;
                tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_1 );
                if ( tmp_assign_source_11 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_1;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_2 = "ooo";
                        exception_lineno = 355;
                        goto try_except_handler_3;
                    }
                }

                {
                    PyObject *old = tmp_listcomp_1__iter_value_0;
                    tmp_listcomp_1__iter_value_0 = tmp_assign_source_11;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_12;
                CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
                tmp_assign_source_12 = tmp_listcomp_1__iter_value_0;
                {
                    PyObject *old = outline_0_var_i;
                    outline_0_var_i = tmp_assign_source_12;
                    Py_INCREF( outline_0_var_i );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_append_list_1;
                PyObject *tmp_append_value_1;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_left_name_7;
                PyObject *tmp_called_instance_6;
                PyObject *tmp_source_name_6;
                PyObject *tmp_right_name_7;
                PyObject *tmp_left_name_8;
                PyObject *tmp_right_name_8;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_source_name_7;
                PyObject *tmp_left_name_9;
                PyObject *tmp_called_instance_8;
                PyObject *tmp_source_name_8;
                PyObject *tmp_right_name_9;
                PyObject *tmp_left_name_10;
                PyObject *tmp_right_name_10;
                PyObject *tmp_called_instance_9;
                PyObject *tmp_source_name_9;
                CHECK_OBJECT( tmp_listcomp_1__contraction );
                tmp_append_list_1 = tmp_listcomp_1__contraction;
                CHECK_OBJECT( par_self );
                tmp_source_name_6 = par_self;
                tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                frame_a5d87279d711d228102021bfeeb44c8e_2->m_frame.f_lineno = 355;
                tmp_left_name_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_winfo_x );
                Py_DECREF( tmp_called_instance_6 );
                if ( tmp_left_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( var_wstep );
                tmp_left_name_8 = var_wstep;
                CHECK_OBJECT( outline_0_var_i );
                tmp_right_name_8 = outline_0_var_i;
                tmp_right_name_7 = BINARY_OPERATION_MUL( tmp_left_name_8, tmp_right_name_8 );
                if ( tmp_right_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_left_name_7 );

                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                tmp_tuple_element_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_left_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                tmp_append_value_1 = PyTuple_New( 4 );
                PyTuple_SET_ITEM( tmp_append_value_1, 0, tmp_tuple_element_3 );
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_called_instance_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                frame_a5d87279d711d228102021bfeeb44c8e_2->m_frame.f_lineno = 355;
                tmp_tuple_element_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_winfo_y );
                Py_DECREF( tmp_called_instance_7 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                PyTuple_SET_ITEM( tmp_append_value_1, 1, tmp_tuple_element_3 );
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                frame_a5d87279d711d228102021bfeeb44c8e_2->m_frame.f_lineno = 356;
                tmp_left_name_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_winfo_x );
                Py_DECREF( tmp_called_instance_8 );
                if ( tmp_left_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( var_wstep );
                tmp_left_name_10 = var_wstep;
                CHECK_OBJECT( outline_0_var_i );
                tmp_right_name_10 = outline_0_var_i;
                tmp_right_name_9 = BINARY_OPERATION_MUL( tmp_left_name_10, tmp_right_name_10 );
                if ( tmp_right_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );
                    Py_DECREF( tmp_left_name_9 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                tmp_tuple_element_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_9, tmp_right_name_9 );
                Py_DECREF( tmp_left_name_9 );
                Py_DECREF( tmp_right_name_9 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                PyTuple_SET_ITEM( tmp_append_value_1, 2, tmp_tuple_element_3 );
                CHECK_OBJECT( par_self );
                tmp_source_name_9 = par_self;
                tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                frame_a5d87279d711d228102021bfeeb44c8e_2->m_frame.f_lineno = 356;
                tmp_tuple_element_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_winfo_height );
                Py_DECREF( tmp_called_instance_9 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_1 );

                    exception_lineno = 356;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                PyTuple_SET_ITEM( tmp_append_value_1, 3, tmp_tuple_element_3 );
                assert( PyList_Check( tmp_append_list_1 ) );
                tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
                Py_DECREF( tmp_append_value_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 355;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 355;
                type_description_2 = "ooo";
                goto try_except_handler_3;
            }
            goto loop_start_1;
            loop_end_1:;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_assign_source_8 = tmp_listcomp_1__contraction;
            Py_INCREF( tmp_assign_source_8 );
            goto try_return_handler_3;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            // Return handler code:
            try_return_handler_3:;
            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            goto frame_return_exit_1;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto frame_exception_exit_2;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION( frame_a5d87279d711d228102021bfeeb44c8e_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_1;

            frame_return_exit_1:;
#if 0
            RESTORE_FRAME_EXCEPTION( frame_a5d87279d711d228102021bfeeb44c8e_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_2;

            frame_exception_exit_2:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_a5d87279d711d228102021bfeeb44c8e_2 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_a5d87279d711d228102021bfeeb44c8e_2, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_a5d87279d711d228102021bfeeb44c8e_2->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_a5d87279d711d228102021bfeeb44c8e_2, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_a5d87279d711d228102021bfeeb44c8e_2,
                type_description_2,
                outline_0_var_i,
                par_self,
                var_wstep
            );


            // Release cached frame.
            if ( frame_a5d87279d711d228102021bfeeb44c8e_2 == cache_frame_a5d87279d711d228102021bfeeb44c8e_2 )
            {
                Py_DECREF( frame_a5d87279d711d228102021bfeeb44c8e_2 );
            }
            cache_frame_a5d87279d711d228102021bfeeb44c8e_2 = NULL;

            assertFrameObject( frame_a5d87279d711d228102021bfeeb44c8e_2 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_1;

            frame_no_exception_1:;
            goto skip_nested_handling_1;
            nested_frame_exit_1:;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
            skip_nested_handling_1:;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            // Return handler code:
            try_return_handler_2:;
            Py_XDECREF( outline_0_var_i );
            outline_0_var_i = NULL;

            goto outline_result_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( outline_0_var_i );
            outline_0_var_i = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto outline_exception_1;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            outline_exception_1:;
            exception_lineno = 355;
            goto frame_exception_exit_1;
            outline_result_1:;
            assert( var_horiz_lines == NULL );
            var_horiz_lines = tmp_assign_source_8;
        }
        {
            PyObject *tmp_assign_source_13;
            // Tried code:
            {
                PyObject *tmp_assign_source_14;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_xrange_low_2;
                PyObject *tmp_left_name_11;
                PyObject *tmp_right_name_11;
                CHECK_OBJECT( var_hn );
                tmp_left_name_11 = var_hn;
                tmp_right_name_11 = const_int_pos_1;
                tmp_xrange_low_2 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_11, tmp_right_name_11 );
                if ( tmp_xrange_low_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 358;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_iter_arg_2 = BUILTIN_XRANGE1( tmp_xrange_low_2 );
                Py_DECREF( tmp_xrange_low_2 );
                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 358;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 357;
                    type_description_1 = "ooooooooooooo";
                    goto try_except_handler_4;
                }
                assert( tmp_listcomp_2__$0 == NULL );
                tmp_listcomp_2__$0 = tmp_assign_source_14;
            }
            {
                PyObject *tmp_assign_source_15;
                tmp_assign_source_15 = PyList_New( 0 );
                assert( tmp_listcomp_2__contraction == NULL );
                tmp_listcomp_2__contraction = tmp_assign_source_15;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_23e0933a40be4b58aced2fc8491e9cc9_3, codeobj_23e0933a40be4b58aced2fc8491e9cc9, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
            frame_23e0933a40be4b58aced2fc8491e9cc9_3 = cache_frame_23e0933a40be4b58aced2fc8491e9cc9_3;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_23e0933a40be4b58aced2fc8491e9cc9_3 ) == 2 ); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_2:;
            {
                PyObject *tmp_next_source_2;
                PyObject *tmp_assign_source_16;
                CHECK_OBJECT( tmp_listcomp_2__$0 );
                tmp_next_source_2 = tmp_listcomp_2__$0;
                tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_2 );
                if ( tmp_assign_source_16 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_2;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_2 = "ooo";
                        exception_lineno = 357;
                        goto try_except_handler_5;
                    }
                }

                {
                    PyObject *old = tmp_listcomp_2__iter_value_0;
                    tmp_listcomp_2__iter_value_0 = tmp_assign_source_16;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_17;
                CHECK_OBJECT( tmp_listcomp_2__iter_value_0 );
                tmp_assign_source_17 = tmp_listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_1_var_i;
                    outline_1_var_i = tmp_assign_source_17;
                    Py_INCREF( outline_1_var_i );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_append_list_2;
                PyObject *tmp_append_value_2;
                PyObject *tmp_tuple_element_4;
                PyObject *tmp_called_instance_10;
                PyObject *tmp_source_name_10;
                PyObject *tmp_left_name_12;
                PyObject *tmp_called_instance_11;
                PyObject *tmp_source_name_11;
                PyObject *tmp_right_name_12;
                PyObject *tmp_left_name_13;
                PyObject *tmp_right_name_13;
                PyObject *tmp_called_instance_12;
                PyObject *tmp_source_name_12;
                PyObject *tmp_left_name_14;
                PyObject *tmp_called_instance_13;
                PyObject *tmp_source_name_13;
                PyObject *tmp_right_name_14;
                PyObject *tmp_left_name_15;
                PyObject *tmp_right_name_15;
                CHECK_OBJECT( tmp_listcomp_2__contraction );
                tmp_append_list_2 = tmp_listcomp_2__contraction;
                CHECK_OBJECT( par_self );
                tmp_source_name_10 = par_self;
                tmp_called_instance_10 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                frame_23e0933a40be4b58aced2fc8491e9cc9_3->m_frame.f_lineno = 357;
                tmp_tuple_element_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_winfo_x );
                Py_DECREF( tmp_called_instance_10 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                tmp_append_value_2 = PyTuple_New( 4 );
                PyTuple_SET_ITEM( tmp_append_value_2, 0, tmp_tuple_element_4 );
                CHECK_OBJECT( par_self );
                tmp_source_name_11 = par_self;
                tmp_called_instance_11 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                frame_23e0933a40be4b58aced2fc8491e9cc9_3->m_frame.f_lineno = 357;
                tmp_left_name_12 = CALL_METHOD_NO_ARGS( tmp_called_instance_11, const_str_plain_winfo_y );
                Py_DECREF( tmp_called_instance_11 );
                if ( tmp_left_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                CHECK_OBJECT( var_hstep );
                tmp_left_name_13 = var_hstep;
                CHECK_OBJECT( outline_1_var_i );
                tmp_right_name_13 = outline_1_var_i;
                tmp_right_name_12 = BINARY_OPERATION_MUL( tmp_left_name_13, tmp_right_name_13 );
                if ( tmp_right_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );
                    Py_DECREF( tmp_left_name_12 );

                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                tmp_tuple_element_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_12, tmp_right_name_12 );
                Py_DECREF( tmp_left_name_12 );
                Py_DECREF( tmp_right_name_12 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM( tmp_append_value_2, 1, tmp_tuple_element_4 );
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_called_instance_12 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                frame_23e0933a40be4b58aced2fc8491e9cc9_3->m_frame.f_lineno = 358;
                tmp_tuple_element_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_winfo_width );
                Py_DECREF( tmp_called_instance_12 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM( tmp_append_value_2, 2, tmp_tuple_element_4 );
                CHECK_OBJECT( par_self );
                tmp_source_name_13 = par_self;
                tmp_called_instance_13 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_JpgCanvas );
                if ( tmp_called_instance_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                frame_23e0933a40be4b58aced2fc8491e9cc9_3->m_frame.f_lineno = 358;
                tmp_left_name_14 = CALL_METHOD_NO_ARGS( tmp_called_instance_13, const_str_plain_winfo_y );
                Py_DECREF( tmp_called_instance_13 );
                if ( tmp_left_name_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                CHECK_OBJECT( var_hstep );
                tmp_left_name_15 = var_hstep;
                CHECK_OBJECT( outline_1_var_i );
                tmp_right_name_15 = outline_1_var_i;
                tmp_right_name_14 = BINARY_OPERATION_MUL( tmp_left_name_15, tmp_right_name_15 );
                if ( tmp_right_name_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );
                    Py_DECREF( tmp_left_name_14 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                tmp_tuple_element_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_14, tmp_right_name_14 );
                Py_DECREF( tmp_left_name_14 );
                Py_DECREF( tmp_right_name_14 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_append_value_2 );

                    exception_lineno = 358;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM( tmp_append_value_2, 3, tmp_tuple_element_4 );
                assert( PyList_Check( tmp_append_list_2 ) );
                tmp_res = PyList_Append( tmp_append_list_2, tmp_append_value_2 );
                Py_DECREF( tmp_append_value_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 357;
                    type_description_2 = "ooo";
                    goto try_except_handler_5;
                }
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 357;
                type_description_2 = "ooo";
                goto try_except_handler_5;
            }
            goto loop_start_2;
            loop_end_2:;
            CHECK_OBJECT( tmp_listcomp_2__contraction );
            tmp_assign_source_13 = tmp_listcomp_2__contraction;
            Py_INCREF( tmp_assign_source_13 );
            goto try_return_handler_5;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            // Return handler code:
            try_return_handler_5:;
            CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
            Py_DECREF( tmp_listcomp_2__$0 );
            tmp_listcomp_2__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
            Py_DECREF( tmp_listcomp_2__contraction );
            tmp_listcomp_2__contraction = NULL;

            Py_XDECREF( tmp_listcomp_2__iter_value_0 );
            tmp_listcomp_2__iter_value_0 = NULL;

            goto frame_return_exit_2;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
            Py_DECREF( tmp_listcomp_2__$0 );
            tmp_listcomp_2__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
            Py_DECREF( tmp_listcomp_2__contraction );
            tmp_listcomp_2__contraction = NULL;

            Py_XDECREF( tmp_listcomp_2__iter_value_0 );
            tmp_listcomp_2__iter_value_0 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto frame_exception_exit_3;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_2;

            frame_return_exit_2:;
#if 0
            RESTORE_FRAME_EXCEPTION( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_4;

            frame_exception_exit_3:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_23e0933a40be4b58aced2fc8491e9cc9_3, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_23e0933a40be4b58aced2fc8491e9cc9_3->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_23e0933a40be4b58aced2fc8491e9cc9_3, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_23e0933a40be4b58aced2fc8491e9cc9_3,
                type_description_2,
                outline_1_var_i,
                par_self,
                var_hstep
            );


            // Release cached frame.
            if ( frame_23e0933a40be4b58aced2fc8491e9cc9_3 == cache_frame_23e0933a40be4b58aced2fc8491e9cc9_3 )
            {
                Py_DECREF( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );
            }
            cache_frame_23e0933a40be4b58aced2fc8491e9cc9_3 = NULL;

            assertFrameObject( frame_23e0933a40be4b58aced2fc8491e9cc9_3 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_2;

            frame_no_exception_2:;
            goto skip_nested_handling_2;
            nested_frame_exit_2:;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_4;
            skip_nested_handling_2:;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            // Return handler code:
            try_return_handler_4:;
            Py_XDECREF( outline_1_var_i );
            outline_1_var_i = NULL;

            goto outline_result_2;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( outline_1_var_i );
            outline_1_var_i = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto outline_exception_2;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
            return NULL;
            outline_exception_2:;
            exception_lineno = 357;
            goto frame_exception_exit_1;
            outline_result_2:;
            assert( var_vert_lines == NULL );
            var_vert_lines = tmp_assign_source_13;
        }
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_left_name_16;
            PyObject *tmp_right_name_16;
            CHECK_OBJECT( var_horiz_lines );
            tmp_left_name_16 = var_horiz_lines;
            CHECK_OBJECT( var_vert_lines );
            tmp_right_name_16 = var_vert_lines;
            tmp_assign_source_18 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_16, tmp_right_name_16 );
            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 360;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_lines == NULL );
            var_lines = tmp_assign_source_18;
        }
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_iter_arg_3;
            CHECK_OBJECT( var_lines );
            tmp_iter_arg_3 = var_lines;
            tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_3 );
            if ( tmp_assign_source_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 361;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_19;
        }
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_20;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_3 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_3 );
            if ( tmp_assign_source_20 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_3;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooooooooooo";
                    exception_lineno = 361;
                    goto try_except_handler_6;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_20;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_21;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_21 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_line;
                var_line = tmp_assign_source_21;
                Py_INCREF( var_line );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_14;
            PyObject *tmp_source_name_15;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_int_arg_4;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_int_arg_5;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_int_arg_6;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_int_arg_7;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_kw_name_3;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_15 = par_self;
            tmp_source_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_JpgCanvas );
            if ( tmp_source_name_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_create_line );
            Py_DECREF( tmp_source_name_14 );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            CHECK_OBJECT( var_line );
            tmp_subscribed_name_1 = var_line;
            tmp_subscript_name_1 = const_int_0;
            tmp_int_arg_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
            if ( tmp_int_arg_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_5 = PyNumber_Int( tmp_int_arg_4 );
            Py_DECREF( tmp_int_arg_4 );
            if ( tmp_tuple_element_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_args_name_3 = PyTuple_New( 4 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
            CHECK_OBJECT( var_line );
            tmp_subscribed_name_2 = var_line;
            tmp_subscript_name_2 = const_int_pos_1;
            tmp_int_arg_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
            if ( tmp_int_arg_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_5 = PyNumber_Int( tmp_int_arg_5 );
            Py_DECREF( tmp_int_arg_5 );
            if ( tmp_tuple_element_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_5 );
            CHECK_OBJECT( var_line );
            tmp_subscribed_name_3 = var_line;
            tmp_subscript_name_3 = const_int_pos_2;
            tmp_int_arg_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 2 );
            if ( tmp_int_arg_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_5 = PyNumber_Int( tmp_int_arg_6 );
            Py_DECREF( tmp_int_arg_6 );
            if ( tmp_tuple_element_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            PyTuple_SET_ITEM( tmp_args_name_3, 2, tmp_tuple_element_5 );
            CHECK_OBJECT( var_line );
            tmp_subscribed_name_4 = var_line;
            tmp_subscript_name_4 = const_int_pos_3;
            tmp_int_arg_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 3 );
            if ( tmp_int_arg_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_5 = PyNumber_Int( tmp_int_arg_7 );
            Py_DECREF( tmp_int_arg_7 );
            if ( tmp_tuple_element_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            PyTuple_SET_ITEM( tmp_args_name_3, 3, tmp_tuple_element_5 );
            tmp_dict_key_1 = const_str_plain_fill;
            CHECK_OBJECT( par_color );
            tmp_dict_value_1 = par_color;
            tmp_kw_name_3 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_tags;
            tmp_dict_value_2 = const_str_plain_grid;
            tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 362;
            tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_name_3 );
            Py_DECREF( tmp_kw_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "ooooooooooooo";
                goto try_except_handler_6;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        goto loop_start_3;
        loop_end_3:;
        goto try_end_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_1;
        // End of try:
        try_end_1:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_source_name_16;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_16 = par_self;
            tmp_called_instance_14 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_JpgCanvas );
            if ( tmp_called_instance_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 365;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_96efac828c2ad4830615f0b05185ef73->m_frame.f_lineno = 365;
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_delete, &PyTuple_GET_ITEM( const_tuple_str_plain_grid_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_14 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 365;
                type_description_1 = "ooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_96efac828c2ad4830615f0b05185ef73 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_3;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_96efac828c2ad4830615f0b05185ef73 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_96efac828c2ad4830615f0b05185ef73, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_96efac828c2ad4830615f0b05185ef73->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_96efac828c2ad4830615f0b05185ef73, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_96efac828c2ad4830615f0b05185ef73,
        type_description_1,
        par_self,
        par_color,
        var_ratio,
        var_canv_width,
        var_canv_height,
        var_wstep,
        var_hstep,
        var_wn,
        var_hn,
        var_horiz_lines,
        var_vert_lines,
        var_lines,
        var_line
    );


    // Release cached frame.
    if ( frame_96efac828c2ad4830615f0b05185ef73 == cache_frame_96efac828c2ad4830615f0b05185ef73 )
    {
        Py_DECREF( frame_96efac828c2ad4830615f0b05185ef73 );
    }
    cache_frame_96efac828c2ad4830615f0b05185ef73 = NULL;

    assertFrameObject( frame_96efac828c2ad4830615f0b05185ef73 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_3:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    Py_XDECREF( var_ratio );
    var_ratio = NULL;

    Py_XDECREF( var_canv_width );
    var_canv_width = NULL;

    Py_XDECREF( var_canv_height );
    var_canv_height = NULL;

    Py_XDECREF( var_wstep );
    var_wstep = NULL;

    Py_XDECREF( var_hstep );
    var_hstep = NULL;

    Py_XDECREF( var_wn );
    var_wn = NULL;

    Py_XDECREF( var_hn );
    var_hn = NULL;

    Py_XDECREF( var_horiz_lines );
    var_horiz_lines = NULL;

    Py_XDECREF( var_vert_lines );
    var_vert_lines = NULL;

    Py_XDECREF( var_lines );
    var_lines = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    Py_XDECREF( var_ratio );
    var_ratio = NULL;

    Py_XDECREF( var_canv_width );
    var_canv_width = NULL;

    Py_XDECREF( var_canv_height );
    var_canv_height = NULL;

    Py_XDECREF( var_wstep );
    var_wstep = NULL;

    Py_XDECREF( var_hstep );
    var_hstep = NULL;

    Py_XDECREF( var_wn );
    var_wn = NULL;

    Py_XDECREF( var_hn );
    var_hn = NULL;

    Py_XDECREF( var_horiz_lines );
    var_horiz_lines = NULL;

    Py_XDECREF( var_vert_lines );
    var_vert_lines = NULL;

    Py_XDECREF( var_lines );
    var_lines = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_26_draw_grid );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_27_reg_marker( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_name = python_pars[ 1 ];
    PyObject *par_color = python_pars[ 2 ];
    PyObject *var_mark_name = NULL;
    PyObject *var_c = NULL;
    PyObject *var_init_name = NULL;
    struct Nuitka_FrameObject *frame_1db7e7340eebefc5fadeb56dd4c3c657;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_1db7e7340eebefc5fadeb56dd4c3c657 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( par_name );
        tmp_assign_source_1 = par_name;
        assert( var_mark_name == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_mark_name = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_int_0;
        assert( var_c == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_c = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( var_mark_name );
        tmp_assign_source_3 = var_mark_name;
        assert( var_init_name == NULL );
        Py_INCREF( tmp_assign_source_3 );
        var_init_name = tmp_assign_source_3;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1db7e7340eebefc5fadeb56dd4c3c657, codeobj_1db7e7340eebefc5fadeb56dd4c3c657, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1db7e7340eebefc5fadeb56dd4c3c657 = cache_frame_1db7e7340eebefc5fadeb56dd4c3c657;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1db7e7340eebefc5fadeb56dd4c3c657 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1db7e7340eebefc5fadeb56dd4c3c657 ) == 2 ); // Frame stack

    // Framed code:
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_mark_name );
        tmp_compexpr_left_1 = var_mark_name;
        CHECK_OBJECT( par_self );
        tmp_compexpr_right_1 = par_self;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 371;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( var_c );
        tmp_left_name_1 = var_c;
        tmp_right_name_1 = const_int_pos_1;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE( &tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 372;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = tmp_left_name_1;
        var_c = tmp_assign_source_4;

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT( var_init_name );
        tmp_left_name_3 = var_init_name;
        tmp_right_name_2 = const_str_dot;
        tmp_left_name_2 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_3, tmp_right_name_2 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 373;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_c );
        tmp_unicode_arg_1 = var_c;
        tmp_right_name_3 = PyObject_Unicode( tmp_unicode_arg_1 );
        if ( tmp_right_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_2 );

            exception_lineno = 373;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_2, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_2 );
        Py_DECREF( tmp_right_name_3 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 373;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_mark_name;
            assert( old != NULL );
            var_mark_name = tmp_assign_source_5;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 371;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__markers );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Marker );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Marker );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Marker" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        CHECK_OBJECT( var_mark_name );
        tmp_args_element_name_2 = var_mark_name;
        CHECK_OBJECT( par_color );
        tmp_args_element_name_3 = par_color;
        tmp_args_element_name_4 = const_int_0;
        frame_1db7e7340eebefc5fadeb56dd4c3c657->m_frame.f_lineno = 374;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1db7e7340eebefc5fadeb56dd4c3c657->m_frame.f_lineno = 374;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 374;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_all_saved, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 375;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_1db7e7340eebefc5fadeb56dd4c3c657->m_frame.f_lineno = 376;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_config_buttons );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 376;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1db7e7340eebefc5fadeb56dd4c3c657 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1db7e7340eebefc5fadeb56dd4c3c657 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1db7e7340eebefc5fadeb56dd4c3c657, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1db7e7340eebefc5fadeb56dd4c3c657->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1db7e7340eebefc5fadeb56dd4c3c657, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1db7e7340eebefc5fadeb56dd4c3c657,
        type_description_1,
        par_self,
        par_name,
        par_color,
        var_mark_name,
        var_c,
        var_init_name
    );


    // Release cached frame.
    if ( frame_1db7e7340eebefc5fadeb56dd4c3c657 == cache_frame_1db7e7340eebefc5fadeb56dd4c3c657 )
    {
        Py_DECREF( frame_1db7e7340eebefc5fadeb56dd4c3c657 );
    }
    cache_frame_1db7e7340eebefc5fadeb56dd4c3c657 = NULL;

    assertFrameObject( frame_1db7e7340eebefc5fadeb56dd4c3c657 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_mark_name );
    tmp_return_value = var_mark_name;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_27_reg_marker );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    CHECK_OBJECT( (PyObject *)var_mark_name );
    Py_DECREF( var_mark_name );
    var_mark_name = NULL;

    CHECK_OBJECT( (PyObject *)var_c );
    Py_DECREF( var_c );
    var_c = NULL;

    CHECK_OBJECT( (PyObject *)var_init_name );
    Py_DECREF( var_init_name );
    var_init_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_color );
    Py_DECREF( par_color );
    par_color = NULL;

    CHECK_OBJECT( (PyObject *)var_mark_name );
    Py_DECREF( var_mark_name );
    var_mark_name = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    CHECK_OBJECT( (PyObject *)var_init_name );
    Py_DECREF( var_init_name );
    var_init_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_27_reg_marker );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_28_dereg_marker( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_mark_name = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_893f4d1d1c46326b9e5e29a86d292112;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_893f4d1d1c46326b9e5e29a86d292112 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_893f4d1d1c46326b9e5e29a86d292112, codeobj_893f4d1d1c46326b9e5e29a86d292112, module___main__, sizeof(void *)+sizeof(void *) );
    frame_893f4d1d1c46326b9e5e29a86d292112 = cache_frame_893f4d1d1c46326b9e5e29a86d292112;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_893f4d1d1c46326b9e5e29a86d292112 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_893f4d1d1c46326b9e5e29a86d292112 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__markers );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_pop );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_mark_name );
        tmp_args_element_name_2 = par_mark_name;
        frame_893f4d1d1c46326b9e5e29a86d292112->m_frame.f_lineno = 380;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__index_of, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 380;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_893f4d1d1c46326b9e5e29a86d292112->m_frame.f_lineno = 380;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_JpgCanvas );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 381;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_mark_name );
        tmp_args_element_name_3 = par_mark_name;
        frame_893f4d1d1c46326b9e5e29a86d292112->m_frame.f_lineno = 381;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_delete, call_args );
        }

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 381;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_all_saved, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 383;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        frame_893f4d1d1c46326b9e5e29a86d292112->m_frame.f_lineno = 384;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_config_buttons );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 384;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_893f4d1d1c46326b9e5e29a86d292112->m_frame.f_lineno = 385;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_list_markers );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 385;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_893f4d1d1c46326b9e5e29a86d292112 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_893f4d1d1c46326b9e5e29a86d292112 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_893f4d1d1c46326b9e5e29a86d292112, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_893f4d1d1c46326b9e5e29a86d292112->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_893f4d1d1c46326b9e5e29a86d292112, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_893f4d1d1c46326b9e5e29a86d292112,
        type_description_1,
        par_self,
        par_mark_name
    );


    // Release cached frame.
    if ( frame_893f4d1d1c46326b9e5e29a86d292112 == cache_frame_893f4d1d1c46326b9e5e29a86d292112 )
    {
        Py_DECREF( frame_893f4d1d1c46326b9e5e29a86d292112 );
    }
    cache_frame_893f4d1d1c46326b9e5e29a86d292112 = NULL;

    assertFrameObject( frame_893f4d1d1c46326b9e5e29a86d292112 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_28_dereg_marker );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mark_name );
    Py_DECREF( par_mark_name );
    par_mark_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_mark_name );
    Py_DECREF( par_mark_name );
    par_mark_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_28_dereg_marker );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_29_config_buttons( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_b84213c719d78f914fd3a822835e46e9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_b84213c719d78f914fd3a822835e46e9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b84213c719d78f914fd3a822835e46e9, codeobj_b84213c719d78f914fd3a822835e46e9, module___main__, sizeof(void *) );
    frame_b84213c719d78f914fd3a822835e46e9 = cache_frame_b84213c719d78f914fd3a822835e46e9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b84213c719d78f914fd3a822835e46e9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b84213c719d78f914fd3a822835e46e9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_zoom_in_btn );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_configure );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_state;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__file_name );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_dict_value_1 = const_str_plain_enabled;
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_dict_value_1 = const_str_plain_disabled;
        condexpr_end_1:;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_b84213c719d78f914fd3a822835e46e9->m_frame.f_lineno = 388;
        tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_zoom_out_btn );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_configure );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain_state;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__file_name );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 389;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 389;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        tmp_dict_value_2 = const_str_plain_enabled;
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_dict_value_2 = const_str_plain_disabled;
        condexpr_end_2:;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_b84213c719d78f914fd3a822835e46e9->m_frame.f_lineno = 389;
        tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_source_name_8;
        PyObject *tmp_call_result_3;
        PyObject *tmp_kw_name_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_9;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_save_markers_btn );
        if ( tmp_source_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_configure );
        Py_DECREF( tmp_source_name_7 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_3 = const_str_plain_state;
        CHECK_OBJECT( par_self );
        tmp_len_arg_1 = par_self;
        tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        assert( !(tmp_res == -1) );
        tmp_or_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_all_saved );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        tmp_dict_value_3 = const_str_plain_disabled;
        goto condexpr_end_3;
        condexpr_false_3:;
        tmp_dict_value_3 = const_str_plain_enabled;
        condexpr_end_3:;
        tmp_kw_name_3 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_b84213c719d78f914fd3a822835e46e9->m_frame.f_lineno = 391;
        tmp_call_result_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_3 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 391;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b84213c719d78f914fd3a822835e46e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b84213c719d78f914fd3a822835e46e9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b84213c719d78f914fd3a822835e46e9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b84213c719d78f914fd3a822835e46e9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b84213c719d78f914fd3a822835e46e9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b84213c719d78f914fd3a822835e46e9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_b84213c719d78f914fd3a822835e46e9 == cache_frame_b84213c719d78f914fd3a822835e46e9 )
    {
        Py_DECREF( frame_b84213c719d78f914fd3a822835e46e9 );
    }
    cache_frame_b84213c719d78f914fd3a822835e46e9 = NULL;

    assertFrameObject( frame_b84213c719d78f914fd3a822835e46e9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_29_config_buttons );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_29_config_buttons );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_30_list_markers( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_marker = NULL;
    PyObject *var_mark_name = NULL;
    PyObject *var_mark_color = NULL;
    PyObject *var_mark_count = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_5cec786ff60c840a926e77af5ae11910;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_5cec786ff60c840a926e77af5ae11910 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5cec786ff60c840a926e77af5ae11910, codeobj_5cec786ff60c840a926e77af5ae11910, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5cec786ff60c840a926e77af5ae11910 = cache_frame_5cec786ff60c840a926e77af5ae11910;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5cec786ff60c840a926e77af5ae11910 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5cec786ff60c840a926e77af5ae11910 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_marker_table );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_delete );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_marker_table );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 394;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_5cec786ff60c840a926e77af5ae11910->m_frame.f_lineno = 394;
        tmp_dircall_arg2_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_children );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_dircall_arg2_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 394;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_call_result_1 = impl___internal__$$$function_1_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__markers );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 395;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 395;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooo";
                exception_lineno = 395;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_marker;
            var_marker = tmp_assign_source_3;
            Py_INCREF( var_marker );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT( var_marker );
        tmp_source_name_5 = var_marker;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_name );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 396;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_iter_arg_2 = PyTuple_New( 3 );
        PyTuple_SET_ITEM( tmp_iter_arg_2, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_marker );
        tmp_source_name_6 = var_marker;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_color );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_iter_arg_2 );

            exception_lineno = 396;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        PyTuple_SET_ITEM( tmp_iter_arg_2, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( var_marker );
        tmp_source_name_7 = var_marker;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_counter );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_iter_arg_2 );

            exception_lineno = 396;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        PyTuple_SET_ITEM( tmp_iter_arg_2, 2, tmp_tuple_element_1 );
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 396;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooo";
            exception_lineno = 396;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooo";
            exception_lineno = 396;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooo";
            exception_lineno = 396;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_mark_name;
            var_mark_name = tmp_assign_source_8;
            Py_INCREF( var_mark_name );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_mark_color;
            var_mark_color = tmp_assign_source_9;
            Py_INCREF( var_mark_color );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_mark_count;
            var_mark_count = tmp_assign_source_10;
            Py_INCREF( var_mark_count );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_marker_table );
        if ( tmp_source_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_tag_bind );
        Py_DECREF( tmp_source_name_8 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_mark_color );
        tmp_tuple_element_2 = var_mark_color;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_644eea9536c311d40bcda6e9823e381c );
        frame_5cec786ff60c840a926e77af5ae11910->m_frame.f_lineno = 397;
        tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 397;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_10;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_name_2;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_marker_table );
        if ( tmp_source_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_tag_configure );
        Py_DECREF( tmp_source_name_10 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_mark_color );
        tmp_tuple_element_3 = var_mark_color;
        tmp_args_name_2 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
        tmp_dict_key_1 = const_str_plain_background;
        CHECK_OBJECT( var_mark_color );
        tmp_dict_value_1 = var_mark_color;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_5cec786ff60c840a926e77af5ae11910->m_frame.f_lineno = 398;
        tmp_call_result_3 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_12;
        PyObject *tmp_source_name_13;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_name_3;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_kw_name_3;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_tuple_element_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_13 = par_self;
        tmp_source_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_marker_table );
        if ( tmp_source_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 399;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_insert );
        Py_DECREF( tmp_source_name_12 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 399;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_tuple_element_4 = const_str_empty;
        tmp_args_name_3 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_plain_end;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_4 );
        CHECK_OBJECT( var_mark_name );
        tmp_tuple_element_4 = var_mark_name;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_args_name_3, 2, tmp_tuple_element_4 );
        tmp_dict_key_2 = const_str_plain_text;
        tmp_dict_value_2 = const_str_empty;
        tmp_kw_name_3 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_values;
        CHECK_OBJECT( var_mark_name );
        tmp_tuple_element_5 = var_mark_name;
        tmp_dict_value_3 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_value_3, 0, tmp_tuple_element_5 );
        CHECK_OBJECT( var_mark_count );
        tmp_tuple_element_5 = var_mark_count;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_dict_value_3, 1, tmp_tuple_element_5 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_3, tmp_dict_value_3 );
        Py_DECREF( tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_4 = const_str_plain_tags;
        CHECK_OBJECT( var_mark_color );
        tmp_tuple_element_6 = var_mark_color;
        tmp_dict_value_4 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_dict_value_4, 0, tmp_tuple_element_6 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_4, tmp_dict_value_4 );
        Py_DECREF( tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        frame_5cec786ff60c840a926e77af5ae11910->m_frame.f_lineno = 399;
        tmp_call_result_4 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_name_3 );
        Py_DECREF( tmp_kw_name_3 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 399;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 395;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5cec786ff60c840a926e77af5ae11910 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5cec786ff60c840a926e77af5ae11910 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5cec786ff60c840a926e77af5ae11910, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5cec786ff60c840a926e77af5ae11910->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5cec786ff60c840a926e77af5ae11910, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5cec786ff60c840a926e77af5ae11910,
        type_description_1,
        par_self,
        var_marker,
        var_mark_name,
        var_mark_color,
        var_mark_count
    );


    // Release cached frame.
    if ( frame_5cec786ff60c840a926e77af5ae11910 == cache_frame_5cec786ff60c840a926e77af5ae11910 )
    {
        Py_DECREF( frame_5cec786ff60c840a926e77af5ae11910 );
    }
    cache_frame_5cec786ff60c840a926e77af5ae11910 = NULL;

    assertFrameObject( frame_5cec786ff60c840a926e77af5ae11910 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_30_list_markers );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_mark_name );
    var_mark_name = NULL;

    Py_XDECREF( var_mark_color );
    var_mark_color = NULL;

    Py_XDECREF( var_mark_count );
    var_mark_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_mark_name );
    var_mark_name = NULL;

    Py_XDECREF( var_mark_color );
    var_mark_color = NULL;

    Py_XDECREF( var_mark_count );
    var_mark_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_30_list_markers );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_31_load_btn_action( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_formats = NULL;
    PyObject *var_filename = NULL;
    struct Nuitka_FrameObject *frame_cdbdff9a801e5d6cc0a1ff37748eed35;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_cdbdff9a801e5d6cc0a1ff37748eed35 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = LIST_COPY( const_list_28f4be962d7cf9f15f7b57dfa6fa11ab_list );
        assert( var_formats == NULL );
        var_formats = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cdbdff9a801e5d6cc0a1ff37748eed35, codeobj_cdbdff9a801e5d6cc0a1ff37748eed35, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cdbdff9a801e5d6cc0a1ff37748eed35 = cache_frame_cdbdff9a801e5d6cc0a1ff37748eed35;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cdbdff9a801e5d6cc0a1ff37748eed35 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cdbdff9a801e5d6cc0a1ff37748eed35 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_fd );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fd );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "fd" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 405;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_askopenfilename );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 405;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_defaultextension;
        tmp_dict_value_1 = const_str_plain_jpg;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_filetypes;
        CHECK_OBJECT( var_formats );
        tmp_dict_value_2 = var_formats;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_cdbdff9a801e5d6cc0a1ff37748eed35->m_frame.f_lineno = 405;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 405;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_filename == NULL );
        var_filename = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_filename );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_filename );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 406;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( var_filename );
            tmp_assattr_name_1 = var_filename;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__file_name, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 407;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = const_int_pos_1;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__actual_zoom, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 408;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_cdbdff9a801e5d6cc0a1ff37748eed35->m_frame.f_lineno = 409;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_show_image );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 409;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_cdbdff9a801e5d6cc0a1ff37748eed35->m_frame.f_lineno = 410;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_wipe );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 410;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cdbdff9a801e5d6cc0a1ff37748eed35 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cdbdff9a801e5d6cc0a1ff37748eed35 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cdbdff9a801e5d6cc0a1ff37748eed35, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cdbdff9a801e5d6cc0a1ff37748eed35->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cdbdff9a801e5d6cc0a1ff37748eed35, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cdbdff9a801e5d6cc0a1ff37748eed35,
        type_description_1,
        par_self,
        var_formats,
        var_filename
    );


    // Release cached frame.
    if ( frame_cdbdff9a801e5d6cc0a1ff37748eed35 == cache_frame_cdbdff9a801e5d6cc0a1ff37748eed35 )
    {
        Py_DECREF( frame_cdbdff9a801e5d6cc0a1ff37748eed35 );
    }
    cache_frame_cdbdff9a801e5d6cc0a1ff37748eed35 = NULL;

    assertFrameObject( frame_cdbdff9a801e5d6cc0a1ff37748eed35 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_31_load_btn_action );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_formats );
    Py_DECREF( var_formats );
    var_formats = NULL;

    CHECK_OBJECT( (PyObject *)var_filename );
    Py_DECREF( var_filename );
    var_filename = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_formats );
    Py_DECREF( var_formats );
    var_formats = NULL;

    Py_XDECREF( var_filename );
    var_filename = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_31_load_btn_action );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_32_add_btn_action( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_marker_color = NULL;
    struct Nuitka_FrameObject *frame_1aa80365393d9c0d40eb735708031842;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1aa80365393d9c0d40eb735708031842 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1aa80365393d9c0d40eb735708031842, codeobj_1aa80365393d9c0d40eb735708031842, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1aa80365393d9c0d40eb735708031842 = cache_frame_1aa80365393d9c0d40eb735708031842;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1aa80365393d9c0d40eb735708031842 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1aa80365393d9c0d40eb735708031842 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_cchoser );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_cchoser );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "cchoser" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 414;
            type_description_1 = "oNo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_1aa80365393d9c0d40eb735708031842->m_frame.f_lineno = 414;
        tmp_subscribed_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_askcolor );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 414;
            type_description_1 = "oNo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 414;
            type_description_1 = "oNo";
            goto frame_exception_exit_1;
        }
        assert( var_marker_color == NULL );
        var_marker_color = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_constant_value_1;
        int tmp_truth_name_2;
        CHECK_OBJECT( var_marker_color );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_marker_color );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 415;
            type_description_1 = "oNo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        tmp_constant_value_1 = const_str_plain_new_marker;
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_constant_value_1 );
        assert( !(tmp_truth_name_2 == -1) );
        tmp_and_right_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            tmp_args_element_name_1 = const_str_plain_new_marker;
            CHECK_OBJECT( var_marker_color );
            tmp_args_element_name_2 = var_marker_color;
            frame_1aa80365393d9c0d40eb735708031842->m_frame.f_lineno = 416;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_reg_marker, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 416;
                type_description_1 = "oNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            frame_1aa80365393d9c0d40eb735708031842->m_frame.f_lineno = 417;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_list_markers );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 417;
                type_description_1 = "oNo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1aa80365393d9c0d40eb735708031842 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1aa80365393d9c0d40eb735708031842 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1aa80365393d9c0d40eb735708031842, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1aa80365393d9c0d40eb735708031842->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1aa80365393d9c0d40eb735708031842, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1aa80365393d9c0d40eb735708031842,
        type_description_1,
        par_self,
        NULL,
        var_marker_color
    );


    // Release cached frame.
    if ( frame_1aa80365393d9c0d40eb735708031842 == cache_frame_1aa80365393d9c0d40eb735708031842 )
    {
        Py_DECREF( frame_1aa80365393d9c0d40eb735708031842 );
    }
    cache_frame_1aa80365393d9c0d40eb735708031842 = NULL;

    assertFrameObject( frame_1aa80365393d9c0d40eb735708031842 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_32_add_btn_action );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_marker_color );
    Py_DECREF( var_marker_color );
    var_marker_color = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_marker_color );
    var_marker_color = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_32_add_btn_action );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_33_del_btn_action( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_0601cb44e1d3dbac1c9c1ed9bd64d329;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_0601cb44e1d3dbac1c9c1ed9bd64d329 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0601cb44e1d3dbac1c9c1ed9bd64d329, codeobj_0601cb44e1d3dbac1c9c1ed9bd64d329, module___main__, sizeof(void *) );
    frame_0601cb44e1d3dbac1c9c1ed9bd64d329 = cache_frame_0601cb44e1d3dbac1c9c1ed9bd64d329;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_marker_table );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 420;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_0601cb44e1d3dbac1c9c1ed9bd64d329->m_frame.f_lineno = 420;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_selection );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 420;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 420;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dereg_marker );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 421;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__act_mrk );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 421;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_0601cb44e1d3dbac1c9c1ed9bd64d329->m_frame.f_lineno = 421;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 421;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_0601cb44e1d3dbac1c9c1ed9bd64d329->m_frame.f_lineno = 422;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_list_markers );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 422;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = const_str_empty;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__act_mrk, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 423;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0601cb44e1d3dbac1c9c1ed9bd64d329, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0601cb44e1d3dbac1c9c1ed9bd64d329->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0601cb44e1d3dbac1c9c1ed9bd64d329, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0601cb44e1d3dbac1c9c1ed9bd64d329,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 == cache_frame_0601cb44e1d3dbac1c9c1ed9bd64d329 )
    {
        Py_DECREF( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 );
    }
    cache_frame_0601cb44e1d3dbac1c9c1ed9bd64d329 = NULL;

    assertFrameObject( frame_0601cb44e1d3dbac1c9c1ed9bd64d329 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_33_del_btn_action );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_33_del_btn_action );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_34_edit_mt_item( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__ = python_pars[ 1 ];
    PyObject *var_new_marker_name = NULL;
    struct Nuitka_FrameObject *frame_32920aa5f3b517db33ef7204959dae9a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_32920aa5f3b517db33ef7204959dae9a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_32920aa5f3b517db33ef7204959dae9a, codeobj_32920aa5f3b517db33ef7204959dae9a, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_32920aa5f3b517db33ef7204959dae9a = cache_frame_32920aa5f3b517db33ef7204959dae9a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_32920aa5f3b517db33ef7204959dae9a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_32920aa5f3b517db33ef7204959dae9a ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_marker_table );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 426;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_32920aa5f3b517db33ef7204959dae9a->m_frame.f_lineno = 426;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_selection );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 426;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 426;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            tmp_assign_source_1 = const_str_plain_all;
            assert( var_new_marker_name == NULL );
            Py_INCREF( tmp_assign_source_1 );
            var_new_marker_name = tmp_assign_source_1;
        }
        loop_start_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT( var_new_marker_name );
            tmp_compexpr_left_1 = var_new_marker_name;
            tmp_compexpr_right_1 = const_str_plain_all;
            tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 428;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 428;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            goto loop_end_1;
            branch_no_2:;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_source_name_4;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_simd );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_simd );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "simd" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 429;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_askstring );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 429;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_1 = const_str_plain_title;
            tmp_dict_value_1 = const_str_digest_0105c2e4e6b8955907874e1dbe95f1fd;
            tmp_kw_name_1 = _PyDict_NewPresized( 4 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_prompt;
            tmp_dict_value_2 = const_str_digest_c3983cdf52a3b805b4ae9a8560f2cd66;
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_3 = const_str_plain_initialvalue;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__act_mrk );
            if ( tmp_dict_value_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_kw_name_1 );

                exception_lineno = 430;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
            Py_DECREF( tmp_dict_value_3 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_4 = const_str_plain_parent;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_table_frame );
            if ( tmp_dict_value_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_kw_name_1 );

                exception_lineno = 430;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
            Py_DECREF( tmp_dict_value_4 );
            assert( !(tmp_res != 0) );
            frame_32920aa5f3b517db33ef7204959dae9a->m_frame.f_lineno = 429;
            tmp_assign_source_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 429;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_new_marker_name;
                assert( old != NULL );
                var_new_marker_name = tmp_assign_source_2;
                Py_DECREF( old );
            }

        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 428;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto loop_start_1;
        loop_end_1:;
        {
            nuitka_bool tmp_condition_result_3;
            int tmp_truth_name_2;
            CHECK_OBJECT( var_new_marker_name );
            tmp_truth_name_2 = CHECK_IF_TRUE( var_new_marker_name );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 431;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_args_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_called_instance_2;
                PyObject *tmp_kw_name_2;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_strfilter );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_strfilter );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "strfilter" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 432;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_2 = tmp_mvar_value_2;
                CHECK_OBJECT( var_new_marker_name );
                tmp_called_instance_2 = var_new_marker_name;
                frame_32920aa5f3b517db33ef7204959dae9a->m_frame.f_lineno = 432;
                tmp_tuple_element_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_space_str_plain___tuple, 0 ) );

                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 432;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_name_1 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
                tmp_kw_name_2 = PyDict_Copy( const_dict_309a489fd2370b220c4e258462867846 );
                frame_32920aa5f3b517db33ef7204959dae9a->m_frame.f_lineno = 432;
                tmp_assign_source_3 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_2 );
                Py_DECREF( tmp_args_name_1 );
                Py_DECREF( tmp_kw_name_2 );
                if ( tmp_assign_source_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 432;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_new_marker_name;
                    assert( old != NULL );
                    var_new_marker_name = tmp_assign_source_3;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_assattr_target_1;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_subscript_name_1;
                PyObject *tmp_source_name_5;
                CHECK_OBJECT( var_new_marker_name );
                tmp_assattr_name_1 = var_new_marker_name;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_1 = par_self;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__act_mrk );
                if ( tmp_subscript_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 433;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_assattr_target_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
                Py_DECREF( tmp_subscript_name_1 );
                if ( tmp_assattr_target_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 433;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_name, tmp_assattr_name_1 );
                Py_DECREF( tmp_assattr_target_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 433;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
            }
            {
                PyObject *tmp_assattr_name_2;
                PyObject *tmp_assattr_target_2;
                CHECK_OBJECT( var_new_marker_name );
                tmp_assattr_name_2 = var_new_marker_name;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_2 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__act_mrk, tmp_assattr_name_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 434;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
            }
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( par_self );
                tmp_called_instance_3 = par_self;
                frame_32920aa5f3b517db33ef7204959dae9a->m_frame.f_lineno = 435;
                tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_list_markers );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 435;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            branch_no_3:;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_32920aa5f3b517db33ef7204959dae9a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_32920aa5f3b517db33ef7204959dae9a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_32920aa5f3b517db33ef7204959dae9a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_32920aa5f3b517db33ef7204959dae9a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_32920aa5f3b517db33ef7204959dae9a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_32920aa5f3b517db33ef7204959dae9a,
        type_description_1,
        par_self,
        par__,
        var_new_marker_name
    );


    // Release cached frame.
    if ( frame_32920aa5f3b517db33ef7204959dae9a == cache_frame_32920aa5f3b517db33ef7204959dae9a )
    {
        Py_DECREF( frame_32920aa5f3b517db33ef7204959dae9a );
    }
    cache_frame_32920aa5f3b517db33ef7204959dae9a = NULL;

    assertFrameObject( frame_32920aa5f3b517db33ef7204959dae9a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_34_edit_mt_item );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    Py_XDECREF( var_new_marker_name );
    var_new_marker_name = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    Py_XDECREF( var_new_marker_name );
    var_new_marker_name = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_34_edit_mt_item );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_35_show_image( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_photo_file = NULL;
    PyObject *var_height = NULL;
    PyObject *var_width = NULL;
    PyObject *var_new_height = NULL;
    PyObject *var_new_width = NULL;
    PyObject *var_renderer = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_f4c2ba195324edc8c1b7da3b00db9761;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f4c2ba195324edc8c1b7da3b00db9761 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f4c2ba195324edc8c1b7da3b00db9761, codeobj_f4c2ba195324edc8c1b7da3b00db9761, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f4c2ba195324edc8c1b7da3b00db9761 = cache_frame_f4c2ba195324edc8c1b7da3b00db9761;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f4c2ba195324edc8c1b7da3b00db9761 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f4c2ba195324edc8c1b7da3b00db9761 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 438;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_open );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 438;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__file_name );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 438;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 438;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 438;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_photo_file == NULL );
        var_photo_file = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( var_photo_file );
        tmp_source_name_3 = var_photo_file;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_size );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 439;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 439;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 439;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 439;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooo";
                    exception_lineno = 439;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooo";
            exception_lineno = 439;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert( var_height == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_height = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert( var_width == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_width = tmp_assign_source_6;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( var_height );
        tmp_left_name_1 = var_height;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__actual_zoom );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 440;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 440;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_7 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 440;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_new_height == NULL );
        var_new_height = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_int_arg_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( var_width );
        tmp_left_name_2 = var_width;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_right_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__actual_zoom );
        if ( tmp_right_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 441;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_int_arg_2 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_int_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 441;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = PyNumber_Int( tmp_int_arg_2 );
        Py_DECREF( tmp_int_arg_2 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 441;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_new_width == NULL );
        var_new_width = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( var_photo_file );
        tmp_source_name_6 = var_photo_file;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_resize );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 442;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_new_height );
        tmp_tuple_element_2 = var_new_height;
        tmp_tuple_element_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_new_width );
        tmp_tuple_element_2 = var_new_width;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_2 );
        tmp_args_name_1 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_resample;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Image );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Image );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Image" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 442;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_2;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_LANCZOS );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 442;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 442;
        tmp_assign_source_9 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 442;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_photo_file;
            assert( old != NULL );
            var_photo_file = tmp_assign_source_9;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ImageTk );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ImageTk );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ImageTk" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 443;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_3;
        CHECK_OBJECT( var_photo_file );
        tmp_args_element_name_2 = var_photo_file;
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 443;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_PhotoImage, call_args );
        }

        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 443;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_renderer == NULL );
        var_renderer = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_source_name_8;
        CHECK_OBJECT( var_renderer );
        tmp_assattr_name_1 = var_renderer;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_assattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_buflabel );
        if ( tmp_assattr_target_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 444;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_image, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_target_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 444;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_9;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_JpgCanvas );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 446;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 446;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_delete, &PyTuple_GET_ITEM( const_tuple_str_plain_all_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 446;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_10;
        PyObject *tmp_source_name_11;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_name_2;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_JpgCanvas );
        if ( tmp_source_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_create_image );
        Py_DECREF( tmp_source_name_10 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_name_2 = const_tuple_int_0_int_0_tuple;
        tmp_dict_key_2 = const_str_plain_image;
        CHECK_OBJECT( var_renderer );
        tmp_dict_value_2 = var_renderer;
        tmp_kw_name_2 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_anchor;
        tmp_dict_value_3 = const_str_plain_nw;
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 447;
        tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_12;
        PyObject *tmp_source_name_13;
        PyObject *tmp_call_result_3;
        PyObject *tmp_kw_name_3;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_13 = par_self;
        tmp_source_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_JpgCanvas );
        if ( tmp_source_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 448;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_configure );
        Py_DECREF( tmp_source_name_12 );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 448;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_4 = const_str_plain_scrollregion;
        tmp_tuple_element_3 = const_int_0;
        tmp_dict_value_4 = PyTuple_New( 4 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_value_4, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_int_0;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_dict_value_4, 1, tmp_tuple_element_3 );
        CHECK_OBJECT( var_renderer );
        tmp_called_instance_3 = var_renderer;
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 448;
        tmp_tuple_element_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_width );
        if ( tmp_tuple_element_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_dict_value_4 );

            exception_lineno = 448;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_dict_value_4, 2, tmp_tuple_element_3 );
        CHECK_OBJECT( var_renderer );
        tmp_called_instance_4 = var_renderer;
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 448;
        tmp_tuple_element_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_height );
        if ( tmp_tuple_element_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_dict_value_4 );

            exception_lineno = 448;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_dict_value_4, 3, tmp_tuple_element_3 );
        tmp_kw_name_3 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_4, tmp_dict_value_4 );
        Py_DECREF( tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 448;
        tmp_call_result_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_4, tmp_kw_name_3 );
        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_kw_name_3 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 448;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame.f_lineno = 450;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_config_buttons );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4c2ba195324edc8c1b7da3b00db9761 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4c2ba195324edc8c1b7da3b00db9761 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f4c2ba195324edc8c1b7da3b00db9761, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f4c2ba195324edc8c1b7da3b00db9761->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f4c2ba195324edc8c1b7da3b00db9761, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f4c2ba195324edc8c1b7da3b00db9761,
        type_description_1,
        par_self,
        var_photo_file,
        var_height,
        var_width,
        var_new_height,
        var_new_width,
        var_renderer
    );


    // Release cached frame.
    if ( frame_f4c2ba195324edc8c1b7da3b00db9761 == cache_frame_f4c2ba195324edc8c1b7da3b00db9761 )
    {
        Py_DECREF( frame_f4c2ba195324edc8c1b7da3b00db9761 );
    }
    cache_frame_f4c2ba195324edc8c1b7da3b00db9761 = NULL;

    assertFrameObject( frame_f4c2ba195324edc8c1b7da3b00db9761 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_35_show_image );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_photo_file );
    Py_DECREF( var_photo_file );
    var_photo_file = NULL;

    CHECK_OBJECT( (PyObject *)var_height );
    Py_DECREF( var_height );
    var_height = NULL;

    CHECK_OBJECT( (PyObject *)var_width );
    Py_DECREF( var_width );
    var_width = NULL;

    CHECK_OBJECT( (PyObject *)var_new_height );
    Py_DECREF( var_new_height );
    var_new_height = NULL;

    CHECK_OBJECT( (PyObject *)var_new_width );
    Py_DECREF( var_new_width );
    var_new_width = NULL;

    CHECK_OBJECT( (PyObject *)var_renderer );
    Py_DECREF( var_renderer );
    var_renderer = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_photo_file );
    var_photo_file = NULL;

    Py_XDECREF( var_height );
    var_height = NULL;

    Py_XDECREF( var_width );
    var_width = NULL;

    Py_XDECREF( var_new_height );
    var_new_height = NULL;

    Py_XDECREF( var_new_width );
    var_new_width = NULL;

    Py_XDECREF( var_renderer );
    var_renderer = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_35_show_image );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_36_zoom_in( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_zfactor = NULL;
    struct Nuitka_FrameObject *frame_d167e93036e9996d422f18aaa3bedb57;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d167e93036e9996d422f18aaa3bedb57 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d167e93036e9996d422f18aaa3bedb57, codeobj_d167e93036e9996d422f18aaa3bedb57, module___main__, sizeof(void *)+sizeof(void *) );
    frame_d167e93036e9996d422f18aaa3bedb57 = cache_frame_d167e93036e9996d422f18aaa3bedb57;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d167e93036e9996d422f18aaa3bedb57 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d167e93036e9996d422f18aaa3bedb57 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__zoom_factor );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_d167e93036e9996d422f18aaa3bedb57->m_frame.f_lineno = 453;
        tmp_left_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_10;
        tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_10;
        tmp_assign_source_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_zfactor == NULL );
        var_zfactor = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_zoom );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 454;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_zf;
        CHECK_OBJECT( var_zfactor );
        tmp_dict_value_1 = var_zfactor;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_d167e93036e9996d422f18aaa3bedb57->m_frame.f_lineno = 454;
        tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 454;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d167e93036e9996d422f18aaa3bedb57 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d167e93036e9996d422f18aaa3bedb57 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d167e93036e9996d422f18aaa3bedb57, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d167e93036e9996d422f18aaa3bedb57->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d167e93036e9996d422f18aaa3bedb57, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d167e93036e9996d422f18aaa3bedb57,
        type_description_1,
        par_self,
        var_zfactor
    );


    // Release cached frame.
    if ( frame_d167e93036e9996d422f18aaa3bedb57 == cache_frame_d167e93036e9996d422f18aaa3bedb57 )
    {
        Py_DECREF( frame_d167e93036e9996d422f18aaa3bedb57 );
    }
    cache_frame_d167e93036e9996d422f18aaa3bedb57 = NULL;

    assertFrameObject( frame_d167e93036e9996d422f18aaa3bedb57 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_36_zoom_in );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_zfactor );
    Py_DECREF( var_zfactor );
    var_zfactor = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_zfactor );
    var_zfactor = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_36_zoom_in );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_37_zoom_out( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_zfactor = NULL;
    struct Nuitka_FrameObject *frame_a78de3219b0cd1f28da91f2e11a39d19;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_a78de3219b0cd1f28da91f2e11a39d19 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a78de3219b0cd1f28da91f2e11a39d19, codeobj_a78de3219b0cd1f28da91f2e11a39d19, module___main__, sizeof(void *)+sizeof(void *) );
    frame_a78de3219b0cd1f28da91f2e11a39d19 = cache_frame_a78de3219b0cd1f28da91f2e11a39d19;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a78de3219b0cd1f28da91f2e11a39d19 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a78de3219b0cd1f28da91f2e11a39d19 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_2;
        tmp_left_name_1 = const_int_pos_10;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__zoom_factor );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 457;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a78de3219b0cd1f28da91f2e11a39d19->m_frame.f_lineno = 457;
        tmp_left_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 457;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_10;
        tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 457;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 457;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 457;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_zfactor == NULL );
        var_zfactor = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_zoom );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 458;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_zf;
        CHECK_OBJECT( var_zfactor );
        tmp_dict_value_1 = var_zfactor;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_a78de3219b0cd1f28da91f2e11a39d19->m_frame.f_lineno = 458;
        tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 458;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a78de3219b0cd1f28da91f2e11a39d19 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a78de3219b0cd1f28da91f2e11a39d19 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a78de3219b0cd1f28da91f2e11a39d19, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a78de3219b0cd1f28da91f2e11a39d19->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a78de3219b0cd1f28da91f2e11a39d19, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a78de3219b0cd1f28da91f2e11a39d19,
        type_description_1,
        par_self,
        var_zfactor
    );


    // Release cached frame.
    if ( frame_a78de3219b0cd1f28da91f2e11a39d19 == cache_frame_a78de3219b0cd1f28da91f2e11a39d19 )
    {
        Py_DECREF( frame_a78de3219b0cd1f28da91f2e11a39d19 );
    }
    cache_frame_a78de3219b0cd1f28da91f2e11a39d19 = NULL;

    assertFrameObject( frame_a78de3219b0cd1f28da91f2e11a39d19 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_37_zoom_out );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_zfactor );
    Py_DECREF( var_zfactor );
    var_zfactor = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_zfactor );
    var_zfactor = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_37_zoom_out );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_38_zoom( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_zf = python_pars[ 1 ];
    PyObject *var_new_zoom_factor = NULL;
    struct Nuitka_FrameObject *frame_b4e137898b984a693682ab5a9bc843a9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_b4e137898b984a693682ab5a9bc843a9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b4e137898b984a693682ab5a9bc843a9, codeobj_b4e137898b984a693682ab5a9bc843a9, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b4e137898b984a693682ab5a9bc843a9 = cache_frame_b4e137898b984a693682ab5a9bc843a9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b4e137898b984a693682ab5a9bc843a9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b4e137898b984a693682ab5a9bc843a9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__actual_zoom );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 465;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_zf );
        tmp_right_name_1 = par_zf;
        tmp_assign_source_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 465;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_new_zoom_factor == NULL );
        var_new_zoom_factor = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_zf );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_zf );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 466;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( var_new_zoom_factor );
            tmp_assattr_name_1 = var_new_zoom_factor;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__actual_zoom, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 467;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_b4e137898b984a693682ab5a9bc843a9->m_frame.f_lineno = 468;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_show_image );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 468;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_recalculate_points_positions );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 469;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_1 = const_str_plain_fold;
            CHECK_OBJECT( par_zf );
            tmp_dict_value_1 = par_zf;
            tmp_kw_name_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            frame_b4e137898b984a693682ab5a9bc843a9->m_frame.f_lineno = 469;
            tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 469;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_draw_marker );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 470;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_2 = PyDict_Copy( const_dict_e2fbe04220f86df988fb54d70c4d4b43 );
            frame_b4e137898b984a693682ab5a9bc843a9->m_frame.f_lineno = 470;
            tmp_call_result_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 470;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_b4e137898b984a693682ab5a9bc843a9->m_frame.f_lineno = 471;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_config_buttons );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 471;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4e137898b984a693682ab5a9bc843a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b4e137898b984a693682ab5a9bc843a9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b4e137898b984a693682ab5a9bc843a9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b4e137898b984a693682ab5a9bc843a9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b4e137898b984a693682ab5a9bc843a9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b4e137898b984a693682ab5a9bc843a9,
        type_description_1,
        par_self,
        par_zf,
        var_new_zoom_factor
    );


    // Release cached frame.
    if ( frame_b4e137898b984a693682ab5a9bc843a9 == cache_frame_b4e137898b984a693682ab5a9bc843a9 )
    {
        Py_DECREF( frame_b4e137898b984a693682ab5a9bc843a9 );
    }
    cache_frame_b4e137898b984a693682ab5a9bc843a9 = NULL;

    assertFrameObject( frame_b4e137898b984a693682ab5a9bc843a9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_38_zoom );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_zf );
    Py_DECREF( par_zf );
    par_zf = NULL;

    CHECK_OBJECT( (PyObject *)var_new_zoom_factor );
    Py_DECREF( var_new_zoom_factor );
    var_new_zoom_factor = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_zf );
    Py_DECREF( par_zf );
    par_zf = NULL;

    Py_XDECREF( var_new_zoom_factor );
    var_new_zoom_factor = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_38_zoom );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_39_showxy( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_event = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_353f723f7684e2d6c3de7645b7732a1d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_353f723f7684e2d6c3de7645b7732a1d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_353f723f7684e2d6c3de7645b7732a1d, codeobj_353f723f7684e2d6c3de7645b7732a1d, module___main__, sizeof(void *)+sizeof(void *) );
    frame_353f723f7684e2d6c3de7645b7732a1d = cache_frame_353f723f7684e2d6c3de7645b7732a1d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_353f723f7684e2d6c3de7645b7732a1d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_353f723f7684e2d6c3de7645b7732a1d ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_xyentry );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_353f723f7684e2d6c3de7645b7732a1d->m_frame.f_lineno = 474;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_delete, &PyTuple_GET_ITEM( const_tuple_str_plain_0_str_plain_end_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_xyentry );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_insert );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_str_plain_0;
        tmp_source_name_4 = const_str_digest_2fa4183c3f41794a0df2fe4af5bcff16;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_event );
        tmp_source_name_5 = par_event;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_x );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_6 = par_event;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_y );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_JpgCanvas );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_353f723f7684e2d6c3de7645b7732a1d->m_frame.f_lineno = 475;
        tmp_args_element_name_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_winfo_width );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_JpgCanvas );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );

            exception_lineno = 476;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_353f723f7684e2d6c3de7645b7732a1d->m_frame.f_lineno = 476;
        tmp_args_element_name_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_winfo_height );
        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );

            exception_lineno = 476;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_353f723f7684e2d6c3de7645b7732a1d->m_frame.f_lineno = 475;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_353f723f7684e2d6c3de7645b7732a1d->m_frame.f_lineno = 475;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 475;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_353f723f7684e2d6c3de7645b7732a1d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_353f723f7684e2d6c3de7645b7732a1d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_353f723f7684e2d6c3de7645b7732a1d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_353f723f7684e2d6c3de7645b7732a1d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_353f723f7684e2d6c3de7645b7732a1d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_353f723f7684e2d6c3de7645b7732a1d,
        type_description_1,
        par_self,
        par_event
    );


    // Release cached frame.
    if ( frame_353f723f7684e2d6c3de7645b7732a1d == cache_frame_353f723f7684e2d6c3de7645b7732a1d )
    {
        Py_DECREF( frame_353f723f7684e2d6c3de7645b7732a1d );
    }
    cache_frame_353f723f7684e2d6c3de7645b7732a1d = NULL;

    assertFrameObject( frame_353f723f7684e2d6c3de7645b7732a1d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_39_showxy );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_39_showxy );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_40_show_zoom( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__ = python_pars[ 1 ];
    PyObject *var_value = NULL;
    struct Nuitka_FrameObject *frame_11662a9166233f3c1a50c68254e64daf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_11662a9166233f3c1a50c68254e64daf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_11662a9166233f3c1a50c68254e64daf, codeobj_11662a9166233f3c1a50c68254e64daf, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_11662a9166233f3c1a50c68254e64daf = cache_frame_11662a9166233f3c1a50c68254e64daf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_11662a9166233f3c1a50c68254e64daf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_11662a9166233f3c1a50c68254e64daf ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__zoom_factor );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_11662a9166233f3c1a50c68254e64daf->m_frame.f_lineno = 479;
        tmp_left_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_10;
        tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_10;
        tmp_assign_source_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_value == NULL );
        var_value = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_zoom_factor_label );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 480;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_configure );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 480;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_text;
        tmp_left_name_3 = const_str_digest_4177e5d1da0875775db706dbda998159;
        CHECK_OBJECT( var_value );
        tmp_unicode_arg_1 = var_value;
        tmp_right_name_3 = PyObject_Unicode( tmp_unicode_arg_1 );
        if ( tmp_right_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 480;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_right_name_3 );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 480;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_11662a9166233f3c1a50c68254e64daf->m_frame.f_lineno = 480;
        tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 480;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_11662a9166233f3c1a50c68254e64daf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_11662a9166233f3c1a50c68254e64daf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_11662a9166233f3c1a50c68254e64daf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_11662a9166233f3c1a50c68254e64daf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_11662a9166233f3c1a50c68254e64daf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_11662a9166233f3c1a50c68254e64daf,
        type_description_1,
        par_self,
        par__,
        var_value
    );


    // Release cached frame.
    if ( frame_11662a9166233f3c1a50c68254e64daf == cache_frame_11662a9166233f3c1a50c68254e64daf )
    {
        Py_DECREF( frame_11662a9166233f3c1a50c68254e64daf );
    }
    cache_frame_11662a9166233f3c1a50c68254e64daf = NULL;

    assertFrameObject( frame_11662a9166233f3c1a50c68254e64daf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_40_show_zoom );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__ );
    Py_DECREF( par__ );
    par__ = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_40_show_zoom );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_41_store_mouse_pos( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_event = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_e47322421c523655a14637d710d50322;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e47322421c523655a14637d710d50322 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e47322421c523655a14637d710d50322, codeobj_e47322421c523655a14637d710d50322, module___main__, sizeof(void *)+sizeof(void *) );
    frame_e47322421c523655a14637d710d50322 = cache_frame_e47322421c523655a14637d710d50322;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e47322421c523655a14637d710d50322 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e47322421c523655a14637d710d50322 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_JpgCanvas );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_scan_mark );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_3 = par_event;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_x );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 484;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_4 = par_event;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_y );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 484;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_e47322421c523655a14637d710d50322->m_frame.f_lineno = 484;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e47322421c523655a14637d710d50322 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e47322421c523655a14637d710d50322 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e47322421c523655a14637d710d50322, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e47322421c523655a14637d710d50322->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e47322421c523655a14637d710d50322, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e47322421c523655a14637d710d50322,
        type_description_1,
        par_self,
        par_event
    );


    // Release cached frame.
    if ( frame_e47322421c523655a14637d710d50322 == cache_frame_e47322421c523655a14637d710d50322 )
    {
        Py_DECREF( frame_e47322421c523655a14637d710d50322 );
    }
    cache_frame_e47322421c523655a14637d710d50322 = NULL;

    assertFrameObject( frame_e47322421c523655a14637d710d50322 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_41_store_mouse_pos );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_41_store_mouse_pos );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_42_scroll_canvas( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_event = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_6b1c92a4ca51a735ca72bd2b3d6b667a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6b1c92a4ca51a735ca72bd2b3d6b667a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6b1c92a4ca51a735ca72bd2b3d6b667a, codeobj_6b1c92a4ca51a735ca72bd2b3d6b667a, module___main__, sizeof(void *)+sizeof(void *) );
    frame_6b1c92a4ca51a735ca72bd2b3d6b667a = cache_frame_6b1c92a4ca51a735ca72bd2b3d6b667a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6b1c92a4ca51a735ca72bd2b3d6b667a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6b1c92a4ca51a735ca72bd2b3d6b667a ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__file_name );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 487;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 487;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_source_name_5;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_JpgCanvas );
            if ( tmp_source_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 488;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_scan_dragto );
            Py_DECREF( tmp_source_name_2 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 488;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_event );
            tmp_source_name_4 = par_event;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_x );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 488;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_args_name_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_event );
            tmp_source_name_5 = par_event;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_y );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_name_1 );

                exception_lineno = 488;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            tmp_kw_name_1 = PyDict_Copy( const_dict_9f3d12dbab780c44f0342015a4e21236 );
            frame_6b1c92a4ca51a735ca72bd2b3d6b667a->m_frame.f_lineno = 488;
            tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 488;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b1c92a4ca51a735ca72bd2b3d6b667a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b1c92a4ca51a735ca72bd2b3d6b667a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6b1c92a4ca51a735ca72bd2b3d6b667a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6b1c92a4ca51a735ca72bd2b3d6b667a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6b1c92a4ca51a735ca72bd2b3d6b667a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6b1c92a4ca51a735ca72bd2b3d6b667a,
        type_description_1,
        par_self,
        par_event
    );


    // Release cached frame.
    if ( frame_6b1c92a4ca51a735ca72bd2b3d6b667a == cache_frame_6b1c92a4ca51a735ca72bd2b3d6b667a )
    {
        Py_DECREF( frame_6b1c92a4ca51a735ca72bd2b3d6b667a );
    }
    cache_frame_6b1c92a4ca51a735ca72bd2b3d6b667a = NULL;

    assertFrameObject( frame_6b1c92a4ca51a735ca72bd2b3d6b667a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_42_scroll_canvas );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_42_scroll_canvas );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_43_place_marker_point( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_event = python_pars[ 1 ];
    PyObject *var_canvas = NULL;
    PyObject *var_actual_x = NULL;
    PyObject *var_actual_y = NULL;
    struct Nuitka_FrameObject *frame_f2e61f5c817f824e5e1f9a37ef8331b3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f2e61f5c817f824e5e1f9a37ef8331b3 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f2e61f5c817f824e5e1f9a37ef8331b3, codeobj_f2e61f5c817f824e5e1f9a37ef8331b3, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f2e61f5c817f824e5e1f9a37ef8331b3 = cache_frame_f2e61f5c817f824e5e1f9a37ef8331b3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f2e61f5c817f824e5e1f9a37ef8331b3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f2e61f5c817f824e5e1f9a37ef8331b3 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_event );
        tmp_source_name_1 = par_event;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_widget );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_canvas == NULL );
        var_canvas = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( var_canvas );
        tmp_source_name_2 = var_canvas;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_canvasx );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 492;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_3 = par_event;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_x );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 492;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 492;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 492;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_actual_x == NULL );
        var_actual_x = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( var_canvas );
        tmp_source_name_4 = var_canvas;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_canvasy );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 493;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_5 = par_event;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_y );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 493;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 493;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 493;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_actual_y == NULL );
        var_actual_y = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_6;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__file_name );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 494;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 494;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__act_mrk );
        if ( tmp_attribute_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 494;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_2 );

            exception_lineno = 494;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_2 );
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            CHECK_OBJECT( par_self );
            tmp_subscribed_name_1 = par_self;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__act_mrk );
            if ( tmp_subscript_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_instance_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscript_name_1 );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_actual_x );
            tmp_args_element_name_3 = var_actual_x;
            CHECK_OBJECT( var_actual_y );
            tmp_args_element_name_4 = var_actual_y;
            frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 495;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_add_point, call_args );
            }

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_9;
            PyObject *tmp_call_result_2;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_source_name_10;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_9 = par_self;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_draw_marker );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_1 = const_str_plain_m_name;
            CHECK_OBJECT( par_self );
            tmp_source_name_10 = par_self;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__act_mrk );
            if ( tmp_dict_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 496;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            Py_DECREF( tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_mode;
            tmp_dict_value_2 = const_str_plain_last;
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 496;
            tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 496;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 497;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_list_markers );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 497;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_False;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_all_saved, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 498;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame.f_lineno = 499;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_config_buttons );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 499;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2e61f5c817f824e5e1f9a37ef8331b3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2e61f5c817f824e5e1f9a37ef8331b3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f2e61f5c817f824e5e1f9a37ef8331b3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f2e61f5c817f824e5e1f9a37ef8331b3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f2e61f5c817f824e5e1f9a37ef8331b3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f2e61f5c817f824e5e1f9a37ef8331b3,
        type_description_1,
        par_self,
        par_event,
        var_canvas,
        var_actual_x,
        var_actual_y
    );


    // Release cached frame.
    if ( frame_f2e61f5c817f824e5e1f9a37ef8331b3 == cache_frame_f2e61f5c817f824e5e1f9a37ef8331b3 )
    {
        Py_DECREF( frame_f2e61f5c817f824e5e1f9a37ef8331b3 );
    }
    cache_frame_f2e61f5c817f824e5e1f9a37ef8331b3 = NULL;

    assertFrameObject( frame_f2e61f5c817f824e5e1f9a37ef8331b3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_43_place_marker_point );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    CHECK_OBJECT( (PyObject *)var_canvas );
    Py_DECREF( var_canvas );
    var_canvas = NULL;

    CHECK_OBJECT( (PyObject *)var_actual_x );
    Py_DECREF( var_actual_x );
    var_actual_x = NULL;

    CHECK_OBJECT( (PyObject *)var_actual_y );
    Py_DECREF( var_actual_y );
    var_actual_y = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    Py_XDECREF( var_canvas );
    var_canvas = NULL;

    Py_XDECREF( var_actual_x );
    var_actual_x = NULL;

    Py_XDECREF( var_actual_y );
    var_actual_y = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_43_place_marker_point );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_44_find_nearest( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_x = python_pars[ 1 ];
    PyObject *par_y = python_pars[ 2 ];
    PyObject *var_distances = NULL;
    struct Nuitka_CellObject *var_min_dist = PyCell_EMPTY();
    PyObject *outline_0_var_mrk = NULL;
    PyObject *outline_0_var_pnt = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__contraction_iter_0 = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_1__iter_value_1 = NULL;
    struct Nuitka_FrameObject *frame_f049f63b6d73a6fb1e74e05f9f07e3bd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_98bfa4a11297bbee76388d763c717d98_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_98bfa4a11297bbee76388d763c717d98_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f049f63b6d73a6fb1e74e05f9f07e3bd = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f049f63b6d73a6fb1e74e05f9f07e3bd, codeobj_f049f63b6d73a6fb1e74e05f9f07e3bd, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f049f63b6d73a6fb1e74e05f9f07e3bd = cache_frame_f049f63b6d73a6fb1e74e05f9f07e3bd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f049f63b6d73a6fb1e74e05f9f07e3bd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_self );
            tmp_iter_arg_1 = par_self;
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_1 = "ooooc";
                goto try_except_handler_2;
            }
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_3;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_98bfa4a11297bbee76388d763c717d98_2, codeobj_98bfa4a11297bbee76388d763c717d98, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
        frame_98bfa4a11297bbee76388d763c717d98_2 = cache_frame_98bfa4a11297bbee76388d763c717d98_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_98bfa4a11297bbee76388d763c717d98_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_98bfa4a11297bbee76388d763c717d98_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "oooo";
                    exception_lineno = 502;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_1;
                tmp_listcomp_1__iter_value_1 = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_1 );
            tmp_assign_source_5 = tmp_listcomp_1__iter_value_1;
            {
                PyObject *old = outline_0_var_mrk;
                outline_0_var_mrk = tmp_assign_source_5;
                Py_INCREF( outline_0_var_mrk );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( outline_0_var_mrk );
            tmp_source_name_1 = outline_0_var_mrk;
            tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 503;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_listcomp_1__contraction_iter_0;
                tmp_listcomp_1__contraction_iter_0 = tmp_assign_source_6;
                Py_XDECREF( old );
            }

        }
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_listcomp_1__contraction_iter_0 );
            tmp_next_source_2 = tmp_listcomp_1__contraction_iter_0;
            tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_7 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "oooo";
                    exception_lineno = 502;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_7;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_8 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_pnt;
                outline_0_var_pnt = tmp_assign_source_8;
                Py_INCREF( outline_0_var_pnt );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_int_arg_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_distance );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_distance );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "distance" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( outline_0_var_mrk );
            tmp_source_name_3 = outline_0_var_mrk;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_points );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( outline_0_var_pnt );
            tmp_subscript_name_1 = outline_0_var_pnt;
            tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_source_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_x );
            Py_DECREF( tmp_source_name_2 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( par_x );
            tmp_args_element_name_2 = par_x;
            CHECK_OBJECT( outline_0_var_mrk );
            tmp_source_name_5 = outline_0_var_mrk;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_points );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( outline_0_var_pnt );
            tmp_subscript_name_2 = outline_0_var_pnt;
            tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_source_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_y );
            Py_DECREF( tmp_source_name_4 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( par_y );
            tmp_args_element_name_4 = par_y;
            frame_98bfa4a11297bbee76388d763c717d98_2->m_frame.f_lineno = 502;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_int_arg_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_int_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_tuple_element_1 = PyNumber_Int( tmp_int_arg_1 );
            Py_DECREF( tmp_int_arg_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_append_value_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_append_value_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( outline_0_var_mrk );
            tmp_source_name_6 = outline_0_var_mrk;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_name );
            if ( tmp_tuple_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_append_value_1 );

                exception_lineno = 503;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
            tmp_tuple_element_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( outline_0_var_pnt );
            tmp_tuple_element_2 = outline_0_var_pnt;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_append_value_1, 1, tmp_tuple_element_1 );
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 502;
                type_description_2 = "oooo";
                goto try_except_handler_3;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 502;
            type_description_2 = "oooo";
            goto try_except_handler_3;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction_iter_0 );
        Py_DECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 502;
            type_description_2 = "oooo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_assign_source_1 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_assign_source_1 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_1 );
        tmp_listcomp_1__iter_value_1 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_1 );
        tmp_listcomp_1__iter_value_1 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_98bfa4a11297bbee76388d763c717d98_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_98bfa4a11297bbee76388d763c717d98_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_98bfa4a11297bbee76388d763c717d98_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_98bfa4a11297bbee76388d763c717d98_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_98bfa4a11297bbee76388d763c717d98_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_98bfa4a11297bbee76388d763c717d98_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_98bfa4a11297bbee76388d763c717d98_2,
            type_description_2,
            outline_0_var_mrk,
            outline_0_var_pnt,
            par_x,
            par_y
        );


        // Release cached frame.
        if ( frame_98bfa4a11297bbee76388d763c717d98_2 == cache_frame_98bfa4a11297bbee76388d763c717d98_2 )
        {
            Py_DECREF( frame_98bfa4a11297bbee76388d763c717d98_2 );
        }
        cache_frame_98bfa4a11297bbee76388d763c717d98_2 = NULL;

        assertFrameObject( frame_98bfa4a11297bbee76388d763c717d98_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooooc";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_mrk );
        outline_0_var_mrk = NULL;

        Py_XDECREF( outline_0_var_pnt );
        outline_0_var_pnt = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_mrk );
        outline_0_var_mrk = NULL;

        Py_XDECREF( outline_0_var_pnt );
        outline_0_var_pnt = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
        return NULL;
        outline_exception_1:;
        exception_lineno = 502;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert( var_distances == NULL );
        var_distances = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_distances );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_distances );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 505;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_5;
            tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_min );
            assert( tmp_called_name_2 != NULL );
            {
                PyObject *tmp_assign_source_10;
                PyObject *tmp_iter_arg_3;
                CHECK_OBJECT( var_distances );
                tmp_iter_arg_3 = var_distances;
                tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
                if ( tmp_assign_source_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 506;
                    type_description_1 = "ooooc";
                    goto frame_exception_exit_1;
                }
                assert( tmp_genexpr_1__$0 == NULL );
                tmp_genexpr_1__$0 = tmp_assign_source_10;
            }
            // Tried code:
            tmp_args_element_name_5 = __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_maker();

            ((struct Nuitka_GeneratorObject *)tmp_args_element_name_5)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


            goto try_return_handler_4;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
            return NULL;
            // Return handler code:
            try_return_handler_4:;
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            goto outline_result_2;
            // End of try:
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
            return NULL;
            outline_result_2:;
            frame_f049f63b6d73a6fb1e74e05f9f07e3bd->m_frame.f_lineno = 506;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_assign_source_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 506;
                type_description_1 = "ooooc";
                goto frame_exception_exit_1;
            }
            assert( PyCell_GET( var_min_dist ) == NULL );
            PyCell_SET( var_min_dist, tmp_assign_source_9 );

        }
        {
            PyObject *tmp_tuple_arg_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            tmp_called_name_3 = (PyObject *)&PyMap_Type;
            tmp_args_element_name_6 = MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_1_lambda(  );



            tmp_called_name_4 = (PyObject *)&PyFilter_Type;
            tmp_args_element_name_8 = MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_2_lambda(  );

            ((struct Nuitka_FunctionObject *)tmp_args_element_name_8)->m_closure[0] = var_min_dist;
            Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_args_element_name_8)->m_closure[0] );


            CHECK_OBJECT( var_distances );
            tmp_args_element_name_9 = var_distances;
            frame_f049f63b6d73a6fb1e74e05f9f07e3bd->m_frame.f_lineno = 507;
            {
                PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
                tmp_args_element_name_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_args_element_name_8 );
            if ( tmp_args_element_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_6 );

                exception_lineno = 507;
                type_description_1 = "ooooc";
                goto frame_exception_exit_1;
            }
            frame_f049f63b6d73a6fb1e74e05f9f07e3bd->m_frame.f_lineno = 507;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
                tmp_tuple_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            if ( tmp_tuple_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 507;
                type_description_1 = "ooooc";
                goto frame_exception_exit_1;
            }
            tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
            Py_DECREF( tmp_tuple_arg_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 507;
                type_description_1 = "ooooc";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_return_value = const_tuple_empty;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f049f63b6d73a6fb1e74e05f9f07e3bd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f049f63b6d73a6fb1e74e05f9f07e3bd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f049f63b6d73a6fb1e74e05f9f07e3bd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f049f63b6d73a6fb1e74e05f9f07e3bd,
        type_description_1,
        par_self,
        par_x,
        par_y,
        var_distances,
        var_min_dist
    );


    // Release cached frame.
    if ( frame_f049f63b6d73a6fb1e74e05f9f07e3bd == cache_frame_f049f63b6d73a6fb1e74e05f9f07e3bd )
    {
        Py_DECREF( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );
    }
    cache_frame_f049f63b6d73a6fb1e74e05f9f07e3bd = NULL;

    assertFrameObject( frame_f049f63b6d73a6fb1e74e05f9f07e3bd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    CHECK_OBJECT( (PyObject *)var_distances );
    Py_DECREF( var_distances );
    var_distances = NULL;

    CHECK_OBJECT( (PyObject *)var_min_dist );
    Py_DECREF( var_min_dist );
    var_min_dist = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    Py_XDECREF( var_distances );
    var_distances = NULL;

    CHECK_OBJECT( (PyObject *)var_min_dist );
    Py_DECREF( var_min_dist );
    var_min_dist = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_locals {
    PyObject *var_i;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_44_find_nearest$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_i = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_d2195ec170930a631d2b03017cec7030, module___main__, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 506;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_i;
            generator_heap->var_i = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_i );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_i );
        tmp_subscribed_name_1 = generator_heap->var_i;
        tmp_subscript_name_1 = const_int_0;
        tmp_expression_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 506;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 506;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 506;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_i
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_i );
    generator_heap->var_i = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_i );
    generator_heap->var_i = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_44_find_nearest$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_9ed82b09ff4a3e5976740f07f46487fe,
#endif
        codeobj_d2195ec170930a631d2b03017cec7030,
        1,
        sizeof(struct __main__$$$function_44_find_nearest$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_44_find_nearest$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_e76650cc78ad456b9551ebe63c1cbd86;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e76650cc78ad456b9551ebe63c1cbd86 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e76650cc78ad456b9551ebe63c1cbd86, codeobj_e76650cc78ad456b9551ebe63c1cbd86, module___main__, sizeof(void *) );
    frame_e76650cc78ad456b9551ebe63c1cbd86 = cache_frame_e76650cc78ad456b9551ebe63c1cbd86;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e76650cc78ad456b9551ebe63c1cbd86 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e76650cc78ad456b9551ebe63c1cbd86 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_a );
        tmp_subscribed_name_1 = par_a;
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e76650cc78ad456b9551ebe63c1cbd86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e76650cc78ad456b9551ebe63c1cbd86 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e76650cc78ad456b9551ebe63c1cbd86 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e76650cc78ad456b9551ebe63c1cbd86, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e76650cc78ad456b9551ebe63c1cbd86->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e76650cc78ad456b9551ebe63c1cbd86, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e76650cc78ad456b9551ebe63c1cbd86,
        type_description_1,
        par_a
    );


    // Release cached frame.
    if ( frame_e76650cc78ad456b9551ebe63c1cbd86 == cache_frame_e76650cc78ad456b9551ebe63c1cbd86 )
    {
        Py_DECREF( frame_e76650cc78ad456b9551ebe63c1cbd86 );
    }
    cache_frame_e76650cc78ad456b9551ebe63c1cbd86 = NULL;

    assertFrameObject( frame_e76650cc78ad456b9551ebe63c1cbd86 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_44_find_nearest$$$function_2_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_b = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_45b689814bd4e3f025436fdcba32e0f5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_45b689814bd4e3f025436fdcba32e0f5 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_45b689814bd4e3f025436fdcba32e0f5, codeobj_45b689814bd4e3f025436fdcba32e0f5, module___main__, sizeof(void *)+sizeof(void *) );
    frame_45b689814bd4e3f025436fdcba32e0f5 = cache_frame_45b689814bd4e3f025436fdcba32e0f5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_45b689814bd4e3f025436fdcba32e0f5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_45b689814bd4e3f025436fdcba32e0f5 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_b );
        tmp_subscribed_name_1 = par_b;
        tmp_subscript_name_1 = const_int_0;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_compexpr_left_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "min_dist" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 507;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = PyCell_GET( self->m_closure[0] );
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45b689814bd4e3f025436fdcba32e0f5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_45b689814bd4e3f025436fdcba32e0f5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_45b689814bd4e3f025436fdcba32e0f5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_45b689814bd4e3f025436fdcba32e0f5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_45b689814bd4e3f025436fdcba32e0f5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_45b689814bd4e3f025436fdcba32e0f5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_45b689814bd4e3f025436fdcba32e0f5,
        type_description_1,
        par_b,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_45b689814bd4e3f025436fdcba32e0f5 == cache_frame_45b689814bd4e3f025436fdcba32e0f5 )
    {
        Py_DECREF( frame_45b689814bd4e3f025436fdcba32e0f5 );
    }
    cache_frame_45b689814bd4e3f025436fdcba32e0f5 = NULL;

    assertFrameObject( frame_45b689814bd4e3f025436fdcba32e0f5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest$$$function_2_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_44_find_nearest$$$function_2_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_45_delete_nearest( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_x = python_pars[ 1 ];
    PyObject *par_y = python_pars[ 2 ];
    PyObject *var_nearest_points = NULL;
    PyObject *var_marker_name = NULL;
    PyObject *var_point_name = NULL;
    PyObject *var_px = NULL;
    PyObject *var_py = NULL;
    PyObject *var_cursor_dist = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_6f7a4ccb51d7f6c845afac160b7fd6de;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_6f7a4ccb51d7f6c845afac160b7fd6de = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6f7a4ccb51d7f6c845afac160b7fd6de, codeobj_6f7a4ccb51d7f6c845afac160b7fd6de, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6f7a4ccb51d7f6c845afac160b7fd6de = cache_frame_6f7a4ccb51d7f6c845afac160b7fd6de;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6f7a4ccb51d7f6c845afac160b7fd6de );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6f7a4ccb51d7f6c845afac160b7fd6de ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_x );
        tmp_args_element_name_1 = par_x;
        CHECK_OBJECT( par_y );
        tmp_args_element_name_2 = par_y;
        frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame.f_lineno = 512;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_find_nearest, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 512;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_nearest_points == NULL );
        var_nearest_points = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( var_nearest_points );
        tmp_iter_arg_1 = var_nearest_points;
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 513;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooo";
                exception_lineno = 513;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 513;
            type_description_1 = "ooooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 513;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 513;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooo";
                    exception_lineno = 513;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooo";
            exception_lineno = 513;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_marker_name;
            var_marker_name = tmp_assign_source_7;
            Py_INCREF( var_marker_name );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_point_name;
            var_point_name = tmp_assign_source_8;
            Py_INCREF( var_point_name );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_2 = par_self;
        CHECK_OBJECT( var_marker_name );
        tmp_subscript_name_1 = var_marker_name;
        tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_1 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 514;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_points );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 514;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_point_name );
        tmp_subscript_name_2 = var_point_name;
        tmp_source_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 514;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_9 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_x );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 514;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_px;
            var_px = tmp_assign_source_9;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_subscript_name_4;
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_4 = par_self;
        CHECK_OBJECT( var_marker_name );
        tmp_subscript_name_3 = var_marker_name;
        tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_3 );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 515;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_points );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 515;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_point_name );
        tmp_subscript_name_4 = var_point_name;
        tmp_source_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 515;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_y );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 515;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_py;
            var_py = tmp_assign_source_10;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_distance );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_distance );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "distance" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 516;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_x );
        tmp_args_element_name_3 = par_x;
        CHECK_OBJECT( var_px );
        tmp_args_element_name_4 = var_px;
        CHECK_OBJECT( par_y );
        tmp_args_element_name_5 = par_y;
        CHECK_OBJECT( var_py );
        tmp_args_element_name_6 = var_py;
        frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame.f_lineno = 516;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_int_arg_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
        }

        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 516;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_11 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 516;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_cursor_dist;
            var_cursor_dist = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_cursor_dist );
        tmp_compexpr_left_1 = var_cursor_dist;
        tmp_compexpr_right_1 = const_int_pos_9;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 517;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_subscript_name_5;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_7;
            CHECK_OBJECT( par_self );
            tmp_subscribed_name_5 = par_self;
            CHECK_OBJECT( var_marker_name );
            tmp_subscript_name_5 = var_marker_name;
            tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 518;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_point_name );
            tmp_args_element_name_7 = var_point_name;
            frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame.f_lineno = 518;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_delete_point, call_args );
            }

            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 518;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_8;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_JpgCanvas );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 519;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( var_marker_name );
            tmp_args_element_name_8 = var_marker_name;
            frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame.f_lineno = 519;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_delete, call_args );
            }

            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 519;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_3;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_draw_marker );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 521;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            tmp_dict_key_1 = const_str_plain_m_name;
            CHECK_OBJECT( var_marker_name );
            tmp_dict_value_1 = var_marker_name;
            tmp_kw_name_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_mode;
            tmp_dict_value_2 = const_str_plain_marker;
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame.f_lineno = 521;
            tmp_call_result_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 521;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 513;
        type_description_1 = "ooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6f7a4ccb51d7f6c845afac160b7fd6de );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6f7a4ccb51d7f6c845afac160b7fd6de );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6f7a4ccb51d7f6c845afac160b7fd6de, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6f7a4ccb51d7f6c845afac160b7fd6de->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6f7a4ccb51d7f6c845afac160b7fd6de, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6f7a4ccb51d7f6c845afac160b7fd6de,
        type_description_1,
        par_self,
        par_x,
        par_y,
        var_nearest_points,
        var_marker_name,
        var_point_name,
        var_px,
        var_py,
        var_cursor_dist
    );


    // Release cached frame.
    if ( frame_6f7a4ccb51d7f6c845afac160b7fd6de == cache_frame_6f7a4ccb51d7f6c845afac160b7fd6de )
    {
        Py_DECREF( frame_6f7a4ccb51d7f6c845afac160b7fd6de );
    }
    cache_frame_6f7a4ccb51d7f6c845afac160b7fd6de = NULL;

    assertFrameObject( frame_6f7a4ccb51d7f6c845afac160b7fd6de );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_45_delete_nearest );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    CHECK_OBJECT( (PyObject *)var_nearest_points );
    Py_DECREF( var_nearest_points );
    var_nearest_points = NULL;

    Py_XDECREF( var_marker_name );
    var_marker_name = NULL;

    Py_XDECREF( var_point_name );
    var_point_name = NULL;

    Py_XDECREF( var_px );
    var_px = NULL;

    Py_XDECREF( var_py );
    var_py = NULL;

    Py_XDECREF( var_cursor_dist );
    var_cursor_dist = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    Py_XDECREF( var_nearest_points );
    var_nearest_points = NULL;

    Py_XDECREF( var_marker_name );
    var_marker_name = NULL;

    Py_XDECREF( var_point_name );
    var_point_name = NULL;

    Py_XDECREF( var_px );
    var_px = NULL;

    Py_XDECREF( var_py );
    var_py = NULL;

    Py_XDECREF( var_cursor_dist );
    var_cursor_dist = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_45_delete_nearest );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_46_delete_covered( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_x = python_pars[ 1 ];
    PyObject *par_y = python_pars[ 2 ];
    PyObject *par_r = python_pars[ 3 ];
    PyObject *var_marker = NULL;
    PyObject *var_p_names = NULL;
    PyObject *var_p_name = NULL;
    PyObject *var_px = NULL;
    PyObject *var_py = NULL;
    PyObject *var_dist = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_28b089b36592534c770a1c41c4ac0f8d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_28b089b36592534c770a1c41c4ac0f8d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_28b089b36592534c770a1c41c4ac0f8d, codeobj_28b089b36592534c770a1c41c4ac0f8d, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_28b089b36592534c770a1c41c4ac0f8d = cache_frame_28b089b36592534c770a1c41c4ac0f8d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_28b089b36592534c770a1c41c4ac0f8d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_28b089b36592534c770a1c41c4ac0f8d ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_self );
        tmp_iter_arg_1 = par_self;
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 524;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                exception_lineno = 524;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_marker;
            var_marker = tmp_assign_source_3;
            Py_INCREF( var_marker );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_tuple_arg_1;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( var_marker );
            tmp_source_name_1 = var_marker;
            tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 525;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_5 = MAKE_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 525;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = tmp_genexpr_1__$0;
                tmp_genexpr_1__$0 = tmp_assign_source_5;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        tmp_tuple_arg_1 = __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_46_delete_covered );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__$$$function_46_delete_covered );
        return NULL;
        outline_result_1:;
        tmp_assign_source_4 = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 525;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_p_names;
            var_p_names = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_3;
        CHECK_OBJECT( var_p_names );
        tmp_iter_arg_3 = var_p_names;
        tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_3 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 527;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                exception_lineno = 527;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_8 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_p_name;
            var_p_name = tmp_assign_source_8;
            Py_INCREF( var_p_name );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_marker );
        tmp_source_name_3 = var_marker;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_points );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 528;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_p_name );
        tmp_subscript_name_1 = var_p_name;
        tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 528;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_9 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_x );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 528;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_px;
            var_px = tmp_assign_source_9;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( var_marker );
        tmp_source_name_5 = var_marker;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_points );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 529;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_p_name );
        tmp_subscript_name_2 = var_p_name;
        tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 529;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_y );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 529;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_py;
            var_py = tmp_assign_source_10;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_distance );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_distance );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "distance" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 530;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_x );
        tmp_args_element_name_1 = par_x;
        CHECK_OBJECT( var_px );
        tmp_args_element_name_2 = var_px;
        CHECK_OBJECT( par_y );
        tmp_args_element_name_3 = par_y;
        CHECK_OBJECT( var_py );
        tmp_args_element_name_4 = var_py;
        frame_28b089b36592534c770a1c41c4ac0f8d->m_frame.f_lineno = 530;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
        }

        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_dist;
            var_dist = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_dist );
        tmp_compexpr_left_1 = var_dist;
        CHECK_OBJECT( par_r );
        tmp_compexpr_right_1 = par_r;
        tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 531;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT( var_marker );
            tmp_called_instance_1 = var_marker;
            CHECK_OBJECT( var_p_name );
            tmp_args_element_name_5 = var_p_name;
            frame_28b089b36592534c770a1c41c4ac0f8d->m_frame.f_lineno = 532;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_delete_point, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 532;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_6;
            PyObject *tmp_source_name_7;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_8;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_JpgCanvas );
            if ( tmp_source_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 533;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_delete );
            Py_DECREF( tmp_source_name_6 );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 533;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( var_marker );
            tmp_source_name_8 = var_marker;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_name );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 533;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            frame_28b089b36592534c770a1c41c4ac0f8d->m_frame.f_lineno = 533;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 533;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_9;
            PyObject *tmp_call_result_3;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_source_name_10;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_9 = par_self;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_draw_marker );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 535;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            tmp_dict_key_1 = const_str_plain_m_name;
            CHECK_OBJECT( var_marker );
            tmp_source_name_10 = var_marker;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_name );
            if ( tmp_dict_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 535;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            tmp_kw_name_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            Py_DECREF( tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_mode;
            tmp_dict_value_2 = const_str_plain_marker;
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_28b089b36592534c770a1c41c4ac0f8d->m_frame.f_lineno = 535;
            tmp_call_result_3 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 535;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 527;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 524;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_28b089b36592534c770a1c41c4ac0f8d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_28b089b36592534c770a1c41c4ac0f8d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_28b089b36592534c770a1c41c4ac0f8d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_28b089b36592534c770a1c41c4ac0f8d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_28b089b36592534c770a1c41c4ac0f8d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_28b089b36592534c770a1c41c4ac0f8d,
        type_description_1,
        par_self,
        par_x,
        par_y,
        par_r,
        var_marker,
        var_p_names,
        var_p_name,
        var_px,
        var_py,
        var_dist
    );


    // Release cached frame.
    if ( frame_28b089b36592534c770a1c41c4ac0f8d == cache_frame_28b089b36592534c770a1c41c4ac0f8d )
    {
        Py_DECREF( frame_28b089b36592534c770a1c41c4ac0f8d );
    }
    cache_frame_28b089b36592534c770a1c41c4ac0f8d = NULL;

    assertFrameObject( frame_28b089b36592534c770a1c41c4ac0f8d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_46_delete_covered );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    CHECK_OBJECT( (PyObject *)par_r );
    Py_DECREF( par_r );
    par_r = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_p_names );
    var_p_names = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_px );
    var_px = NULL;

    Py_XDECREF( var_py );
    var_py = NULL;

    Py_XDECREF( var_dist );
    var_dist = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_x );
    Py_DECREF( par_x );
    par_x = NULL;

    CHECK_OBJECT( (PyObject *)par_y );
    Py_DECREF( par_y );
    par_y = NULL;

    CHECK_OBJECT( (PyObject *)par_r );
    Py_DECREF( par_r );
    par_r = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_p_names );
    var_p_names = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_px );
    var_px = NULL;

    Py_XDECREF( var_py );
    var_py = NULL;

    Py_XDECREF( var_dist );
    var_dist = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_46_delete_covered );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_locals {
    PyObject *var_p_name;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_46_delete_covered$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_p_name = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_c4c2cc39eeb8ca1d1cddc8dfd8763cae, module___main__, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 525;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_p_name;
            generator_heap->var_p_name = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_p_name );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_p_name );
        tmp_expression_name_1 = generator_heap->var_p_name;
        Py_INCREF( tmp_expression_name_1 );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 525;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 525;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_p_name
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_p_name );
    generator_heap->var_p_name = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_p_name );
    generator_heap->var_p_name = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_46_delete_covered$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_0671ae41e24608f4baed6f6736e6f766,
#endif
        codeobj_c4c2cc39eeb8ca1d1cddc8dfd8763cae,
        1,
        sizeof(struct __main__$$$function_46_delete_covered$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_47_remove_marker_points( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_event = python_pars[ 1 ];
    PyObject *var_canvas = NULL;
    PyObject *var_actual_x = NULL;
    PyObject *var_actual_y = NULL;
    struct Nuitka_FrameObject *frame_3da858d213a48bb919b6dc1fb8a74947;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3da858d213a48bb919b6dc1fb8a74947 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3da858d213a48bb919b6dc1fb8a74947, codeobj_3da858d213a48bb919b6dc1fb8a74947, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3da858d213a48bb919b6dc1fb8a74947 = cache_frame_3da858d213a48bb919b6dc1fb8a74947;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3da858d213a48bb919b6dc1fb8a74947 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3da858d213a48bb919b6dc1fb8a74947 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_event );
        tmp_source_name_1 = par_event;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_widget );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 538;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_canvas == NULL );
        var_canvas = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( var_canvas );
        tmp_source_name_2 = var_canvas;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_canvasx );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 539;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_3 = par_event;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_x );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 539;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_3da858d213a48bb919b6dc1fb8a74947->m_frame.f_lineno = 539;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 539;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_actual_x == NULL );
        var_actual_x = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( var_canvas );
        tmp_source_name_4 = var_canvas;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_canvasy );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 540;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_event );
        tmp_source_name_5 = par_event;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_y );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 540;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_3da858d213a48bb919b6dc1fb8a74947->m_frame.f_lineno = 540;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 540;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_actual_y == NULL );
        var_actual_y = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_delete_covered );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 542;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_actual_x );
        tmp_tuple_element_1 = var_actual_x;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_actual_y );
        tmp_tuple_element_1 = var_actual_y;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_954798d046aec4035b0ebd54d4afd999 );
        frame_3da858d213a48bb919b6dc1fb8a74947->m_frame.f_lineno = 542;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 542;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_3da858d213a48bb919b6dc1fb8a74947->m_frame.f_lineno = 543;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_list_markers );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 543;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3da858d213a48bb919b6dc1fb8a74947 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3da858d213a48bb919b6dc1fb8a74947 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3da858d213a48bb919b6dc1fb8a74947, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3da858d213a48bb919b6dc1fb8a74947->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3da858d213a48bb919b6dc1fb8a74947, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3da858d213a48bb919b6dc1fb8a74947,
        type_description_1,
        par_self,
        par_event,
        var_canvas,
        var_actual_x,
        var_actual_y
    );


    // Release cached frame.
    if ( frame_3da858d213a48bb919b6dc1fb8a74947 == cache_frame_3da858d213a48bb919b6dc1fb8a74947 )
    {
        Py_DECREF( frame_3da858d213a48bb919b6dc1fb8a74947 );
    }
    cache_frame_3da858d213a48bb919b6dc1fb8a74947 = NULL;

    assertFrameObject( frame_3da858d213a48bb919b6dc1fb8a74947 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_47_remove_marker_points );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    CHECK_OBJECT( (PyObject *)var_canvas );
    Py_DECREF( var_canvas );
    var_canvas = NULL;

    CHECK_OBJECT( (PyObject *)var_actual_x );
    Py_DECREF( var_actual_x );
    var_actual_x = NULL;

    CHECK_OBJECT( (PyObject *)var_actual_y );
    Py_DECREF( var_actual_y );
    var_actual_y = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_event );
    Py_DECREF( par_event );
    par_event = NULL;

    Py_XDECREF( var_canvas );
    var_canvas = NULL;

    Py_XDECREF( var_actual_x );
    var_actual_x = NULL;

    Py_XDECREF( var_actual_y );
    var_actual_y = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_47_remove_marker_points );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_48_draw_marker( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_m_name = python_pars[ 1 ];
    PyObject *par_mode = python_pars[ 2 ];
    PyObject *var_draw_queue = NULL;
    PyObject *var_p_name = NULL;
    PyObject *var_marker = NULL;
    PyObject *var_mrk_name = NULL;
    PyObject *var_color = NULL;
    PyObject *var_point = NULL;
    PyObject *outline_0_var_p_name = NULL;
    PyObject *outline_1_var_p_name = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_e3e76553c866db3adc7baac9e4d6d91e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_f2aed35b33d5273377057c330726e066_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_f2aed35b33d5273377057c330726e066_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    struct Nuitka_FrameObject *frame_00563a3da54566a75fd89930386946fb_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_00563a3da54566a75fd89930386946fb_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    static struct Nuitka_FrameObject *cache_frame_e3e76553c866db3adc7baac9e4d6d91e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyDict_New();
        assert( var_draw_queue == NULL );
        var_draw_queue = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e3e76553c866db3adc7baac9e4d6d91e, codeobj_e3e76553c866db3adc7baac9e4d6d91e, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e3e76553c866db3adc7baac9e4d6d91e = cache_frame_e3e76553c866db3adc7baac9e4d6d91e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e3e76553c866db3adc7baac9e4d6d91e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e3e76553c866db3adc7baac9e4d6d91e ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_mode );
        tmp_compexpr_left_1 = par_mode;
        tmp_compexpr_right_1 = const_str_plain_marker;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 553;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_left_name_1;
            PyObject *tmp_list_element_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_self );
            tmp_subscribed_name_1 = par_self;
            CHECK_OBJECT( par_m_name );
            tmp_subscript_name_1 = par_m_name;
            tmp_source_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_source_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_color );
            Py_DECREF( tmp_source_name_1 );
            if ( tmp_list_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_1 = PyList_New( 1 );
            PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
            // Tried code:
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_source_name_2;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_2 = par_self;
                CHECK_OBJECT( par_m_name );
                tmp_subscript_name_2 = par_m_name;
                tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                if ( tmp_source_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_2;
                }
                tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_points );
                Py_DECREF( tmp_source_name_2 );
                if ( tmp_iter_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_2;
                }
                tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                if ( tmp_assign_source_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_2;
                }
                assert( tmp_listcomp_1__$0 == NULL );
                tmp_listcomp_1__$0 = tmp_assign_source_2;
            }
            {
                PyObject *tmp_assign_source_3;
                tmp_assign_source_3 = PyList_New( 0 );
                assert( tmp_listcomp_1__contraction == NULL );
                tmp_listcomp_1__contraction = tmp_assign_source_3;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_f2aed35b33d5273377057c330726e066_2, codeobj_f2aed35b33d5273377057c330726e066, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *) );
            frame_f2aed35b33d5273377057c330726e066_2 = cache_frame_f2aed35b33d5273377057c330726e066_2;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_f2aed35b33d5273377057c330726e066_2 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_f2aed35b33d5273377057c330726e066_2 ) == 2 ); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_4;
                CHECK_OBJECT( tmp_listcomp_1__$0 );
                tmp_next_source_1 = tmp_listcomp_1__$0;
                tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
                if ( tmp_assign_source_4 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_1;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_2 = "ooo";
                        exception_lineno = 554;
                        goto try_except_handler_3;
                    }
                }

                {
                    PyObject *old = tmp_listcomp_1__iter_value_0;
                    tmp_listcomp_1__iter_value_0 = tmp_assign_source_4;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_5;
                CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
                tmp_assign_source_5 = tmp_listcomp_1__iter_value_0;
                {
                    PyObject *old = outline_0_var_p_name;
                    outline_0_var_p_name = tmp_assign_source_5;
                    Py_INCREF( outline_0_var_p_name );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_append_list_1;
                PyObject *tmp_append_value_1;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_source_name_3;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_3;
                PyObject *tmp_subscript_name_4;
                CHECK_OBJECT( tmp_listcomp_1__contraction );
                tmp_append_list_1 = tmp_listcomp_1__contraction;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_4 = par_self;
                CHECK_OBJECT( par_m_name );
                tmp_subscript_name_3 = par_m_name;
                tmp_source_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_3 );
                if ( tmp_source_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_points );
                Py_DECREF( tmp_source_name_3 );
                if ( tmp_subscribed_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( outline_0_var_p_name );
                tmp_subscript_name_4 = outline_0_var_p_name;
                tmp_append_value_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_4 );
                Py_DECREF( tmp_subscribed_name_3 );
                if ( tmp_append_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
                assert( PyList_Check( tmp_append_list_1 ) );
                tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
                Py_DECREF( tmp_append_value_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 554;
                    type_description_2 = "ooo";
                    goto try_except_handler_3;
                }
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_2 = "ooo";
                goto try_except_handler_3;
            }
            goto loop_start_1;
            loop_end_1:;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_right_name_1 = tmp_listcomp_1__contraction;
            Py_INCREF( tmp_right_name_1 );
            goto try_return_handler_3;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
            return NULL;
            // Return handler code:
            try_return_handler_3:;
            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            goto frame_return_exit_1;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
            Py_DECREF( tmp_listcomp_1__$0 );
            tmp_listcomp_1__$0 = NULL;

            CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
            Py_DECREF( tmp_listcomp_1__contraction );
            tmp_listcomp_1__contraction = NULL;

            Py_XDECREF( tmp_listcomp_1__iter_value_0 );
            tmp_listcomp_1__iter_value_0 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto frame_exception_exit_2;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION( frame_f2aed35b33d5273377057c330726e066_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_1;

            frame_return_exit_1:;
#if 0
            RESTORE_FRAME_EXCEPTION( frame_f2aed35b33d5273377057c330726e066_2 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_2;

            frame_exception_exit_2:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_f2aed35b33d5273377057c330726e066_2 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_f2aed35b33d5273377057c330726e066_2, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_f2aed35b33d5273377057c330726e066_2->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_f2aed35b33d5273377057c330726e066_2, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_f2aed35b33d5273377057c330726e066_2,
                type_description_2,
                outline_0_var_p_name,
                par_self,
                par_m_name
            );


            // Release cached frame.
            if ( frame_f2aed35b33d5273377057c330726e066_2 == cache_frame_f2aed35b33d5273377057c330726e066_2 )
            {
                Py_DECREF( frame_f2aed35b33d5273377057c330726e066_2 );
            }
            cache_frame_f2aed35b33d5273377057c330726e066_2 = NULL;

            assertFrameObject( frame_f2aed35b33d5273377057c330726e066_2 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_1;

            frame_no_exception_1:;
            goto skip_nested_handling_1;
            nested_frame_exit_1:;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
            skip_nested_handling_1:;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
            return NULL;
            // Return handler code:
            try_return_handler_2:;
            Py_XDECREF( outline_0_var_p_name );
            outline_0_var_p_name = NULL;

            goto outline_result_1;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( outline_0_var_p_name );
            outline_0_var_p_name = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto outline_exception_1;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
            return NULL;
            outline_exception_1:;
            exception_lineno = 554;
            goto frame_exception_exit_1;
            outline_result_1:;
            tmp_dictset_value = BINARY_OPERATION_ADD_LIST_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_draw_queue );
            tmp_dictset_dict = var_draw_queue;
            CHECK_OBJECT( par_m_name );
            tmp_dictset_key = par_m_name;
            tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_mode );
            tmp_compexpr_left_2 = par_mode;
            tmp_compexpr_right_2 = const_str_plain_last;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 556;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_6;
                PyObject *tmp_source_name_4;
                PyObject *tmp_subscribed_name_5;
                PyObject *tmp_subscript_name_5;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_5 = par_self;
                CHECK_OBJECT( par_m_name );
                tmp_subscript_name_5 = par_m_name;
                tmp_source_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
                if ( tmp_source_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 557;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_last_point );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_assign_source_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 557;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_p_name == NULL );
                var_p_name = tmp_assign_source_6;
            }
            {
                PyObject *tmp_left_name_2;
                PyObject *tmp_list_element_2;
                PyObject *tmp_source_name_5;
                PyObject *tmp_subscribed_name_6;
                PyObject *tmp_subscript_name_6;
                PyObject *tmp_right_name_2;
                PyObject *tmp_list_element_3;
                PyObject *tmp_subscribed_name_7;
                PyObject *tmp_source_name_6;
                PyObject *tmp_subscribed_name_8;
                PyObject *tmp_subscript_name_7;
                PyObject *tmp_subscript_name_8;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_6 = par_self;
                CHECK_OBJECT( par_m_name );
                tmp_subscript_name_6 = par_m_name;
                tmp_source_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
                if ( tmp_source_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_list_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_color );
                Py_DECREF( tmp_source_name_5 );
                if ( tmp_list_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_left_name_2 = PyList_New( 1 );
                PyList_SET_ITEM( tmp_left_name_2, 0, tmp_list_element_2 );
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_8 = par_self;
                CHECK_OBJECT( par_m_name );
                tmp_subscript_name_7 = par_m_name;
                tmp_source_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_7 );
                if ( tmp_source_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_left_name_2 );

                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_subscribed_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_points );
                Py_DECREF( tmp_source_name_6 );
                if ( tmp_subscribed_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_left_name_2 );

                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_p_name );
                tmp_subscript_name_8 = var_p_name;
                tmp_list_element_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_8 );
                Py_DECREF( tmp_subscribed_name_7 );
                if ( tmp_list_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_left_name_2 );

                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_2 = PyList_New( 1 );
                PyList_SET_ITEM( tmp_right_name_2, 0, tmp_list_element_3 );
                tmp_dictset_value = BINARY_OPERATION_ADD_LIST_LIST( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_left_name_2 );
                Py_DECREF( tmp_right_name_2 );
                assert( !(tmp_dictset_value == NULL) );
                CHECK_OBJECT( var_draw_queue );
                tmp_dictset_dict = var_draw_queue;
                CHECK_OBJECT( par_m_name );
                tmp_dictset_key = par_m_name;
                tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                CHECK_OBJECT( par_mode );
                tmp_compexpr_left_3 = par_mode;
                tmp_compexpr_right_3 = const_str_plain_all;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 559;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_7;
                    PyObject *tmp_iter_arg_2;
                    CHECK_OBJECT( par_self );
                    tmp_iter_arg_2 = par_self;
                    tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
                    if ( tmp_assign_source_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 560;
                        type_description_1 = "ooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( tmp_for_loop_1__for_iterator == NULL );
                    tmp_for_loop_1__for_iterator = tmp_assign_source_7;
                }
                // Tried code:
                loop_start_2:;
                {
                    PyObject *tmp_next_source_2;
                    PyObject *tmp_assign_source_8;
                    CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                    tmp_next_source_2 = tmp_for_loop_1__for_iterator;
                    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_2 );
                    if ( tmp_assign_source_8 == NULL )
                    {
                        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                        {

                            goto loop_end_2;
                        }
                        else
                        {

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            type_description_1 = "ooooooooo";
                            exception_lineno = 560;
                            goto try_except_handler_4;
                        }
                    }

                    {
                        PyObject *old = tmp_for_loop_1__iter_value;
                        tmp_for_loop_1__iter_value = tmp_assign_source_8;
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_9;
                    CHECK_OBJECT( tmp_for_loop_1__iter_value );
                    tmp_assign_source_9 = tmp_for_loop_1__iter_value;
                    {
                        PyObject *old = var_marker;
                        var_marker = tmp_assign_source_9;
                        Py_INCREF( var_marker );
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_left_name_3;
                    PyObject *tmp_list_element_4;
                    PyObject *tmp_source_name_7;
                    PyObject *tmp_right_name_3;
                    PyObject *tmp_source_name_10;
                    CHECK_OBJECT( var_marker );
                    tmp_source_name_7 = var_marker;
                    tmp_list_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_color );
                    if ( tmp_list_element_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 561;
                        type_description_1 = "ooooooooo";
                        goto try_except_handler_4;
                    }
                    tmp_left_name_3 = PyList_New( 1 );
                    PyList_SET_ITEM( tmp_left_name_3, 0, tmp_list_element_4 );
                    // Tried code:
                    {
                        PyObject *tmp_assign_source_10;
                        PyObject *tmp_iter_arg_3;
                        PyObject *tmp_source_name_8;
                        CHECK_OBJECT( var_marker );
                        tmp_source_name_8 = var_marker;
                        tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_points );
                        if ( tmp_iter_arg_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_1 = "ooooooooo";
                            goto try_except_handler_5;
                        }
                        tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_3 );
                        Py_DECREF( tmp_iter_arg_3 );
                        if ( tmp_assign_source_10 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_1 = "ooooooooo";
                            goto try_except_handler_5;
                        }
                        {
                            PyObject *old = tmp_listcomp_2__$0;
                            tmp_listcomp_2__$0 = tmp_assign_source_10;
                            Py_XDECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_assign_source_11;
                        tmp_assign_source_11 = PyList_New( 0 );
                        {
                            PyObject *old = tmp_listcomp_2__contraction;
                            tmp_listcomp_2__contraction = tmp_assign_source_11;
                            Py_XDECREF( old );
                        }

                    }
                    MAKE_OR_REUSE_FRAME( cache_frame_00563a3da54566a75fd89930386946fb_3, codeobj_00563a3da54566a75fd89930386946fb, module___main__, sizeof(void *)+sizeof(void *) );
                    frame_00563a3da54566a75fd89930386946fb_3 = cache_frame_00563a3da54566a75fd89930386946fb_3;

                    // Push the new frame as the currently active one.
                    pushFrameStack( frame_00563a3da54566a75fd89930386946fb_3 );

                    // Mark the frame object as in use, ref count 1 will be up for reuse.
                    assert( Py_REFCNT( frame_00563a3da54566a75fd89930386946fb_3 ) == 2 ); // Frame stack

                    // Framed code:
                    // Tried code:
                    loop_start_3:;
                    {
                        PyObject *tmp_next_source_3;
                        PyObject *tmp_assign_source_12;
                        CHECK_OBJECT( tmp_listcomp_2__$0 );
                        tmp_next_source_3 = tmp_listcomp_2__$0;
                        tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_3 );
                        if ( tmp_assign_source_12 == NULL )
                        {
                            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                            {

                                goto loop_end_3;
                            }
                            else
                            {

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                type_description_2 = "oo";
                                exception_lineno = 561;
                                goto try_except_handler_6;
                            }
                        }

                        {
                            PyObject *old = tmp_listcomp_2__iter_value_0;
                            tmp_listcomp_2__iter_value_0 = tmp_assign_source_12;
                            Py_XDECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_assign_source_13;
                        CHECK_OBJECT( tmp_listcomp_2__iter_value_0 );
                        tmp_assign_source_13 = tmp_listcomp_2__iter_value_0;
                        {
                            PyObject *old = outline_1_var_p_name;
                            outline_1_var_p_name = tmp_assign_source_13;
                            Py_INCREF( outline_1_var_p_name );
                            Py_XDECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_append_list_2;
                        PyObject *tmp_append_value_2;
                        PyObject *tmp_subscribed_name_9;
                        PyObject *tmp_source_name_9;
                        PyObject *tmp_subscript_name_9;
                        CHECK_OBJECT( tmp_listcomp_2__contraction );
                        tmp_append_list_2 = tmp_listcomp_2__contraction;
                        CHECK_OBJECT( var_marker );
                        tmp_source_name_9 = var_marker;
                        tmp_subscribed_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_points );
                        if ( tmp_subscribed_name_9 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_2 = "oo";
                            goto try_except_handler_6;
                        }
                        CHECK_OBJECT( outline_1_var_p_name );
                        tmp_subscript_name_9 = outline_1_var_p_name;
                        tmp_append_value_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
                        Py_DECREF( tmp_subscribed_name_9 );
                        if ( tmp_append_value_2 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_2 = "oo";
                            goto try_except_handler_6;
                        }
                        assert( PyList_Check( tmp_append_list_2 ) );
                        tmp_res = PyList_Append( tmp_append_list_2, tmp_append_value_2 );
                        Py_DECREF( tmp_append_value_2 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 561;
                            type_description_2 = "oo";
                            goto try_except_handler_6;
                        }
                    }
                    if ( CONSIDER_THREADING() == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 561;
                        type_description_2 = "oo";
                        goto try_except_handler_6;
                    }
                    goto loop_start_3;
                    loop_end_3:;
                    CHECK_OBJECT( tmp_listcomp_2__contraction );
                    tmp_right_name_3 = tmp_listcomp_2__contraction;
                    Py_INCREF( tmp_right_name_3 );
                    goto try_return_handler_6;
                    // tried codes exits in all cases
                    NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
                    return NULL;
                    // Return handler code:
                    try_return_handler_6:;
                    CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
                    Py_DECREF( tmp_listcomp_2__$0 );
                    tmp_listcomp_2__$0 = NULL;

                    CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
                    Py_DECREF( tmp_listcomp_2__contraction );
                    tmp_listcomp_2__contraction = NULL;

                    Py_XDECREF( tmp_listcomp_2__iter_value_0 );
                    tmp_listcomp_2__iter_value_0 = NULL;

                    goto frame_return_exit_2;
                    // Exception handler code:
                    try_except_handler_6:;
                    exception_keeper_type_3 = exception_type;
                    exception_keeper_value_3 = exception_value;
                    exception_keeper_tb_3 = exception_tb;
                    exception_keeper_lineno_3 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
                    Py_DECREF( tmp_listcomp_2__$0 );
                    tmp_listcomp_2__$0 = NULL;

                    CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
                    Py_DECREF( tmp_listcomp_2__contraction );
                    tmp_listcomp_2__contraction = NULL;

                    Py_XDECREF( tmp_listcomp_2__iter_value_0 );
                    tmp_listcomp_2__iter_value_0 = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_3;
                    exception_value = exception_keeper_value_3;
                    exception_tb = exception_keeper_tb_3;
                    exception_lineno = exception_keeper_lineno_3;

                    goto frame_exception_exit_3;
                    // End of try:

#if 0
                    RESTORE_FRAME_EXCEPTION( frame_00563a3da54566a75fd89930386946fb_3 );
#endif

                    // Put the previous frame back on top.
                    popFrameStack();

                    goto frame_no_exception_2;

                    frame_return_exit_2:;
#if 0
                    RESTORE_FRAME_EXCEPTION( frame_00563a3da54566a75fd89930386946fb_3 );
#endif

                    // Put the previous frame back on top.
                    popFrameStack();

                    goto try_return_handler_5;

                    frame_exception_exit_3:;

#if 0
                    RESTORE_FRAME_EXCEPTION( frame_00563a3da54566a75fd89930386946fb_3 );
#endif

                    if ( exception_tb == NULL )
                    {
                        exception_tb = MAKE_TRACEBACK( frame_00563a3da54566a75fd89930386946fb_3, exception_lineno );
                    }
                    else if ( exception_tb->tb_frame != &frame_00563a3da54566a75fd89930386946fb_3->m_frame )
                    {
                        exception_tb = ADD_TRACEBACK( exception_tb, frame_00563a3da54566a75fd89930386946fb_3, exception_lineno );
                    }

                    // Attachs locals to frame if any.
                    Nuitka_Frame_AttachLocals(
                        (struct Nuitka_FrameObject *)frame_00563a3da54566a75fd89930386946fb_3,
                        type_description_2,
                        outline_1_var_p_name,
                        var_marker
                    );


                    // Release cached frame.
                    if ( frame_00563a3da54566a75fd89930386946fb_3 == cache_frame_00563a3da54566a75fd89930386946fb_3 )
                    {
                        Py_DECREF( frame_00563a3da54566a75fd89930386946fb_3 );
                    }
                    cache_frame_00563a3da54566a75fd89930386946fb_3 = NULL;

                    assertFrameObject( frame_00563a3da54566a75fd89930386946fb_3 );

                    // Put the previous frame back on top.
                    popFrameStack();

                    // Return the error.
                    goto nested_frame_exit_2;

                    frame_no_exception_2:;
                    goto skip_nested_handling_2;
                    nested_frame_exit_2:;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_5;
                    skip_nested_handling_2:;
                    // tried codes exits in all cases
                    NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
                    return NULL;
                    // Return handler code:
                    try_return_handler_5:;
                    Py_XDECREF( outline_1_var_p_name );
                    outline_1_var_p_name = NULL;

                    goto outline_result_2;
                    // Exception handler code:
                    try_except_handler_5:;
                    exception_keeper_type_4 = exception_type;
                    exception_keeper_value_4 = exception_value;
                    exception_keeper_tb_4 = exception_tb;
                    exception_keeper_lineno_4 = exception_lineno;
                    exception_type = NULL;
                    exception_value = NULL;
                    exception_tb = NULL;
                    exception_lineno = 0;

                    Py_XDECREF( outline_1_var_p_name );
                    outline_1_var_p_name = NULL;

                    // Re-raise.
                    exception_type = exception_keeper_type_4;
                    exception_value = exception_keeper_value_4;
                    exception_tb = exception_keeper_tb_4;
                    exception_lineno = exception_keeper_lineno_4;

                    goto outline_exception_2;
                    // End of try:
                    // Return statement must have exited already.
                    NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
                    return NULL;
                    outline_exception_2:;
                    exception_lineno = 561;
                    goto try_except_handler_4;
                    outline_result_2:;
                    tmp_dictset_value = BINARY_OPERATION_ADD_LIST_OBJECT( tmp_left_name_3, tmp_right_name_3 );
                    Py_DECREF( tmp_left_name_3 );
                    Py_DECREF( tmp_right_name_3 );
                    if ( tmp_dictset_value == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 561;
                        type_description_1 = "ooooooooo";
                        goto try_except_handler_4;
                    }
                    CHECK_OBJECT( var_draw_queue );
                    tmp_dictset_dict = var_draw_queue;
                    CHECK_OBJECT( var_marker );
                    tmp_source_name_10 = var_marker;
                    tmp_dictset_key = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_name );
                    if ( tmp_dictset_key == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_dictset_value );

                        exception_lineno = 561;
                        type_description_1 = "ooooooooo";
                        goto try_except_handler_4;
                    }
                    tmp_res = PyDict_SetItem( tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value );
                    Py_DECREF( tmp_dictset_value );
                    Py_DECREF( tmp_dictset_key );
                    if ( tmp_res != 0 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 561;
                        type_description_1 = "ooooooooo";
                        goto try_except_handler_4;
                    }
                }
                if ( CONSIDER_THREADING() == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 560;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_4;
                }
                goto loop_start_2;
                loop_end_2:;
                goto try_end_1;
                // Exception handler code:
                try_except_handler_4:;
                exception_keeper_type_5 = exception_type;
                exception_keeper_value_5 = exception_value;
                exception_keeper_tb_5 = exception_tb;
                exception_keeper_lineno_5 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_for_loop_1__iter_value );
                tmp_for_loop_1__iter_value = NULL;

                CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                Py_DECREF( tmp_for_loop_1__for_iterator );
                tmp_for_loop_1__for_iterator = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_5;
                exception_value = exception_keeper_value_5;
                exception_tb = exception_keeper_tb_5;
                exception_lineno = exception_keeper_lineno_5;

                goto frame_exception_exit_1;
                // End of try:
                try_end_1:;
                Py_XDECREF( tmp_for_loop_1__iter_value );
                tmp_for_loop_1__iter_value = NULL;

                CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                Py_DECREF( tmp_for_loop_1__for_iterator );
                tmp_for_loop_1__for_iterator = NULL;

                goto branch_end_3;
                branch_no_3:;
                {
                    PyObject *tmp_assign_source_14;
                    tmp_assign_source_14 = PyList_New( 0 );
                    {
                        PyObject *old = var_draw_queue;
                        assert( old != NULL );
                        var_draw_queue = tmp_assign_source_14;
                        Py_DECREF( old );
                    }

                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_4;
        if ( var_draw_queue == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "draw_queue" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 564;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_iter_arg_4 = var_draw_queue;
        tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_4 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 564;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_2__for_iterator == NULL );
        tmp_for_loop_2__for_iterator = tmp_assign_source_15;
    }
    // Tried code:
    loop_start_4:;
    {
        PyObject *tmp_next_source_4;
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_4 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_4 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_4;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooo";
                exception_lineno = 564;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_17 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_mrk_name;
            var_mrk_name = tmp_assign_source_17;
            Py_INCREF( var_mrk_name );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_subscribed_name_10;
        PyObject *tmp_subscribed_name_11;
        PyObject *tmp_subscript_name_10;
        PyObject *tmp_subscript_name_11;
        if ( var_draw_queue == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "draw_queue" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 565;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }

        tmp_subscribed_name_11 = var_draw_queue;
        CHECK_OBJECT( var_mrk_name );
        tmp_subscript_name_10 = var_mrk_name;
        tmp_subscribed_name_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_10 );
        if ( tmp_subscribed_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 565;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        tmp_subscript_name_11 = const_int_0;
        tmp_assign_source_18 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_10, tmp_subscript_name_11, 0 );
        Py_DECREF( tmp_subscribed_name_10 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 565;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = var_color;
            var_color = tmp_assign_source_18;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_5;
        PyObject *tmp_subscribed_name_12;
        PyObject *tmp_subscribed_name_13;
        PyObject *tmp_subscript_name_12;
        PyObject *tmp_subscript_name_13;
        if ( var_draw_queue == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "draw_queue" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }

        tmp_subscribed_name_13 = var_draw_queue;
        CHECK_OBJECT( var_mrk_name );
        tmp_subscript_name_12 = var_mrk_name;
        tmp_subscribed_name_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_13, tmp_subscript_name_12 );
        if ( tmp_subscribed_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 566;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        tmp_subscript_name_13 = const_slice_int_pos_1_none_none;
        tmp_iter_arg_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_12, tmp_subscript_name_13 );
        Py_DECREF( tmp_subscribed_name_12 );
        if ( tmp_iter_arg_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 566;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_5 );
        Py_DECREF( tmp_iter_arg_5 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 566;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        {
            PyObject *old = tmp_for_loop_3__for_iterator;
            tmp_for_loop_3__for_iterator = tmp_assign_source_19;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_5:;
    {
        PyObject *tmp_next_source_5;
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_5 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_5 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_5;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooo";
                exception_lineno = 566;
                goto try_except_handler_8;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_assign_source_21 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_point;
            var_point = tmp_assign_source_21;
            Py_INCREF( var_point );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_name_4;
        PyObject *tmp_source_name_13;
        PyObject *tmp_right_name_4;
        PyObject *tmp_left_name_5;
        PyObject *tmp_source_name_14;
        PyObject *tmp_right_name_5;
        PyObject *tmp_left_name_6;
        PyObject *tmp_source_name_15;
        PyObject *tmp_right_name_6;
        PyObject *tmp_left_name_7;
        PyObject *tmp_source_name_16;
        PyObject *tmp_right_name_7;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_12 = par_self;
        tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_JpgCanvas );
        if ( tmp_source_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_create_oval );
        Py_DECREF( tmp_source_name_11 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        CHECK_OBJECT( var_point );
        tmp_source_name_13 = var_point;
        tmp_left_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_x );
        if ( tmp_left_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_right_name_4 = const_int_pos_3;
        tmp_tuple_element_1 = BINARY_OPERATION_SUB( tmp_left_name_4, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_4 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_args_name_1 = PyTuple_New( 4 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_point );
        tmp_source_name_14 = var_point;
        tmp_left_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_y );
        if ( tmp_left_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_right_name_5 = const_int_pos_3;
        tmp_tuple_element_1 = BINARY_OPERATION_SUB( tmp_left_name_5, tmp_right_name_5 );
        Py_DECREF( tmp_left_name_5 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( var_point );
        tmp_source_name_15 = var_point;
        tmp_left_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_x );
        if ( tmp_left_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_right_name_6 = const_int_pos_3;
        tmp_tuple_element_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_6, tmp_right_name_6 );
        Py_DECREF( tmp_left_name_6 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        PyTuple_SET_ITEM( tmp_args_name_1, 2, tmp_tuple_element_1 );
        CHECK_OBJECT( var_point );
        tmp_source_name_16 = var_point;
        tmp_left_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_y );
        if ( tmp_left_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        tmp_right_name_7 = const_int_pos_3;
        tmp_tuple_element_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_7, tmp_right_name_7 );
        Py_DECREF( tmp_left_name_7 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        PyTuple_SET_ITEM( tmp_args_name_1, 3, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_tags;
        CHECK_OBJECT( var_mrk_name );
        tmp_dict_value_1 = var_mrk_name;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_fill;
        CHECK_OBJECT( var_color );
        tmp_dict_value_2 = var_color;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_e3e76553c866db3adc7baac9e4d6d91e->m_frame.f_lineno = 567;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 567;
            type_description_1 = "ooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 566;
        type_description_1 = "ooooooooo";
        goto try_except_handler_8;
    }
    goto loop_start_5;
    loop_end_5:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_7;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 564;
        type_description_1 = "ooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e3e76553c866db3adc7baac9e4d6d91e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_3;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e3e76553c866db3adc7baac9e4d6d91e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e3e76553c866db3adc7baac9e4d6d91e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e3e76553c866db3adc7baac9e4d6d91e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e3e76553c866db3adc7baac9e4d6d91e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e3e76553c866db3adc7baac9e4d6d91e,
        type_description_1,
        par_self,
        par_m_name,
        par_mode,
        var_draw_queue,
        var_p_name,
        var_marker,
        var_mrk_name,
        var_color,
        var_point
    );


    // Release cached frame.
    if ( frame_e3e76553c866db3adc7baac9e4d6d91e == cache_frame_e3e76553c866db3adc7baac9e4d6d91e )
    {
        Py_DECREF( frame_e3e76553c866db3adc7baac9e4d6d91e );
    }
    cache_frame_e3e76553c866db3adc7baac9e4d6d91e = NULL;

    assertFrameObject( frame_e3e76553c866db3adc7baac9e4d6d91e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_3:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_m_name );
    Py_DECREF( par_m_name );
    par_m_name = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;

    Py_XDECREF( var_draw_queue );
    var_draw_queue = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_mrk_name );
    var_mrk_name = NULL;

    Py_XDECREF( var_color );
    var_color = NULL;

    Py_XDECREF( var_point );
    var_point = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_m_name );
    Py_DECREF( par_m_name );
    par_m_name = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;

    Py_XDECREF( var_draw_queue );
    var_draw_queue = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_mrk_name );
    var_mrk_name = NULL;

    Py_XDECREF( var_color );
    var_color = NULL;

    Py_XDECREF( var_point );
    var_point = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_48_draw_marker );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_49_recalculate_points_positions( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fold = python_pars[ 1 ];
    PyObject *var_marker = NULL;
    PyObject *var_p_name = NULL;
    PyObject *var_x = NULL;
    PyObject *var_y = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_b5ce2a2876be695820399f7da656c505;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_b5ce2a2876be695820399f7da656c505 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b5ce2a2876be695820399f7da656c505, codeobj_b5ce2a2876be695820399f7da656c505, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b5ce2a2876be695820399f7da656c505 = cache_frame_b5ce2a2876be695820399f7da656c505;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b5ce2a2876be695820399f7da656c505 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b5ce2a2876be695820399f7da656c505 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_self );
        tmp_iter_arg_1 = par_self;
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 578;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_marker;
            var_marker = tmp_assign_source_3;
            Py_INCREF( var_marker );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( var_marker );
        tmp_source_name_1 = var_marker;
        tmp_iter_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_points );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 579;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 579;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 579;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_6 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_p_name;
            var_p_name = tmp_assign_source_6;
            Py_INCREF( var_p_name );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_2 = par_self;
        CHECK_OBJECT( var_marker );
        tmp_source_name_4 = var_marker;
        tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_name );
        if ( tmp_subscript_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_source_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_points );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_p_name );
        tmp_subscript_name_2 = var_p_name;
        tmp_source_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_iter_arg_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_coordinates );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_7 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 580;
            type_description_1 = "oooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooo";
            exception_lineno = 580;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooo";
            exception_lineno = 580;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooo";
                    exception_lineno = 580;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooo";
            exception_lineno = 580;
            goto try_except_handler_5;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_4;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_x;
            var_x = tmp_assign_source_10;
            Py_INCREF( var_x );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_y;
            var_y = tmp_assign_source_11;
            Py_INCREF( var_y );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_a_round );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_a_round );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "a_round" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( var_x );
        tmp_left_name_1 = var_x;
        CHECK_OBJECT( par_fold );
        tmp_right_name_1 = par_fold;
        tmp_args_element_name_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        frame_b5ce2a2876be695820399f7da656c505->m_frame.f_lineno = 581;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_4 = par_self;
        CHECK_OBJECT( var_marker );
        tmp_source_name_6 = var_marker;
        tmp_subscript_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_name );
        if ( tmp_subscript_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_1 );

            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_source_name_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_3 );
        Py_DECREF( tmp_subscript_name_3 );
        if ( tmp_source_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_1 );

            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_points );
        Py_DECREF( tmp_source_name_5 );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_1 );

            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( var_p_name );
        tmp_subscript_name_4 = var_p_name;
        tmp_assattr_target_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_assattr_target_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_1 );

            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_x, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_target_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 581;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_source_name_7;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_source_name_8;
        PyObject *tmp_subscript_name_6;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_a_round );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_a_round );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "a_round" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( var_y );
        tmp_left_name_2 = var_y;
        CHECK_OBJECT( par_fold );
        tmp_right_name_2 = par_fold;
        tmp_args_element_name_2 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        frame_b5ce2a2876be695820399f7da656c505->m_frame.f_lineno = 582;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_6 = par_self;
        CHECK_OBJECT( var_marker );
        tmp_source_name_8 = var_marker;
        tmp_subscript_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_name );
        if ( tmp_subscript_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_2 );

            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_source_name_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_5 );
        Py_DECREF( tmp_subscript_name_5 );
        if ( tmp_source_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_2 );

            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_points );
        Py_DECREF( tmp_source_name_7 );
        if ( tmp_subscribed_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_2 );

            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( var_p_name );
        tmp_subscript_name_6 = var_p_name;
        tmp_assattr_target_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_6 );
        Py_DECREF( tmp_subscribed_name_5 );
        if ( tmp_assattr_target_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_2 );

            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_y, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_target_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 582;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 579;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 578;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_all_saved, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 583;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b5ce2a2876be695820399f7da656c505 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b5ce2a2876be695820399f7da656c505 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b5ce2a2876be695820399f7da656c505, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b5ce2a2876be695820399f7da656c505->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b5ce2a2876be695820399f7da656c505, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b5ce2a2876be695820399f7da656c505,
        type_description_1,
        par_self,
        par_fold,
        var_marker,
        var_p_name,
        var_x,
        var_y
    );


    // Release cached frame.
    if ( frame_b5ce2a2876be695820399f7da656c505 == cache_frame_b5ce2a2876be695820399f7da656c505 )
    {
        Py_DECREF( frame_b5ce2a2876be695820399f7da656c505 );
    }
    cache_frame_b5ce2a2876be695820399f7da656c505 = NULL;

    assertFrameObject( frame_b5ce2a2876be695820399f7da656c505 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_49_recalculate_points_positions );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fold );
    Py_DECREF( par_fold );
    par_fold = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fold );
    Py_DECREF( par_fold );
    par_fold = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    Py_XDECREF( var_p_name );
    var_p_name = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_49_recalculate_points_positions );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_50_save_markers( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_filename = NULL;
    PyObject *var_wfile = NULL;
    PyObject *var_meta = NULL;
    PyObject *var_marker = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_cd4b778f360947e189967d105c8a312a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_cd4b778f360947e189967d105c8a312a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cd4b778f360947e189967d105c8a312a, codeobj_cd4b778f360947e189967d105c8a312a, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cd4b778f360947e189967d105c8a312a = cache_frame_cd4b778f360947e189967d105c8a312a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cd4b778f360947e189967d105c8a312a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cd4b778f360947e189967d105c8a312a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_fd );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fd );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "fd" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 586;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_asksaveasfilename );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 586;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = DEEP_COPY( const_dict_7a96c67f653e4bbdc849976097e96fb5 );
        frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 586;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 586;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_filename == NULL );
        var_filename = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_filename );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_filename );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 587;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_open_filename_1;
            PyObject *tmp_open_mode_1;
            PyObject *tmp_open_encoding_1;
            CHECK_OBJECT( var_filename );
            tmp_open_filename_1 = var_filename;
            tmp_open_mode_1 = const_str_plain_w;
            tmp_open_encoding_1 = const_str_digest_c075052d723d6707083e869a0e3659bb;
            tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, tmp_open_encoding_1, NULL, NULL, NULL, NULL );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 588;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__source == NULL );
            tmp_with_1__source = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_2 = tmp_with_1__source;
            tmp_called_name_2 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___enter__ );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 588;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 588;
            tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
            Py_DECREF( tmp_called_name_2 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 588;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__enter == NULL );
            tmp_with_1__enter = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_3 = tmp_with_1__source;
            tmp_assign_source_4 = LOOKUP_SPECIAL( tmp_source_name_3, const_str_plain___exit__ );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 588;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__exit == NULL );
            tmp_with_1__exit = tmp_assign_source_4;
        }
        {
            nuitka_bool tmp_assign_source_5;
            tmp_assign_source_5 = NUITKA_BOOL_TRUE;
            tmp_with_1__indicator = tmp_assign_source_5;
        }
        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_with_1__enter );
            tmp_assign_source_6 = tmp_with_1__enter;
            assert( var_wfile == NULL );
            Py_INCREF( tmp_assign_source_6 );
            var_wfile = tmp_assign_source_6;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_6;
            tmp_source_name_4 = const_str_digest_18dba6422046979b1801ec5903c968d0;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_format );
            assert( !(tmp_called_name_3 == NULL) );
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__actual_zoom );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 589;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__file_name );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 589;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 589;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 589;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            assert( var_meta == NULL );
            var_meta = tmp_assign_source_7;
        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( var_meta );
            tmp_called_instance_2 = var_meta;
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 590;
            tmp_called_instance_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_91_str_chr_123_tuple, 0 ) );

            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 590;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 590;
            tmp_assign_source_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_93_str_chr_125_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 590;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = var_meta;
                assert( old != NULL );
                var_meta = tmp_assign_source_8;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( var_wfile );
            tmp_called_instance_3 = var_wfile;
            CHECK_OBJECT( var_meta );
            tmp_args_element_name_3 = var_meta;
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 591;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_write, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 591;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_self );
            tmp_iter_arg_1 = par_self;
            tmp_assign_source_9 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 592;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_9;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_10 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_10 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooo";
                    exception_lineno = 592;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_10;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_11 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_marker;
                var_marker = tmp_assign_source_11;
                Py_INCREF( var_marker );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_7;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_unicode_arg_1;
            CHECK_OBJECT( var_wfile );
            tmp_source_name_7 = var_wfile;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_write );
            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 593;
                type_description_1 = "ooooo";
                goto try_except_handler_5;
            }
            CHECK_OBJECT( var_marker );
            tmp_unicode_arg_1 = var_marker;
            tmp_args_element_name_4 = PyObject_Unicode( tmp_unicode_arg_1 );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 593;
                type_description_1 = "ooooo";
                goto try_except_handler_5;
            }
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 593;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 593;
                type_description_1 = "ooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 592;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_1;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_4;
        // End of try:
        try_end_1:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_all_saved, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 594;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 595;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_config_buttons );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 595;
                type_description_1 = "ooooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_2 == NULL )
        {
            exception_keeper_tb_2 = MAKE_TRACEBACK( frame_cd4b778f360947e189967d105c8a312a, exception_keeper_lineno_2 );
        }
        else if ( exception_keeper_lineno_2 != 0 )
        {
            exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_cd4b778f360947e189967d105c8a312a, exception_keeper_lineno_2 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
        PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
        PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_1 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 588;
                type_description_1 = "ooooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_assign_source_12;
                tmp_assign_source_12 = NUITKA_BOOL_FALSE;
                tmp_with_1__indicator = tmp_assign_source_12;
            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_called_name_5;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_args_element_name_7;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_5 = tmp_with_1__exit;
                tmp_args_element_name_5 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_6 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_7 = EXC_TRACEBACK(PyThreadState_GET());
                frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 588;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
                    tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
                }

                if ( tmp_operand_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 588;
                    type_description_1 = "ooooo";
                    goto try_except_handler_6;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                Py_DECREF( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 588;
                    type_description_1 = "ooooo";
                    goto try_except_handler_6;
                }
                tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 588;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_cd4b778f360947e189967d105c8a312a->m_frame) frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooooo";
                goto try_except_handler_6;
                branch_no_3:;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 588;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_cd4b778f360947e189967d105c8a312a->m_frame) frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooo";
            goto try_except_handler_6;
            branch_end_2:;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_3;
        // End of try:
        try_end_3:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_2;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_50_save_markers );
        return NULL;
        // End of try:
        try_end_2:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_4;
            nuitka_bool tmp_compexpr_left_2;
            nuitka_bool tmp_compexpr_right_2;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_2 = tmp_with_1__indicator;
            tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
            tmp_condition_result_4 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_6;
                PyObject *tmp_call_result_4;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_6 = tmp_with_1__exit;
                frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 588;
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    Py_DECREF( exception_keeper_type_4 );
                    Py_XDECREF( exception_keeper_value_4 );
                    Py_XDECREF( exception_keeper_tb_4 );

                    exception_lineno = 588;
                    type_description_1 = "ooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            branch_no_4:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_2;
        // End of try:
        try_end_4:;
        {
            nuitka_bool tmp_condition_result_5;
            nuitka_bool tmp_compexpr_left_3;
            nuitka_bool tmp_compexpr_right_3;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_3 = tmp_with_1__indicator;
            tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
            tmp_condition_result_5 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_call_result_5;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_7 = tmp_with_1__exit;
                frame_cd4b778f360947e189967d105c8a312a->m_frame.f_lineno = 588;
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 588;
                    type_description_1 = "ooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            branch_no_5:;
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        Py_XDECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        Py_XDECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_1;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_with_1__source );
        Py_DECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
        Py_DECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
        Py_DECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd4b778f360947e189967d105c8a312a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd4b778f360947e189967d105c8a312a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cd4b778f360947e189967d105c8a312a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cd4b778f360947e189967d105c8a312a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cd4b778f360947e189967d105c8a312a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cd4b778f360947e189967d105c8a312a,
        type_description_1,
        par_self,
        var_filename,
        var_wfile,
        var_meta,
        var_marker
    );


    // Release cached frame.
    if ( frame_cd4b778f360947e189967d105c8a312a == cache_frame_cd4b778f360947e189967d105c8a312a )
    {
        Py_DECREF( frame_cd4b778f360947e189967d105c8a312a );
    }
    cache_frame_cd4b778f360947e189967d105c8a312a = NULL;

    assertFrameObject( frame_cd4b778f360947e189967d105c8a312a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_50_save_markers );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_filename );
    Py_DECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_wfile );
    var_wfile = NULL;

    Py_XDECREF( var_meta );
    var_meta = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_wfile );
    var_wfile = NULL;

    Py_XDECREF( var_meta );
    var_meta = NULL;

    Py_XDECREF( var_marker );
    var_marker = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_50_save_markers );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl___main__$$$function_51_restore_markers( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_filename = NULL;
    PyObject *var_lfile = NULL;
    PyObject *var_data = NULL;
    PyObject *var_meta = NULL;
    PyObject *var_body = NULL;
    PyObject *var_rzf = NULL;
    PyObject *var_buffer = NULL;
    PyObject *var_value = NULL;
    PyObject *var_rfn = NULL;
    PyObject *var_answ = NULL;
    PyObject *var_sfname = NULL;
    PyObject *var_s_f_n = NULL;
    PyObject *var_proceed = NULL;
    PyObject *var_line = NULL;
    PyObject *var_name = NULL;
    PyObject *var_color = NULL;
    PyObject *var_pline = NULL;
    PyObject *var_coordinates = NULL;
    PyObject *var_new_name = NULL;
    PyObject *var_x = NULL;
    PyObject *var_y = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_19de68df3db709326c639c242a9d6fb6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    bool tmp_result;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    static struct Nuitka_FrameObject *cache_frame_19de68df3db709326c639c242a9d6fb6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_19de68df3db709326c639c242a9d6fb6, codeobj_19de68df3db709326c639c242a9d6fb6, module___main__, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_19de68df3db709326c639c242a9d6fb6 = cache_frame_19de68df3db709326c639c242a9d6fb6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_19de68df3db709326c639c242a9d6fb6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_19de68df3db709326c639c242a9d6fb6 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_fd );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_fd );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "fd" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 598;
            type_description_1 = "ooooooooooNoooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 598;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_askopenfilename );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 598;
            type_description_1 = "ooooooooooNoooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_filename == NULL );
        var_filename = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_filename );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_filename );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 599;
            type_description_1 = "ooooooooooNoooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_open_filename_1;
            PyObject *tmp_open_mode_1;
            CHECK_OBJECT( var_filename );
            tmp_open_filename_1 = var_filename;
            tmp_open_mode_1 = const_str_plain_r;
            tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 600;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__source == NULL );
            tmp_with_1__source = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_1 = tmp_with_1__source;
            tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 600;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_2;
            }
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 600;
            tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 600;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__enter == NULL );
            tmp_with_1__enter = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_2 = tmp_with_1__source;
            tmp_assign_source_4 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 600;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__exit == NULL );
            tmp_with_1__exit = tmp_assign_source_4;
        }
        {
            nuitka_bool tmp_assign_source_5;
            tmp_assign_source_5 = NUITKA_BOOL_TRUE;
            tmp_with_1__indicator = tmp_assign_source_5;
        }
        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_with_1__enter );
            tmp_assign_source_6 = tmp_with_1__enter;
            assert( var_lfile == NULL );
            Py_INCREF( tmp_assign_source_6 );
            var_lfile = tmp_assign_source_6;
        }
        // Tried code:
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( var_lfile );
            tmp_called_instance_2 = var_lfile;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 602;
            tmp_assign_source_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_read );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 602;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            assert( var_data == NULL );
            var_data = tmp_assign_source_7;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_name_1;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( var_data );
            tmp_source_name_3 = var_data;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_split );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 603;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_6;
            }
            tmp_args_name_1 = const_tuple_str_chr_64_tuple;
            tmp_kw_name_1 = PyDict_Copy( const_dict_53232a9b0f1c9c3739814e5eff6d249e );
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 603;
            tmp_subscribed_name_1 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 603;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_6;
            }
            tmp_subscript_name_1 = const_slice_int_pos_1_none_none;
            tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 603;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_8 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 603;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_8;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooNoooooooooooo";
                exception_lineno = 603;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_9;
        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_10 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooNoooooooooooo";
                exception_lineno = 603;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_10;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooNoooooooooooo";
                        exception_lineno = 603;
                        goto try_except_handler_7;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooooNoooooooooooo";
                exception_lineno = 603;
                goto try_except_handler_7;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_6;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_5;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_11 = tmp_tuple_unpack_1__element_1;
            assert( var_meta == NULL );
            Py_INCREF( tmp_assign_source_11 );
            var_meta = tmp_assign_source_11;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_12 = tmp_tuple_unpack_1__element_2;
            assert( var_body == NULL );
            Py_INCREF( tmp_assign_source_12 );
            var_body = tmp_assign_source_12;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assign_source_13;
            tmp_assign_source_13 = const_int_0;
            assert( var_rzf == NULL );
            Py_INCREF( tmp_assign_source_13 );
            var_rzf = tmp_assign_source_13;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = const_str_digest_1779fdfe54bac779d90ced3fbb05c75d;
            CHECK_OBJECT( var_meta );
            tmp_compexpr_right_1 = var_meta;
            tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 606;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_14;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT( var_meta );
                tmp_called_instance_3 = var_meta;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 607;
                tmp_subscribed_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_digest_1779fdfe54bac779d90ced3fbb05c75d_tuple, 0 ) );

                if ( tmp_subscribed_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 607;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_subscript_name_2 = const_int_pos_1;
                tmp_assign_source_14 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
                Py_DECREF( tmp_subscribed_name_2 );
                if ( tmp_assign_source_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 607;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                assert( var_buffer == NULL );
                var_buffer = tmp_assign_source_14;
            }
            {
                PyObject *tmp_assign_source_15;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_4;
                PyObject *tmp_args_element_name_1;
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                PyObject *tmp_subscript_name_3;
                CHECK_OBJECT( var_buffer );
                tmp_source_name_4 = var_buffer;
                tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_split );
                if ( tmp_called_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_compexpr_left_2 = const_str_chr_59;
                CHECK_OBJECT( var_buffer );
                tmp_compexpr_right_2 = var_buffer;
                tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_3 );

                    exception_lineno = 608;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_3 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_1;
                }
                else
                {
                    goto condexpr_false_1;
                }
                condexpr_true_1:;
                tmp_args_element_name_1 = const_str_chr_59;
                goto condexpr_end_1;
                condexpr_false_1:;
                tmp_args_element_name_1 = const_str_chr_125;
                condexpr_end_1:;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 608;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_subscribed_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                }

                Py_DECREF( tmp_called_name_3 );
                if ( tmp_subscribed_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_subscript_name_3 = const_int_0;
                tmp_assign_source_15 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
                Py_DECREF( tmp_subscribed_name_3 );
                if ( tmp_assign_source_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                assert( var_value == NULL );
                var_value = tmp_assign_source_15;
            }
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_called_name_4;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_2;
                int tmp_truth_name_2;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_is_number );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_is_number );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "is_number" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 609;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_called_name_4 = tmp_mvar_value_2;
                CHECK_OBJECT( var_value );
                tmp_args_element_name_2 = var_value;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 609;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 609;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_truth_name_2 = CHECK_IF_TRUE( tmp_call_result_1 );
                if ( tmp_truth_name_2 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_call_result_1 );

                    exception_lineno = 609;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_call_result_1 );
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_16;
                    PyObject *tmp_float_arg_1;
                    CHECK_OBJECT( var_value );
                    tmp_float_arg_1 = var_value;
                    tmp_assign_source_16 = TO_FLOAT( tmp_float_arg_1 );
                    if ( tmp_assign_source_16 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 610;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_rzf;
                        assert( old != NULL );
                        var_rzf = tmp_assign_source_16;
                        Py_DECREF( old );
                    }

                }
                branch_no_3:;
            }
            branch_no_2:;
        }
        {
            PyObject *tmp_assign_source_17;
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_subscript_name_5;
            tmp_compexpr_left_3 = const_str_digest_2665ea63e56456e34828ec2461179dc3;
            CHECK_OBJECT( var_meta );
            tmp_compexpr_right_3 = var_meta;
            tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 611;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_5 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_2;
            }
            else
            {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            CHECK_OBJECT( var_meta );
            tmp_called_instance_5 = var_meta;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 611;
            tmp_subscribed_name_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_digest_2665ea63e56456e34828ec2461179dc3_tuple, 0 ) );

            if ( tmp_subscribed_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 611;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_subscript_name_4 = const_int_pos_1;
            tmp_called_instance_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_4, 1 );
            Py_DECREF( tmp_subscribed_name_5 );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 611;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 611;
            tmp_subscribed_name_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_125_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_subscribed_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 611;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_subscript_name_5 = const_int_0;
            tmp_assign_source_17 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_5, 0 );
            Py_DECREF( tmp_subscribed_name_4 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 611;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            tmp_assign_source_17 = const_str_empty;
            Py_INCREF( tmp_assign_source_17 );
            condexpr_end_2:;
            assert( var_rfn == NULL );
            var_rfn = tmp_assign_source_17;
        }
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_name_3;
            tmp_called_instance_6 = const_str_digest_00172c2c0d2413c7b279dec91fcb7085;
            CHECK_OBJECT( var_rfn );
            tmp_args_element_name_3 = var_rfn;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 615;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_assign_source_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_format, call_args );
            }

            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 615;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            assert( var_answ == NULL );
            var_answ = tmp_assign_source_18;
        }
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_subscribed_name_6;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_subscript_name_6;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_path );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_path );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "path" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 616;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_7 = tmp_mvar_value_3;
            CHECK_OBJECT( var_rfn );
            tmp_args_element_name_4 = var_rfn;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 616;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_subscribed_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_split, call_args );
            }

            if ( tmp_subscribed_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 616;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_subscript_name_6 = const_int_pos_1;
            tmp_assign_source_19 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 1 );
            Py_DECREF( tmp_subscribed_name_6 );
            if ( tmp_assign_source_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 616;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            assert( var_sfname == NULL );
            var_sfname = tmp_assign_source_19;
        }
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_subscribed_name_7;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_source_name_6;
            PyObject *tmp_subscript_name_7;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_path );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_path );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "path" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 617;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }

            tmp_source_name_5 = tmp_mvar_value_4;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_split );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 617;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__file_name );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 617;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 617;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_subscribed_name_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_subscribed_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 617;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_subscript_name_7 = const_int_pos_1;
            tmp_assign_source_20 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 1 );
            Py_DECREF( tmp_subscribed_name_7 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 617;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            assert( var_s_f_n == NULL );
            var_s_f_n = tmp_assign_source_20;
        }
        {
            PyObject *tmp_assign_source_21;
            nuitka_bool tmp_condition_result_6;
            int tmp_and_left_truth_1;
            nuitka_bool tmp_and_left_value_1;
            nuitka_bool tmp_and_right_value_1;
            PyObject *tmp_source_name_7;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_3;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__file_name );
            if ( tmp_attribute_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 619;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_1 );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_1 );

                exception_lineno = 619;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_and_left_value_1 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_1 );
            tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_1 == 1 )
            {
                goto and_right_1;
            }
            else
            {
                goto and_left_1;
            }
            and_right_1:;
            CHECK_OBJECT( var_sfname );
            tmp_compexpr_left_4 = var_sfname;
            CHECK_OBJECT( var_s_f_n );
            tmp_compexpr_right_4 = var_s_f_n;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 619;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_6 = tmp_and_right_value_1;
            goto and_end_1;
            and_left_1:;
            tmp_condition_result_6 = tmp_and_left_value_1;
            and_end_1:;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_3;
            }
            else
            {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_messagebox );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_messagebox );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "messagebox" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 619;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_8 = tmp_mvar_value_5;
            tmp_args_element_name_6 = const_str_digest_2ca36c7a190a81e4db49e8c4a6ddb2f6;
            CHECK_OBJECT( var_answ );
            tmp_args_element_name_7 = var_answ;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 619;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
                tmp_assign_source_21 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_askyesno, call_args );
            }

            if ( tmp_assign_source_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 619;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_assign_source_21 = Py_True;
            Py_INCREF( tmp_assign_source_21 );
            condexpr_end_3:;
            assert( var_proceed == NULL );
            var_proceed = tmp_assign_source_21;
        }
        {
            nuitka_bool tmp_condition_result_7;
            int tmp_truth_name_4;
            CHECK_OBJECT( var_proceed );
            tmp_truth_name_4 = CHECK_IF_TRUE( var_proceed );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 620;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_7 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                nuitka_bool tmp_condition_result_8;
                int tmp_and_left_truth_2;
                nuitka_bool tmp_and_left_value_2;
                nuitka_bool tmp_and_right_value_2;
                int tmp_truth_name_5;
                int tmp_and_left_truth_3;
                nuitka_bool tmp_and_left_value_3;
                nuitka_bool tmp_and_right_value_3;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                PyObject *tmp_source_name_8;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                if ( var_rzf == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rzf" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_truth_name_5 = CHECK_IF_TRUE( var_rzf );
                if ( tmp_truth_name_5 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_and_left_value_2 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_and_left_truth_2 == 1 )
                {
                    goto and_right_2;
                }
                else
                {
                    goto and_left_2;
                }
                and_right_2:;
                if ( var_rzf == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rzf" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_compexpr_left_5 = var_rzf;
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__actual_zoom );
                if ( tmp_compexpr_right_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                Py_DECREF( tmp_compexpr_right_5 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_and_left_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_and_left_truth_3 == 1 )
                {
                    goto and_right_3;
                }
                else
                {
                    goto and_left_3;
                }
                and_right_3:;
                CHECK_OBJECT( var_sfname );
                tmp_compexpr_left_6 = var_sfname;
                CHECK_OBJECT( var_s_f_n );
                tmp_compexpr_right_6 = var_s_f_n;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 621;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_right_value_2 = tmp_and_right_value_3;
                goto and_end_3;
                and_left_3:;
                tmp_and_right_value_2 = tmp_and_left_value_3;
                and_end_3:;
                tmp_condition_result_8 = tmp_and_right_value_2;
                goto and_end_2;
                and_left_2:;
                tmp_condition_result_8 = tmp_and_left_value_2;
                and_end_2:;
                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_5;
                }
                else
                {
                    goto branch_no_5;
                }
                branch_yes_5:;
                {
                    PyObject *tmp_called_name_6;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_call_result_2;
                    PyObject *tmp_kw_name_2;
                    PyObject *tmp_dict_key_1;
                    PyObject *tmp_dict_value_1;
                    PyObject *tmp_left_name_1;
                    PyObject *tmp_right_name_1;
                    PyObject *tmp_source_name_10;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_9 = par_self;
                    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_zoom );
                    if ( tmp_called_name_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 622;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }
                    tmp_dict_key_1 = const_str_plain_zf;
                    if ( var_rzf == NULL )
                    {
                        Py_DECREF( tmp_called_name_6 );
                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "rzf" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 622;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }

                    tmp_left_name_1 = var_rzf;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_10 = par_self;
                    tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__actual_zoom );
                    if ( tmp_right_name_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_6 );

                        exception_lineno = 622;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }
                    tmp_dict_value_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_1, tmp_right_name_1 );
                    Py_DECREF( tmp_right_name_1 );
                    if ( tmp_dict_value_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_6 );

                        exception_lineno = 622;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }
                    tmp_kw_name_2 = _PyDict_NewPresized( 1 );
                    tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
                    Py_DECREF( tmp_dict_value_1 );
                    assert( !(tmp_res != 0) );
                    frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 622;
                    tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_6, tmp_kw_name_2 );
                    Py_DECREF( tmp_called_name_6 );
                    Py_DECREF( tmp_kw_name_2 );
                    if ( tmp_call_result_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 622;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_5;
                    }
                    Py_DECREF( tmp_call_result_2 );
                }
                branch_no_5:;
            }
            {
                PyObject *tmp_assign_source_22;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_called_instance_9;
                CHECK_OBJECT( var_body );
                tmp_called_instance_9 = var_body;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 624;
                tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_64_tuple, 0 ) );

                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 624;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_assign_source_22 = MAKE_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 624;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                assert( tmp_for_loop_1__for_iterator == NULL );
                tmp_for_loop_1__for_iterator = tmp_assign_source_22;
            }
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_23;
                CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                tmp_assign_source_23 = ITERATOR_NEXT( tmp_next_source_1 );
                if ( tmp_assign_source_23 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_1;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "ooooooooooNoooooooooooo";
                        exception_lineno = 624;
                        goto try_except_handler_8;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_1__iter_value;
                    tmp_for_loop_1__iter_value = tmp_assign_source_23;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_24;
                CHECK_OBJECT( tmp_for_loop_1__iter_value );
                tmp_assign_source_24 = tmp_for_loop_1__iter_value;
                {
                    PyObject *old = var_line;
                    var_line = tmp_assign_source_24;
                    Py_INCREF( var_line );
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_iter_arg_3;
                PyObject *tmp_called_instance_10;
                CHECK_OBJECT( var_line );
                tmp_called_instance_10 = var_line;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 625;
                tmp_iter_arg_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_58_tuple, 0 ) );

                if ( tmp_iter_arg_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 625;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_assign_source_25 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
                Py_DECREF( tmp_iter_arg_3 );
                if ( tmp_assign_source_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 625;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_9;
                }
                {
                    PyObject *old = tmp_tuple_unpack_2__source_iter;
                    tmp_tuple_unpack_2__source_iter = tmp_assign_source_25;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_26;
                PyObject *tmp_unpack_3;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_26 = UNPACK_NEXT( tmp_unpack_3, 0, 3 );
                if ( tmp_assign_source_26 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 625;
                    goto try_except_handler_10;
                }
                {
                    PyObject *old = tmp_tuple_unpack_2__element_1;
                    tmp_tuple_unpack_2__element_1 = tmp_assign_source_26;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_27;
                PyObject *tmp_unpack_4;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_27 = UNPACK_NEXT( tmp_unpack_4, 1, 3 );
                if ( tmp_assign_source_27 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 625;
                    goto try_except_handler_10;
                }
                {
                    PyObject *old = tmp_tuple_unpack_2__element_2;
                    tmp_tuple_unpack_2__element_2 = tmp_assign_source_27;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_28;
                PyObject *tmp_unpack_5;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_28 = UNPACK_NEXT( tmp_unpack_5, 2, 3 );
                if ( tmp_assign_source_28 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 625;
                    goto try_except_handler_10;
                }
                {
                    PyObject *old = tmp_tuple_unpack_2__element_3;
                    tmp_tuple_unpack_2__element_3 = tmp_assign_source_28;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooNoooooooooooo";
                            exception_lineno = 625;
                            goto try_except_handler_10;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 625;
                    goto try_except_handler_10;
                }
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto try_except_handler_9;
            // End of try:
            try_end_3:;
            goto try_end_4;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto try_except_handler_8;
            // End of try:
            try_end_4:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            {
                PyObject *tmp_assign_source_29;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                tmp_assign_source_29 = tmp_tuple_unpack_2__element_1;
                {
                    PyObject *old = var_name;
                    var_name = tmp_assign_source_29;
                    Py_INCREF( var_name );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            {
                PyObject *tmp_assign_source_30;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                tmp_assign_source_30 = tmp_tuple_unpack_2__element_2;
                {
                    PyObject *old = var_color;
                    var_color = tmp_assign_source_30;
                    Py_INCREF( var_color );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            {
                PyObject *tmp_assign_source_31;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
                tmp_assign_source_31 = tmp_tuple_unpack_2__element_3;
                {
                    PyObject *old = var_pline;
                    var_pline = tmp_assign_source_31;
                    Py_INCREF( var_pline );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            {
                PyObject *tmp_assign_source_32;
                {
                    PyObject *tmp_assign_source_33;
                    PyObject *tmp_iter_arg_4;
                    PyObject *tmp_called_instance_11;
                    PyObject *tmp_called_name_7;
                    PyObject *tmp_mvar_value_6;
                    PyObject *tmp_args_name_2;
                    PyObject *tmp_tuple_element_1;
                    PyObject *tmp_kw_name_3;
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_strfilter );

                    if (unlikely( tmp_mvar_value_6 == NULL ))
                    {
                        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_strfilter );
                    }

                    if ( tmp_mvar_value_6 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "strfilter" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 626;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_8;
                    }

                    tmp_called_name_7 = tmp_mvar_value_6;
                    CHECK_OBJECT( var_pline );
                    tmp_tuple_element_1 = var_pline;
                    tmp_args_name_2 = PyTuple_New( 1 );
                    Py_INCREF( tmp_tuple_element_1 );
                    PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_1 );
                    tmp_kw_name_3 = PyDict_Copy( const_dict_8a45eee56207aabbbd2d15d9a021b84a );
                    frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 626;
                    tmp_called_instance_11 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_2, tmp_kw_name_3 );
                    Py_DECREF( tmp_args_name_2 );
                    Py_DECREF( tmp_kw_name_3 );
                    if ( tmp_called_instance_11 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 626;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_8;
                    }
                    frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 626;
                    tmp_iter_arg_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_59_tuple, 0 ) );

                    Py_DECREF( tmp_called_instance_11 );
                    if ( tmp_iter_arg_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 626;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_8;
                    }
                    tmp_assign_source_33 = MAKE_ITERATOR( tmp_iter_arg_4 );
                    Py_DECREF( tmp_iter_arg_4 );
                    if ( tmp_assign_source_33 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 626;
                        type_description_1 = "ooooooooooNoooooooooooo";
                        goto try_except_handler_8;
                    }
                    {
                        PyObject *old = tmp_genexpr_1__$0;
                        tmp_genexpr_1__$0 = tmp_assign_source_33;
                        Py_XDECREF( old );
                    }

                }
                // Tried code:
                tmp_assign_source_32 = __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_maker();

                ((struct Nuitka_GeneratorObject *)tmp_assign_source_32)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


                goto try_return_handler_11;
                // tried codes exits in all cases
                NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
                return NULL;
                // Return handler code:
                try_return_handler_11:;
                CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                Py_DECREF( tmp_genexpr_1__$0 );
                tmp_genexpr_1__$0 = NULL;

                goto outline_result_1;
                // End of try:
                CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                Py_DECREF( tmp_genexpr_1__$0 );
                tmp_genexpr_1__$0 = NULL;

                // Return statement must have exited already.
                NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
                return NULL;
                outline_result_1:;
                {
                    PyObject *old = var_coordinates;
                    var_coordinates = tmp_assign_source_32;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_called_instance_12;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_args_element_name_9;
                CHECK_OBJECT( par_self );
                tmp_called_instance_12 = par_self;
                CHECK_OBJECT( var_name );
                tmp_args_element_name_8 = var_name;
                CHECK_OBJECT( var_color );
                tmp_args_element_name_9 = var_color;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 627;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
                    tmp_assign_source_34 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_12, const_str_plain_reg_marker, call_args );
                }

                if ( tmp_assign_source_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 627;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_8;
                }
                {
                    PyObject *old = var_new_name;
                    var_new_name = tmp_assign_source_34;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_35;
                PyObject *tmp_iter_arg_5;
                CHECK_OBJECT( var_coordinates );
                tmp_iter_arg_5 = var_coordinates;
                tmp_assign_source_35 = MAKE_ITERATOR( tmp_iter_arg_5 );
                if ( tmp_assign_source_35 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 629;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_8;
                }
                {
                    PyObject *old = tmp_for_loop_2__for_iterator;
                    tmp_for_loop_2__for_iterator = tmp_assign_source_35;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            loop_start_2:;
            {
                PyObject *tmp_next_source_2;
                PyObject *tmp_assign_source_36;
                CHECK_OBJECT( tmp_for_loop_2__for_iterator );
                tmp_next_source_2 = tmp_for_loop_2__for_iterator;
                tmp_assign_source_36 = ITERATOR_NEXT( tmp_next_source_2 );
                if ( tmp_assign_source_36 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_2;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "ooooooooooNoooooooooooo";
                        exception_lineno = 629;
                        goto try_except_handler_12;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_2__iter_value;
                    tmp_for_loop_2__iter_value = tmp_assign_source_36;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_37;
                PyObject *tmp_iter_arg_6;
                CHECK_OBJECT( tmp_for_loop_2__iter_value );
                tmp_iter_arg_6 = tmp_for_loop_2__iter_value;
                tmp_assign_source_37 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                if ( tmp_assign_source_37 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 629;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_13;
                }
                {
                    PyObject *old = tmp_tuple_unpack_3__source_iter;
                    tmp_tuple_unpack_3__source_iter = tmp_assign_source_37;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_38;
                PyObject *tmp_unpack_6;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_38 = UNPACK_NEXT( tmp_unpack_6, 0, 2 );
                if ( tmp_assign_source_38 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 629;
                    goto try_except_handler_14;
                }
                {
                    PyObject *old = tmp_tuple_unpack_3__element_1;
                    tmp_tuple_unpack_3__element_1 = tmp_assign_source_38;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_39;
                PyObject *tmp_unpack_7;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_7 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_39 = UNPACK_NEXT( tmp_unpack_7, 1, 2 );
                if ( tmp_assign_source_39 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 629;
                    goto try_except_handler_14;
                }
                {
                    PyObject *old = tmp_tuple_unpack_3__element_2;
                    tmp_tuple_unpack_3__element_2 = tmp_assign_source_39;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_iterator_name_3;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooNoooooooooooo";
                            exception_lineno = 629;
                            goto try_except_handler_14;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooNoooooooooooo";
                    exception_lineno = 629;
                    goto try_except_handler_14;
                }
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_14:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto try_except_handler_13;
            // End of try:
            try_end_5:;
            goto try_end_6;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_6 = exception_type;
            exception_keeper_value_6 = exception_value;
            exception_keeper_tb_6 = exception_tb;
            exception_keeper_lineno_6 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_6;
            exception_value = exception_keeper_value_6;
            exception_tb = exception_keeper_tb_6;
            exception_lineno = exception_keeper_lineno_6;

            goto try_except_handler_12;
            // End of try:
            try_end_6:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            {
                PyObject *tmp_assign_source_40;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                tmp_assign_source_40 = tmp_tuple_unpack_3__element_1;
                {
                    PyObject *old = var_x;
                    var_x = tmp_assign_source_40;
                    Py_INCREF( var_x );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            {
                PyObject *tmp_assign_source_41;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                tmp_assign_source_41 = tmp_tuple_unpack_3__element_2;
                {
                    PyObject *old = var_y;
                    var_y = tmp_assign_source_41;
                    Py_INCREF( var_y );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_source_name_11;
                PyObject *tmp_subscribed_name_8;
                PyObject *tmp_subscript_name_8;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_int_arg_1;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_int_arg_2;
                CHECK_OBJECT( par_self );
                tmp_subscribed_name_8 = par_self;
                CHECK_OBJECT( var_new_name );
                tmp_subscript_name_8 = var_new_name;
                tmp_source_name_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
                if ( tmp_source_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 630;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_add_point );
                Py_DECREF( tmp_source_name_11 );
                if ( tmp_called_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 630;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_12;
                }
                CHECK_OBJECT( var_x );
                tmp_int_arg_1 = var_x;
                tmp_args_element_name_10 = PyNumber_Int( tmp_int_arg_1 );
                if ( tmp_args_element_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );

                    exception_lineno = 630;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_12;
                }
                CHECK_OBJECT( var_y );
                tmp_int_arg_2 = var_y;
                tmp_args_element_name_11 = PyNumber_Int( tmp_int_arg_2 );
                if ( tmp_args_element_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );
                    Py_DECREF( tmp_args_element_name_10 );

                    exception_lineno = 630;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_12;
                }
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 630;
                {
                    PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
                }

                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_element_name_10 );
                Py_DECREF( tmp_args_element_name_11 );
                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 630;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_12;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 629;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_12;
            }
            goto loop_start_2;
            loop_end_2:;
            goto try_end_7;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_for_loop_2__iter_value );
            tmp_for_loop_2__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
            Py_DECREF( tmp_for_loop_2__for_iterator );
            tmp_for_loop_2__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_8;
            // End of try:
            try_end_7:;
            Py_XDECREF( tmp_for_loop_2__iter_value );
            tmp_for_loop_2__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
            Py_DECREF( tmp_for_loop_2__for_iterator );
            tmp_for_loop_2__for_iterator = NULL;

            {
                PyObject *tmp_called_name_9;
                PyObject *tmp_source_name_12;
                PyObject *tmp_call_result_4;
                PyObject *tmp_kw_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_draw_marker );
                if ( tmp_called_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 631;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_8;
                }
                tmp_kw_name_4 = PyDict_Copy( const_dict_e2fbe04220f86df988fb54d70c4d4b43 );
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 631;
                tmp_call_result_4 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_9, tmp_kw_name_4 );
                Py_DECREF( tmp_called_name_9 );
                Py_DECREF( tmp_kw_name_4 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 631;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_8;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 624;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_8;
            }
            goto loop_start_1;
            loop_end_1:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto try_except_handler_5;
            // End of try:
            try_end_8:;
            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            {
                PyObject *tmp_called_instance_13;
                PyObject *tmp_call_result_5;
                CHECK_OBJECT( par_self );
                tmp_called_instance_13 = par_self;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 632;
                tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_13, const_str_plain_list_markers );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 632;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_assattr_target_1;
                tmp_assattr_name_1 = Py_False;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_1 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_all_saved, tmp_assattr_name_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 633;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
            }
            {
                PyObject *tmp_called_instance_14;
                PyObject *tmp_call_result_6;
                CHECK_OBJECT( par_self );
                tmp_called_instance_14 = par_self;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 634;
                tmp_call_result_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_14, const_str_plain_config_buttons );
                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 634;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_no_4:;
        }
        goto try_end_9;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_9 == NULL )
        {
            exception_keeper_tb_9 = MAKE_TRACEBACK( frame_19de68df3db709326c639c242a9d6fb6, exception_keeper_lineno_9 );
        }
        else if ( exception_keeper_lineno_9 != 0 )
        {
            exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_19de68df3db709326c639c242a9d6fb6, exception_keeper_lineno_9 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
        PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        // Tried code:
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_a776a2e35d80570c0434d801d80ee1e0;
            frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 636;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_SyntaxError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 636;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooooNoooooooooooo";
            goto try_except_handler_15;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
        return NULL;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_4;
        // End of try:
        // End of try:
        try_end_9:;
        goto try_end_10;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_11 == NULL )
        {
            exception_keeper_tb_11 = MAKE_TRACEBACK( frame_19de68df3db709326c639c242a9d6fb6, exception_keeper_lineno_11 );
        }
        else if ( exception_keeper_lineno_11 != 0 )
        {
            exception_keeper_tb_11 = ADD_TRACEBACK( exception_keeper_tb_11, frame_19de68df3db709326c639c242a9d6fb6, exception_keeper_lineno_11 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_11, &exception_keeper_value_11, &exception_keeper_tb_11 );
        PyException_SetTraceback( exception_keeper_value_11, (PyObject *)exception_keeper_tb_11 );
        PUBLISH_EXCEPTION( &exception_keeper_type_11, &exception_keeper_value_11, &exception_keeper_tb_11 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            tmp_compexpr_left_7 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_7 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 600;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_16;
            }
            tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                nuitka_bool tmp_assign_source_42;
                tmp_assign_source_42 = NUITKA_BOOL_FALSE;
                tmp_with_1__indicator = tmp_assign_source_42;
            }
            {
                nuitka_bool tmp_condition_result_10;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_called_name_10;
                PyObject *tmp_args_element_name_12;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_args_element_name_14;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_10 = tmp_with_1__exit;
                tmp_args_element_name_12 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_13 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_14 = EXC_TRACEBACK(PyThreadState_GET());
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 600;
                {
                    PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14 };
                    tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_10, call_args );
                }

                if ( tmp_operand_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 600;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                Py_DECREF( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 600;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_condition_result_10 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 600;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_19de68df3db709326c639c242a9d6fb6->m_frame) frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooooooooooNoooooooooooo";
                goto try_except_handler_16;
                branch_no_7:;
            }
            goto branch_end_6;
            branch_no_6:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 600;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_19de68df3db709326c639c242a9d6fb6->m_frame) frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooooooNoooooooooooo";
            goto try_except_handler_16;
            branch_end_6:;
        }
        goto try_end_11;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_3;
        // End of try:
        try_end_11:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        goto try_end_10;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
        return NULL;
        // End of try:
        try_end_10:;
        goto try_end_12;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_11;
            nuitka_bool tmp_compexpr_left_8;
            nuitka_bool tmp_compexpr_right_8;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_8 = tmp_with_1__indicator;
            tmp_compexpr_right_8 = NUITKA_BOOL_TRUE;
            tmp_condition_result_11 = ( tmp_compexpr_left_8 == tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_called_name_11;
                PyObject *tmp_call_result_7;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_11 = tmp_with_1__exit;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 600;
                tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    Py_DECREF( exception_keeper_type_13 );
                    Py_XDECREF( exception_keeper_value_13 );
                    Py_XDECREF( exception_keeper_tb_13 );

                    exception_lineno = 600;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_8:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_2;
        // End of try:
        try_end_12:;
        {
            nuitka_bool tmp_condition_result_12;
            nuitka_bool tmp_compexpr_left_9;
            nuitka_bool tmp_compexpr_right_9;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_9 = tmp_with_1__indicator;
            tmp_compexpr_right_9 = NUITKA_BOOL_TRUE;
            tmp_condition_result_12 = ( tmp_compexpr_left_9 == tmp_compexpr_right_9 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_called_name_12;
                PyObject *tmp_call_result_8;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_12 = tmp_with_1__exit;
                frame_19de68df3db709326c639c242a9d6fb6->m_frame.f_lineno = 600;
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_12, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 600;
                    type_description_1 = "ooooooooooNoooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            branch_no_9:;
        }
        goto try_end_13;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        Py_XDECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        Py_XDECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto frame_exception_exit_1;
        // End of try:
        try_end_13:;
        CHECK_OBJECT( (PyObject *)tmp_with_1__source );
        Py_DECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
        Py_DECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
        Py_DECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_19de68df3db709326c639c242a9d6fb6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_19de68df3db709326c639c242a9d6fb6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_19de68df3db709326c639c242a9d6fb6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_19de68df3db709326c639c242a9d6fb6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_19de68df3db709326c639c242a9d6fb6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_19de68df3db709326c639c242a9d6fb6,
        type_description_1,
        par_self,
        var_filename,
        var_lfile,
        var_data,
        var_meta,
        var_body,
        var_rzf,
        var_buffer,
        var_value,
        var_rfn,
        NULL,
        var_answ,
        var_sfname,
        var_s_f_n,
        var_proceed,
        var_line,
        var_name,
        var_color,
        var_pline,
        var_coordinates,
        var_new_name,
        var_x,
        var_y
    );


    // Release cached frame.
    if ( frame_19de68df3db709326c639c242a9d6fb6 == cache_frame_19de68df3db709326c639c242a9d6fb6 )
    {
        Py_DECREF( frame_19de68df3db709326c639c242a9d6fb6 );
    }
    cache_frame_19de68df3db709326c639c242a9d6fb6 = NULL;

    assertFrameObject( frame_19de68df3db709326c639c242a9d6fb6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_filename );
    Py_DECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_lfile );
    var_lfile = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_meta );
    var_meta = NULL;

    Py_XDECREF( var_body );
    var_body = NULL;

    Py_XDECREF( var_rzf );
    var_rzf = NULL;

    Py_XDECREF( var_buffer );
    var_buffer = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_rfn );
    var_rfn = NULL;

    Py_XDECREF( var_answ );
    var_answ = NULL;

    Py_XDECREF( var_sfname );
    var_sfname = NULL;

    Py_XDECREF( var_s_f_n );
    var_s_f_n = NULL;

    Py_XDECREF( var_proceed );
    var_proceed = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_color );
    var_color = NULL;

    Py_XDECREF( var_pline );
    var_pline = NULL;

    Py_XDECREF( var_coordinates );
    var_coordinates = NULL;

    Py_XDECREF( var_new_name );
    var_new_name = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_filename );
    var_filename = NULL;

    Py_XDECREF( var_lfile );
    var_lfile = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_meta );
    var_meta = NULL;

    Py_XDECREF( var_body );
    var_body = NULL;

    Py_XDECREF( var_rzf );
    var_rzf = NULL;

    Py_XDECREF( var_buffer );
    var_buffer = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_rfn );
    var_rfn = NULL;

    Py_XDECREF( var_answ );
    var_answ = NULL;

    Py_XDECREF( var_sfname );
    var_sfname = NULL;

    Py_XDECREF( var_s_f_n );
    var_s_f_n = NULL;

    Py_XDECREF( var_proceed );
    var_proceed = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_color );
    var_color = NULL;

    Py_XDECREF( var_pline );
    var_pline = NULL;

    Py_XDECREF( var_coordinates );
    var_coordinates = NULL;

    Py_XDECREF( var_new_name );
    var_new_name = NULL;

    Py_XDECREF( var_x );
    var_x = NULL;

    Py_XDECREF( var_y );
    var_y = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_51_restore_markers );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_locals {
    PyObject *var_c;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *__main__$$$function_51_restore_markers$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_locals *generator_heap = (struct __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_c = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_83a35bf7b8d527b9648893b95e71fe58, module___main__, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 626;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_c;
            generator_heap->var_c = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_c );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_c );
        tmp_called_instance_1 = generator_heap->var_c;
        generator->m_frame->m_frame.f_lineno = 626;
        tmp_expression_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_44_tuple, 0 ) );

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 626;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 626;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 626;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_c
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_c );
    generator_heap->var_c = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_c );
    generator_heap->var_c = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *__main__$$$function_51_restore_markers$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_context,
        module___main__,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_45eb3e971e3b95fddc0f286f5b7bdca9,
#endif
        codeobj_83a35bf7b8d527b9648893b95e71fe58,
        1,
        sizeof(struct __main__$$$function_51_restore_markers$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl___main__$$$function_52_main( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_3bd0444e98b2d6ccc033e8b82127ccb8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3bd0444e98b2d6ccc033e8b82127ccb8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_3bd0444e98b2d6ccc033e8b82127ccb8, codeobj_3bd0444e98b2d6ccc033e8b82127ccb8, module___main__, 0 );
    frame_3bd0444e98b2d6ccc033e8b82127ccb8 = cache_frame_3bd0444e98b2d6ccc033e8b82127ccb8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3bd0444e98b2d6ccc033e8b82127ccb8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3bd0444e98b2d6ccc033e8b82127ccb8 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ObjectCounter );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ObjectCounter );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ObjectCounter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 648;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_3bd0444e98b2d6ccc033e8b82127ccb8->m_frame.f_lineno = 648;
        tmp_called_instance_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 648;

            goto frame_exception_exit_1;
        }
        frame_3bd0444e98b2d6ccc033e8b82127ccb8->m_frame.f_lineno = 648;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_start );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 648;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3bd0444e98b2d6ccc033e8b82127ccb8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3bd0444e98b2d6ccc033e8b82127ccb8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3bd0444e98b2d6ccc033e8b82127ccb8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3bd0444e98b2d6ccc033e8b82127ccb8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3bd0444e98b2d6ccc033e8b82127ccb8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3bd0444e98b2d6ccc033e8b82127ccb8,
        type_description_1
    );


    // Release cached frame.
    if ( frame_3bd0444e98b2d6ccc033e8b82127ccb8 == cache_frame_3bd0444e98b2d6ccc033e8b82127ccb8 )
    {
        Py_DECREF( frame_3bd0444e98b2d6ccc033e8b82127ccb8 );
    }
    cache_frame_3bd0444e98b2d6ccc033e8b82127ccb8 = NULL;

    assertFrameObject( frame_3bd0444e98b2d6ccc033e8b82127ccb8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto function_return_exit;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( __main__$$$function_52_main );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION___main__$$$function_10_add_point( PyObject *annotations )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_10_add_point,
        const_str_plain_add_point,
#if PYTHON_VERSION >= 300
        const_str_digest_03982a4b60c2466984ee18366852d28d,
#endif
        codeobj_b6ad20f8157965bc9190dc2cf549ef7f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        annotations,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_11_delete_point( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_11_delete_point,
        const_str_plain_delete_point,
#if PYTHON_VERSION >= 300
        const_str_digest_47756bc5cfe494056597c559a2bb8160,
#endif
        codeobj_ea2dc45aabc375cc0985145b68092107,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_12_namegen(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_12_namegen,
        const_str_plain_namegen,
#if PYTHON_VERSION >= 300
        const_str_digest_8af3a737307d555062afd7a55846c1c2,
#endif
        codeobj_10e5664f7147aa48ebd58e303d58d64d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_64f21f796b58f0181825b26e02898373,
#endif
        codeobj_fc50c94cc3ce74fac9e18c71da769a44,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_10_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_10_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_e5712b9e117201cf4ef39e1f907c2190,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_11_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_11_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_d32dd44607baab9ff4ec845c9e85fa38,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_12_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_12_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_5c2637fcdb4e4148e2112555d75df96c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_13_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_13_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_13acc59ade367ff2c72305c80a9ad1db,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_14_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_14_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_81fe453425470136de53052b8b5d2cfc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_15_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_15_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_5a4f49d4a689dfca3b0d0bef829e6e74,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_16_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_16_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_615958cbdcd5ba77bb7bd3f4c3a9f250,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_17_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_17_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_0396916f5d91e70e9ce022bec2a94f25,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_18_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_18_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_9eb2c242aa975a043a79c48514acfbe2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_19_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_19_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_dbf48a8b044c67f61b445f9edaf89f61,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_6179a74b43be2a79f261110af601a1d8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_20_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_20_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_4c77c948c5e57eadf44c9f712ef65481,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_21_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_21_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_c13c2c98256bbecc4767973a540e5729,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_22_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_22_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_d0c3b0fbe75c1187491841103b74e088,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_23_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_23_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_2ae5aee66bc783bb404fe06e053d6cf3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_24_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_24_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_29b42187ef986eae1f1a1688bdf32bba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_25_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_25_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_d945ec97314d2978adb7e4ecc0916009,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_26_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_26_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_05fc906c0588f7e117725864f391306c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_27_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_27_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_f78450d223e6fbdc5cb47d0d0172f473,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_28_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_28_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_ad10a616083812422069e1a160e73a91,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_2_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_20258b4d00d6883e23c28deed98177c9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_3_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_3_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_60adaa08deb7bb51ee9e1d7f87db2d2e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_4_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_4_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_1915abd295538b85adb96110a3ffcd81,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_5_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_5_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_863a1671359477bab0df6f7a770b4195,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_6_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_6_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_5ed4068f26894757e57b82c59e82b3f9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_7_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_7_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_8ebd3f823bc7c63e26ecd0134f5607a0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_8_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_8_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_a68246feddf0c0fedded079bc3c1a935,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_13___init__$$$function_9_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_13___init__$$$function_9_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_d3fb6ae7cd5556a17b400f86b1141af5,
#endif
        codeobj_b4a17be0c3e5c613963efae7a5065b73,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_14_start(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_14_start,
        const_str_plain_start,
#if PYTHON_VERSION >= 300
        const_str_digest_484045dd99bc1aa516b6975ab5488c88,
#endif
        codeobj_aae6779c8b6c4aa5639ef12110c659f9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_15_stop(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_15_stop,
        const_str_plain_stop,
#if PYTHON_VERSION >= 300
        const_str_digest_8cc96a3265a0db94293be0ddd7070477,
#endif
        codeobj_51fd03b412c69713fdca43197a4befc3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_16___len__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_16___len__,
        const_str_plain___len__,
#if PYTHON_VERSION >= 300
        const_str_digest_0b13918e89a11310bf797ee9b20559b9,
#endif
        codeobj_306ae42acea7e19776a0ffa12bf95616,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_17___contains__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_17___contains__,
        const_str_plain___contains__,
#if PYTHON_VERSION >= 300
        const_str_digest_8e041da51efee9ef74e9094d9c468ec6,
#endif
        codeobj_dfeb6940a35cfe855e683a38ee67468c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_17___contains__$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_17___contains__$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_3d7098de101b2d50ae06ab55dc3b69ef,
#endif
        codeobj_9aa7262a7417816a6cb57960342d3e7c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_18___getitem__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_18___getitem__,
        const_str_plain___getitem__,
#if PYTHON_VERSION >= 300
        const_str_digest_cad5af3a4e7798d6db01e37b19e0fe54,
#endif
        codeobj_f48487147fee7e31eb6d7087379f13f8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_18___getitem__$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_18___getitem__$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_12e1a80dd8270b38ec843d368ea4ac96,
#endif
        codeobj_04732c936e12ba8923892a44f621943f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_19___iter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_19___iter__,
        const_str_plain___iter__,
#if PYTHON_VERSION >= 300
        const_str_digest_479ed5f8e34c5b603066fce1b59c59d3,
#endif
        codeobj_aa15595a07904665550c439c24c442cb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_1___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_4fc0f3cb1ee2d65b94af894f9bd0869f,
#endif
        codeobj_d4944c88126375dcac2edbf204e19b57,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_20__index_of(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_20__index_of,
        const_str_plain__index_of,
#if PYTHON_VERSION >= 300
        const_str_digest_8edaab80aa908bbb404d0711f8c1a8c6,
#endif
        codeobj_9f609fa269289bcf1b79297665bdc200,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_20__index_of$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_20__index_of$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_978dfa8aaff5cd4268700ea5916fd762,
#endif
        codeobj_f6e016ed06d156761cdca4a3dfd85435,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_21_wipe(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_21_wipe,
        const_str_plain_wipe,
#if PYTHON_VERSION >= 300
        const_str_digest_91369a51db914682b7b489fb669b7d4a,
#endif
        codeobj_3c16bdab477ac61e4648571f59066c8f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_22_marker_select(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_22_marker_select,
        const_str_plain_marker_select,
#if PYTHON_VERSION >= 300
        const_str_digest_1d315cd69fb8867c96afa445af2e8202,
#endif
        codeobj_a3e089abf62f20c3c7c2fcee0a18e4e4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_23_grid_color_dialog(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_23_grid_color_dialog,
        const_str_plain_grid_color_dialog,
#if PYTHON_VERSION >= 300
        const_str_digest_2c78e6f04f9ce20dacd3b59e58a8cedb,
#endif
        codeobj_fc8a0ad495fd8a6c24d3588227fe8dba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_24_draw_grid_btn_action(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_24_draw_grid_btn_action,
        const_str_plain_draw_grid_btn_action,
#if PYTHON_VERSION >= 300
        const_str_digest_a7a395a6f5b786b2837acf466cf590f4,
#endif
        codeobj_06d7943efe45ad4d3bea7629bb034d6c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_25_redraw_grid(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_25_redraw_grid,
        const_str_plain_redraw_grid,
#if PYTHON_VERSION >= 300
        const_str_digest_f7ea88360407b5af8f2057be79d397f7,
#endif
        codeobj_2c886d5469f0d5cb2bfbae5db4226953,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_26_draw_grid( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_26_draw_grid,
        const_str_plain_draw_grid,
#if PYTHON_VERSION >= 300
        const_str_digest_06796b648e08ddbc99b55cf216966b9a,
#endif
        codeobj_96efac828c2ad4830615f0b05185ef73,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_27_reg_marker( PyObject *annotations )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_27_reg_marker,
        const_str_plain_reg_marker,
#if PYTHON_VERSION >= 300
        const_str_digest_79647c6567c1db57751208265588ef26,
#endif
        codeobj_1db7e7340eebefc5fadeb56dd4c3c657,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        annotations,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_28_dereg_marker(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_28_dereg_marker,
        const_str_plain_dereg_marker,
#if PYTHON_VERSION >= 300
        const_str_digest_6115d3419b96dfbdef52fc8cf0dfe523,
#endif
        codeobj_893f4d1d1c46326b9e5e29a86d292112,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_29_config_buttons(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_29_config_buttons,
        const_str_plain_config_buttons,
#if PYTHON_VERSION >= 300
        const_str_digest_45b66455e94b518712a40e6124dad7bc,
#endif
        codeobj_b84213c719d78f914fd3a822835e46e9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_2___str__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_2___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_fa6e19975889e039b20bacc6da76404b,
#endif
        codeobj_0f564916d75403bde61af54b601a300e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_30_list_markers(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_30_list_markers,
        const_str_plain_list_markers,
#if PYTHON_VERSION >= 300
        const_str_digest_58f35236723a163685990d21d3e8852f,
#endif
        codeobj_5cec786ff60c840a926e77af5ae11910,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_31_load_btn_action(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_31_load_btn_action,
        const_str_plain_load_btn_action,
#if PYTHON_VERSION >= 300
        const_str_digest_be0b7f707e2c7d3b2b6e31f01ac24601,
#endif
        codeobj_cdbdff9a801e5d6cc0a1ff37748eed35,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_32_add_btn_action(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_32_add_btn_action,
        const_str_plain_add_btn_action,
#if PYTHON_VERSION >= 300
        const_str_digest_2d6badb92fb03a65764e0b33d3000873,
#endif
        codeobj_1aa80365393d9c0d40eb735708031842,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_33_del_btn_action(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_33_del_btn_action,
        const_str_plain_del_btn_action,
#if PYTHON_VERSION >= 300
        const_str_digest_533c974ac3262d16e2fa6f5a14cda1ba,
#endif
        codeobj_0601cb44e1d3dbac1c9c1ed9bd64d329,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_34_edit_mt_item(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_34_edit_mt_item,
        const_str_plain_edit_mt_item,
#if PYTHON_VERSION >= 300
        const_str_digest_361dd1c8cba8cde0e72a5788da7e1786,
#endif
        codeobj_32920aa5f3b517db33ef7204959dae9a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_35_show_image(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_35_show_image,
        const_str_plain_show_image,
#if PYTHON_VERSION >= 300
        const_str_digest_7ac06338f0d3a3c40fdf3e9d84c9bb52,
#endif
        codeobj_f4c2ba195324edc8c1b7da3b00db9761,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_36_zoom_in(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_36_zoom_in,
        const_str_plain_zoom_in,
#if PYTHON_VERSION >= 300
        const_str_digest_c0c6b393b34855ffa199d0a9f4a999a9,
#endif
        codeobj_d167e93036e9996d422f18aaa3bedb57,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_37_zoom_out(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_37_zoom_out,
        const_str_plain_zoom_out,
#if PYTHON_VERSION >= 300
        const_str_digest_37874538785eccb7920bdd6b8b2cf7bc,
#endif
        codeobj_a78de3219b0cd1f28da91f2e11a39d19,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_38_zoom( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_38_zoom,
        const_str_plain_zoom,
#if PYTHON_VERSION >= 300
        const_str_digest_156f914c140602ab1fb5d0e18001e622,
#endif
        codeobj_b4e137898b984a693682ab5a9bc843a9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        const_str_digest_03941c600898473130bdd80b65ebc76b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_39_showxy(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_39_showxy,
        const_str_plain_showxy,
#if PYTHON_VERSION >= 300
        const_str_digest_83f55308ed344de463ffdc78f04a35bd,
#endif
        codeobj_353f723f7684e2d6c3de7645b7732a1d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_3___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_3___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_cc66b487c4c2e4e68f7098ebd678113a,
#endif
        codeobj_bd5fdcdfd0ce72c5e520d9d7231ee5bd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_40_show_zoom(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_40_show_zoom,
        const_str_plain_show_zoom,
#if PYTHON_VERSION >= 300
        const_str_digest_a5f219c7e8fd8991f91570be61d25fd7,
#endif
        codeobj_11662a9166233f3c1a50c68254e64daf,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_41_store_mouse_pos(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_41_store_mouse_pos,
        const_str_plain_store_mouse_pos,
#if PYTHON_VERSION >= 300
        const_str_digest_18185c3a907c423e15b284dfcd45864b,
#endif
        codeobj_e47322421c523655a14637d710d50322,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_42_scroll_canvas(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_42_scroll_canvas,
        const_str_plain_scroll_canvas,
#if PYTHON_VERSION >= 300
        const_str_digest_535da19c895faf339dd1db062192393d,
#endif
        codeobj_6b1c92a4ca51a735ca72bd2b3d6b667a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_43_place_marker_point(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_43_place_marker_point,
        const_str_plain_place_marker_point,
#if PYTHON_VERSION >= 300
        const_str_digest_1ed1bb1688ad4d64f6c436f196c95e52,
#endif
        codeobj_f2e61f5c817f824e5e1f9a37ef8331b3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_44_find_nearest,
        const_str_plain_find_nearest,
#if PYTHON_VERSION >= 300
        const_str_digest_c9dbca89b60e23dab81d05bd0125ba17,
#endif
        codeobj_f049f63b6d73a6fb1e74e05f9f07e3bd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_44_find_nearest$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_b5bc58a36ade8b28c32452d7a339d9ac,
#endif
        codeobj_e76650cc78ad456b9551ebe63c1cbd86,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_44_find_nearest$$$function_2_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_44_find_nearest$$$function_2_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_b5bc58a36ade8b28c32452d7a339d9ac,
#endif
        codeobj_45b689814bd4e3f025436fdcba32e0f5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        1
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_45_delete_nearest( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_45_delete_nearest,
        const_str_plain_delete_nearest,
#if PYTHON_VERSION >= 300
        const_str_digest_8c020ebcc4e366f17cbdf0ddaf8201a4,
#endif
        codeobj_6f7a4ccb51d7f6c845afac160b7fd6de,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_46_delete_covered( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_46_delete_covered,
        const_str_plain_delete_covered,
#if PYTHON_VERSION >= 300
        const_str_digest_ddb918f39efc5bec3b0745d2ee48459e,
#endif
        codeobj_28b089b36592534c770a1c41c4ac0f8d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_47_remove_marker_points(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_47_remove_marker_points,
        const_str_plain_remove_marker_points,
#if PYTHON_VERSION >= 300
        const_str_digest_dc166b1b7db229c019bf1e02a4bdd4be,
#endif
        codeobj_3da858d213a48bb919b6dc1fb8a74947,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_48_draw_marker( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_48_draw_marker,
        const_str_plain_draw_marker,
#if PYTHON_VERSION >= 300
        const_str_digest_1c24ecf31578f5606644bd45c32b4fad,
#endif
        codeobj_e3e76553c866db3adc7baac9e4d6d91e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        const_str_digest_52236fb712fbcfd75011618e94986a01,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_49_recalculate_points_positions( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_49_recalculate_points_positions,
        const_str_plain_recalculate_points_positions,
#if PYTHON_VERSION >= 300
        const_str_digest_99735502170c8addc93dd171d1203a59,
#endif
        codeobj_b5ce2a2876be695820399f7da656c505,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        const_str_digest_22a56652470931e1ca9fb48730e47674,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_4_coordinates(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_4_coordinates,
        const_str_plain_coordinates,
#if PYTHON_VERSION >= 300
        const_str_digest_4633380c9724e5dcec31fae1a6f4a03c,
#endif
        codeobj_3912294cfaee0b8a1e51595392aebe00,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_50_save_markers(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_50_save_markers,
        const_str_plain_save_markers,
#if PYTHON_VERSION >= 300
        const_str_digest_341f627abde4738a7ba7c80d7016af84,
#endif
        codeobj_cd4b778f360947e189967d105c8a312a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_51_restore_markers(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_51_restore_markers,
        const_str_plain_restore_markers,
#if PYTHON_VERSION >= 300
        const_str_digest_10a4fb838c96bd91726226a1df02e818,
#endif
        codeobj_19de68df3db709326c639c242a9d6fb6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_52_main(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_52_main,
        const_str_plain_main,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3bd0444e98b2d6ccc033e8b82127ccb8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        const_str_digest_abf8b776d50cfbab6678e38b6d16f548,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_5___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_5___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_3761902b939bcfae63ccb9e5c1056971,
#endif
        codeobj_b7f2c45e025ecfb4ad6ed378b33cbc9a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_6___str__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_6___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_fb2de3fccc9b5d08e8226ca8b84e5dec,
#endif
        codeobj_5093a7f2667b9fd6ee6de026537c4829,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_7_counter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_7_counter,
        const_str_plain_counter,
#if PYTHON_VERSION >= 300
        const_str_digest_f61b078e43e4a8b40b68a07b533a1ddb,
#endif
        codeobj_a1e1081c33ded1afeceb4b7992874b65,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_8__increment(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_8__increment,
        const_str_plain__increment,
#if PYTHON_VERSION >= 300
        const_str_digest_3b393deb6b662fcadc9d1af5a6e48b8e,
#endif
        codeobj_2b639762675c06ef3a512489999ce58c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION___main__$$$function_9__decrement(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl___main__$$$function_9__decrement,
        const_str_plain__decrement,
#if PYTHON_VERSION >= 300
        const_str_digest_9dff3e2111217dcf1806e50ab2da8459,
#endif
        codeobj_c18309fa505600f319d8328692f242e4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module___main__,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef___main__ =
{
    PyModuleDef_HEAD_INIT,
    "__main__",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( __main__ )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module___main__ );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("__main__: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("__main__: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("__main__: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in init__main__" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module___main__ = Py_InitModule4(
        "__main__",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module___main__ = PyModule_Create( &mdef___main__ );
#endif

    moduledict___main__ = MODULE_DICT( module___main__ );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict___main__,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict___main__,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict___main__,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict___main__,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module___main__ );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_plain___main__, module___main__ );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !1
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 1
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    PyObject *tmp_import_from_3__module = NULL;
    PyObject *tmp_import_from_4__module = NULL;
    struct Nuitka_FrameObject *frame_04215aac000759f635cebe6dea1aabd2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    bool tmp_result;
    PyObject *locals___main___15 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_7f08bde89c33459989b884612429b130_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7f08bde89c33459989b884612429b130_2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals___main___32 = NULL;
    struct Nuitka_FrameObject *frame_a3e864f72c756fbd7103569806094828_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a3e864f72c756fbd7103569806094828_3 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *locals___main___73 = NULL;
    struct Nuitka_FrameObject *frame_d34e7fa9d0a9a073e3e2919ce741ac99_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;

    // Module code.
    // Frame without reuse.
    frame_04215aac000759f635cebe6dea1aabd2 = MAKE_MODULE_FRAME( codeobj_04215aac000759f635cebe6dea1aabd2, module___main__ );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_04215aac000759f635cebe6dea1aabd2 );
    assert( Py_REFCNT( frame_04215aac000759f635cebe6dea1aabd2 ) == 2 );

    // Framed code:
    {
        PyObject *tmp_name_name_1;
        PyObject *tmp_level_name_1;
        PyObject *tmp_imported_value_1;
        tmp_name_name_1 = const_str_plain_site;
        tmp_level_name_1 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 1;
        tmp_imported_value_1 = IMPORT_MODULE_KW( tmp_name_name_1, NULL, NULL, NULL, tmp_level_name_1 );
        if ( tmp_imported_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_imported_value_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict___main__, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain___annotations__, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_tkinter;
        tmp_globals_name_1 = (PyObject *)moduledict___main__;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 2;
        tmp_assign_source_5 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 2;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_tkinter, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_tkinter;
        tmp_globals_name_2 = (PyObject *)moduledict___main__;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = const_tuple_str_plain_ttk_str_plain_messagebox_tuple;
        tmp_level_name_3 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 3;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_3 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_1__module == NULL );
        tmp_import_from_1__module = tmp_assign_source_6;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_1;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_1 = tmp_import_from_1__module;
        tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_ttk );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 3;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ttk, tmp_assign_source_7 );
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_2 = tmp_import_from_1__module;
        tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_messagebox );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 3;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_messagebox, tmp_assign_source_8 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_tkinter;
        tmp_globals_name_3 = (PyObject *)moduledict___main__;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = const_tuple_299e29199d09389d25700552944f1b9a_tuple;
        tmp_level_name_4 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 4;
        tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_4 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_2__module == NULL );
        tmp_import_from_2__module = tmp_assign_source_9;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_3 = tmp_import_from_2__module;
        tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_filedialog );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_fd, tmp_assign_source_10 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_4 = tmp_import_from_2__module;
        tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_colorchooser );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_cchoser, tmp_assign_source_11 );
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_5 = tmp_import_from_2__module;
        tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_simpledialog );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_simd, tmp_assign_source_12 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT( tmp_import_from_2__module );
        tmp_import_name_from_6 = tmp_import_from_2__module;
        tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_StringVar );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_StringVar, tmp_assign_source_13 );
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_2__module );
    Py_DECREF( tmp_import_from_2__module );
    tmp_import_from_2__module = NULL;

    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_PIL;
        tmp_globals_name_4 = (PyObject *)moduledict___main__;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = const_tuple_str_plain_Image_str_plain_ImageTk_tuple;
        tmp_level_name_5 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 5;
        tmp_assign_source_14 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_5 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 5;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_3__module == NULL );
        tmp_import_from_3__module = tmp_assign_source_14;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT( tmp_import_from_3__module );
        tmp_import_name_from_7 = tmp_import_from_3__module;
        tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_Image );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 5;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Image, tmp_assign_source_15 );
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT( tmp_import_from_3__module );
        tmp_import_name_from_8 = tmp_import_from_3__module;
        tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_ImageTk );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 5;

            goto try_except_handler_3;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ImageTk, tmp_assign_source_16 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_3__module );
    Py_DECREF( tmp_import_from_3__module );
    tmp_import_from_3__module = NULL;

    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_random;
        tmp_globals_name_5 = (PyObject *)moduledict___main__;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = const_tuple_str_plain_randint_tuple;
        tmp_level_name_6 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 6;
        tmp_import_name_from_9 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_6 );
        if ( tmp_import_name_from_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_17 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_randint );
        Py_DECREF( tmp_import_name_from_9 );
        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_randint, tmp_assign_source_17 );
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_platform;
        tmp_globals_name_6 = (PyObject *)moduledict___main__;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = const_tuple_str_plain_system_tuple;
        tmp_level_name_7 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 7;
        tmp_import_name_from_10 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_7 );
        if ( tmp_import_name_from_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_18 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_system );
        Py_DECREF( tmp_import_name_from_10 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_syst, tmp_assign_source_18 );
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_11;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = const_str_plain_os;
        tmp_globals_name_7 = (PyObject *)moduledict___main__;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = const_tuple_str_plain_path_tuple;
        tmp_level_name_8 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 11;
        tmp_import_name_from_11 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_8 );
        if ( tmp_import_name_from_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_19 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_path );
        Py_DECREF( tmp_import_name_from_11 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_path, tmp_assign_source_19 );
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_9;
        tmp_name_name_9 = const_str_digest_2c8a2582df54bd57ece92b8e178727af;
        tmp_globals_name_8 = (PyObject *)moduledict___main__;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = const_tuple_ec25bdef56334bb81af938720b0aedad_tuple;
        tmp_level_name_9 = const_int_0;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 12;
        tmp_assign_source_20 = IMPORT_MODULE5( tmp_name_name_9, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_9 );
        if ( tmp_assign_source_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_4__module == NULL );
        tmp_import_from_4__module = tmp_assign_source_20;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_import_name_from_12;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_12 = tmp_import_from_4__module;
        tmp_assign_source_21 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_distance );
        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_distance, tmp_assign_source_21 );
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_import_name_from_13;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_13 = tmp_import_from_4__module;
        tmp_assign_source_22 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_strfilter );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_strfilter, tmp_assign_source_22 );
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_import_name_from_14;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_14 = tmp_import_from_4__module;
        tmp_assign_source_23 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_n_repeat );
        if ( tmp_assign_source_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_n_repeat, tmp_assign_source_23 );
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_import_name_from_15;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_15 = tmp_import_from_4__module;
        tmp_assign_source_24 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_arithmetic_round );
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_a_round, tmp_assign_source_24 );
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_import_name_from_16;
        CHECK_OBJECT( tmp_import_from_4__module );
        tmp_import_name_from_16 = tmp_import_from_4__module;
        tmp_assign_source_25 = IMPORT_NAME( tmp_import_name_from_16, const_str_plain_is_number );
        if ( tmp_assign_source_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 12;

            goto try_except_handler_4;
        }
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_is_number, tmp_assign_source_25 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_4__module );
    Py_DECREF( tmp_import_from_4__module );
    tmp_import_from_4__module = NULL;

    {
        PyObject *tmp_assign_source_26;
        tmp_assign_source_26 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_26;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_5;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_1:;
        tmp_bases_name_1 = const_tuple_empty;
        tmp_assign_source_27 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_5;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_27;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_5;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_5;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_1 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_1, const_str_plain___prepare__ );
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_name_1;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_2 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___prepare__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 15;

                goto try_except_handler_5;
            }
            tmp_args_name_1 = const_tuple_str_plain_Point_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 15;
            tmp_assign_source_28 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            if ( tmp_assign_source_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 15;

                goto try_except_handler_5;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_28;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_3 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_3, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 15;

                goto try_except_handler_5;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_type_arg_1;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 15;

                    goto try_except_handler_5;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_1 = tmp_class_creation_1__prepared;
                tmp_source_name_4 = BUILTIN_TYPE1( tmp_type_arg_1 );
                assert( !(tmp_source_name_4 == NULL) );
                tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 15;

                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 15;

                    goto try_except_handler_5;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 15;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_29;
            tmp_assign_source_29 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_29;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_30;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals___main___15 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain___main__;
        tmp_res = PyObject_SetItem( locals___main___15, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_plain_Point;
        tmp_res = PyObject_SetItem( locals___main___15, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto try_except_handler_7;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_7f08bde89c33459989b884612429b130_2, codeobj_7f08bde89c33459989b884612429b130, module___main__, sizeof(void *) );
        frame_7f08bde89c33459989b884612429b130_2 = cache_frame_7f08bde89c33459989b884612429b130_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_7f08bde89c33459989b884612429b130_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_7f08bde89c33459989b884612429b130_2 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_str_empty_int_0_int_0_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_1___init__( tmp_defaults_1 );



            tmp_res = PyObject_SetItem( locals___main___15, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 16;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_2___str__(  );



        tmp_res = PyObject_SetItem( locals___main___15, const_str_plain___str__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 21;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_3___repr__(  );



        tmp_res = PyObject_SetItem( locals___main___15, const_str_plain___repr__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 24;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_2;
            tmp_res = MAPPING_HAS_ITEM( locals___main___15, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_5 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_2;
            }
            else
            {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            tmp_called_name_2 = PyObject_GetItem( locals___main___15, const_str_plain_property );

            if ( tmp_called_name_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_args_element_name_1 = MAKE_FUNCTION___main__$$$function_4_coordinates(  );



            frame_7f08bde89c33459989b884612429b130_2->m_frame.f_lineno = 27;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            tmp_called_name_3 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_2 = MAKE_FUNCTION___main__$$$function_4_coordinates(  );



            frame_7f08bde89c33459989b884612429b130_2->m_frame.f_lineno = 27;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_2:;
            tmp_res = PyObject_SetItem( locals___main___15, const_str_plain_coordinates, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 27;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_7f08bde89c33459989b884612429b130_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_7f08bde89c33459989b884612429b130_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_7f08bde89c33459989b884612429b130_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_7f08bde89c33459989b884612429b130_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_7f08bde89c33459989b884612429b130_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_7f08bde89c33459989b884612429b130_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame.
        if ( frame_7f08bde89c33459989b884612429b130_2 == cache_frame_7f08bde89c33459989b884612429b130_2 )
        {
            Py_DECREF( frame_7f08bde89c33459989b884612429b130_2 );
        }
        cache_frame_7f08bde89c33459989b884612429b130_2 = NULL;

        assertFrameObject( frame_7f08bde89c33459989b884612429b130_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_7;
        skip_nested_handling_1:;
        {
            PyObject *tmp_assign_source_31;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_4 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_2 = const_str_plain_Point;
            tmp_args_name_2 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
            tmp_tuple_element_2 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_2 );
            tmp_tuple_element_2 = locals___main___15;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_2 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 15;
            tmp_assign_source_31 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            if ( tmp_assign_source_31 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 15;

                goto try_except_handler_7;
            }
            assert( outline_0_var___class__ == NULL );
            outline_0_var___class__ = tmp_assign_source_31;
        }
        CHECK_OBJECT( outline_0_var___class__ );
        tmp_assign_source_30 = outline_0_var___class__;
        Py_INCREF( tmp_assign_source_30 );
        goto try_return_handler_7;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF( locals___main___15 );
        locals___main___15 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals___main___15 );
        locals___main___15 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
        Py_DECREF( outline_0_var___class__ );
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 15;
        goto try_except_handler_5;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Point, tmp_assign_source_30 );
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_32;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_3:;
        tmp_bases_name_2 = const_tuple_empty;
        tmp_assign_source_33 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_33;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_5 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_5, const_str_plain___prepare__ );
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_assign_source_34;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_6;
            PyObject *tmp_args_name_3;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_6 = tmp_class_creation_2__metaclass;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___prepare__ );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            tmp_args_name_3 = const_tuple_str_plain_Marker_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 32;
            tmp_assign_source_34 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_5 );
            if ( tmp_assign_source_34 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_34;
        }
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_7 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_7, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_3 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 32;

                    goto try_except_handler_8;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_3 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_2 = tmp_class_creation_2__prepared;
                tmp_source_name_8 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_8 == NULL) );
                tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_8 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 32;

                    goto try_except_handler_8;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_3 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 32;

                    goto try_except_handler_8;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 32;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_8;
            }
            branch_no_6:;
        }
        goto branch_end_5;
        branch_no_5:;
        {
            PyObject *tmp_assign_source_35;
            tmp_assign_source_35 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_35;
        }
        branch_end_5:;
    }
    {
        PyObject *tmp_assign_source_36;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals___main___32 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain___main__;
        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_10;
        }
        tmp_dictset_value = const_str_plain_Marker;
        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_10;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_a3e864f72c756fbd7103569806094828_3, codeobj_a3e864f72c756fbd7103569806094828, module___main__, sizeof(void *) );
        frame_a3e864f72c756fbd7103569806094828_3 = cache_frame_a3e864f72c756fbd7103569806094828_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_a3e864f72c756fbd7103569806094828_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_a3e864f72c756fbd7103569806094828_3 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = const_tuple_str_plain_marker_1_str_plain_green_int_0_tuple;
            Py_INCREF( tmp_defaults_2 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_5___init__( tmp_defaults_2 );



            tmp_res = PyObject_SetItem( locals___main___32, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 33;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_6___str__(  );



        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain___str__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 40;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_called_name_7;
            PyObject *tmp_args_element_name_4;
            tmp_res = MAPPING_HAS_ITEM( locals___main___32, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_10 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_4;
            }
            else
            {
                goto condexpr_false_4;
            }
            condexpr_true_4:;
            tmp_called_name_6 = PyObject_GetItem( locals___main___32, const_str_plain_property );

            if ( tmp_called_name_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_args_element_name_3 = MAKE_FUNCTION___main__$$$function_7_counter(  );



            frame_a3e864f72c756fbd7103569806094828_3->m_frame.f_lineno = 44;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_4;
            condexpr_false_4:;
            tmp_called_name_7 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_4 = MAKE_FUNCTION___main__$$$function_7_counter(  );



            frame_a3e864f72c756fbd7103569806094828_3->m_frame.f_lineno = 44;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
            }

            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_4:;
            tmp_res = PyObject_SetItem( locals___main___32, const_str_plain_counter, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 44;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_8__increment(  );



        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain__increment, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 48;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_9__decrement(  );



        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain__decrement, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 51;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_annotations_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            tmp_dict_key_1 = const_str_plain_x;
            tmp_dict_value_1 = PyObject_GetItem( locals___main___32, const_str_plain_int );

            if ( tmp_dict_value_1 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_dict_value_1 = (PyObject *)&PyLong_Type;
                Py_INCREF( tmp_dict_value_1 );
                }
            }

            tmp_annotations_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_annotations_1, tmp_dict_key_1, tmp_dict_value_1 );
            Py_DECREF( tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_y;
            tmp_dict_value_2 = PyObject_GetItem( locals___main___32, const_str_plain_int );

            if ( tmp_dict_value_2 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_dict_value_2 = (PyObject *)&PyLong_Type;
                Py_INCREF( tmp_dict_value_2 );
                }
            }

            tmp_res = PyDict_SetItem( tmp_annotations_1, tmp_dict_key_2, tmp_dict_value_2 );
            Py_DECREF( tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_10_add_point( tmp_annotations_1 );



            tmp_res = PyObject_SetItem( locals___main___32, const_str_plain_add_point, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 54;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = const_tuple_str_empty_tuple;
            Py_INCREF( tmp_defaults_3 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_11_delete_point( tmp_defaults_3 );



            tmp_res = PyObject_SetItem( locals___main___32, const_str_plain_delete_point, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_12_namegen(  );



        tmp_res = PyObject_SetItem( locals___main___32, const_str_plain_namegen, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 65;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_a3e864f72c756fbd7103569806094828_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_a3e864f72c756fbd7103569806094828_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_a3e864f72c756fbd7103569806094828_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_a3e864f72c756fbd7103569806094828_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_a3e864f72c756fbd7103569806094828_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_a3e864f72c756fbd7103569806094828_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if ( frame_a3e864f72c756fbd7103569806094828_3 == cache_frame_a3e864f72c756fbd7103569806094828_3 )
        {
            Py_DECREF( frame_a3e864f72c756fbd7103569806094828_3 );
        }
        cache_frame_a3e864f72c756fbd7103569806094828_3 = NULL;

        assertFrameObject( frame_a3e864f72c756fbd7103569806094828_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_10;
        skip_nested_handling_2:;
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_8 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_4 = const_str_plain_Marker;
            tmp_args_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_4 );
            tmp_tuple_element_4 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_4 );
            tmp_tuple_element_4 = locals___main___32;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_4 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 32;
            tmp_assign_source_37 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_args_name_4 );
            if ( tmp_assign_source_37 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_10;
            }
            assert( outline_1_var___class__ == NULL );
            outline_1_var___class__ = tmp_assign_source_37;
        }
        CHECK_OBJECT( outline_1_var___class__ );
        tmp_assign_source_36 = outline_1_var___class__;
        Py_INCREF( tmp_assign_source_36 );
        goto try_return_handler_10;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF( locals___main___32 );
        locals___main___32 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals___main___32 );
        locals___main___32 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 32;
        goto try_except_handler_8;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_Marker, tmp_assign_source_36 );
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = PyDict_New();
        assert( tmp_class_creation_3__class_decl_dict == NULL );
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_38;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_7, tmp_key_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_11;
        }
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_5;
        }
        else
        {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_11;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_3 );
        condexpr_end_5:;
        tmp_bases_name_3 = const_tuple_empty;
        tmp_assign_source_39 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
        Py_DECREF( tmp_metaclass_name_3 );
        if ( tmp_assign_source_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_11;
        }
        assert( tmp_class_creation_3__metaclass == NULL );
        tmp_class_creation_3__metaclass = tmp_assign_source_39;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_9, tmp_key_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_11;
        }
        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_11;
        }
        branch_no_7:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( tmp_class_creation_3__metaclass );
        tmp_source_name_9 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_9, const_str_plain___prepare__ );
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_40;
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_10;
            PyObject *tmp_args_name_5;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_source_name_10 = tmp_class_creation_3__metaclass;
            tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain___prepare__ );
            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;

                goto try_except_handler_11;
            }
            tmp_args_name_5 = const_tuple_str_plain_ObjectCounter_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 73;
            tmp_assign_source_40 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_5, tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_9 );
            if ( tmp_assign_source_40 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;

                goto try_except_handler_11;
            }
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_40;
        }
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_source_name_11;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_source_name_11 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_11, const_str_plain___getitem__ );
            tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;

                goto try_except_handler_11;
            }
            tmp_condition_result_14 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_12;
                PyObject *tmp_type_arg_3;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_3__metaclass );
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_5 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 73;

                    goto try_except_handler_11;
                }
                tmp_right_name_3 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_5 );
                CHECK_OBJECT( tmp_class_creation_3__prepared );
                tmp_type_arg_3 = tmp_class_creation_3__prepared;
                tmp_source_name_12 = BUILTIN_TYPE1( tmp_type_arg_3 );
                assert( !(tmp_source_name_12 == NULL) );
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_12 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_3 );

                    exception_lineno = 73;

                    goto try_except_handler_11;
                }
                PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_5 );
                tmp_raise_value_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                Py_DECREF( tmp_right_name_3 );
                if ( tmp_raise_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 73;

                    goto try_except_handler_11;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF( tmp_raise_type_3 );
                exception_value = tmp_raise_value_3;
                exception_lineno = 73;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_11;
            }
            branch_no_9:;
        }
        goto branch_end_8;
        branch_no_8:;
        {
            PyObject *tmp_assign_source_41;
            tmp_assign_source_41 = PyDict_New();
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_41;
        }
        branch_end_8:;
    }
    {
        PyObject *tmp_assign_source_42;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals___main___73 = tmp_set_locals_3;
            Py_INCREF( tmp_set_locals_3 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain___main__;
        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_13;
        }
        tmp_dictset_value = const_str_plain_ObjectCounter;
        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;

            goto try_except_handler_13;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_d34e7fa9d0a9a073e3e2919ce741ac99_4, codeobj_d34e7fa9d0a9a073e3e2919ce741ac99, module___main__, sizeof(void *) );
        frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 = cache_frame_d34e7fa9d0a9a073e3e2919ce741ac99_4;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_13___init__(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 74;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_14_start(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_start, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_15_stop(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_stop, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_16___len__(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___len__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 292;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_17___contains__(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___contains__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_18___getitem__(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___getitem__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 298;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_19___iter__(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain___iter__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_20__index_of(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain__index_of, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 309;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_21_wipe(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_wipe, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 316;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_22_marker_select(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_marker_select, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 322;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_23_grid_color_dialog(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_grid_color_dialog, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 325;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_24_draw_grid_btn_action(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_draw_grid_btn_action, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 330;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_25_redraw_grid(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_redraw_grid, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 339;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = const_tuple_str_plain_red_tuple;
            Py_INCREF( tmp_defaults_4 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_26_draw_grid( tmp_defaults_4 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_draw_grid, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_annotations_2;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            tmp_dict_key_3 = const_str_plain_name;
            tmp_dict_value_3 = PyObject_GetItem( locals___main___73, const_str_plain_str );

            if ( tmp_dict_value_3 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_dict_value_3 = (PyObject *)&PyUnicode_Type;
                Py_INCREF( tmp_dict_value_3 );
                }
            }

            tmp_annotations_2 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_annotations_2, tmp_dict_key_3, tmp_dict_value_3 );
            Py_DECREF( tmp_dict_value_3 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_4 = const_str_plain_color;
            tmp_dict_value_4 = PyObject_GetItem( locals___main___73, const_str_plain_str );

            if ( tmp_dict_value_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_dict_value_4 = (PyObject *)&PyUnicode_Type;
                Py_INCREF( tmp_dict_value_4 );
                }
            }

            tmp_res = PyDict_SetItem( tmp_annotations_2, tmp_dict_key_4, tmp_dict_value_4 );
            Py_DECREF( tmp_dict_value_4 );
            assert( !(tmp_res != 0) );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_27_reg_marker( tmp_annotations_2 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_reg_marker, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 367;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_28_dereg_marker(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_dereg_marker, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 379;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_29_config_buttons(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_config_buttons, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 387;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_30_list_markers(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_list_markers, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 393;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_31_load_btn_action(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_load_btn_action, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 401;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_32_add_btn_action(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_add_btn_action, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 412;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_33_del_btn_action(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_del_btn_action, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 419;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_34_edit_mt_item(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_edit_mt_item, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 425;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_35_show_image(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_show_image, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 437;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_36_zoom_in(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_zoom_in, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_37_zoom_out(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_zoom_out, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 456;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = const_tuple_float_1_0_tuple;
            Py_INCREF( tmp_defaults_5 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_38_zoom( tmp_defaults_5 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_zoom, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 460;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_39_showxy(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_showxy, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 473;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_40_show_zoom(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_show_zoom, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 478;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_41_store_mouse_pos(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_store_mouse_pos, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 482;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_42_scroll_canvas(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_scroll_canvas, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 486;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_43_place_marker_point(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_place_marker_point, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 490;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = const_tuple_int_0_int_0_tuple;
            Py_INCREF( tmp_defaults_6 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_44_find_nearest( tmp_defaults_6 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_find_nearest, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 501;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_defaults_7;
            tmp_defaults_7 = const_tuple_int_0_int_0_tuple;
            Py_INCREF( tmp_defaults_7 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_45_delete_nearest( tmp_defaults_7 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_delete_nearest, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 511;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = const_tuple_int_0_int_0_int_pos_9_tuple;
            Py_INCREF( tmp_defaults_8 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_46_delete_covered( tmp_defaults_8 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_delete_covered, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 523;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_47_remove_marker_points(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_remove_marker_points, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 537;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_9;
            tmp_defaults_9 = const_tuple_str_empty_str_plain_marker_tuple;
            Py_INCREF( tmp_defaults_9 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_48_draw_marker( tmp_defaults_9 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_draw_marker, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 545;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        {
            PyObject *tmp_defaults_10;
            tmp_defaults_10 = const_tuple_float_1_0_tuple;
            Py_INCREF( tmp_defaults_10 );
            tmp_dictset_value = MAKE_FUNCTION___main__$$$function_49_recalculate_points_positions( tmp_defaults_10 );



            tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_recalculate_points_positions, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 573;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_50_save_markers(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_save_markers, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 585;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION___main__$$$function_51_restore_markers(  );



        tmp_res = PyObject_SetItem( locals___main___73, const_str_plain_restore_markers, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 597;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_d34e7fa9d0a9a073e3e2919ce741ac99_4->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_d34e7fa9d0a9a073e3e2919ce741ac99_4, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_d34e7fa9d0a9a073e3e2919ce741ac99_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if ( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 == cache_frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 )
        {
            Py_DECREF( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 );
        }
        cache_frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 = NULL;

        assertFrameObject( frame_d34e7fa9d0a9a073e3e2919ce741ac99_4 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_13;
        skip_nested_handling_3:;
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_called_name_10;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_called_name_10 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_6 = const_str_plain_ObjectCounter;
            tmp_args_name_6 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_6 );
            tmp_tuple_element_6 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_6 );
            tmp_tuple_element_6 = locals___main___73;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_6, 2, tmp_tuple_element_6 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 73;
            tmp_assign_source_43 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_6, tmp_kw_name_6 );
            Py_DECREF( tmp_args_name_6 );
            if ( tmp_assign_source_43 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 73;

                goto try_except_handler_13;
            }
            assert( outline_2_var___class__ == NULL );
            outline_2_var___class__ = tmp_assign_source_43;
        }
        CHECK_OBJECT( outline_2_var___class__ );
        tmp_assign_source_42 = outline_2_var___class__;
        Py_INCREF( tmp_assign_source_42 );
        goto try_return_handler_13;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF( locals___main___73 );
        locals___main___73 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals___main___73 );
        locals___main___73 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
        Py_DECREF( outline_2_var___class__ );
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( __main__ );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_3:;
        exception_lineno = 73;
        goto try_except_handler_11;
        outline_result_3:;
        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_ObjectCounter, tmp_assign_source_42 );
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__prepared );
    Py_DECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = MAKE_FUNCTION___main__$$$function_52_main(  );



        UPDATE_STRING_DICT1( moduledict___main__, (Nuitka_StringObject *)const_str_plain_main, tmp_assign_source_44 );
    }
    {
        PyObject *tmp_called_name_11;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain_main );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_main );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_called_name_11 = tmp_mvar_value_1;
        frame_04215aac000759f635cebe6dea1aabd2->m_frame.f_lineno = 652;
        tmp_call_result_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 652;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_04215aac000759f635cebe6dea1aabd2 );
#endif
    popFrameStack();

    assertFrameObject( frame_04215aac000759f635cebe6dea1aabd2 );

    goto frame_no_exception_4;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_04215aac000759f635cebe6dea1aabd2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_04215aac000759f635cebe6dea1aabd2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_04215aac000759f635cebe6dea1aabd2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_04215aac000759f635cebe6dea1aabd2, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_4:;

#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 1
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict___main__, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module___main__ );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
