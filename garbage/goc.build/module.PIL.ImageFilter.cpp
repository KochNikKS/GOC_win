/* Generated code for Python module 'PIL.ImageFilter'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_PIL$ImageFilter" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_PIL$ImageFilter;
PyDictObject *moduledict_PIL$ImageFilter;

/* The declarations of module constants used, if any. */
static PyObject *const_str_digest_9734d645534e976c76afbbbb3c0e6f45;
extern PyObject *const_str_plain_ndarray;
static PyObject *const_str_digest_12d9cad19106401652c949f7d99360ec;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_raw_table;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_plain_filterargs;
static PyObject *const_str_plain_FIND_EDGES;
extern PyObject *const_str_plain___name__;
static PyObject *const_tuple_c94dac5ac8867aa856834159822c26a3_tuple;
static PyObject *const_str_digest_e749479ca4591258abaf0631a8cdf69c;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_str_angle_metaclass;
static PyObject *const_tuple_d84b88ab4836b0cc4311549e35293e2e_tuple;
static PyObject *const_str_plain_Color3DLUT;
extern PyObject *const_str_plain___file__;
extern PyObject *const_int_pos_9;
extern PyObject *const_str_plain_object;
extern PyObject *const_str_plain_LINEAR;
static PyObject *const_str_digest_e68099e6f7452c9074c97a4e07393094;
extern PyObject *const_str_plain_offset;
static PyObject *const_str_digest_018790cf874c9e36bf835bed51499c57;
static PyObject *const_str_plain_size1D;
static PyObject *const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple;
static PyObject *const_str_digest_49fb9f7b7f2f0df2a661feea7a4701e6;
extern PyObject *const_str_plain_scale;
static PyObject *const_tuple_str_plain__copy_table_true_tuple;
extern PyObject *const_str_plain_a;
extern PyObject *const_str_plain_division;
static PyObject *const_str_plain_idx_out;
extern PyObject *const_int_neg_1;
extern PyObject *const_str_plain_items;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain_size;
static PyObject *const_str_digest_9d9f2a828ef70b679236a91eca1758e2;
extern PyObject *const_int_pos_128;
extern PyObject *const_str_plain_image;
static PyObject *const_str_digest_7c3b53bc986d2a88550d08dd3907b263;
extern PyObject *const_str_plain_None;
extern PyObject *const_int_pos_6;
extern PyObject *const_str_plain_staticmethod;
static PyObject *const_str_digest_e2fc207794b099a1137d410d16f38a77;
static PyObject *const_str_digest_145e8f54d01b25b7ec58793cd97c6552;
static PyObject *const_str_plain_Min;
static PyObject *const_str_plain_channels;
extern PyObject *const_str_plain_classmethod;
extern PyObject *const_str_plain_filter;
extern PyObject *const_int_pos_5;
static PyObject *const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple;
extern PyObject *const_str_plain_cls;
static PyObject *const_str_digest_39604897ad47a5d142592f9ba992edf0;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_dfb7408a8a6006f2df58c7f45419b5a8;
static PyObject *const_str_digest_f9ba36e955d752318455b0dcd7d14431;
static PyObject *const_str_digest_ad2377f48771b1c9cb58244227c66ed2;
static PyObject *const_str_plain_EMBOSS;
static PyObject *const_str_plain_idx_in;
static PyObject *const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple;
extern PyObject *const_str_plain_reshape;
static PyObject *const_tuple_92b7d27d42c9d6e1edf0bdd1df8db135_tuple;
extern PyObject *const_int_pos_16;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
extern PyObject *const_int_pos_32;
extern PyObject *const_str_plain_extend;
extern PyObject *const_str_plain___debug__;
extern PyObject *const_str_plain___orig_bases__;
static PyObject *const_str_plain_Emboss;
static PyObject *const_str_digest_55a89c480a24199fbc5ddbe6b2349784;
static PyObject *const_str_plain_copy_table;
static PyObject *const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple;
static PyObject *const_str_plain_Contour;
extern PyObject *const_str_plain_numpy;
static PyObject *const_str_plain_rankfilter;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_str_digest_dbc0b3880c1030e6241640916a2febe4;
static PyObject *const_str_plain_generate;
static PyObject *const_str_digest_999cb5fa6af4c133afd03a82f7ef4c93;
static PyObject *const_str_digest_0c9ad3c20d9c4b89c497b6479d9fbb09;
static PyObject *const_str_plain_size3D;
extern PyObject *const_int_neg_2;
extern PyObject *const_str_plain_g;
static PyObject *const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple;
static PyObject *const_str_plain_UnsharpMask;
static PyObject *const_str_plain_kernel;
static PyObject *const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple;
extern PyObject *const_str_plain_transform;
extern PyObject *const_tuple_int_pos_3_int_pos_4_tuple;
static PyObject *const_str_digest_1fa57c13052d9bba47cacba66945dd96;
static PyObject *const_str_plain_ModeFilter;
static PyObject *const_tuple_false_none_none_tuple;
static PyObject *const_str_plain_unsharp_mask;
static PyObject *const_str_digest_0aa3469eaba008820c65475eba1750a5;
static PyObject *const_str_plain__copy_table;
static PyObject *const_str_plain_EDGE_ENHANCE;
extern PyObject *const_int_pos_8;
static PyObject *const_str_plain_BLUR;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_02ef7966359291d22aa51be1f1d0dabf;
extern PyObject *const_str_space;
static PyObject *const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple;
extern PyObject *const_str_plain_append;
static PyObject *const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple;
static PyObject *const_str_plain_DETAIL;
static PyObject *const_str_digest_c3c1dd11c1e933e6a2ea4d04b622099b;
static PyObject *const_str_plain_MedianFilter;
extern PyObject *const_str_plain_name;
static PyObject *const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple;
extern PyObject *const_str_plain_r;
extern PyObject *const_str_plain_P;
static PyObject *const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple;
extern PyObject *const_int_pos_10;
static PyObject *const_tuple_332c50d1783557542c0752f750452252_tuple;
static PyObject *const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple;
static PyObject *const_str_plain_target_mode;
extern PyObject *const_tuple_str_plain_x_tuple;
static PyObject *const_str_digest_020c75e04126e6782d4f363ba5505678;
extern PyObject *const_str_plain_b;
static PyObject *const_str_digest_e62e3b3ba046da0530d5673e420b801f;
extern PyObject *const_str_plain_expand;
static PyObject *const_str_digest_14b7dcb32151e9829d5027b4857b8ef6;
static PyObject *const_str_plain_percent;
static PyObject *const_str_plain_Blur;
static PyObject *const_str_digest_1246241660af0b1354feffbda6720392;
extern PyObject *const_tuple_str_plain_Image_tuple;
static PyObject *const_int_pos_150;
static PyObject *const_str_plain_gaussian_blur;
extern PyObject *const_str_plain_False;
extern PyObject *const_str_plain_rank;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_tuple_int_pos_3_tuple;
extern PyObject *const_str_plain_list;
static PyObject *const_str_digest_9d1778c0df676849cb5f44cd80d1cd71;
static PyObject *const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple;
static PyObject *const_tuple_int_pos_3_none_tuple;
static PyObject *const_str_digest_12634c5d92c95b56d789aa738f028b38;
static PyObject *const_str_plain_Rank;
static PyObject *const_str_plain_ch_out;
static PyObject *const_str_digest_a7e7d7e0b19f891fd965ca8442de8a5d;
extern PyObject *const_int_0;
static PyObject *const_str_digest_bdf7b7c270cc9aaae166c2692fcee03b;
static PyObject *const_str_plain_SMOOTH_MORE;
static PyObject *const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple;
static PyObject *const_str_digest_73e534cca1bbc0a54069e51041ff1c06;
static PyObject *const_str_plain_Max;
extern PyObject *const_tuple_int_pos_2_tuple;
static PyObject *const_str_plain_RankFilter;
extern PyObject *const_str_plain_origin;
extern PyObject *const_tuple_none_int_0_tuple;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
extern PyObject *const_str_plain_shape;
static PyObject *const_str_plain_radius;
extern PyObject *const_str_angle_listcomp;
extern PyObject *const_str_plain_MultibandFilter;
static PyObject *const_tuple_none_int_pos_3_int_pos_4_tuple;
extern PyObject *const_str_plain_x;
static PyObject *const_str_plain_color_lut_3d;
extern PyObject *const_tuple_type_list_type_tuple_tuple;
static PyObject *const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple;
static PyObject *const_str_plain_MaxFilter;
extern PyObject *const_int_pos_4;
extern PyObject *const_str_plain_callback;
static PyObject *const_tuple_str_plain_self_str_plain_r_tuple;
static PyObject *const_str_plain_Smooth;
static PyObject *const_str_digest_2aab211cbd62365f556d34bd58d3044f;
static PyObject *const_str_plain_GaussianBlur;
extern PyObject *const_str_angle_lambda;
extern PyObject *const_str_plain_type;
extern PyObject *const_int_pos_13;
static PyObject *const_str_plain_modefilter;
static PyObject *const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_str_plain_threshold;
static PyObject *const_str_digest_614ae7f28125de272cd6e87a773ac201;
static PyObject *const_str_digest_ce76fff8dc7cb21df05ce07af6c77202;
static PyObject *const_str_digest_19bd478da4cd8d542b9dab88bfd5da36;
extern PyObject *const_str_plain___class__;
extern PyObject *const_str_plain__;
static PyObject *const_str_plain_SHARPEN;
static PyObject *const_str_digest_8476291df6a035f15eac6851c1169bd1;
static PyObject *const_str_digest_380ee9993555f3b8136b92db9e7fa082;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_functools;
static PyObject *const_str_plain_Sharpen;
static PyObject *const_str_plain_Mode;
static PyObject *const_str_digest_2a5df70489150f55f68057fabbf49e99;
static PyObject *const_str_plain_size2D;
static PyObject *const_tuple_907521f194d0c6f43c103848344947c1_tuple;
extern PyObject *const_str_plain_pixel;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_values;
static PyObject *const_str_plain_SMOOTH;
static PyObject *const_str_plain_Filter;
static PyObject *const_str_plain_wrong_size;
static PyObject *const_str_plain_box_blur;
extern PyObject *const_str_plain_reduce;
extern PyObject *const_list_int_0_list;
extern PyObject *const_str_plain_copy;
static PyObject *const_str_digest_2b180389176b4d3a73fee63540fbbd45;
static PyObject *const_str_plain_BoxBlur;
static PyObject *const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple;
extern PyObject *const_str_plain_tuple;
static PyObject *const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple;
static PyObject *const_str_plain_with_normals;
static PyObject *const_str_plain_EDGE_ENHANCE_MORE;
static PyObject *const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple;
static PyObject *const_str_digest_cc086f7e7bd0d901a321d65afe6f1123;
static PyObject *const_str_digest_0ce62e90b6d82c083fa9cf431de89104;
static PyObject *const_tuple_str_plain_self_str_plain_radius_tuple;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_digest_bc20262369aa1099ff5678e60fd0da58;
extern PyObject *const_int_pos_3;
static PyObject *const_str_digest_69d247ce8026388825b3f6362c81b3a0;
extern PyObject *const_int_pos_255;
extern PyObject *const_str_plain_self;
static PyObject *const_str_digest_37b3cee7db7dcf40fa3cc74610972044;
static PyObject *const_tuple_int_pos_3_int_pos_3_tuple;
static PyObject *const_str_digest_6dc2472cb495de12cc292361620a630a;
static PyObject *const_str_plain_Median;
static PyObject *const_str_digest_7a9dee042dbeb8884044a9ee773ea0dc;
static PyObject *const_str_plain_Detail;
extern PyObject *const_str_plain___repr__;
extern PyObject *const_int_pos_65;
static PyObject *const_str_digest_c483ef475298b8c323265f51f3491fcc;
static PyObject *const_str_digest_6035838ccdcd1553ac2e986b944be7a7;
static PyObject *const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple;
static PyObject *const_str_plain_CONTOUR;
static PyObject *const_str_digest_26ae68f5dc56101c76ce65d3edf0ea42;
extern PyObject *const_str_plain_kwargs;
extern PyObject *const_str_plain_get;
static PyObject *const_str_plain_Kernel;
static PyObject *const_tuple_str_plain_self_str_plain_size_tuple;
extern PyObject *const_str_plain_has_location;
static PyObject *const_str_digest_6fd317c67cef4fda31becb2c393a305b;
static PyObject *const_str_plain_ch_in;
static PyObject *const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple;
extern PyObject *const_int_pos_2;
static PyObject *const_str_digest_d298fb076e35d16b6e1326edf579d3dc;
extern PyObject *const_tuple_str_plain_a_str_plain_b_tuple;
extern PyObject *const_str_plain_Image;
extern PyObject *const_str_plain__check_size;
static PyObject *const_str_digest_55a3e477b8e90cfd4b1ba84ed192e679;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_table;
extern PyObject *const_tuple_str_plain_self_str_plain_image_tuple;
extern PyObject *const_str_empty;
static PyObject *const_str_plain_BuiltinFilter;
static PyObject *const_str_plain_MinFilter;
static PyObject *const_str_digest_d6dabd52b1fe8e63e3e930c80e978100;
static PyObject *const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_str_digest_9734d645534e976c76afbbbb3c0e6f45 = UNSTREAM_STRING_ASCII( &constant_bin[ 64009 ], 1059, 0 );
    const_str_digest_12d9cad19106401652c949f7d99360ec = UNSTREAM_STRING_ASCII( &constant_bin[ 65068 ], 11, 0 );
    const_str_plain_raw_table = UNSTREAM_STRING_ASCII( &constant_bin[ 65079 ], 9, 1 );
    const_str_plain_filterargs = UNSTREAM_STRING_ASCII( &constant_bin[ 65088 ], 10, 1 );
    const_str_plain_FIND_EDGES = UNSTREAM_STRING_ASCII( &constant_bin[ 65098 ], 10, 1 );
    const_tuple_c94dac5ac8867aa856834159822c26a3_tuple = PyTuple_New( 17 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 1, const_str_plain_callback ); Py_INCREF( const_str_plain_callback );
    const_str_plain_with_normals = UNSTREAM_STRING_ASCII( &constant_bin[ 64420 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 2, const_str_plain_with_normals ); Py_INCREF( const_str_plain_with_normals );
    const_str_plain_channels = UNSTREAM_STRING_ASCII( &constant_bin[ 40260 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 3, const_str_plain_channels ); Py_INCREF( const_str_plain_channels );
    const_str_plain_target_mode = UNSTREAM_STRING_ASCII( &constant_bin[ 64962 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 4, const_str_plain_target_mode ); Py_INCREF( const_str_plain_target_mode );
    const_str_plain_ch_in = UNSTREAM_STRING_ASCII( &constant_bin[ 65108 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 5, const_str_plain_ch_in ); Py_INCREF( const_str_plain_ch_in );
    const_str_plain_ch_out = UNSTREAM_STRING_ASCII( &constant_bin[ 65113 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 6, const_str_plain_ch_out ); Py_INCREF( const_str_plain_ch_out );
    const_str_plain_size1D = UNSTREAM_STRING_ASCII( &constant_bin[ 65119 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 7, const_str_plain_size1D ); Py_INCREF( const_str_plain_size1D );
    const_str_plain_size2D = UNSTREAM_STRING_ASCII( &constant_bin[ 65125 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 8, const_str_plain_size2D ); Py_INCREF( const_str_plain_size2D );
    const_str_plain_size3D = UNSTREAM_STRING_ASCII( &constant_bin[ 65131 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 9, const_str_plain_size3D ); Py_INCREF( const_str_plain_size3D );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 10, const_str_plain_table ); Py_INCREF( const_str_plain_table );
    const_str_plain_idx_in = UNSTREAM_STRING_ASCII( &constant_bin[ 65137 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 11, const_str_plain_idx_in ); Py_INCREF( const_str_plain_idx_in );
    const_str_plain_idx_out = UNSTREAM_STRING_ASCII( &constant_bin[ 65143 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 12, const_str_plain_idx_out ); Py_INCREF( const_str_plain_idx_out );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 13, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 14, const_str_plain_g ); Py_INCREF( const_str_plain_g );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 15, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    PyTuple_SET_ITEM( const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 16, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    const_str_digest_e749479ca4591258abaf0631a8cdf69c = UNSTREAM_STRING_ASCII( &constant_bin[ 65150 ], 12, 0 );
    const_tuple_d84b88ab4836b0cc4311549e35293e2e_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 65162 ], 151 );
    const_str_plain_Color3DLUT = UNSTREAM_STRING_ASCII( &constant_bin[ 65313 ], 10, 1 );
    const_str_digest_e68099e6f7452c9074c97a4e07393094 = UNSTREAM_STRING_ASCII( &constant_bin[ 65323 ], 10, 0 );
    const_str_digest_018790cf874c9e36bf835bed51499c57 = UNSTREAM_STRING_ASCII( &constant_bin[ 65333 ], 28, 0 );
    const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple, 0, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_int_pos_150 = PyLong_FromUnsignedLong( 150ul );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple, 1, const_int_pos_150 ); Py_INCREF( const_int_pos_150 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple, 2, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    const_str_digest_49fb9f7b7f2f0df2a661feea7a4701e6 = UNSTREAM_STRING_ASCII( &constant_bin[ 65361 ], 32, 0 );
    const_tuple_str_plain__copy_table_true_tuple = PyTuple_New( 2 );
    const_str_plain__copy_table = UNSTREAM_STRING_ASCII( &constant_bin[ 65393 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain__copy_table_true_tuple, 0, const_str_plain__copy_table ); Py_INCREF( const_str_plain__copy_table );
    PyTuple_SET_ITEM( const_tuple_str_plain__copy_table_true_tuple, 1, Py_True ); Py_INCREF( Py_True );
    const_str_digest_9d9f2a828ef70b679236a91eca1758e2 = UNSTREAM_STRING_ASCII( &constant_bin[ 65404 ], 18, 0 );
    const_str_digest_7c3b53bc986d2a88550d08dd3907b263 = UNSTREAM_STRING_ASCII( &constant_bin[ 65422 ], 53, 0 );
    const_str_digest_e2fc207794b099a1137d410d16f38a77 = UNSTREAM_STRING_ASCII( &constant_bin[ 65475 ], 595, 0 );
    const_str_digest_145e8f54d01b25b7ec58793cd97c6552 = UNSTREAM_STRING_ASCII( &constant_bin[ 66070 ], 17, 0 );
    const_str_plain_Min = UNSTREAM_STRING_ASCII( &constant_bin[ 65404 ], 3, 1 );
    const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple = PyTuple_New( 4 );
    const_tuple_int_pos_3_int_pos_3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_3_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_int_pos_3_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple, 2, const_int_pos_128 ); Py_INCREF( const_int_pos_128 );
    const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 3, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 4, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 5, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 6, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 7, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple, 8, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple, 3, const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple ); Py_INCREF( const_tuple_734f2383ae1ed11934f1f2f9dc4c2af1_tuple );
    const_str_digest_39604897ad47a5d142592f9ba992edf0 = UNSTREAM_STRING_ASCII( &constant_bin[ 66087 ], 518, 0 );
    const_str_digest_dfb7408a8a6006f2df58c7f45419b5a8 = UNSTREAM_STRING_ASCII( &constant_bin[ 66605 ], 19, 0 );
    const_str_digest_f9ba36e955d752318455b0dcd7d14431 = UNSTREAM_STRING_ASCII( &constant_bin[ 66624 ], 20, 0 );
    const_str_digest_ad2377f48771b1c9cb58244227c66ed2 = UNSTREAM_STRING_ASCII( &constant_bin[ 66644 ], 17, 0 );
    const_str_plain_EMBOSS = UNSTREAM_STRING_ASCII( &constant_bin[ 66661 ], 6, 1 );
    const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 2, const_str_plain_callback ); Py_INCREF( const_str_plain_callback );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 3, const_str_plain_channels ); Py_INCREF( const_str_plain_channels );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 4, const_str_plain_target_mode ); Py_INCREF( const_str_plain_target_mode );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 5, const_str_plain_size1D ); Py_INCREF( const_str_plain_size1D );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 6, const_str_plain_size2D ); Py_INCREF( const_str_plain_size2D );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 7, const_str_plain_size3D ); Py_INCREF( const_str_plain_size3D );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 8, const_str_plain_table ); Py_INCREF( const_str_plain_table );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 9, const_str_plain_idx_out ); Py_INCREF( const_str_plain_idx_out );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 10, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 11, const_str_plain_g ); Py_INCREF( const_str_plain_g );
    PyTuple_SET_ITEM( const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 12, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    const_tuple_92b7d27d42c9d6e1edf0bdd1df8db135_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 66667 ], 151 );
    const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2 = UNSTREAM_STRING_ASCII( &constant_bin[ 31199 ], 15, 0 );
    const_str_plain_Emboss = UNSTREAM_STRING_ASCII( &constant_bin[ 66818 ], 6, 1 );
    const_str_digest_55a89c480a24199fbc5ddbe6b2349784 = UNSTREAM_STRING_ASCII( &constant_bin[ 66824 ], 14, 0 );
    const_str_plain_copy_table = UNSTREAM_STRING_ASCII( &constant_bin[ 65394 ], 10, 1 );
    const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyTuple_SET_ITEM( const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_tuple_907521f194d0c6f43c103848344947c1_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 2, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 3, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 4, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 5, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 6, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 7, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_907521f194d0c6f43c103848344947c1_tuple, 8, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple, 3, const_tuple_907521f194d0c6f43c103848344947c1_tuple ); Py_INCREF( const_tuple_907521f194d0c6f43c103848344947c1_tuple );
    const_str_plain_Contour = UNSTREAM_STRING_ASCII( &constant_bin[ 66838 ], 7, 1 );
    const_str_plain_rankfilter = UNSTREAM_STRING_ASCII( &constant_bin[ 66845 ], 10, 1 );
    const_str_digest_dbc0b3880c1030e6241640916a2febe4 = UNSTREAM_STRING_ASCII( &constant_bin[ 66855 ], 59, 0 );
    const_str_plain_generate = UNSTREAM_STRING_ASCII( &constant_bin[ 66914 ], 8, 1 );
    const_str_digest_999cb5fa6af4c133afd03a82f7ef4c93 = UNSTREAM_STRING_ASCII( &constant_bin[ 66922 ], 33, 0 );
    const_str_digest_0c9ad3c20d9c4b89c497b6479d9fbb09 = UNSTREAM_STRING_ASCII( &constant_bin[ 66955 ], 19, 0 );
    const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 2, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 3, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 4, const_int_pos_9 ); Py_INCREF( const_int_pos_9 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 5, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 6, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 7, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple, 8, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple, 3, const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple ); Py_INCREF( const_tuple_283977cf9c35b87524fbcf487df2cb3c_tuple );
    const_str_plain_UnsharpMask = UNSTREAM_STRING_ASCII( &constant_bin[ 66624 ], 11, 1 );
    const_str_plain_kernel = UNSTREAM_STRING_ASCII( &constant_bin[ 31255 ], 6, 1 );
    const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 0, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 1, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 2, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 3, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 4, const_int_pos_32 ); Py_INCREF( const_int_pos_32 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 5, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 6, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 7, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    PyTuple_SET_ITEM( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple, 8, const_int_neg_2 ); Py_INCREF( const_int_neg_2 );
    const_str_digest_1fa57c13052d9bba47cacba66945dd96 = UNSTREAM_STRING_ASCII( &constant_bin[ 66974 ], 18, 0 );
    const_str_plain_ModeFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 66605 ], 10, 1 );
    const_tuple_false_none_none_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_false_none_none_tuple, 0, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_false_none_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_false_none_none_tuple, 2, Py_None ); Py_INCREF( Py_None );
    const_str_plain_unsharp_mask = UNSTREAM_STRING_ASCII( &constant_bin[ 66992 ], 12, 1 );
    const_str_digest_0aa3469eaba008820c65475eba1750a5 = UNSTREAM_STRING_ASCII( &constant_bin[ 67004 ], 62, 0 );
    const_str_plain_EDGE_ENHANCE = UNSTREAM_STRING_ASCII( &constant_bin[ 67066 ], 12, 1 );
    const_str_plain_BLUR = UNSTREAM_STRING_ASCII( &constant_bin[ 67078 ], 4, 1 );
    const_str_digest_02ef7966359291d22aa51be1f1d0dabf = UNSTREAM_STRING_ASCII( &constant_bin[ 67082 ], 18, 0 );
    const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple, 1, const_str_plain_image ); Py_INCREF( const_str_plain_image );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple, 2, const_str_plain_Image ); Py_INCREF( const_str_plain_Image );
    const_str_plain_DETAIL = UNSTREAM_STRING_ASCII( &constant_bin[ 67100 ], 6, 1 );
    const_str_digest_c3c1dd11c1e933e6a2ea4d04b622099b = UNSTREAM_STRING_ASCII( &constant_bin[ 67106 ], 367, 0 );
    const_str_plain_MedianFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 67473 ], 12, 1 );
    const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple, 2, const_str_plain_rank ); Py_INCREF( const_str_plain_rank );
    const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_radius = UNSTREAM_STRING_ASCII( &constant_bin[ 66190 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple, 1, const_str_plain_radius ); Py_INCREF( const_str_plain_radius );
    const_str_plain_percent = UNSTREAM_STRING_ASCII( &constant_bin[ 67485 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple, 2, const_str_plain_percent ); Py_INCREF( const_str_plain_percent );
    PyTuple_SET_ITEM( const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple, 3, const_str_plain_threshold ); Py_INCREF( const_str_plain_threshold );
    const_tuple_332c50d1783557542c0752f750452252_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 2, const_str_plain_table ); Py_INCREF( const_str_plain_table );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 3, const_str_plain_channels ); Py_INCREF( const_str_plain_channels );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 4, const_str_plain_target_mode ); Py_INCREF( const_str_plain_target_mode );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 5, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 6, const_str_plain_copy_table ); Py_INCREF( const_str_plain_copy_table );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 7, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    const_str_plain_wrong_size = UNSTREAM_STRING_ASCII( &constant_bin[ 67492 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 8, const_str_plain_wrong_size ); Py_INCREF( const_str_plain_wrong_size );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 9, const_str_plain_raw_table ); Py_INCREF( const_str_plain_raw_table );
    PyTuple_SET_ITEM( const_tuple_332c50d1783557542c0752f750452252_tuple, 10, const_str_plain_pixel ); Py_INCREF( const_str_plain_pixel );
    const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 2, const_str_plain_kernel ); Py_INCREF( const_str_plain_kernel );
    PyTuple_SET_ITEM( const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 3, const_str_plain_scale ); Py_INCREF( const_str_plain_scale );
    PyTuple_SET_ITEM( const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 4, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    const_str_digest_020c75e04126e6782d4f363ba5505678 = UNSTREAM_STRING_ASCII( &constant_bin[ 67502 ], 33, 0 );
    const_str_digest_e62e3b3ba046da0530d5673e420b801f = UNSTREAM_STRING_ASCII( &constant_bin[ 67535 ], 145, 0 );
    const_str_digest_14b7dcb32151e9829d5027b4857b8ef6 = UNSTREAM_STRING_ASCII( &constant_bin[ 67680 ], 13, 0 );
    const_str_plain_Blur = UNSTREAM_STRING_ASCII( &constant_bin[ 66087 ], 4, 1 );
    const_str_digest_1246241660af0b1354feffbda6720392 = UNSTREAM_STRING_ASCII( &constant_bin[ 67693 ], 19, 0 );
    const_str_plain_gaussian_blur = UNSTREAM_STRING_ASCII( &constant_bin[ 67712 ], 13, 1 );
    const_str_digest_9d1778c0df676849cb5f44cd80d1cd71 = UNSTREAM_STRING_ASCII( &constant_bin[ 67725 ], 18, 0 );
    const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple, 1, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 3, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 4, const_int_pos_10 ); Py_INCREF( const_int_pos_10 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 5, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 6, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 7, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple, 8, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple, 3, const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple ); Py_INCREF( const_tuple_6baa453d6fd9ec8f3b4aa9c6e32f5e52_tuple );
    const_tuple_int_pos_3_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_none_tuple, 0, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_3_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_digest_12634c5d92c95b56d789aa738f028b38 = UNSTREAM_STRING_ASCII( &constant_bin[ 67743 ], 24, 0 );
    const_str_plain_Rank = UNSTREAM_STRING_ASCII( &constant_bin[ 67767 ], 4, 1 );
    const_str_digest_a7e7d7e0b19f891fd965ca8442de8a5d = UNSTREAM_STRING_ASCII( &constant_bin[ 67771 ], 21, 0 );
    const_str_digest_bdf7b7c270cc9aaae166c2692fcee03b = UNSTREAM_STRING_ASCII( &constant_bin[ 67792 ], 17, 0 );
    const_str_plain_SMOOTH_MORE = UNSTREAM_STRING_ASCII( &constant_bin[ 67809 ], 11, 1 );
    const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 2, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 3, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 4, const_int_pos_8 ); Py_INCREF( const_int_pos_8 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 5, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 6, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 7, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple, 8, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    const_str_digest_73e534cca1bbc0a54069e51041ff1c06 = UNSTREAM_STRING_ASCII( &constant_bin[ 67820 ], 14, 0 );
    const_str_plain_Max = UNSTREAM_STRING_ASCII( &constant_bin[ 43495 ], 3, 1 );
    const_str_plain_RankFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 67834 ], 10, 1 );
    const_tuple_none_int_pos_3_int_pos_4_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_none_int_pos_3_int_pos_4_tuple, 0, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_none_int_pos_3_int_pos_4_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_none_int_pos_3_int_pos_4_tuple, 2, const_int_pos_4 ); Py_INCREF( const_int_pos_4 );
    const_str_plain_color_lut_3d = UNSTREAM_STRING_ASCII( &constant_bin[ 67844 ], 12, 1 );
    const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple, 0, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple, 1, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    PyTuple_SET_ITEM( const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple, 2, const_str_plain_size1D ); Py_INCREF( const_str_plain_size1D );
    const_str_plain_MaxFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 67082 ], 9, 1 );
    const_tuple_str_plain_self_str_plain_r_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_r_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_r_tuple, 1, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    const_str_plain_Smooth = UNSTREAM_STRING_ASCII( &constant_bin[ 65068 ], 6, 1 );
    const_str_digest_2aab211cbd62365f556d34bd58d3044f = UNSTREAM_STRING_ASCII( &constant_bin[ 67856 ], 10, 0 );
    const_str_plain_GaussianBlur = UNSTREAM_STRING_ASCII( &constant_bin[ 67866 ], 12, 1 );
    const_str_plain_modefilter = UNSTREAM_STRING_ASCII( &constant_bin[ 67878 ], 10, 1 );
    const_str_digest_614ae7f28125de272cd6e87a773ac201 = UNSTREAM_STRING_ASCII( &constant_bin[ 67888 ], 20, 0 );
    const_str_digest_ce76fff8dc7cb21df05ce07af6c77202 = UNSTREAM_STRING_ASCII( &constant_bin[ 67908 ], 17, 0 );
    const_str_digest_19bd478da4cd8d542b9dab88bfd5da36 = UNSTREAM_STRING_ASCII( &constant_bin[ 67925 ], 143, 0 );
    const_str_plain_SHARPEN = UNSTREAM_STRING_ASCII( &constant_bin[ 68068 ], 7, 1 );
    const_str_digest_8476291df6a035f15eac6851c1169bd1 = UNSTREAM_STRING_ASCII( &constant_bin[ 68075 ], 718, 0 );
    const_str_digest_380ee9993555f3b8136b92db9e7fa082 = UNSTREAM_STRING_ASCII( &constant_bin[ 68793 ], 19, 0 );
    const_str_plain_Sharpen = UNSTREAM_STRING_ASCII( &constant_bin[ 68812 ], 7, 1 );
    const_str_plain_Mode = UNSTREAM_STRING_ASCII( &constant_bin[ 8225 ], 4, 1 );
    const_str_digest_2a5df70489150f55f68057fabbf49e99 = UNSTREAM_STRING_ASCII( &constant_bin[ 68819 ], 19, 0 );
    const_str_plain_SMOOTH = UNSTREAM_STRING_ASCII( &constant_bin[ 67809 ], 6, 1 );
    const_str_plain_Filter = UNSTREAM_STRING_ASCII( &constant_bin[ 21438 ], 6, 1 );
    const_str_plain_box_blur = UNSTREAM_STRING_ASCII( &constant_bin[ 68838 ], 8, 1 );
    const_str_digest_2b180389176b4d3a73fee63540fbbd45 = UNSTREAM_STRING_ASCII( &constant_bin[ 68846 ], 21, 0 );
    const_str_plain_BoxBlur = UNSTREAM_STRING_ASCII( &constant_bin[ 67820 ], 7, 1 );
    const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple, 1, const_int_pos_13 ); Py_INCREF( const_int_pos_13 );
    PyTuple_SET_ITEM( const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 0, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 2, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 3, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 4, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 5, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 6, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 7, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple, 8, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple, 3, const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple ); Py_INCREF( const_tuple_c306392bfa993d92f2686e27e6b3e5a6_tuple );
    const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple, 1, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple, 3, const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple ); Py_INCREF( const_tuple_170b256e4bfb96db36e4f39651074bf0_tuple );
    const_str_plain_EDGE_ENHANCE_MORE = UNSTREAM_STRING_ASCII( &constant_bin[ 68867 ], 17, 1 );
    const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple, 2, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple, 3, const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple ); Py_INCREF( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple );
    const_str_digest_cc086f7e7bd0d901a321d65afe6f1123 = UNSTREAM_STRING_ASCII( &constant_bin[ 68884 ], 22, 0 );
    const_str_digest_0ce62e90b6d82c083fa9cf431de89104 = UNSTREAM_STRING_ASCII( &constant_bin[ 68906 ], 4, 0 );
    const_tuple_str_plain_self_str_plain_radius_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_radius_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_radius_tuple, 1, const_str_plain_radius ); Py_INCREF( const_str_plain_radius );
    const_str_digest_bc20262369aa1099ff5678e60fd0da58 = UNSTREAM_STRING_ASCII( &constant_bin[ 68910 ], 20, 0 );
    const_str_digest_69d247ce8026388825b3f6362c81b3a0 = UNSTREAM_STRING_ASCII( &constant_bin[ 68930 ], 144, 0 );
    const_str_digest_37b3cee7db7dcf40fa3cc74610972044 = UNSTREAM_STRING_ASCII( &constant_bin[ 69074 ], 41, 0 );
    const_str_digest_6dc2472cb495de12cc292361620a630a = UNSTREAM_STRING_ASCII( &constant_bin[ 69115 ], 19, 0 );
    const_str_plain_Median = UNSTREAM_STRING_ASCII( &constant_bin[ 67473 ], 6, 1 );
    const_str_digest_7a9dee042dbeb8884044a9ee773ea0dc = UNSTREAM_STRING_ASCII( &constant_bin[ 69134 ], 289, 0 );
    const_str_plain_Detail = UNSTREAM_STRING_ASCII( &constant_bin[ 69423 ], 6, 1 );
    const_str_digest_c483ef475298b8c323265f51f3491fcc = UNSTREAM_STRING_ASCII( &constant_bin[ 69429 ], 19, 0 );
    const_str_digest_6035838ccdcd1553ac2e986b944be7a7 = UNSTREAM_STRING_ASCII( &constant_bin[ 69448 ], 410, 0 );
    const_str_plain_CONTOUR = UNSTREAM_STRING_ASCII( &constant_bin[ 69858 ], 7, 1 );
    const_str_digest_26ae68f5dc56101c76ce65d3edf0ea42 = UNSTREAM_STRING_ASCII( &constant_bin[ 69865 ], 12, 0 );
    const_str_plain_Kernel = UNSTREAM_STRING_ASCII( &constant_bin[ 67502 ], 6, 1 );
    const_tuple_str_plain_self_str_plain_size_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_size_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_size_tuple, 1, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_digest_6fd317c67cef4fda31becb2c393a305b = UNSTREAM_STRING_ASCII( &constant_bin[ 69877 ], 1164, 0 );
    const_str_digest_d298fb076e35d16b6e1326edf579d3dc = UNSTREAM_STRING_ASCII( &constant_bin[ 71041 ], 16, 0 );
    const_str_digest_55a3e477b8e90cfd4b1ba84ed192e679 = UNSTREAM_STRING_ASCII( &constant_bin[ 71057 ], 162, 0 );
    const_str_plain_BuiltinFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 67888 ], 13, 1 );
    const_str_plain_MinFilter = UNSTREAM_STRING_ASCII( &constant_bin[ 65404 ], 9, 1 );
    const_str_digest_d6dabd52b1fe8e63e3e930c80e978100 = UNSTREAM_STRING_ASCII( &constant_bin[ 67502 ], 15, 0 );
    const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple, 0, const_tuple_int_pos_3_int_pos_3_tuple ); Py_INCREF( const_tuple_int_pos_3_int_pos_3_tuple );
    PyTuple_SET_ITEM( const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple, 2, const_int_pos_255 ); Py_INCREF( const_int_pos_255 );
    PyTuple_SET_ITEM( const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple, 3, const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple ); Py_INCREF( const_tuple_b1f79f8a06e322c0c36657b8df87299b_tuple );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_PIL$ImageFilter( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_b77e67d14966b95a6ee53936f8363309;
static PyCodeObject *codeobj_b4956a016726519fd2c34652359a3c04;
static PyCodeObject *codeobj_573a114d73ab0e159b5d270a6c427242;
static PyCodeObject *codeobj_b07a5374eb50cc907cb018a6f4658cfa;
static PyCodeObject *codeobj_5ee4d9cbea512a1e3741d9b50288fed5;
static PyCodeObject *codeobj_d6a737a2090ded6a94ef942f7ca9e61e;
static PyCodeObject *codeobj_754301eb603ad00ab3c9cb5e5e717b63;
static PyCodeObject *codeobj_17cef2d0d46cf49192779f0042bde399;
static PyCodeObject *codeobj_8fb5463d49dc32e1e8da1916b864889b;
static PyCodeObject *codeobj_67fa2dda155a931ccb1670fd19fadfe3;
static PyCodeObject *codeobj_2e892cabfe9a3181cfca6a2267122082;
static PyCodeObject *codeobj_182b80444fd463d65783e55f79c5b45c;
static PyCodeObject *codeobj_ab9b3a7a0657d006b795a8fdddc781ce;
static PyCodeObject *codeobj_39503a432953dc1b0c966d2335b028bb;
static PyCodeObject *codeobj_ed24899f6cb8054107835c368af3e32f;
static PyCodeObject *codeobj_1f4d731788d8c0a553ef69f2df319dab;
static PyCodeObject *codeobj_29870514b17fb3d9855230d26a5e018e;
static PyCodeObject *codeobj_85c1c33bfc54e852a587af0ca5d84895;
static PyCodeObject *codeobj_66c5e2de7b3952341f8021f4bcf4172b;
static PyCodeObject *codeobj_41916f6d60312bba0f6326fc5c208686;
static PyCodeObject *codeobj_c837e80cd14b39a226f3e311fa8f88f4;
static PyCodeObject *codeobj_c7001ee9bb9b3765bc12a295c5d90a0d;
static PyCodeObject *codeobj_12bbd41a59cbe9216355af244887535d;
static PyCodeObject *codeobj_92d894154318163f6084b76676199287;
static PyCodeObject *codeobj_4c15da5e10d6434c956c798acd2e21fd;
static PyCodeObject *codeobj_a23804824e7e5c27a25dc1ec5080b0b1;
static PyCodeObject *codeobj_76b918b1b732c188e59a88a97789b95a;
static PyCodeObject *codeobj_d31399269b9785b3c8ff87328f0abf1f;
static PyCodeObject *codeobj_92033d521030b556c0b79032b67b64e9;
static PyCodeObject *codeobj_e93cfeff5c9b3a8f4466916b0df876ac;
static PyCodeObject *codeobj_0f5409b204a7c8e4110ff6d4afda3128;
static PyCodeObject *codeobj_08f2849d1025926df43592b31cdd44dd;
static PyCodeObject *codeobj_a924ca563b410979a9b70fb42d7423df;
static PyCodeObject *codeobj_83c29977498b907cfbcb1f9b5bff9493;
static PyCodeObject *codeobj_a5c32ad5befaa10200a08ca4118a677b;
static PyCodeObject *codeobj_52bfda7a7085de102be770f8624d7117;
static PyCodeObject *codeobj_930181cfd2c84cb3522cb8f70dceb02d;
static PyCodeObject *codeobj_a2f3e18ce8f0c928ebb9efd95fe6c612;
static PyCodeObject *codeobj_2922234838f8625529e79b8ea7819e6a;
static PyCodeObject *codeobj_1cbc79d522e1ab2bcb4ef115181d79f0;
static PyCodeObject *codeobj_6928d937bcb1496dda62061913c94565;
static PyCodeObject *codeobj_9ccfebafbef3c978ef7ce3911c0a8284;
static PyCodeObject *codeobj_70e6db30cbbcf43d4cb98b942765d88f;
static PyCodeObject *codeobj_74282d4944e6914cbbe138d1c05abbca;
static PyCodeObject *codeobj_aaadbe9cb0ff2c03a0ceebe89e33375b;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_1fa57c13052d9bba47cacba66945dd96 );
    codeobj_b77e67d14966b95a6ee53936f8363309 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_lambda, 65, const_tuple_str_plain_a_str_plain_b_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b4956a016726519fd2c34652359a3c04 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 386, const_tuple_str_plain_x_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_573a114d73ab0e159b5d270a6c427242 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_12634c5d92c95b56d789aa738f028b38, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_b07a5374eb50cc907cb018a6f4658cfa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BLUR, 212, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_5ee4d9cbea512a1e3741d9b50288fed5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BoxBlur, 167, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_d6a737a2090ded6a94ef942f7ca9e61e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_BuiltinFilter, 36, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_754301eb603ad00ab3c9cb5e5e717b63 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CONTOUR, 223, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_17cef2d0d46cf49192779f0042bde399 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Color3DLUT, 306, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_8fb5463d49dc32e1e8da1916b864889b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_DETAIL, 232, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_67fa2dda155a931ccb1670fd19fadfe3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_EDGE_ENHANCE, 241, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_2e892cabfe9a3181cfca6a2267122082 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_EDGE_ENHANCE_MORE, 250, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_182b80444fd463d65783e55f79c5b45c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_EMBOSS, 259, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_ab9b3a7a0657d006b795a8fdddc781ce = MAKE_CODEOBJ( module_filename_obj, const_str_plain_FIND_EDGES, 268, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_39503a432953dc1b0c966d2335b028bb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_GaussianBlur, 153, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_ed24899f6cb8054107835c368af3e32f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Kernel, 43, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_1f4d731788d8c0a553ef69f2df319dab = MAKE_CODEOBJ( module_filename_obj, const_str_plain_MaxFilter, 122, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_29870514b17fb3d9855230d26a5e018e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_MedianFilter, 94, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_85c1c33bfc54e852a587af0ca5d84895 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_MinFilter, 108, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_66c5e2de7b3952341f8021f4bcf4172b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_ModeFilter, 136, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_41916f6d60312bba0f6326fc5c208686 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_RankFilter, 71, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_c837e80cd14b39a226f3e311fa8f88f4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SHARPEN, 277, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_c7001ee9bb9b3765bc12a295c5d90a0d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SMOOTH, 286, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_12bbd41a59cbe9216355af244887535d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_SMOOTH_MORE, 295, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_92d894154318163f6084b76676199287 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_UnsharpMask, 187, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_4c15da5e10d6434c956c798acd2e21fd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 62, const_tuple_7256c42419e1b3925b1074fcf78cc285_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a23804824e7e5c27a25dc1ec5080b0b1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 83, const_tuple_str_plain_self_str_plain_size_str_plain_rank_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_76b918b1b732c188e59a88a97789b95a = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 103, const_tuple_str_plain_self_str_plain_size_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d31399269b9785b3c8ff87328f0abf1f = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 117, const_tuple_str_plain_self_str_plain_size_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_92033d521030b556c0b79032b67b64e9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 131, const_tuple_str_plain_self_str_plain_size_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e93cfeff5c9b3a8f4466916b0df876ac = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 146, const_tuple_str_plain_self_str_plain_size_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0f5409b204a7c8e4110ff6d4afda3128 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 160, const_tuple_str_plain_self_str_plain_radius_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_08f2849d1025926df43592b31cdd44dd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 180, const_tuple_str_plain_self_str_plain_radius_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a924ca563b410979a9b70fb42d7423df = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 203, const_tuple_87f50509eeb6fae4db9702d57a4f39e2_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_83c29977498b907cfbcb1f9b5bff9493 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 332, const_tuple_332c50d1783557542c0752f750452252_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_a5c32ad5befaa10200a08ca4118a677b = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 467, const_tuple_str_plain_self_str_plain_r_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_52bfda7a7085de102be770f8624d7117 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__check_size, 377, const_tuple_str_plain_size_str_plain___str_plain_size1D_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_930181cfd2c84cb3522cb8f70dceb02d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 37, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a2f3e18ce8f0c928ebb9efd95fe6c612 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 87, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2922234838f8625529e79b8ea7819e6a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 149, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1cbc79d522e1ab2bcb4ef115181d79f0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 163, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6928d937bcb1496dda62061913c94565 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 183, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9ccfebafbef3c978ef7ce3911c0a8284 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 208, const_tuple_str_plain_self_str_plain_image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_70e6db30cbbcf43d4cb98b942765d88f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_filter, 478, const_tuple_str_plain_self_str_plain_image_str_plain_Image_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_74282d4944e6914cbbe138d1c05abbca = MAKE_CODEOBJ( module_filename_obj, const_str_plain_generate, 392, const_tuple_3534e8651a584fda90e7ff5bd2905c64_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_aaadbe9cb0ff2c03a0ceebe89e33375b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_transform, 421, const_tuple_c94dac5ac8867aa856834159822c26a3_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_4__mro_entries_conversion( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1_complex_call_helper_star_list( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_5_complex_call_helper_pos_star_list( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_10___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_11_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_12___init__(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_13_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_14___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_15_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_16___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_17__check_size(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_18_generate( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_19_transform( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_1_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_20___repr__(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_21_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__$$$function_1_lambda(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_3___init__(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_4_filter(  );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_5___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_6___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_7___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_8___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_9_filter(  );


// The module function definitions.
static PyObject *impl_PIL$ImageFilter$$$function_1_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_930181cfd2c84cb3522cb8f70dceb02d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_930181cfd2c84cb3522cb8f70dceb02d = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_930181cfd2c84cb3522cb8f70dceb02d, codeobj_930181cfd2c84cb3522cb8f70dceb02d, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_930181cfd2c84cb3522cb8f70dceb02d = cache_frame_930181cfd2c84cb3522cb8f70dceb02d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_930181cfd2c84cb3522cb8f70dceb02d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_930181cfd2c84cb3522cb8f70dceb02d ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 38;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_P;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 38;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_018790cf874c9e36bf835bed51499c57;
            frame_930181cfd2c84cb3522cb8f70dceb02d->m_frame.f_lineno = 39;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 39;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_image );
        tmp_source_name_2 = par_image;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_filter );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 40;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_dircall_arg2_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_filterargs );
        if ( tmp_dircall_arg2_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 40;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___internal__$$$function_1_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 40;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_930181cfd2c84cb3522cb8f70dceb02d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_930181cfd2c84cb3522cb8f70dceb02d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_930181cfd2c84cb3522cb8f70dceb02d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_930181cfd2c84cb3522cb8f70dceb02d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_930181cfd2c84cb3522cb8f70dceb02d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_930181cfd2c84cb3522cb8f70dceb02d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_930181cfd2c84cb3522cb8f70dceb02d,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_930181cfd2c84cb3522cb8f70dceb02d == cache_frame_930181cfd2c84cb3522cb8f70dceb02d )
    {
        Py_DECREF( frame_930181cfd2c84cb3522cb8f70dceb02d );
    }
    cache_frame_930181cfd2c84cb3522cb8f70dceb02d = NULL;

    assertFrameObject( frame_930181cfd2c84cb3522cb8f70dceb02d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_1_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_1_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_2___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    PyObject *par_kernel = python_pars[ 2 ];
    PyObject *par_scale = python_pars[ 3 ];
    PyObject *par_offset = python_pars[ 4 ];
    struct Nuitka_FrameObject *frame_4c15da5e10d6434c956c798acd2e21fd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_4c15da5e10d6434c956c798acd2e21fd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4c15da5e10d6434c956c798acd2e21fd, codeobj_4c15da5e10d6434c956c798acd2e21fd, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4c15da5e10d6434c956c798acd2e21fd = cache_frame_4c15da5e10d6434c956c798acd2e21fd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4c15da5e10d6434c956c798acd2e21fd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4c15da5e10d6434c956c798acd2e21fd ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_scale );
        tmp_compexpr_left_1 = par_scale;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_functools );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_functools );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "functools" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 65;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_1 = tmp_mvar_value_1;
            tmp_args_element_name_1 = MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__$$$function_1_lambda(  );



            CHECK_OBJECT( par_kernel );
            tmp_args_element_name_2 = par_kernel;
            frame_4c15da5e10d6434c956c798acd2e21fd->m_frame.f_lineno = 65;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_reduce, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 65;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_scale;
                assert( old != NULL );
                par_scale = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( par_size );
        tmp_subscribed_name_1 = par_size;
        tmp_subscript_name_1 = const_int_0;
        tmp_left_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_size );
        tmp_subscribed_name_2 = par_size;
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_right_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_2 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_kernel );
        tmp_len_arg_1 = par_kernel;
        tmp_compexpr_right_2 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_2 );

            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_999cb5fa6af4c133afd03a82f7ef4c93;
            frame_4c15da5e10d6434c956c798acd2e21fd->m_frame.f_lineno = 67;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 67;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_tuple_element_1 = par_size;
        tmp_assattr_name_1 = PyTuple_New( 4 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_scale );
        tmp_tuple_element_1 = par_scale;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_1, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_offset );
        tmp_tuple_element_1 = par_offset;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_1, 2, tmp_tuple_element_1 );
        CHECK_OBJECT( par_kernel );
        tmp_tuple_element_1 = par_kernel;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_1, 3, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_filterargs, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c15da5e10d6434c956c798acd2e21fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4c15da5e10d6434c956c798acd2e21fd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4c15da5e10d6434c956c798acd2e21fd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4c15da5e10d6434c956c798acd2e21fd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4c15da5e10d6434c956c798acd2e21fd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4c15da5e10d6434c956c798acd2e21fd,
        type_description_1,
        par_self,
        par_size,
        par_kernel,
        par_scale,
        par_offset
    );


    // Release cached frame.
    if ( frame_4c15da5e10d6434c956c798acd2e21fd == cache_frame_4c15da5e10d6434c956c798acd2e21fd )
    {
        Py_DECREF( frame_4c15da5e10d6434c956c798acd2e21fd );
    }
    cache_frame_4c15da5e10d6434c956c798acd2e21fd = NULL;

    assertFrameObject( frame_4c15da5e10d6434c956c798acd2e21fd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_2___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_kernel );
    Py_DECREF( par_kernel );
    par_kernel = NULL;

    CHECK_OBJECT( (PyObject *)par_scale );
    Py_DECREF( par_scale );
    par_scale = NULL;

    CHECK_OBJECT( (PyObject *)par_offset );
    Py_DECREF( par_offset );
    par_offset = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_kernel );
    Py_DECREF( par_kernel );
    par_kernel = NULL;

    Py_XDECREF( par_scale );
    par_scale = NULL;

    CHECK_OBJECT( (PyObject *)par_offset );
    Py_DECREF( par_offset );
    par_offset = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_2___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_2___init__$$$function_1_lambda( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[ 0 ];
    PyObject *par_b = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_b77e67d14966b95a6ee53936f8363309;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b77e67d14966b95a6ee53936f8363309 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b77e67d14966b95a6ee53936f8363309, codeobj_b77e67d14966b95a6ee53936f8363309, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_b77e67d14966b95a6ee53936f8363309 = cache_frame_b77e67d14966b95a6ee53936f8363309;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b77e67d14966b95a6ee53936f8363309 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b77e67d14966b95a6ee53936f8363309 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_a );
        tmp_left_name_1 = par_a;
        CHECK_OBJECT( par_b );
        tmp_right_name_1 = par_b;
        tmp_return_value = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 65;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b77e67d14966b95a6ee53936f8363309 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b77e67d14966b95a6ee53936f8363309 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b77e67d14966b95a6ee53936f8363309 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b77e67d14966b95a6ee53936f8363309, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b77e67d14966b95a6ee53936f8363309->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b77e67d14966b95a6ee53936f8363309, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b77e67d14966b95a6ee53936f8363309,
        type_description_1,
        par_a,
        par_b
    );


    // Release cached frame.
    if ( frame_b77e67d14966b95a6ee53936f8363309 == cache_frame_b77e67d14966b95a6ee53936f8363309 )
    {
        Py_DECREF( frame_b77e67d14966b95a6ee53936f8363309 );
    }
    cache_frame_b77e67d14966b95a6ee53936f8363309 = NULL;

    assertFrameObject( frame_b77e67d14966b95a6ee53936f8363309 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_2___init__$$$function_1_lambda );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_a );
    Py_DECREF( par_a );
    par_a = NULL;

    CHECK_OBJECT( (PyObject *)par_b );
    Py_DECREF( par_b );
    par_b = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_2___init__$$$function_1_lambda );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_3___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    PyObject *par_rank = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_a23804824e7e5c27a25dc1ec5080b0b1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a23804824e7e5c27a25dc1ec5080b0b1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a23804824e7e5c27a25dc1ec5080b0b1, codeobj_a23804824e7e5c27a25dc1ec5080b0b1, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a23804824e7e5c27a25dc1ec5080b0b1 = cache_frame_a23804824e7e5c27a25dc1ec5080b0b1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a23804824e7e5c27a25dc1ec5080b0b1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a23804824e7e5c27a25dc1ec5080b0b1 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_assattr_name_1 = par_size;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 84;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_rank );
        tmp_assattr_name_2 = par_rank;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_rank, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 85;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a23804824e7e5c27a25dc1ec5080b0b1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a23804824e7e5c27a25dc1ec5080b0b1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a23804824e7e5c27a25dc1ec5080b0b1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a23804824e7e5c27a25dc1ec5080b0b1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a23804824e7e5c27a25dc1ec5080b0b1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a23804824e7e5c27a25dc1ec5080b0b1,
        type_description_1,
        par_self,
        par_size,
        par_rank
    );


    // Release cached frame.
    if ( frame_a23804824e7e5c27a25dc1ec5080b0b1 == cache_frame_a23804824e7e5c27a25dc1ec5080b0b1 )
    {
        Py_DECREF( frame_a23804824e7e5c27a25dc1ec5080b0b1 );
    }
    cache_frame_a23804824e7e5c27a25dc1ec5080b0b1 = NULL;

    assertFrameObject( frame_a23804824e7e5c27a25dc1ec5080b0b1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_3___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_rank );
    Py_DECREF( par_rank );
    par_rank = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_rank );
    Py_DECREF( par_rank );
    par_rank = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_3___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_4_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_a2f3e18ce8f0c928ebb9efd95fe6c612;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a2f3e18ce8f0c928ebb9efd95fe6c612 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a2f3e18ce8f0c928ebb9efd95fe6c612, codeobj_a2f3e18ce8f0c928ebb9efd95fe6c612, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_a2f3e18ce8f0c928ebb9efd95fe6c612 = cache_frame_a2f3e18ce8f0c928ebb9efd95fe6c612;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_mode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 88;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_P;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 88;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_018790cf874c9e36bf835bed51499c57;
            frame_a2f3e18ce8f0c928ebb9efd95fe6c612->m_frame.f_lineno = 89;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 89;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_right_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_image );
        tmp_source_name_2 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_expand );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_size );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_2;
        tmp_args_element_name_1 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_left_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_size );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_2;
        tmp_args_element_name_2 = BINARY_OPERATION_FLOORDIV( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a2f3e18ce8f0c928ebb9efd95fe6c612->m_frame.f_lineno = 90;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 90;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_image;
            assert( old != NULL );
            par_image = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_7;
        CHECK_OBJECT( par_image );
        tmp_source_name_5 = par_image;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_rankfilter );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 91;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_size );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 91;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_rank );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 91;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a2f3e18ce8f0c928ebb9efd95fe6c612->m_frame.f_lineno = 91;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 91;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a2f3e18ce8f0c928ebb9efd95fe6c612, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a2f3e18ce8f0c928ebb9efd95fe6c612->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a2f3e18ce8f0c928ebb9efd95fe6c612, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a2f3e18ce8f0c928ebb9efd95fe6c612,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 == cache_frame_a2f3e18ce8f0c928ebb9efd95fe6c612 )
    {
        Py_DECREF( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );
    }
    cache_frame_a2f3e18ce8f0c928ebb9efd95fe6c612 = NULL;

    assertFrameObject( frame_a2f3e18ce8f0c928ebb9efd95fe6c612 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_4_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_4_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_5___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_76b918b1b732c188e59a88a97789b95a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_76b918b1b732c188e59a88a97789b95a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_76b918b1b732c188e59a88a97789b95a, codeobj_76b918b1b732c188e59a88a97789b95a, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_76b918b1b732c188e59a88a97789b95a = cache_frame_76b918b1b732c188e59a88a97789b95a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_76b918b1b732c188e59a88a97789b95a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_76b918b1b732c188e59a88a97789b95a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_assattr_name_1 = par_size;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 104;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_size );
        tmp_left_name_2 = par_size;
        CHECK_OBJECT( par_size );
        tmp_right_name_1 = par_size;
        tmp_left_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_2;
        tmp_assattr_name_2 = BINARY_OPERATION_FLOORDIV( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_rank, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_76b918b1b732c188e59a88a97789b95a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_76b918b1b732c188e59a88a97789b95a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_76b918b1b732c188e59a88a97789b95a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_76b918b1b732c188e59a88a97789b95a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_76b918b1b732c188e59a88a97789b95a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_76b918b1b732c188e59a88a97789b95a,
        type_description_1,
        par_self,
        par_size
    );


    // Release cached frame.
    if ( frame_76b918b1b732c188e59a88a97789b95a == cache_frame_76b918b1b732c188e59a88a97789b95a )
    {
        Py_DECREF( frame_76b918b1b732c188e59a88a97789b95a );
    }
    cache_frame_76b918b1b732c188e59a88a97789b95a = NULL;

    assertFrameObject( frame_76b918b1b732c188e59a88a97789b95a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_5___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_5___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_6___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_d31399269b9785b3c8ff87328f0abf1f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d31399269b9785b3c8ff87328f0abf1f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d31399269b9785b3c8ff87328f0abf1f, codeobj_d31399269b9785b3c8ff87328f0abf1f, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_d31399269b9785b3c8ff87328f0abf1f = cache_frame_d31399269b9785b3c8ff87328f0abf1f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d31399269b9785b3c8ff87328f0abf1f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d31399269b9785b3c8ff87328f0abf1f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_assattr_name_1 = par_size;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 118;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = const_int_0;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_rank, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 119;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d31399269b9785b3c8ff87328f0abf1f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d31399269b9785b3c8ff87328f0abf1f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d31399269b9785b3c8ff87328f0abf1f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d31399269b9785b3c8ff87328f0abf1f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d31399269b9785b3c8ff87328f0abf1f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d31399269b9785b3c8ff87328f0abf1f,
        type_description_1,
        par_self,
        par_size
    );


    // Release cached frame.
    if ( frame_d31399269b9785b3c8ff87328f0abf1f == cache_frame_d31399269b9785b3c8ff87328f0abf1f )
    {
        Py_DECREF( frame_d31399269b9785b3c8ff87328f0abf1f );
    }
    cache_frame_d31399269b9785b3c8ff87328f0abf1f = NULL;

    assertFrameObject( frame_d31399269b9785b3c8ff87328f0abf1f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_6___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_6___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_7___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_92033d521030b556c0b79032b67b64e9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_92033d521030b556c0b79032b67b64e9 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_92033d521030b556c0b79032b67b64e9, codeobj_92033d521030b556c0b79032b67b64e9, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_92033d521030b556c0b79032b67b64e9 = cache_frame_92033d521030b556c0b79032b67b64e9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_92033d521030b556c0b79032b67b64e9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_92033d521030b556c0b79032b67b64e9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_assattr_name_1 = par_size;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_size );
        tmp_left_name_2 = par_size;
        CHECK_OBJECT( par_size );
        tmp_right_name_1 = par_size;
        tmp_left_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_1;
        tmp_assattr_name_2 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_rank, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_92033d521030b556c0b79032b67b64e9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_92033d521030b556c0b79032b67b64e9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_92033d521030b556c0b79032b67b64e9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_92033d521030b556c0b79032b67b64e9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_92033d521030b556c0b79032b67b64e9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_92033d521030b556c0b79032b67b64e9,
        type_description_1,
        par_self,
        par_size
    );


    // Release cached frame.
    if ( frame_92033d521030b556c0b79032b67b64e9 == cache_frame_92033d521030b556c0b79032b67b64e9 )
    {
        Py_DECREF( frame_92033d521030b556c0b79032b67b64e9 );
    }
    cache_frame_92033d521030b556c0b79032b67b64e9 = NULL;

    assertFrameObject( frame_92033d521030b556c0b79032b67b64e9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_7___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_7___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_8___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_e93cfeff5c9b3a8f4466916b0df876ac;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e93cfeff5c9b3a8f4466916b0df876ac = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e93cfeff5c9b3a8f4466916b0df876ac, codeobj_e93cfeff5c9b3a8f4466916b0df876ac, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_e93cfeff5c9b3a8f4466916b0df876ac = cache_frame_e93cfeff5c9b3a8f4466916b0df876ac;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e93cfeff5c9b3a8f4466916b0df876ac );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e93cfeff5c9b3a8f4466916b0df876ac ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_size );
        tmp_assattr_name_1 = par_size;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e93cfeff5c9b3a8f4466916b0df876ac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e93cfeff5c9b3a8f4466916b0df876ac );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e93cfeff5c9b3a8f4466916b0df876ac, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e93cfeff5c9b3a8f4466916b0df876ac->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e93cfeff5c9b3a8f4466916b0df876ac, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e93cfeff5c9b3a8f4466916b0df876ac,
        type_description_1,
        par_self,
        par_size
    );


    // Release cached frame.
    if ( frame_e93cfeff5c9b3a8f4466916b0df876ac == cache_frame_e93cfeff5c9b3a8f4466916b0df876ac )
    {
        Py_DECREF( frame_e93cfeff5c9b3a8f4466916b0df876ac );
    }
    cache_frame_e93cfeff5c9b3a8f4466916b0df876ac = NULL;

    assertFrameObject( frame_e93cfeff5c9b3a8f4466916b0df876ac );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_8___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_8___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_9_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_2922234838f8625529e79b8ea7819e6a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2922234838f8625529e79b8ea7819e6a = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2922234838f8625529e79b8ea7819e6a, codeobj_2922234838f8625529e79b8ea7819e6a, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_2922234838f8625529e79b8ea7819e6a = cache_frame_2922234838f8625529e79b8ea7819e6a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2922234838f8625529e79b8ea7819e6a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2922234838f8625529e79b8ea7819e6a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_modefilter );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 150;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_size );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 150;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_2922234838f8625529e79b8ea7819e6a->m_frame.f_lineno = 150;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 150;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2922234838f8625529e79b8ea7819e6a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2922234838f8625529e79b8ea7819e6a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2922234838f8625529e79b8ea7819e6a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2922234838f8625529e79b8ea7819e6a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2922234838f8625529e79b8ea7819e6a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2922234838f8625529e79b8ea7819e6a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2922234838f8625529e79b8ea7819e6a,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_2922234838f8625529e79b8ea7819e6a == cache_frame_2922234838f8625529e79b8ea7819e6a )
    {
        Py_DECREF( frame_2922234838f8625529e79b8ea7819e6a );
    }
    cache_frame_2922234838f8625529e79b8ea7819e6a = NULL;

    assertFrameObject( frame_2922234838f8625529e79b8ea7819e6a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_9_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_9_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_10___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_radius = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_0f5409b204a7c8e4110ff6d4afda3128;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0f5409b204a7c8e4110ff6d4afda3128 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0f5409b204a7c8e4110ff6d4afda3128, codeobj_0f5409b204a7c8e4110ff6d4afda3128, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_0f5409b204a7c8e4110ff6d4afda3128 = cache_frame_0f5409b204a7c8e4110ff6d4afda3128;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0f5409b204a7c8e4110ff6d4afda3128 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0f5409b204a7c8e4110ff6d4afda3128 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_radius );
        tmp_assattr_name_1 = par_radius;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_radius, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 161;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f5409b204a7c8e4110ff6d4afda3128 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f5409b204a7c8e4110ff6d4afda3128 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0f5409b204a7c8e4110ff6d4afda3128, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0f5409b204a7c8e4110ff6d4afda3128->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0f5409b204a7c8e4110ff6d4afda3128, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0f5409b204a7c8e4110ff6d4afda3128,
        type_description_1,
        par_self,
        par_radius
    );


    // Release cached frame.
    if ( frame_0f5409b204a7c8e4110ff6d4afda3128 == cache_frame_0f5409b204a7c8e4110ff6d4afda3128 )
    {
        Py_DECREF( frame_0f5409b204a7c8e4110ff6d4afda3128 );
    }
    cache_frame_0f5409b204a7c8e4110ff6d4afda3128 = NULL;

    assertFrameObject( frame_0f5409b204a7c8e4110ff6d4afda3128 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_10___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_10___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_11_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_1cbc79d522e1ab2bcb4ef115181d79f0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1cbc79d522e1ab2bcb4ef115181d79f0 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1cbc79d522e1ab2bcb4ef115181d79f0, codeobj_1cbc79d522e1ab2bcb4ef115181d79f0, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_1cbc79d522e1ab2bcb4ef115181d79f0 = cache_frame_1cbc79d522e1ab2bcb4ef115181d79f0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1cbc79d522e1ab2bcb4ef115181d79f0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_gaussian_blur );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 164;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_radius );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 164;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_1cbc79d522e1ab2bcb4ef115181d79f0->m_frame.f_lineno = 164;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 164;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1cbc79d522e1ab2bcb4ef115181d79f0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1cbc79d522e1ab2bcb4ef115181d79f0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1cbc79d522e1ab2bcb4ef115181d79f0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1cbc79d522e1ab2bcb4ef115181d79f0,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_1cbc79d522e1ab2bcb4ef115181d79f0 == cache_frame_1cbc79d522e1ab2bcb4ef115181d79f0 )
    {
        Py_DECREF( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );
    }
    cache_frame_1cbc79d522e1ab2bcb4ef115181d79f0 = NULL;

    assertFrameObject( frame_1cbc79d522e1ab2bcb4ef115181d79f0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_11_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_11_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_12___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_radius = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_08f2849d1025926df43592b31cdd44dd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_08f2849d1025926df43592b31cdd44dd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_08f2849d1025926df43592b31cdd44dd, codeobj_08f2849d1025926df43592b31cdd44dd, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_08f2849d1025926df43592b31cdd44dd = cache_frame_08f2849d1025926df43592b31cdd44dd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_08f2849d1025926df43592b31cdd44dd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_08f2849d1025926df43592b31cdd44dd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_radius );
        tmp_assattr_name_1 = par_radius;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_radius, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 181;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08f2849d1025926df43592b31cdd44dd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_08f2849d1025926df43592b31cdd44dd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_08f2849d1025926df43592b31cdd44dd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_08f2849d1025926df43592b31cdd44dd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_08f2849d1025926df43592b31cdd44dd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_08f2849d1025926df43592b31cdd44dd,
        type_description_1,
        par_self,
        par_radius
    );


    // Release cached frame.
    if ( frame_08f2849d1025926df43592b31cdd44dd == cache_frame_08f2849d1025926df43592b31cdd44dd )
    {
        Py_DECREF( frame_08f2849d1025926df43592b31cdd44dd );
    }
    cache_frame_08f2849d1025926df43592b31cdd44dd = NULL;

    assertFrameObject( frame_08f2849d1025926df43592b31cdd44dd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_12___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_12___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_13_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_6928d937bcb1496dda62061913c94565;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6928d937bcb1496dda62061913c94565 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6928d937bcb1496dda62061913c94565, codeobj_6928d937bcb1496dda62061913c94565, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_6928d937bcb1496dda62061913c94565 = cache_frame_6928d937bcb1496dda62061913c94565;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6928d937bcb1496dda62061913c94565 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6928d937bcb1496dda62061913c94565 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_box_blur );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 184;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_radius );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 184;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_6928d937bcb1496dda62061913c94565->m_frame.f_lineno = 184;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 184;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6928d937bcb1496dda62061913c94565 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6928d937bcb1496dda62061913c94565 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6928d937bcb1496dda62061913c94565 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6928d937bcb1496dda62061913c94565, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6928d937bcb1496dda62061913c94565->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6928d937bcb1496dda62061913c94565, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6928d937bcb1496dda62061913c94565,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_6928d937bcb1496dda62061913c94565 == cache_frame_6928d937bcb1496dda62061913c94565 )
    {
        Py_DECREF( frame_6928d937bcb1496dda62061913c94565 );
    }
    cache_frame_6928d937bcb1496dda62061913c94565 = NULL;

    assertFrameObject( frame_6928d937bcb1496dda62061913c94565 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_13_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_13_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_14___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_radius = python_pars[ 1 ];
    PyObject *par_percent = python_pars[ 2 ];
    PyObject *par_threshold = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_a924ca563b410979a9b70fb42d7423df;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a924ca563b410979a9b70fb42d7423df = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a924ca563b410979a9b70fb42d7423df, codeobj_a924ca563b410979a9b70fb42d7423df, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a924ca563b410979a9b70fb42d7423df = cache_frame_a924ca563b410979a9b70fb42d7423df;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a924ca563b410979a9b70fb42d7423df );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a924ca563b410979a9b70fb42d7423df ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_radius );
        tmp_assattr_name_1 = par_radius;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_radius, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 204;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_percent );
        tmp_assattr_name_2 = par_percent;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_percent, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_threshold );
        tmp_assattr_name_3 = par_threshold;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_threshold, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 206;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a924ca563b410979a9b70fb42d7423df );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a924ca563b410979a9b70fb42d7423df );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a924ca563b410979a9b70fb42d7423df, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a924ca563b410979a9b70fb42d7423df->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a924ca563b410979a9b70fb42d7423df, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a924ca563b410979a9b70fb42d7423df,
        type_description_1,
        par_self,
        par_radius,
        par_percent,
        par_threshold
    );


    // Release cached frame.
    if ( frame_a924ca563b410979a9b70fb42d7423df == cache_frame_a924ca563b410979a9b70fb42d7423df )
    {
        Py_DECREF( frame_a924ca563b410979a9b70fb42d7423df );
    }
    cache_frame_a924ca563b410979a9b70fb42d7423df = NULL;

    assertFrameObject( frame_a924ca563b410979a9b70fb42d7423df );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_14___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    CHECK_OBJECT( (PyObject *)par_percent );
    Py_DECREF( par_percent );
    par_percent = NULL;

    CHECK_OBJECT( (PyObject *)par_threshold );
    Py_DECREF( par_threshold );
    par_threshold = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_radius );
    Py_DECREF( par_radius );
    par_radius = NULL;

    CHECK_OBJECT( (PyObject *)par_percent );
    Py_DECREF( par_percent );
    par_percent = NULL;

    CHECK_OBJECT( (PyObject *)par_threshold );
    Py_DECREF( par_threshold );
    par_threshold = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_14___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_15_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_9ccfebafbef3c978ef7ce3911c0a8284;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9ccfebafbef3c978ef7ce3911c0a8284 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9ccfebafbef3c978ef7ce3911c0a8284, codeobj_9ccfebafbef3c978ef7ce3911c0a8284, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_9ccfebafbef3c978ef7ce3911c0a8284 = cache_frame_9ccfebafbef3c978ef7ce3911c0a8284;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9ccfebafbef3c978ef7ce3911c0a8284 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9ccfebafbef3c978ef7ce3911c0a8284 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_unsharp_mask );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_radius );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 209;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_percent );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 209;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_threshold );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 209;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_9ccfebafbef3c978ef7ce3911c0a8284->m_frame.f_lineno = 209;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 209;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ccfebafbef3c978ef7ce3911c0a8284 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ccfebafbef3c978ef7ce3911c0a8284 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ccfebafbef3c978ef7ce3911c0a8284 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9ccfebafbef3c978ef7ce3911c0a8284, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9ccfebafbef3c978ef7ce3911c0a8284->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9ccfebafbef3c978ef7ce3911c0a8284, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9ccfebafbef3c978ef7ce3911c0a8284,
        type_description_1,
        par_self,
        par_image
    );


    // Release cached frame.
    if ( frame_9ccfebafbef3c978ef7ce3911c0a8284 == cache_frame_9ccfebafbef3c978ef7ce3911c0a8284 )
    {
        Py_DECREF( frame_9ccfebafbef3c978ef7ce3911c0a8284 );
    }
    cache_frame_9ccfebafbef3c978ef7ce3911c0a8284 = NULL;

    assertFrameObject( frame_9ccfebafbef3c978ef7ce3911c0a8284 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_15_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_15_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_16___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    PyObject *par_table = python_pars[ 2 ];
    PyObject *par_channels = python_pars[ 3 ];
    PyObject *par_target_mode = python_pars[ 4 ];
    PyObject *par_kwargs = python_pars[ 5 ];
    PyObject *var_copy_table = NULL;
    PyObject *var_items = NULL;
    nuitka_bool var_wrong_size = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_raw_table = NULL;
    PyObject *var_pixel = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_83c29977498b907cfbcb1f9b5bff9493;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_83c29977498b907cfbcb1f9b5bff9493 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_83c29977498b907cfbcb1f9b5bff9493, codeobj_83c29977498b907cfbcb1f9b5bff9493, module_PIL$ImageFilter, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_83c29977498b907cfbcb1f9b5bff9493 = cache_frame_83c29977498b907cfbcb1f9b5bff9493;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_83c29977498b907cfbcb1f9b5bff9493 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_83c29977498b907cfbcb1f9b5bff9493 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_channels );
        tmp_compexpr_left_1 = par_channels;
        tmp_compexpr_right_1 = const_tuple_int_pos_3_int_pos_4_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 333;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_37b3cee7db7dcf40fa3cc74610972044;
            frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 334;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 334;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_size );
        tmp_args_element_name_1 = par_size;
        frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 335;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__check_size, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 335;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }
        assert( tmp_assign_unpack_1__assign_source == NULL );
        tmp_assign_unpack_1__assign_source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assattr_name_1 = tmp_assign_unpack_1__assign_source;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_size, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 335;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
        tmp_assign_source_2 = tmp_assign_unpack_1__assign_source;
        {
            PyObject *old = par_size;
            assert( old != NULL );
            par_size = tmp_assign_source_2;
            Py_INCREF( par_size );
            Py_DECREF( old );
        }

    }
    CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
    Py_DECREF( tmp_assign_unpack_1__assign_source );
    tmp_assign_unpack_1__assign_source = NULL;

    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_channels );
        tmp_assattr_name_2 = par_channels;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_channels, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 336;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_target_mode );
        tmp_assattr_name_3 = par_target_mode;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_mode, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 337;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_kwargs );
        tmp_called_instance_2 = par_kwargs;
        frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 341;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain__copy_table_true_tuple, 0 ) );

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 341;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_copy_table == NULL );
        var_copy_table = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT( par_size );
        tmp_subscribed_name_1 = par_size;
        tmp_subscript_name_1 = const_int_0;
        tmp_left_name_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 342;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_size );
        tmp_subscribed_name_2 = par_size;
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_right_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_2 );

            exception_lineno = 342;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_2 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 342;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_size );
        tmp_subscribed_name_3 = par_size;
        tmp_subscript_name_3 = const_int_pos_2;
        tmp_right_name_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 2 );
        if ( tmp_right_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 342;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 342;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_items == NULL );
        var_items = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_assign_source_5;
        tmp_assign_source_5 = NUITKA_BOOL_FALSE;
        var_wrong_size = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_mvar_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_numpy );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "numpy" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 345;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 345;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_table );
        tmp_isinstance_inst_1 = par_table;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_numpy );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_numpy );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "numpy" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 345;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_ndarray );
        if ( tmp_isinstance_cls_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 345;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        Py_DECREF( tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 345;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_3;
            int tmp_truth_name_2;
            CHECK_OBJECT( var_copy_table );
            tmp_truth_name_2 = CHECK_IF_TRUE( var_copy_table );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 346;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_6;
                PyObject *tmp_called_instance_3;
                CHECK_OBJECT( par_table );
                tmp_called_instance_3 = par_table;
                frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 347;
                tmp_assign_source_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_copy );
                if ( tmp_assign_source_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 347;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_table;
                    assert( old != NULL );
                    par_table = tmp_assign_source_6;
                    Py_DECREF( old );
                }

            }
            branch_no_3:;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_list_element_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_subscript_name_5;
            PyObject *tmp_subscribed_name_6;
            PyObject *tmp_subscript_name_6;
            CHECK_OBJECT( par_table );
            tmp_source_name_2 = par_table;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_shape );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 349;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_items );
            tmp_left_name_3 = var_items;
            CHECK_OBJECT( par_channels );
            tmp_right_name_3 = par_channels;
            tmp_tuple_element_1 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );

                exception_lineno = 349;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_list_element_1 = PyTuple_New( 1 );
            PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_1 );
            tmp_compexpr_right_2 = PyList_New( 3 );
            PyList_SET_ITEM( tmp_compexpr_right_2, 0, tmp_list_element_1 );
            CHECK_OBJECT( var_items );
            tmp_tuple_element_2 = var_items;
            tmp_list_element_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_channels );
            tmp_tuple_element_2 = par_channels;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_2 );
            PyList_SET_ITEM( tmp_compexpr_right_2, 1, tmp_list_element_1 );
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_4 = par_size;
            tmp_subscript_name_4 = const_int_pos_2;
            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 2 );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );
                Py_DECREF( tmp_compexpr_right_2 );

                exception_lineno = 350;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_list_element_1 = PyTuple_New( 4 );
            PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_5 = par_size;
            tmp_subscript_name_5 = const_int_pos_1;
            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 1 );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );
                Py_DECREF( tmp_compexpr_right_2 );
                Py_DECREF( tmp_list_element_1 );

                exception_lineno = 350;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_3 );
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_6 = par_size;
            tmp_subscript_name_6 = const_int_0;
            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 0 );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );
                Py_DECREF( tmp_compexpr_right_2 );
                Py_DECREF( tmp_list_element_1 );

                exception_lineno = 350;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_list_element_1, 2, tmp_tuple_element_3 );
            CHECK_OBJECT( par_channels );
            tmp_tuple_element_3 = par_channels;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_list_element_1, 3, tmp_tuple_element_3 );
            PyList_SET_ITEM( tmp_compexpr_right_2, 2, tmp_list_element_1 );
            tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            Py_DECREF( tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 349;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_called_name_1;
                PyObject *tmp_source_name_3;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_left_name_4;
                PyObject *tmp_right_name_4;
                CHECK_OBJECT( par_table );
                tmp_source_name_3 = par_table;
                tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_reshape );
                if ( tmp_called_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 351;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_items );
                tmp_left_name_4 = var_items;
                CHECK_OBJECT( par_channels );
                tmp_right_name_4 = par_channels;
                tmp_args_element_name_2 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_4 );
                if ( tmp_args_element_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 351;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 351;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_assign_source_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 351;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_table;
                    assert( old != NULL );
                    par_table = tmp_assign_source_7;
                    Py_DECREF( old );
                }

            }
            goto branch_end_4;
            branch_no_4:;
            {
                nuitka_bool tmp_assign_source_8;
                tmp_assign_source_8 = NUITKA_BOOL_TRUE;
                var_wrong_size = tmp_assign_source_8;
            }
            branch_end_4:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_3;
            CHECK_OBJECT( var_copy_table );
            tmp_truth_name_3 = CHECK_IF_TRUE( var_copy_table );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 356;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_9;
                PyObject *tmp_list_arg_1;
                CHECK_OBJECT( par_table );
                tmp_list_arg_1 = par_table;
                tmp_assign_source_9 = PySequence_List( tmp_list_arg_1 );
                if ( tmp_assign_source_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 357;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_table;
                    assert( old != NULL );
                    par_table = tmp_assign_source_9;
                    Py_DECREF( old );
                }

            }
            branch_no_5:;
        }
        {
            nuitka_bool tmp_condition_result_6;
            int tmp_and_left_truth_2;
            nuitka_bool tmp_and_left_value_2;
            nuitka_bool tmp_and_right_value_2;
            int tmp_truth_name_4;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_subscribed_name_7;
            PyObject *tmp_subscript_name_7;
            CHECK_OBJECT( par_table );
            tmp_truth_name_4 = CHECK_IF_TRUE( par_table );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 360;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_2 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_2 == 1 )
            {
                goto and_right_2;
            }
            else
            {
                goto and_left_2;
            }
            and_right_2:;
            CHECK_OBJECT( par_table );
            tmp_subscribed_name_7 = par_table;
            tmp_subscript_name_7 = const_int_0;
            tmp_isinstance_inst_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 0 );
            if ( tmp_isinstance_inst_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 360;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_isinstance_cls_2 = const_tuple_type_list_type_tuple_tuple;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            Py_DECREF( tmp_isinstance_inst_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 360;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_6 = tmp_and_right_value_2;
            goto and_end_2;
            and_left_2:;
            tmp_condition_result_6 = tmp_and_left_value_2;
            and_end_2:;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_10;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_tuple_element_4;
                tmp_tuple_element_4 = PyList_New( 0 );
                tmp_iter_arg_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_4 );
                CHECK_OBJECT( par_table );
                tmp_tuple_element_4 = par_table;
                Py_INCREF( tmp_tuple_element_4 );
                PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_4 );
                tmp_assign_source_10 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                assert( !(tmp_assign_source_10 == NULL) );
                assert( tmp_tuple_unpack_1__source_iter == NULL );
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_10;
            }
            // Tried code:
            // Tried code:
            {
                PyObject *tmp_assign_source_11;
                PyObject *tmp_unpack_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
                if ( tmp_assign_source_11 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooboo";
                    exception_lineno = 361;
                    goto try_except_handler_4;
                }
                assert( tmp_tuple_unpack_1__element_1 == NULL );
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_11;
            }
            {
                PyObject *tmp_assign_source_12;
                PyObject *tmp_unpack_2;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
                if ( tmp_assign_source_12 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooboo";
                    exception_lineno = 361;
                    goto try_except_handler_4;
                }
                assert( tmp_tuple_unpack_1__element_2 == NULL );
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_12;
            }
            goto try_end_2;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto try_except_handler_3;
            // End of try:
            try_end_2:;
            goto try_end_3;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto frame_exception_exit_1;
            // End of try:
            try_end_3:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            {
                PyObject *tmp_assign_source_13;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
                tmp_assign_source_13 = tmp_tuple_unpack_1__element_1;
                {
                    PyObject *old = par_table;
                    assert( old != NULL );
                    par_table = tmp_assign_source_13;
                    Py_INCREF( par_table );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            {
                PyObject *tmp_assign_source_14;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
                tmp_assign_source_14 = tmp_tuple_unpack_1__element_2;
                assert( var_raw_table == NULL );
                Py_INCREF( tmp_assign_source_14 );
                var_raw_table = tmp_assign_source_14;
            }
            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            {
                PyObject *tmp_assign_source_15;
                PyObject *tmp_iter_arg_2;
                CHECK_OBJECT( var_raw_table );
                tmp_iter_arg_2 = var_raw_table;
                tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_2 );
                if ( tmp_assign_source_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 362;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                assert( tmp_for_loop_1__for_iterator == NULL );
                tmp_for_loop_1__for_iterator = tmp_assign_source_15;
            }
            // Tried code:
            loop_start_1:;
            {
                PyObject *tmp_next_source_1;
                PyObject *tmp_assign_source_16;
                CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_1 );
                if ( tmp_assign_source_16 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_1;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "ooooooooboo";
                        exception_lineno = 362;
                        goto try_except_handler_5;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_1__iter_value;
                    tmp_for_loop_1__iter_value = tmp_assign_source_16;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_17;
                CHECK_OBJECT( tmp_for_loop_1__iter_value );
                tmp_assign_source_17 = tmp_for_loop_1__iter_value;
                {
                    PyObject *old = var_pixel;
                    var_pixel = tmp_assign_source_17;
                    Py_INCREF( var_pixel );
                    Py_XDECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_len_arg_1;
                CHECK_OBJECT( var_pixel );
                tmp_len_arg_1 = var_pixel;
                tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_1 );
                if ( tmp_compexpr_left_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 363;
                    type_description_1 = "ooooooooboo";
                    goto try_except_handler_5;
                }
                CHECK_OBJECT( par_channels );
                tmp_compexpr_right_3 = par_channels;
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                Py_DECREF( tmp_compexpr_left_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 363;
                    type_description_1 = "ooooooooboo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_raise_type_2;
                    PyObject *tmp_make_exception_arg_2;
                    PyObject *tmp_called_instance_4;
                    PyObject *tmp_args_element_name_3;
                    tmp_called_instance_4 = const_str_digest_7c3b53bc986d2a88550d08dd3907b263;
                    CHECK_OBJECT( par_channels );
                    tmp_args_element_name_3 = par_channels;
                    frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 365;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_3 };
                        tmp_make_exception_arg_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_format, call_args );
                    }

                    if ( tmp_make_exception_arg_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 365;
                        type_description_1 = "ooooooooboo";
                        goto try_except_handler_5;
                    }
                    frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 364;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_2 };
                        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    Py_DECREF( tmp_make_exception_arg_2 );
                    assert( !(tmp_raise_type_2 == NULL) );
                    exception_type = tmp_raise_type_2;
                    exception_lineno = 364;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooooooboo";
                    goto try_except_handler_5;
                }
                branch_no_7:;
            }
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_4;
                CHECK_OBJECT( par_table );
                tmp_called_instance_5 = par_table;
                CHECK_OBJECT( var_pixel );
                tmp_args_element_name_4 = var_pixel;
                frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 367;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_extend, call_args );
                }

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 367;
                    type_description_1 = "ooooooooboo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_5;
            }
            goto loop_start_1;
            loop_end_1:;
            goto try_end_4;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            try_end_4:;
            Py_XDECREF( tmp_for_loop_1__iter_value );
            tmp_for_loop_1__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
            Py_DECREF( tmp_for_loop_1__for_iterator );
            tmp_for_loop_1__for_iterator = NULL;

            branch_no_6:;
        }
        branch_end_2:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        if ( var_wrong_size == NUITKA_BOOL_UNASSIGNED )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "wrong_size" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 369;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_or_left_value_1 = var_wrong_size;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        if ( par_table == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "table" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 369;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_len_arg_2 = par_table;
        tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_2 );
        if ( tmp_compexpr_left_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 369;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_items );
        tmp_left_name_5 = var_items;
        CHECK_OBJECT( par_channels );
        tmp_right_name_5 = par_channels;
        tmp_compexpr_right_4 = BINARY_OPERATION_MUL( tmp_left_name_5, tmp_right_name_5 );
        if ( tmp_compexpr_right_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_4 );

            exception_lineno = 369;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        Py_DECREF( tmp_compexpr_left_4 );
        Py_DECREF( tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 369;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_8 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_8 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_raise_type_3;
            PyObject *tmp_make_exception_arg_3;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_subscribed_name_8;
            PyObject *tmp_subscript_name_8;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_subscribed_name_9;
            PyObject *tmp_subscript_name_9;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_subscribed_name_10;
            PyObject *tmp_subscript_name_10;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_len_arg_3;
            tmp_source_name_4 = const_str_digest_55a3e477b8e90cfd4b1ba84ed192e679;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_format );
            assert( !(tmp_called_name_2 == NULL) );
            CHECK_OBJECT( par_channels );
            tmp_args_element_name_5 = par_channels;
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_8 = par_size;
            tmp_subscript_name_8 = const_int_0;
            tmp_args_element_name_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_8, tmp_subscript_name_8, 0 );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 374;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_9 = par_size;
            tmp_subscript_name_9 = const_int_pos_1;
            tmp_args_element_name_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_9, tmp_subscript_name_9, 1 );
            if ( tmp_args_element_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_element_name_6 );

                exception_lineno = 374;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_size );
            tmp_subscribed_name_10 = par_size;
            tmp_subscript_name_10 = const_int_pos_2;
            tmp_args_element_name_8 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_10, tmp_subscript_name_10, 2 );
            if ( tmp_args_element_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_element_name_6 );
                Py_DECREF( tmp_args_element_name_7 );

                exception_lineno = 374;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            if ( par_table == NULL )
            {
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_element_name_6 );
                Py_DECREF( tmp_args_element_name_7 );
                Py_DECREF( tmp_args_element_name_8 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "table" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 374;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }

            tmp_len_arg_3 = par_table;
            tmp_args_element_name_9 = BUILTIN_LEN( tmp_len_arg_3 );
            if ( tmp_args_element_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_element_name_6 );
                Py_DECREF( tmp_args_element_name_7 );
                Py_DECREF( tmp_args_element_name_8 );

                exception_lineno = 374;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 371;
            {
                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
                tmp_make_exception_arg_3 = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_8 );
            Py_DECREF( tmp_args_element_name_9 );
            if ( tmp_make_exception_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 371;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            frame_83c29977498b907cfbcb1f9b5bff9493->m_frame.f_lineno = 370;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_3 };
                tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_3 );
            assert( !(tmp_raise_type_3 == NULL) );
            exception_type = tmp_raise_type_3;
            exception_lineno = 370;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        if ( par_table == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "table" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 375;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_name_4 = par_table;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_table, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 375;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_83c29977498b907cfbcb1f9b5bff9493 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_83c29977498b907cfbcb1f9b5bff9493 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_83c29977498b907cfbcb1f9b5bff9493, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_83c29977498b907cfbcb1f9b5bff9493->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_83c29977498b907cfbcb1f9b5bff9493, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_83c29977498b907cfbcb1f9b5bff9493,
        type_description_1,
        par_self,
        par_size,
        par_table,
        par_channels,
        par_target_mode,
        par_kwargs,
        var_copy_table,
        var_items,
        (int)var_wrong_size,
        var_raw_table,
        var_pixel
    );


    // Release cached frame.
    if ( frame_83c29977498b907cfbcb1f9b5bff9493 == cache_frame_83c29977498b907cfbcb1f9b5bff9493 )
    {
        Py_DECREF( frame_83c29977498b907cfbcb1f9b5bff9493 );
    }
    cache_frame_83c29977498b907cfbcb1f9b5bff9493 = NULL;

    assertFrameObject( frame_83c29977498b907cfbcb1f9b5bff9493 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_16___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    Py_XDECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_copy_table );
    Py_DECREF( var_copy_table );
    var_copy_table = NULL;

    CHECK_OBJECT( (PyObject *)var_items );
    Py_DECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_raw_table );
    var_raw_table = NULL;

    Py_XDECREF( var_pixel );
    var_pixel = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    Py_XDECREF( par_table );
    par_table = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_copy_table );
    var_copy_table = NULL;

    Py_XDECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_raw_table );
    var_raw_table = NULL;

    Py_XDECREF( var_pixel );
    var_pixel = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_16___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_17__check_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_size = python_pars[ 0 ];
    PyObject *var__ = NULL;
    PyObject *var_size1D = NULL;
    PyObject *outline_0_var_x = NULL;
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_52bfda7a7085de102be770f8624d7117;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    struct Nuitka_FrameObject *frame_b4956a016726519fd2c34652359a3c04_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_b4956a016726519fd2c34652359a3c04_2 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    static struct Nuitka_FrameObject *cache_frame_52bfda7a7085de102be770f8624d7117 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_52bfda7a7085de102be770f8624d7117, codeobj_52bfda7a7085de102be770f8624d7117, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_52bfda7a7085de102be770f8624d7117 = cache_frame_52bfda7a7085de102be770f8624d7117;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_52bfda7a7085de102be770f8624d7117 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_52bfda7a7085de102be770f8624d7117 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_size );
        tmp_iter_arg_1 = par_size;
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooo";
            exception_lineno = 380;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooo";
            exception_lineno = 380;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooo";
            exception_lineno = 380;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooo";
                    exception_lineno = 380;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooo";
            exception_lineno = 380;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert( var__ == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var__ = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var__;
            assert( old != NULL );
            var__ = tmp_assign_source_6;
            Py_INCREF( var__ );
            Py_DECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var__;
            assert( old != NULL );
            var__ = tmp_assign_source_7;
            Py_INCREF( var__ );
            Py_DECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_52bfda7a7085de102be770f8624d7117, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_52bfda7a7085de102be770f8624d7117, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 381;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_0aa3469eaba008820c65475eba1750a5;
            frame_52bfda7a7085de102be770f8624d7117->m_frame.f_lineno = 382;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 382;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_TypeError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 384;
                type_description_1 = "ooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_8;
                PyObject *tmp_tuple_element_1;
                CHECK_OBJECT( par_size );
                tmp_tuple_element_1 = par_size;
                tmp_assign_source_8 = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_assign_source_8, 0, tmp_tuple_element_1 );
                CHECK_OBJECT( par_size );
                tmp_tuple_element_1 = par_size;
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_assign_source_8, 1, tmp_tuple_element_1 );
                CHECK_OBJECT( par_size );
                tmp_tuple_element_1 = par_size;
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_assign_source_8, 2, tmp_tuple_element_1 );
                {
                    PyObject *old = par_size;
                    assert( old != NULL );
                    par_size = tmp_assign_source_8;
                    Py_DECREF( old );
                }

            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 379;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_52bfda7a7085de102be770f8624d7117->m_frame) frame_52bfda7a7085de102be770f8624d7117->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooo";
            goto try_except_handler_5;
            branch_end_2:;
        }
        branch_end_1:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
    return NULL;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_9;
        // Tried code:
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_iter_arg_2;
            if ( par_size == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "size" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 386;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }

            tmp_iter_arg_2 = par_size;
            tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_10;
        }
        {
            PyObject *tmp_assign_source_11;
            tmp_assign_source_11 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_11;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_b4956a016726519fd2c34652359a3c04_2, codeobj_b4956a016726519fd2c34652359a3c04, module_PIL$ImageFilter, sizeof(void *) );
        frame_b4956a016726519fd2c34652359a3c04_2 = cache_frame_b4956a016726519fd2c34652359a3c04_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_b4956a016726519fd2c34652359a3c04_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_b4956a016726519fd2c34652359a3c04_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_12 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 386;
                    goto try_except_handler_7;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_12;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_13;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_13 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_x;
                outline_0_var_x = tmp_assign_source_13;
                Py_INCREF( outline_0_var_x );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_int_arg_1;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT( outline_0_var_x );
            tmp_int_arg_1 = outline_0_var_x;
            tmp_append_value_1 = PyNumber_Int( tmp_int_arg_1 );
            if ( tmp_append_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_2 = "o";
                goto try_except_handler_7;
            }
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 386;
                type_description_2 = "o";
                goto try_except_handler_7;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 386;
            type_description_2 = "o";
            goto try_except_handler_7;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_assign_source_9 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_assign_source_9 );
        goto try_return_handler_7;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b4956a016726519fd2c34652359a3c04_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_b4956a016726519fd2c34652359a3c04_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_6;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b4956a016726519fd2c34652359a3c04_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_b4956a016726519fd2c34652359a3c04_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_b4956a016726519fd2c34652359a3c04_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_b4956a016726519fd2c34652359a3c04_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_b4956a016726519fd2c34652359a3c04_2,
            type_description_2,
            outline_0_var_x
        );


        // Release cached frame.
        if ( frame_b4956a016726519fd2c34652359a3c04_2 == cache_frame_b4956a016726519fd2c34652359a3c04_2 )
        {
            Py_DECREF( frame_b4956a016726519fd2c34652359a3c04_2 );
        }
        cache_frame_b4956a016726519fd2c34652359a3c04_2 = NULL;

        assertFrameObject( frame_b4956a016726519fd2c34652359a3c04_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooo";
        goto try_except_handler_6;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_XDECREF( outline_0_var_x );
        outline_0_var_x = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_x );
        outline_0_var_x = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
        return NULL;
        outline_exception_1:;
        exception_lineno = 386;
        goto frame_exception_exit_1;
        outline_result_1:;
        {
            PyObject *old = par_size;
            par_size = tmp_assign_source_9;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_iter_arg_3;
        CHECK_OBJECT( par_size );
        tmp_iter_arg_3 = par_size;
        tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_3 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 387;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_14;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooo";
                exception_lineno = 387;
                goto try_except_handler_8;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_16 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_size1D;
            var_size1D = tmp_assign_source_16;
            Py_INCREF( var_size1D );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_operand_name_1;
        {
            PyObject *tmp_assign_source_17;
            CHECK_OBJECT( var_size1D );
            tmp_assign_source_17 = var_size1D;
            {
                PyObject *old = tmp_comparison_chain_1__operand_2;
                tmp_comparison_chain_1__operand_2 = tmp_assign_source_17;
                Py_INCREF( tmp_comparison_chain_1__operand_2 );
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            tmp_compexpr_left_3 = const_int_pos_2;
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_right_3 = tmp_comparison_chain_1__operand_2;
            tmp_assign_source_18 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_1 = "ooo";
                goto try_except_handler_9;
            }
            {
                PyObject *old = tmp_comparison_chain_1__comparison_result;
                tmp_comparison_chain_1__comparison_result = tmp_assign_source_18;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_2;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_operand_name_2 = tmp_comparison_chain_1__comparison_result;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_1 = "ooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
            tmp_operand_name_1 = tmp_comparison_chain_1__comparison_result;
            Py_INCREF( tmp_operand_name_1 );
            goto try_return_handler_9;
            branch_no_4:;
        }
        {
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
            tmp_compexpr_left_4 = tmp_comparison_chain_1__operand_2;
            tmp_compexpr_right_4 = const_int_pos_65;
            tmp_operand_name_1 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 388;
                type_description_1 = "ooo";
                goto try_except_handler_9;
            }
            goto try_return_handler_9;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
        Py_DECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__comparison_result );
        Py_DECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
        Py_DECREF( tmp_comparison_chain_1__operand_2 );
        tmp_comparison_chain_1__operand_2 = NULL;

        Py_XDECREF( tmp_comparison_chain_1__comparison_result );
        tmp_comparison_chain_1__comparison_result = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_8;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
        return NULL;
        outline_result_2:;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 388;
            type_description_1 = "ooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_make_exception_arg_2;
            tmp_make_exception_arg_2 = const_str_digest_49fb9f7b7f2f0df2a661feea7a4701e6;
            frame_52bfda7a7085de102be770f8624d7117->m_frame.f_lineno = 389;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_2 };
                tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_2 == NULL) );
            exception_type = tmp_raise_type_2;
            exception_lineno = 389;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto try_except_handler_8;
        }
        branch_no_3:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 387;
        type_description_1 = "ooo";
        goto try_except_handler_8;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52bfda7a7085de102be770f8624d7117 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52bfda7a7085de102be770f8624d7117 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_52bfda7a7085de102be770f8624d7117, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_52bfda7a7085de102be770f8624d7117->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_52bfda7a7085de102be770f8624d7117, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_52bfda7a7085de102be770f8624d7117,
        type_description_1,
        par_size,
        var__,
        var_size1D
    );


    // Release cached frame.
    if ( frame_52bfda7a7085de102be770f8624d7117 == cache_frame_52bfda7a7085de102be770f8624d7117 )
    {
        Py_DECREF( frame_52bfda7a7085de102be770f8624d7117 );
    }
    cache_frame_52bfda7a7085de102be770f8624d7117 = NULL;

    assertFrameObject( frame_52bfda7a7085de102be770f8624d7117 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    CHECK_OBJECT( par_size );
    tmp_return_value = par_size;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    Py_XDECREF( var_size1D );
    var_size1D = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_size );
    par_size = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    Py_XDECREF( var_size1D );
    var_size1D = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_17__check_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_18_generate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_size = python_pars[ 1 ];
    PyObject *par_callback = python_pars[ 2 ];
    PyObject *par_channels = python_pars[ 3 ];
    PyObject *par_target_mode = python_pars[ 4 ];
    PyObject *var_size1D = NULL;
    PyObject *var_size2D = NULL;
    PyObject *var_size3D = NULL;
    PyObject *var_table = NULL;
    PyObject *var_idx_out = NULL;
    PyObject *var_b = NULL;
    PyObject *var_g = NULL;
    PyObject *var_r = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_74282d4944e6914cbbe138d1c05abbca;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_74282d4944e6914cbbe138d1c05abbca = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_74282d4944e6914cbbe138d1c05abbca, codeobj_74282d4944e6914cbbe138d1c05abbca, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_74282d4944e6914cbbe138d1c05abbca = cache_frame_74282d4944e6914cbbe138d1c05abbca;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_74282d4944e6914cbbe138d1c05abbca );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_74282d4944e6914cbbe138d1c05abbca ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_cls );
        tmp_called_instance_1 = par_cls;
        CHECK_OBJECT( par_size );
        tmp_args_element_name_1 = par_size;
        frame_74282d4944e6914cbbe138d1c05abbca->m_frame.f_lineno = 405;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__check_size, call_args );
        }

        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 405;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 405;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 405;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 405;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooo";
            exception_lineno = 405;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooo";
                    exception_lineno = 405;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooo";
            exception_lineno = 405;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert( var_size1D == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_size1D = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert( var_size2D == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_size2D = tmp_assign_source_6;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;
        assert( var_size3D == NULL );
        Py_INCREF( tmp_assign_source_7 );
        var_size3D = tmp_assign_source_7;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_channels );
        tmp_compexpr_left_1 = par_channels;
        tmp_compexpr_right_1 = const_tuple_int_pos_3_int_pos_4_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 406;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_37b3cee7db7dcf40fa3cc74610972044;
            frame_74282d4944e6914cbbe138d1c05abbca->m_frame.f_lineno = 407;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 407;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        PyObject *tmp_right_name_4;
        tmp_left_name_1 = LIST_COPY( const_list_int_0_list );
        CHECK_OBJECT( var_size1D );
        tmp_left_name_4 = var_size1D;
        CHECK_OBJECT( var_size2D );
        tmp_right_name_2 = var_size2D;
        tmp_left_name_3 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_2 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 409;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_size3D );
        tmp_right_name_3 = var_size3D;
        tmp_left_name_2 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 409;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_channels );
        tmp_right_name_4 = par_channels;
        tmp_right_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 409;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 409;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_table == NULL );
        var_table = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = const_int_0;
        assert( var_idx_out == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_idx_out = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT( var_size3D );
        tmp_xrange_low_1 = var_size3D;
        tmp_iter_arg_2 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 411;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 411;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_10;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_11 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_11 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 411;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_12 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_b;
            var_b = tmp_assign_source_12;
            Py_INCREF( var_b );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_xrange_low_2;
        CHECK_OBJECT( var_size2D );
        tmp_xrange_low_2 = var_size2D;
        tmp_iter_arg_3 = BUILTIN_XRANGE1( tmp_xrange_low_2 );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 412;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 412;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_13;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_14 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 412;
                goto try_except_handler_5;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_15 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_g;
            var_g = tmp_assign_source_15;
            Py_INCREF( var_g );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_iter_arg_4;
        PyObject *tmp_xrange_low_3;
        CHECK_OBJECT( var_size1D );
        tmp_xrange_low_3 = var_size1D;
        tmp_iter_arg_4 = BUILTIN_XRANGE1( tmp_xrange_low_3 );
        if ( tmp_iter_arg_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 413;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_4 );
        Py_DECREF( tmp_iter_arg_4 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 413;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_for_loop_3__for_iterator;
            tmp_for_loop_3__for_iterator = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_17 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_17 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooo";
                exception_lineno = 413;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_17;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_assign_source_18 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_r;
            var_r = tmp_assign_source_18;
            Py_INCREF( var_r );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_6;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_left_name_7;
        PyObject *tmp_right_name_7;
        PyObject *tmp_left_name_8;
        PyObject *tmp_right_name_8;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_left_name_9;
        PyObject *tmp_right_name_9;
        PyObject *tmp_left_name_10;
        PyObject *tmp_right_name_10;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_11;
        PyObject *tmp_right_name_11;
        PyObject *tmp_step_name_1;
        CHECK_OBJECT( par_callback );
        tmp_called_name_1 = par_callback;
        CHECK_OBJECT( var_r );
        tmp_left_name_5 = var_r;
        CHECK_OBJECT( var_size1D );
        tmp_left_name_6 = var_size1D;
        tmp_right_name_6 = const_int_pos_1;
        tmp_right_name_5 = BINARY_OPERATION_SUB( tmp_left_name_6, tmp_right_name_6 );
        if ( tmp_right_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_args_element_name_2 = BINARY_OPERATION_TRUEDIV( tmp_left_name_5, tmp_right_name_5 );
        Py_DECREF( tmp_right_name_5 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_g );
        tmp_left_name_7 = var_g;
        CHECK_OBJECT( var_size2D );
        tmp_left_name_8 = var_size2D;
        tmp_right_name_8 = const_int_pos_1;
        tmp_right_name_7 = BINARY_OPERATION_SUB( tmp_left_name_8, tmp_right_name_8 );
        if ( tmp_right_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_args_element_name_3 = BINARY_OPERATION_TRUEDIV( tmp_left_name_7, tmp_right_name_7 );
        Py_DECREF( tmp_right_name_7 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_b );
        tmp_left_name_9 = var_b;
        CHECK_OBJECT( var_size3D );
        tmp_left_name_10 = var_size3D;
        tmp_right_name_10 = const_int_pos_1;
        tmp_right_name_9 = BINARY_OPERATION_SUB( tmp_left_name_10, tmp_right_name_10 );
        if ( tmp_right_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_args_element_name_4 = BINARY_OPERATION_TRUEDIV( tmp_left_name_9, tmp_right_name_9 );
        Py_DECREF( tmp_right_name_9 );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 415;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        frame_74282d4944e6914cbbe138d1c05abbca->m_frame.f_lineno = 414;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 414;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_table );
        tmp_ass_subscribed_1 = var_table;
        CHECK_OBJECT( var_idx_out );
        tmp_start_name_1 = var_idx_out;
        CHECK_OBJECT( var_idx_out );
        tmp_left_name_11 = var_idx_out;
        CHECK_OBJECT( par_channels );
        tmp_right_name_11 = par_channels;
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_11, tmp_right_name_11 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_ass_subvalue_1 );

            exception_lineno = 414;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_step_name_1 = Py_None;
        tmp_ass_subscript_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_ass_subscript_1 == NULL) );
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscript_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 414;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_12;
        CHECK_OBJECT( var_idx_out );
        tmp_left_name_12 = var_idx_out;
        CHECK_OBJECT( par_channels );
        tmp_right_name_12 = par_channels;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_12, tmp_right_name_12 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;
            type_description_1 = "ooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_19 = tmp_left_name_12;
        var_idx_out = tmp_assign_source_19;

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 413;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 412;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_4;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 411;
        type_description_1 = "ooooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        CHECK_OBJECT( par_cls );
        tmp_called_name_2 = par_cls;
        CHECK_OBJECT( var_size1D );
        tmp_tuple_element_2 = var_size1D;
        tmp_tuple_element_1 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_size2D );
        tmp_tuple_element_2 = var_size2D;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( var_size3D );
        tmp_tuple_element_2 = var_size3D;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 2, tmp_tuple_element_2 );
        tmp_args_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_table );
        tmp_tuple_element_1 = var_table;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_channels;
        CHECK_OBJECT( par_channels );
        tmp_dict_value_1 = par_channels;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_target_mode;
        CHECK_OBJECT( par_target_mode );
        tmp_dict_value_2 = par_target_mode;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain__copy_table;
        tmp_dict_value_3 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_74282d4944e6914cbbe138d1c05abbca->m_frame.f_lineno = 418;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 418;
            type_description_1 = "ooooooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_74282d4944e6914cbbe138d1c05abbca );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_74282d4944e6914cbbe138d1c05abbca );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_74282d4944e6914cbbe138d1c05abbca );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_74282d4944e6914cbbe138d1c05abbca, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_74282d4944e6914cbbe138d1c05abbca->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_74282d4944e6914cbbe138d1c05abbca, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_74282d4944e6914cbbe138d1c05abbca,
        type_description_1,
        par_cls,
        par_size,
        par_callback,
        par_channels,
        par_target_mode,
        var_size1D,
        var_size2D,
        var_size3D,
        var_table,
        var_idx_out,
        var_b,
        var_g,
        var_r
    );


    // Release cached frame.
    if ( frame_74282d4944e6914cbbe138d1c05abbca == cache_frame_74282d4944e6914cbbe138d1c05abbca )
    {
        Py_DECREF( frame_74282d4944e6914cbbe138d1c05abbca );
    }
    cache_frame_74282d4944e6914cbbe138d1c05abbca = NULL;

    assertFrameObject( frame_74282d4944e6914cbbe138d1c05abbca );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_18_generate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_callback );
    Py_DECREF( par_callback );
    par_callback = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    CHECK_OBJECT( (PyObject *)var_size1D );
    Py_DECREF( var_size1D );
    var_size1D = NULL;

    CHECK_OBJECT( (PyObject *)var_size2D );
    Py_DECREF( var_size2D );
    var_size2D = NULL;

    CHECK_OBJECT( (PyObject *)var_size3D );
    Py_DECREF( var_size3D );
    var_size3D = NULL;

    CHECK_OBJECT( (PyObject *)var_table );
    Py_DECREF( var_table );
    var_table = NULL;

    CHECK_OBJECT( (PyObject *)var_idx_out );
    Py_DECREF( var_idx_out );
    var_idx_out = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_g );
    var_g = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)par_callback );
    Py_DECREF( par_callback );
    par_callback = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    Py_XDECREF( var_size1D );
    var_size1D = NULL;

    Py_XDECREF( var_size2D );
    var_size2D = NULL;

    Py_XDECREF( var_size3D );
    var_size3D = NULL;

    Py_XDECREF( var_table );
    var_table = NULL;

    Py_XDECREF( var_idx_out );
    var_idx_out = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_g );
    var_g = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_18_generate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_19_transform( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_callback = python_pars[ 1 ];
    PyObject *par_with_normals = python_pars[ 2 ];
    PyObject *par_channels = python_pars[ 3 ];
    PyObject *par_target_mode = python_pars[ 4 ];
    PyObject *var_ch_in = NULL;
    PyObject *var_ch_out = NULL;
    PyObject *var_size1D = NULL;
    PyObject *var_size2D = NULL;
    PyObject *var_size3D = NULL;
    PyObject *var_table = NULL;
    PyObject *var_idx_in = NULL;
    PyObject *var_idx_out = NULL;
    PyObject *var_b = NULL;
    PyObject *var_g = NULL;
    PyObject *var_r = NULL;
    PyObject *var_values = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_aaadbe9cb0ff2c03a0ceebe89e33375b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_aaadbe9cb0ff2c03a0ceebe89e33375b = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_aaadbe9cb0ff2c03a0ceebe89e33375b, codeobj_aaadbe9cb0ff2c03a0ceebe89e33375b, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_aaadbe9cb0ff2c03a0ceebe89e33375b = cache_frame_aaadbe9cb0ff2c03a0ceebe89e33375b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_aaadbe9cb0ff2c03a0ceebe89e33375b ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_channels );
        tmp_compexpr_left_1 = par_channels;
        tmp_compexpr_right_1 = const_tuple_none_int_pos_3_int_pos_4_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 441;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_37b3cee7db7dcf40fa3cc74610972044;
            frame_aaadbe9cb0ff2c03a0ceebe89e33375b->m_frame.f_lineno = 442;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 442;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_channels );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 443;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_ch_in == NULL );
        var_ch_in = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        CHECK_OBJECT( par_channels );
        tmp_or_left_value_1 = par_channels;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 444;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_ch_in );
        tmp_or_right_value_1 = var_ch_in;
        tmp_assign_source_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_2 = tmp_or_left_value_1;
        or_end_1:;
        assert( var_ch_out == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_ch_out = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_size );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 445;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 445;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooo";
            exception_lineno = 445;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooo";
            exception_lineno = 445;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooo";
            exception_lineno = 445;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooooo";
                    exception_lineno = 445;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooooo";
            exception_lineno = 445;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        assert( var_size1D == NULL );
        Py_INCREF( tmp_assign_source_7 );
        var_size1D = tmp_assign_source_7;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        assert( var_size2D == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_size2D = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_3;
        assert( var_size3D == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_size3D = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        PyObject *tmp_right_name_4;
        tmp_left_name_1 = LIST_COPY( const_list_int_0_list );
        CHECK_OBJECT( var_size1D );
        tmp_left_name_4 = var_size1D;
        CHECK_OBJECT( var_size2D );
        tmp_right_name_2 = var_size2D;
        tmp_left_name_3 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_2 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 447;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_size3D );
        tmp_right_name_3 = var_size3D;
        tmp_left_name_2 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 447;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ch_out );
        tmp_right_name_4 = var_ch_out;
        tmp_right_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_1 );

            exception_lineno = 447;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_table == NULL );
        var_table = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assign_source_11;
        tmp_assign_source_11 = const_int_0;
        assert( var_idx_in == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_idx_in = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = const_int_0;
        assert( var_idx_out == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_idx_out = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT( var_size3D );
        tmp_xrange_low_1 = var_size3D;
        tmp_iter_arg_2 = BUILTIN_XRANGE1( tmp_xrange_low_1 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_13;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooooooo";
                exception_lineno = 450;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_15 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_b;
            var_b = tmp_assign_source_15;
            Py_INCREF( var_b );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_xrange_low_2;
        CHECK_OBJECT( var_size2D );
        tmp_xrange_low_2 = var_size2D;
        tmp_iter_arg_3 = BUILTIN_XRANGE1( tmp_xrange_low_2 );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 451;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 451;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_17 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_17 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooooooo";
                exception_lineno = 451;
                goto try_except_handler_5;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_17;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_18 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_g;
            var_g = tmp_assign_source_18;
            Py_INCREF( var_g );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_4;
        PyObject *tmp_xrange_low_3;
        CHECK_OBJECT( var_size1D );
        tmp_xrange_low_3 = var_size1D;
        tmp_iter_arg_4 = BUILTIN_XRANGE1( tmp_xrange_low_3 );
        if ( tmp_iter_arg_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_4 );
        Py_DECREF( tmp_iter_arg_4 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_for_loop_3__for_iterator;
            tmp_for_loop_3__for_iterator = tmp_assign_source_19;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooooooooooo";
                exception_lineno = 452;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_assign_source_21 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_r;
            var_r = tmp_assign_source_21;
            Py_INCREF( var_r );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        PyObject *tmp_step_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_table );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_idx_in );
        tmp_start_name_1 = var_idx_in;
        CHECK_OBJECT( var_idx_in );
        tmp_left_name_5 = var_idx_in;
        CHECK_OBJECT( var_ch_in );
        tmp_right_name_5 = var_ch_in;
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_5, tmp_right_name_5 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_subscribed_name_1 );

            exception_lineno = 453;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_1 == NULL) );
        tmp_assign_source_22 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_values;
            var_values = tmp_assign_source_22;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_with_normals );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_with_normals );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 454;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_dircall_arg1_1;
            PyObject *tmp_dircall_arg2_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_6;
            PyObject *tmp_right_name_6;
            PyObject *tmp_left_name_7;
            PyObject *tmp_right_name_7;
            PyObject *tmp_left_name_8;
            PyObject *tmp_right_name_8;
            PyObject *tmp_left_name_9;
            PyObject *tmp_right_name_9;
            PyObject *tmp_left_name_10;
            PyObject *tmp_right_name_10;
            PyObject *tmp_left_name_11;
            PyObject *tmp_right_name_11;
            PyObject *tmp_dircall_arg3_1;
            CHECK_OBJECT( par_callback );
            tmp_dircall_arg1_1 = par_callback;
            CHECK_OBJECT( var_r );
            tmp_left_name_6 = var_r;
            CHECK_OBJECT( var_size1D );
            tmp_left_name_7 = var_size1D;
            tmp_right_name_7 = const_int_pos_1;
            tmp_right_name_6 = BINARY_OPERATION_SUB( tmp_left_name_7, tmp_right_name_7 );
            if ( tmp_right_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 455;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_6, tmp_right_name_6 );
            Py_DECREF( tmp_right_name_6 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 455;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_dircall_arg2_1 = PyTuple_New( 3 );
            PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( var_g );
            tmp_left_name_8 = var_g;
            CHECK_OBJECT( var_size2D );
            tmp_left_name_9 = var_size2D;
            tmp_right_name_9 = const_int_pos_1;
            tmp_right_name_8 = BINARY_OPERATION_SUB( tmp_left_name_9, tmp_right_name_9 );
            if ( tmp_right_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_dircall_arg2_1 );

                exception_lineno = 455;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_8, tmp_right_name_8 );
            Py_DECREF( tmp_right_name_8 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_dircall_arg2_1 );

                exception_lineno = 455;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            PyTuple_SET_ITEM( tmp_dircall_arg2_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( var_b );
            tmp_left_name_10 = var_b;
            CHECK_OBJECT( var_size3D );
            tmp_left_name_11 = var_size3D;
            tmp_right_name_11 = const_int_pos_1;
            tmp_right_name_10 = BINARY_OPERATION_SUB( tmp_left_name_11, tmp_right_name_11 );
            if ( tmp_right_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_dircall_arg2_1 );

                exception_lineno = 456;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_tuple_element_1 = BINARY_OPERATION_TRUEDIV( tmp_left_name_10, tmp_right_name_10 );
            Py_DECREF( tmp_right_name_10 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_dircall_arg2_1 );

                exception_lineno = 456;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            PyTuple_SET_ITEM( tmp_dircall_arg2_1, 2, tmp_tuple_element_1 );
            CHECK_OBJECT( var_values );
            tmp_dircall_arg3_1 = var_values;
            Py_INCREF( tmp_dircall_arg1_1 );
            Py_INCREF( tmp_dircall_arg3_1 );

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
                tmp_assign_source_23 = impl___internal__$$$function_5_complex_call_helper_pos_star_list( dir_call_args );
            }
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 455;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = var_values;
                assert( old != NULL );
                var_values = tmp_assign_source_23;
                Py_DECREF( old );
            }

        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_24;
            PyObject *tmp_dircall_arg1_2;
            PyObject *tmp_dircall_arg2_2;
            CHECK_OBJECT( par_callback );
            tmp_dircall_arg1_2 = par_callback;
            CHECK_OBJECT( var_values );
            tmp_dircall_arg2_2 = var_values;
            Py_INCREF( tmp_dircall_arg1_2 );
            Py_INCREF( tmp_dircall_arg2_2 );

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_2, tmp_dircall_arg2_2};
                tmp_assign_source_24 = impl___internal__$$$function_1_complex_call_helper_star_list( dir_call_args );
            }
            if ( tmp_assign_source_24 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 458;
                type_description_1 = "ooooooooooooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = var_values;
                assert( old != NULL );
                var_values = tmp_assign_source_24;
                Py_DECREF( old );
            }

        }
        branch_end_2:;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_start_name_2;
        PyObject *tmp_stop_name_2;
        PyObject *tmp_left_name_12;
        PyObject *tmp_right_name_12;
        PyObject *tmp_step_name_2;
        CHECK_OBJECT( var_values );
        tmp_ass_subvalue_1 = var_values;
        CHECK_OBJECT( var_table );
        tmp_ass_subscribed_1 = var_table;
        CHECK_OBJECT( var_idx_out );
        tmp_start_name_2 = var_idx_out;
        CHECK_OBJECT( var_idx_out );
        tmp_left_name_12 = var_idx_out;
        CHECK_OBJECT( var_ch_out );
        tmp_right_name_12 = var_ch_out;
        tmp_stop_name_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_12, tmp_right_name_12 );
        if ( tmp_stop_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 459;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_step_name_2 = Py_None;
        tmp_ass_subscript_1 = MAKE_SLICEOBJ3( tmp_start_name_2, tmp_stop_name_2, tmp_step_name_2 );
        Py_DECREF( tmp_stop_name_2 );
        assert( !(tmp_ass_subscript_1 == NULL) );
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscript_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 459;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_left_name_13;
        PyObject *tmp_right_name_13;
        CHECK_OBJECT( var_idx_in );
        tmp_left_name_13 = var_idx_in;
        CHECK_OBJECT( var_ch_in );
        tmp_right_name_13 = var_ch_in;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_13, tmp_right_name_13 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 460;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_25 = tmp_left_name_13;
        var_idx_in = tmp_assign_source_25;

    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_left_name_14;
        PyObject *tmp_right_name_14;
        CHECK_OBJECT( var_idx_out );
        tmp_left_name_14 = var_idx_out;
        CHECK_OBJECT( var_ch_out );
        tmp_right_name_14 = var_ch_out;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_14, tmp_right_name_14 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 461;
            type_description_1 = "ooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_26 = tmp_left_name_14;
        var_idx_out = tmp_assign_source_26;

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 452;
        type_description_1 = "ooooooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 451;
        type_description_1 = "ooooooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_4;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 450;
        type_description_1 = "ooooooooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        CHECK_OBJECT( par_self );
        tmp_type_arg_1 = par_self;
        tmp_called_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_size );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 463;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_table );
        tmp_tuple_element_2 = var_table;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
        tmp_dict_key_1 = const_str_plain_channels;
        CHECK_OBJECT( var_ch_out );
        tmp_dict_value_1 = var_ch_out;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_target_mode;
        CHECK_OBJECT( par_target_mode );
        tmp_or_left_value_2 = par_target_mode;
        tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
        if ( tmp_or_left_truth_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 464;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_or_right_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_mode );
        if ( tmp_or_right_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 464;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        Py_INCREF( tmp_or_left_value_2 );
        tmp_dict_value_2 = tmp_or_left_value_2;
        or_end_2:;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        Py_DECREF( tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain__copy_table;
        tmp_dict_value_3 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_aaadbe9cb0ff2c03a0ceebe89e33375b->m_frame.f_lineno = 463;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 463;
            type_description_1 = "ooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_aaadbe9cb0ff2c03a0ceebe89e33375b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_aaadbe9cb0ff2c03a0ceebe89e33375b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_aaadbe9cb0ff2c03a0ceebe89e33375b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_aaadbe9cb0ff2c03a0ceebe89e33375b,
        type_description_1,
        par_self,
        par_callback,
        par_with_normals,
        par_channels,
        par_target_mode,
        var_ch_in,
        var_ch_out,
        var_size1D,
        var_size2D,
        var_size3D,
        var_table,
        var_idx_in,
        var_idx_out,
        var_b,
        var_g,
        var_r,
        var_values
    );


    // Release cached frame.
    if ( frame_aaadbe9cb0ff2c03a0ceebe89e33375b == cache_frame_aaadbe9cb0ff2c03a0ceebe89e33375b )
    {
        Py_DECREF( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );
    }
    cache_frame_aaadbe9cb0ff2c03a0ceebe89e33375b = NULL;

    assertFrameObject( frame_aaadbe9cb0ff2c03a0ceebe89e33375b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_19_transform );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_callback );
    Py_DECREF( par_callback );
    par_callback = NULL;

    CHECK_OBJECT( (PyObject *)par_with_normals );
    Py_DECREF( par_with_normals );
    par_with_normals = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    CHECK_OBJECT( (PyObject *)var_ch_in );
    Py_DECREF( var_ch_in );
    var_ch_in = NULL;

    CHECK_OBJECT( (PyObject *)var_ch_out );
    Py_DECREF( var_ch_out );
    var_ch_out = NULL;

    CHECK_OBJECT( (PyObject *)var_size1D );
    Py_DECREF( var_size1D );
    var_size1D = NULL;

    CHECK_OBJECT( (PyObject *)var_size2D );
    Py_DECREF( var_size2D );
    var_size2D = NULL;

    CHECK_OBJECT( (PyObject *)var_size3D );
    Py_DECREF( var_size3D );
    var_size3D = NULL;

    CHECK_OBJECT( (PyObject *)var_table );
    Py_DECREF( var_table );
    var_table = NULL;

    CHECK_OBJECT( (PyObject *)var_idx_in );
    Py_DECREF( var_idx_in );
    var_idx_in = NULL;

    CHECK_OBJECT( (PyObject *)var_idx_out );
    Py_DECREF( var_idx_out );
    var_idx_out = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_g );
    var_g = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_callback );
    Py_DECREF( par_callback );
    par_callback = NULL;

    CHECK_OBJECT( (PyObject *)par_with_normals );
    Py_DECREF( par_with_normals );
    par_with_normals = NULL;

    CHECK_OBJECT( (PyObject *)par_channels );
    Py_DECREF( par_channels );
    par_channels = NULL;

    CHECK_OBJECT( (PyObject *)par_target_mode );
    Py_DECREF( par_target_mode );
    par_target_mode = NULL;

    Py_XDECREF( var_ch_in );
    var_ch_in = NULL;

    Py_XDECREF( var_ch_out );
    var_ch_out = NULL;

    Py_XDECREF( var_size1D );
    var_size1D = NULL;

    Py_XDECREF( var_size2D );
    var_size2D = NULL;

    Py_XDECREF( var_size3D );
    var_size3D = NULL;

    Py_XDECREF( var_table );
    var_table = NULL;

    Py_XDECREF( var_idx_in );
    var_idx_in = NULL;

    Py_XDECREF( var_idx_out );
    var_idx_out = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_g );
    var_g = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_19_transform );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_20___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_r = NULL;
    struct Nuitka_FrameObject *frame_a5c32ad5befaa10200a08ca4118a677b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a5c32ad5befaa10200a08ca4118a677b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a5c32ad5befaa10200a08ca4118a677b, codeobj_a5c32ad5befaa10200a08ca4118a677b, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *) );
    frame_a5c32ad5befaa10200a08ca4118a677b = cache_frame_a5c32ad5befaa10200a08ca4118a677b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a5c32ad5befaa10200a08ca4118a677b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a5c32ad5befaa10200a08ca4118a677b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_9;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_10;
        tmp_source_name_1 = const_str_digest_2aab211cbd62365f556d34bd58d3044f;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_3 );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 469;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___name__ );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 469;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_table );
        if ( tmp_source_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 470;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_source_name_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_5 );
        Py_DECREF( tmp_source_name_5 );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 470;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 470;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 469;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 469;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = PyList_New( 3 );
        PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
        tmp_source_name_7 = const_str_digest_1246241660af0b1354feffbda6720392;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_format );
        assert( !(tmp_dircall_arg1_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_dircall_arg2_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_size );
        if ( tmp_dircall_arg2_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );
            Py_DECREF( tmp_dircall_arg1_1 );

            exception_lineno = 471;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_list_element_1 = impl___internal__$$$function_1_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );

            exception_lineno = 471;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM( tmp_assign_source_1, 1, tmp_list_element_1 );
        tmp_source_name_9 = const_str_digest_14b7dcb32151e9829d5027b4857b8ef6;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_channels );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 472;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 472;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );

            exception_lineno = 472;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM( tmp_assign_source_1, 2, tmp_list_element_1 );
        assert( var_r == NULL );
        var_r = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_11;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_mode );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 474;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_12;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_13;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_source_name_14;
            CHECK_OBJECT( var_r );
            tmp_source_name_12 = var_r;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_append );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 475;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_source_name_13 = const_str_digest_55a89c480a24199fbc5ddbe6b2349784;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_format );
            assert( !(tmp_called_name_4 == NULL) );
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_mode );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 475;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 475;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 475;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 475;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 475;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_15;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_7;
        tmp_source_name_15 = const_str_digest_0ce62e90b6d82c083fa9cf431de89104;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_format );
        assert( !(tmp_called_name_5 == NULL) );
        tmp_called_instance_1 = const_str_space;
        CHECK_OBJECT( var_r );
        tmp_args_element_name_7 = var_r;
        frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 476;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_join, call_args );
        }

        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 476;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_a5c32ad5befaa10200a08ca4118a677b->m_frame.f_lineno = 476;
        {
            PyObject *call_args[] = { tmp_args_element_name_6 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
        }

        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 476;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5c32ad5befaa10200a08ca4118a677b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5c32ad5befaa10200a08ca4118a677b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a5c32ad5befaa10200a08ca4118a677b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a5c32ad5befaa10200a08ca4118a677b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a5c32ad5befaa10200a08ca4118a677b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a5c32ad5befaa10200a08ca4118a677b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a5c32ad5befaa10200a08ca4118a677b,
        type_description_1,
        par_self,
        var_r
    );


    // Release cached frame.
    if ( frame_a5c32ad5befaa10200a08ca4118a677b == cache_frame_a5c32ad5befaa10200a08ca4118a677b )
    {
        Py_DECREF( frame_a5c32ad5befaa10200a08ca4118a677b );
    }
    cache_frame_a5c32ad5befaa10200a08ca4118a677b = NULL;

    assertFrameObject( frame_a5c32ad5befaa10200a08ca4118a677b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_20___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_r );
    Py_DECREF( var_r );
    var_r = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_20___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_PIL$ImageFilter$$$function_21_filter( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_image = python_pars[ 1 ];
    PyObject *var_Image = NULL;
    struct Nuitka_FrameObject *frame_70e6db30cbbcf43d4cb98b942765d88f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_70e6db30cbbcf43d4cb98b942765d88f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_70e6db30cbbcf43d4cb98b942765d88f, codeobj_70e6db30cbbcf43d4cb98b942765d88f, module_PIL$ImageFilter, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_70e6db30cbbcf43d4cb98b942765d88f = cache_frame_70e6db30cbbcf43d4cb98b942765d88f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_70e6db30cbbcf43d4cb98b942765d88f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_70e6db30cbbcf43d4cb98b942765d88f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_empty;
        tmp_globals_name_1 = (PyObject *)moduledict_PIL$ImageFilter;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_str_plain_Image_tuple;
        tmp_level_name_1 = const_int_pos_1;
        frame_70e6db30cbbcf43d4cb98b942765d88f->m_frame.f_lineno = 479;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if ( PyModule_Check( tmp_import_name_from_1 ) )
        {
           tmp_assign_source_1 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)MODULE_DICT(tmp_import_name_from_1),
                const_str_plain_Image,
                const_int_pos_1
            );
        }
        else
        {
           tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_Image );
        }

        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_Image == NULL );
        var_Image = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_6;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_7;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_8;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( par_image );
        tmp_source_name_1 = par_image;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_color_lut_3d );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_mode );
        if ( tmp_or_left_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 482;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_or_left_value_1 );

            exception_lineno = 482;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF( tmp_or_left_value_1 );
        CHECK_OBJECT( par_image );
        tmp_source_name_3 = par_image;
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_mode );
        if ( tmp_or_right_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 482;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_args_element_name_1 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT( var_Image );
        tmp_source_name_4 = var_Image;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_LINEAR );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 482;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_channels );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );

            exception_lineno = 482;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_size );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_args_element_name_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_size );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_1;
        tmp_args_element_name_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_size );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_pos_2;
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 2 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_table );
        if ( tmp_args_element_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_6 );

            exception_lineno = 483;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_70e6db30cbbcf43d4cb98b942765d88f->m_frame.f_lineno = 481;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS7( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        Py_DECREF( tmp_args_element_name_7 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_70e6db30cbbcf43d4cb98b942765d88f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_70e6db30cbbcf43d4cb98b942765d88f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_70e6db30cbbcf43d4cb98b942765d88f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_70e6db30cbbcf43d4cb98b942765d88f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_70e6db30cbbcf43d4cb98b942765d88f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_70e6db30cbbcf43d4cb98b942765d88f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_70e6db30cbbcf43d4cb98b942765d88f,
        type_description_1,
        par_self,
        par_image,
        var_Image
    );


    // Release cached frame.
    if ( frame_70e6db30cbbcf43d4cb98b942765d88f == cache_frame_70e6db30cbbcf43d4cb98b942765d88f )
    {
        Py_DECREF( frame_70e6db30cbbcf43d4cb98b942765d88f );
    }
    cache_frame_70e6db30cbbcf43d4cb98b942765d88f = NULL;

    assertFrameObject( frame_70e6db30cbbcf43d4cb98b942765d88f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_21_filter );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    CHECK_OBJECT( (PyObject *)var_Image );
    Py_DECREF( var_Image );
    var_Image = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_image );
    Py_DECREF( par_image );
    par_image = NULL;

    Py_XDECREF( var_Image );
    var_Image = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter$$$function_21_filter );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_10___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_10___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_2b180389176b4d3a73fee63540fbbd45,
#endif
        codeobj_0f5409b204a7c8e4110ff6d4afda3128,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_11_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_11_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_2a5df70489150f55f68057fabbf49e99,
#endif
        codeobj_1cbc79d522e1ab2bcb4ef115181d79f0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_12___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_12___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_d298fb076e35d16b6e1326edf579d3dc,
#endif
        codeobj_08f2849d1025926df43592b31cdd44dd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_13_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_13_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_73e534cca1bbc0a54069e51041ff1c06,
#endif
        codeobj_6928d937bcb1496dda62061913c94565,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_14___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_14___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_f9ba36e955d752318455b0dcd7d14431,
#endif
        codeobj_a924ca563b410979a9b70fb42d7423df,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_15_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_15_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_9d1778c0df676849cb5f44cd80d1cd71,
#endif
        codeobj_9ccfebafbef3c978ef7ce3911c0a8284,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_16___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_16___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_0c9ad3c20d9c4b89c497b6479d9fbb09,
#endif
        codeobj_83c29977498b907cfbcb1f9b5bff9493,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_17__check_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_17__check_size,
        const_str_plain__check_size,
#if PYTHON_VERSION >= 300
        const_str_digest_cc086f7e7bd0d901a321d65afe6f1123,
#endif
        codeobj_52bfda7a7085de102be770f8624d7117,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_18_generate( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_18_generate,
        const_str_plain_generate,
#if PYTHON_VERSION >= 300
        const_str_digest_380ee9993555f3b8136b92db9e7fa082,
#endif
        codeobj_74282d4944e6914cbbe138d1c05abbca,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        const_str_digest_e2fc207794b099a1137d410d16f38a77,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_19_transform( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_19_transform,
        const_str_plain_transform,
#if PYTHON_VERSION >= 300
        const_str_digest_bc20262369aa1099ff5678e60fd0da58,
#endif
        codeobj_aaadbe9cb0ff2c03a0ceebe89e33375b,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        const_str_digest_9734d645534e976c76afbbbb3c0e6f45,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_1_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_1_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_614ae7f28125de272cd6e87a773ac201,
#endif
        codeobj_930181cfd2c84cb3522cb8f70dceb02d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_20___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_20___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_c483ef475298b8c323265f51f3491fcc,
#endif
        codeobj_a5c32ad5befaa10200a08ca4118a677b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_21_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_21_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_145e8f54d01b25b7ec58793cd97c6552,
#endif
        codeobj_70e6db30cbbcf43d4cb98b942765d88f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_2___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_d6dabd52b1fe8e63e3e930c80e978100,
#endif
        codeobj_4c15da5e10d6434c956c798acd2e21fd,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__$$$function_1_lambda(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_2___init__$$$function_1_lambda,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 300
        const_str_digest_020c75e04126e6782d4f363ba5505678,
#endif
        codeobj_b77e67d14966b95a6ee53936f8363309,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_3___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_3___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_6dc2472cb495de12cc292361620a630a,
#endif
        codeobj_a23804824e7e5c27a25dc1ec5080b0b1,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_4_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_4_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_ce76fff8dc7cb21df05ce07af6c77202,
#endif
        codeobj_a2f3e18ce8f0c928ebb9efd95fe6c612,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_5___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_5___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_a7e7d7e0b19f891fd965ca8442de8a5d,
#endif
        codeobj_76b918b1b732c188e59a88a97789b95a,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_6___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_6___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_9d9f2a828ef70b679236a91eca1758e2,
#endif
        codeobj_d31399269b9785b3c8ff87328f0abf1f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_7___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_7___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_02ef7966359291d22aa51be1f1d0dabf,
#endif
        codeobj_92033d521030b556c0b79032b67b64e9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_8___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_8___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_dfb7408a8a6006f2df58c7f45419b5a8,
#endif
        codeobj_e93cfeff5c9b3a8f4466916b0df876ac,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_PIL$ImageFilter$$$function_9_filter(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_PIL$ImageFilter$$$function_9_filter,
        const_str_plain_filter,
#if PYTHON_VERSION >= 300
        const_str_digest_ad2377f48771b1c9cb58244227c66ed2,
#endif
        codeobj_2922234838f8625529e79b8ea7819e6a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_PIL$ImageFilter,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_PIL$ImageFilter =
{
    PyModuleDef_HEAD_INIT,
    "PIL.ImageFilter",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( PIL$ImageFilter )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_PIL$ImageFilter );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("PIL.ImageFilter: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("PIL.ImageFilter: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("PIL.ImageFilter: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initPIL$ImageFilter" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_PIL$ImageFilter = Py_InitModule4(
        "PIL.ImageFilter",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module_PIL$ImageFilter = PyModule_Create( &mdef_PIL$ImageFilter );
#endif

    moduledict_PIL$ImageFilter = MODULE_DICT( module_PIL$ImageFilter );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict_PIL$ImageFilter,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict_PIL$ImageFilter,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict_PIL$ImageFilter,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict_PIL$ImageFilter,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module_PIL$ImageFilter );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2, module_PIL$ImageFilter );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    struct Nuitka_FrameObject *frame_573a114d73ab0e159b5d270a6c427242;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_PIL$ImageFilter_28 = NULL;
    PyObject *tmp_dictset_value;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *locals_PIL$ImageFilter_32 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *locals_PIL$ImageFilter_36 = NULL;
    struct Nuitka_FrameObject *frame_d6a737a2090ded6a94ef942f7ca9e61e_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d6a737a2090ded6a94ef942f7ca9e61e_2 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *locals_PIL$ImageFilter_43 = NULL;
    struct Nuitka_FrameObject *frame_ed24899f6cb8054107835c368af3e32f_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ed24899f6cb8054107835c368af3e32f_3 = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *locals_PIL$ImageFilter_71 = NULL;
    struct Nuitka_FrameObject *frame_41916f6d60312bba0f6326fc5c208686_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_41916f6d60312bba0f6326fc5c208686_4 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *locals_PIL$ImageFilter_94 = NULL;
    struct Nuitka_FrameObject *frame_29870514b17fb3d9855230d26a5e018e_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_29870514b17fb3d9855230d26a5e018e_5 = NULL;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *locals_PIL$ImageFilter_108 = NULL;
    struct Nuitka_FrameObject *frame_85c1c33bfc54e852a587af0ca5d84895_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_85c1c33bfc54e852a587af0ca5d84895_6 = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *locals_PIL$ImageFilter_122 = NULL;
    struct Nuitka_FrameObject *frame_1f4d731788d8c0a553ef69f2df319dab_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1f4d731788d8c0a553ef69f2df319dab_7 = NULL;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *locals_PIL$ImageFilter_136 = NULL;
    struct Nuitka_FrameObject *frame_66c5e2de7b3952341f8021f4bcf4172b_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_66c5e2de7b3952341f8021f4bcf4172b_8 = NULL;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *locals_PIL$ImageFilter_153 = NULL;
    struct Nuitka_FrameObject *frame_39503a432953dc1b0c966d2335b028bb_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_39503a432953dc1b0c966d2335b028bb_9 = NULL;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *locals_PIL$ImageFilter_167 = NULL;
    struct Nuitka_FrameObject *frame_5ee4d9cbea512a1e3741d9b50288fed5_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5ee4d9cbea512a1e3741d9b50288fed5_10 = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *locals_PIL$ImageFilter_187 = NULL;
    struct Nuitka_FrameObject *frame_92d894154318163f6084b76676199287_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_92d894154318163f6084b76676199287_11 = NULL;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *locals_PIL$ImageFilter_212 = NULL;
    struct Nuitka_FrameObject *frame_b07a5374eb50cc907cb018a6f4658cfa_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b07a5374eb50cc907cb018a6f4658cfa_12 = NULL;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *locals_PIL$ImageFilter_223 = NULL;
    struct Nuitka_FrameObject *frame_754301eb603ad00ab3c9cb5e5e717b63_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_754301eb603ad00ab3c9cb5e5e717b63_13 = NULL;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *locals_PIL$ImageFilter_232 = NULL;
    struct Nuitka_FrameObject *frame_8fb5463d49dc32e1e8da1916b864889b_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8fb5463d49dc32e1e8da1916b864889b_14 = NULL;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *locals_PIL$ImageFilter_241 = NULL;
    struct Nuitka_FrameObject *frame_67fa2dda155a931ccb1670fd19fadfe3_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_67fa2dda155a931ccb1670fd19fadfe3_15 = NULL;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *locals_PIL$ImageFilter_250 = NULL;
    struct Nuitka_FrameObject *frame_2e892cabfe9a3181cfca6a2267122082_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2e892cabfe9a3181cfca6a2267122082_16 = NULL;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *locals_PIL$ImageFilter_259 = NULL;
    struct Nuitka_FrameObject *frame_182b80444fd463d65783e55f79c5b45c_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    static struct Nuitka_FrameObject *cache_frame_182b80444fd463d65783e55f79c5b45c_17 = NULL;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *locals_PIL$ImageFilter_268 = NULL;
    struct Nuitka_FrameObject *frame_ab9b3a7a0657d006b795a8fdddc781ce_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ab9b3a7a0657d006b795a8fdddc781ce_18 = NULL;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *locals_PIL$ImageFilter_277 = NULL;
    struct Nuitka_FrameObject *frame_c837e80cd14b39a226f3e311fa8f88f4_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c837e80cd14b39a226f3e311fa8f88f4_19 = NULL;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *locals_PIL$ImageFilter_286 = NULL;
    struct Nuitka_FrameObject *frame_c7001ee9bb9b3765bc12a295c5d90a0d_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 = NULL;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *locals_PIL$ImageFilter_295 = NULL;
    struct Nuitka_FrameObject *frame_12bbd41a59cbe9216355af244887535d_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    static struct Nuitka_FrameObject *cache_frame_12bbd41a59cbe9216355af244887535d_21 = NULL;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *locals_PIL$ImageFilter_306 = NULL;
    struct Nuitka_FrameObject *frame_17cef2d0d46cf49192779f0042bde399_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    static struct Nuitka_FrameObject *cache_frame_17cef2d0d46cf49192779f0042bde399_22 = NULL;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_573a114d73ab0e159b5d270a6c427242 = MAKE_MODULE_FRAME( codeobj_573a114d73ab0e159b5d270a6c427242, module_PIL$ImageFilter );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_573a114d73ab0e159b5d270a6c427242 );
    assert( Py_REFCNT( frame_573a114d73ab0e159b5d270a6c427242 ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_import_name_from_1;
        frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 18;
        tmp_import_name_from_1 = PyImport_ImportModule("__future__");
        assert( !(tmp_import_name_from_1 == NULL) );
        tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_division );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_division, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_functools;
        tmp_globals_name_1 = (PyObject *)moduledict_PIL$ImageFilter;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 20;
        tmp_assign_source_5 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 20;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_functools, tmp_assign_source_5 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_numpy;
        tmp_globals_name_2 = (PyObject *)moduledict_PIL$ImageFilter;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 23;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 23;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_numpy, tmp_assign_source_6 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_573a114d73ab0e159b5d270a6c427242, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_573a114d73ab0e159b5d270a6c427242, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 24;

            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_7;
            tmp_assign_source_7 = Py_None;
            UPDATE_STRING_DICT0( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_numpy, tmp_assign_source_7 );
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 22;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_573a114d73ab0e159b5d270a6c427242->m_frame) frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = exception_tb->tb_lineno;

        goto try_except_handler_2;
        branch_end_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = const_tuple_type_object_tuple;
        Py_INCREF( tmp_dircall_arg1_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_8 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        assert( tmp_class_creation_1__bases == NULL );
        tmp_class_creation_1__bases = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_class_creation_1__bases );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_subscribed_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_type_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        Py_DECREF( tmp_type_arg_1 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_10 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_10;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_3;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_1 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_1, const_str_plain___prepare__ );
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_2 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___prepare__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_3;
            }
            tmp_tuple_element_1 = const_str_plain_Filter;
            tmp_args_name_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_1 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 28;
            tmp_assign_source_11 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            if ( tmp_assign_source_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_3;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_11;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_3 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_3, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_3;
            }
            tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 28;

                    goto try_except_handler_3;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_2 = tmp_class_creation_1__prepared;
                tmp_source_name_4 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_4 == NULL) );
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 28;

                    goto try_except_handler_3;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_2 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 28;

                    goto try_except_handler_3;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 28;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_3;
            }
            branch_no_4:;
        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_12;
            tmp_assign_source_12 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_12;
        }
        branch_end_3:;
    }
    {
        PyObject *tmp_assign_source_13;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_PIL$ImageFilter_28 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_28, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_5;
        }
        tmp_dictset_value = const_str_plain_Filter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_28, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto try_except_handler_5;
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_compexpr_left_2 = tmp_class_creation_1__bases;
            tmp_compexpr_right_2 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_5;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_28, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_5;
            }
            branch_no_5:;
        }
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = const_str_plain_Filter;
            tmp_args_name_2 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_3 );
            tmp_tuple_element_3 = locals_PIL$ImageFilter_28;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 28;
            tmp_assign_source_14 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 28;

                goto try_except_handler_5;
            }
            assert( outline_0_var___class__ == NULL );
            outline_0_var___class__ = tmp_assign_source_14;
        }
        CHECK_OBJECT( outline_0_var___class__ );
        tmp_assign_source_13 = outline_0_var___class__;
        Py_INCREF( tmp_assign_source_13 );
        goto try_return_handler_5;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_5:;
        Py_DECREF( locals_PIL$ImageFilter_28 );
        locals_PIL$ImageFilter_28 = NULL;
        goto try_return_handler_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_28 );
        locals_PIL$ImageFilter_28 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_4;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_4:;
        CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
        Py_DECREF( outline_0_var___class__ );
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 28;
        goto try_except_handler_3;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Filter, tmp_assign_source_13 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Filter );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Filter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 32;

            goto try_except_handler_6;
        }

        tmp_tuple_element_4 = tmp_mvar_value_3;
        tmp_assign_source_15 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_assign_source_15, 0, tmp_tuple_element_4 );
        assert( tmp_class_creation_2__bases_orig == NULL );
        tmp_class_creation_2__bases_orig = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT( tmp_class_creation_2__bases_orig );
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF( tmp_dircall_arg1_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_16 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        assert( tmp_class_creation_2__bases == NULL );
        tmp_class_creation_2__bases = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_class_creation_2__bases );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        tmp_condition_result_9 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_subscribed_name_2 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        if ( tmp_type_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1( tmp_type_arg_3 );
        Py_DECREF( tmp_type_arg_3 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_18 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_18;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_6;
        }
        branch_no_6:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_5 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_5, const_str_plain___prepare__ );
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_6 = tmp_class_creation_2__metaclass;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___prepare__ );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_6;
            }
            tmp_tuple_element_5 = const_str_plain_MultibandFilter;
            tmp_args_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_5 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_5 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 32;
            tmp_assign_source_19 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_name_3 );
            if ( tmp_assign_source_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_6;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_19;
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_7 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_7, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_6;
            }
            tmp_condition_result_12 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_6;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_type_arg_4;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_6 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 32;

                    goto try_except_handler_6;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_6 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_4 = tmp_class_creation_2__prepared;
                tmp_source_name_8 = BUILTIN_TYPE1( tmp_type_arg_4 );
                assert( !(tmp_source_name_8 == NULL) );
                tmp_tuple_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_8 );
                if ( tmp_tuple_element_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 32;

                    goto try_except_handler_6;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_6 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 32;

                    goto try_except_handler_6;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 32;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_6;
            }
            branch_no_8:;
        }
        goto branch_end_7;
        branch_no_7:;
        {
            PyObject *tmp_assign_source_20;
            tmp_assign_source_20 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_20;
        }
        branch_end_7:;
    }
    {
        PyObject *tmp_assign_source_21;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_PIL$ImageFilter_32 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_32, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        tmp_dictset_value = const_str_plain_MultibandFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_32, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 32;

            goto try_except_handler_8;
        }
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_compexpr_left_3 = tmp_class_creation_2__bases;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_compexpr_right_3 = tmp_class_creation_2__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_dictset_value = tmp_class_creation_2__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_32, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            branch_no_9:;
        }
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_7 = const_str_plain_MultibandFilter;
            tmp_args_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_7 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_7 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_7 );
            tmp_tuple_element_7 = locals_PIL$ImageFilter_32;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_7 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 32;
            tmp_assign_source_22 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_args_name_4 );
            if ( tmp_assign_source_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 32;

                goto try_except_handler_8;
            }
            assert( outline_1_var___class__ == NULL );
            outline_1_var___class__ = tmp_assign_source_22;
        }
        CHECK_OBJECT( outline_1_var___class__ );
        tmp_assign_source_21 = outline_1_var___class__;
        Py_INCREF( tmp_assign_source_21 );
        goto try_return_handler_8;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_8:;
        Py_DECREF( locals_PIL$ImageFilter_32 );
        locals_PIL$ImageFilter_32 = NULL;
        goto try_return_handler_7;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_32 );
        locals_PIL$ImageFilter_32 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_7;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 32;
        goto try_except_handler_6;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter, tmp_assign_source_21 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases_orig );
    Py_DECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MultibandFilter );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MultibandFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 36;

            goto try_except_handler_9;
        }

        tmp_tuple_element_8 = tmp_mvar_value_4;
        tmp_assign_source_23 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_assign_source_23, 0, tmp_tuple_element_8 );
        assert( tmp_class_creation_3__bases_orig == NULL );
        tmp_class_creation_3__bases_orig = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT( tmp_class_creation_3__bases_orig );
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF( tmp_dircall_arg1_3 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_24 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        assert( tmp_class_creation_3__bases == NULL );
        tmp_class_creation_3__bases = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = PyDict_New();
        assert( tmp_class_creation_3__class_decl_dict == NULL );
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_7, tmp_key_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_5;
        }
        else
        {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_class_creation_3__bases );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        tmp_condition_result_15 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_6;
        }
        else
        {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_subscribed_name_3 = tmp_class_creation_3__bases;
        tmp_subscript_name_3 = const_int_0;
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
        if ( tmp_type_arg_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        tmp_metaclass_name_3 = BUILTIN_TYPE1( tmp_type_arg_5 );
        Py_DECREF( tmp_type_arg_5 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_3 );
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_bases_name_3 = tmp_class_creation_3__bases;
        tmp_assign_source_26 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
        Py_DECREF( tmp_metaclass_name_3 );
        if ( tmp_assign_source_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        assert( tmp_class_creation_3__metaclass == NULL );
        tmp_class_creation_3__metaclass = tmp_assign_source_26;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_9, tmp_key_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_9;
        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( tmp_class_creation_3__metaclass );
        tmp_source_name_9 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_9, const_str_plain___prepare__ );
        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_10;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_source_name_10 = tmp_class_creation_3__metaclass;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain___prepare__ );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_9;
            }
            tmp_tuple_element_9 = const_str_plain_BuiltinFilter;
            tmp_args_name_5 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_9 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_9 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_9 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 36;
            tmp_assign_source_27 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_5, tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_name_5 );
            if ( tmp_assign_source_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_9;
            }
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_27;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_source_name_11;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_source_name_11 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_11, const_str_plain___getitem__ );
            tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_9;
            }
            tmp_condition_result_18 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_10;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_12;
                PyObject *tmp_type_arg_6;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_3__metaclass );
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_10 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
                if ( tmp_tuple_element_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 36;

                    goto try_except_handler_9;
                }
                tmp_right_name_3 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_10 );
                CHECK_OBJECT( tmp_class_creation_3__prepared );
                tmp_type_arg_6 = tmp_class_creation_3__prepared;
                tmp_source_name_12 = BUILTIN_TYPE1( tmp_type_arg_6 );
                assert( !(tmp_source_name_12 == NULL) );
                tmp_tuple_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_12 );
                if ( tmp_tuple_element_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_3 );

                    exception_lineno = 36;

                    goto try_except_handler_9;
                }
                PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_10 );
                tmp_raise_value_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                Py_DECREF( tmp_right_name_3 );
                if ( tmp_raise_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 36;

                    goto try_except_handler_9;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF( tmp_raise_type_3 );
                exception_value = tmp_raise_value_3;
                exception_lineno = 36;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_9;
            }
            branch_no_12:;
        }
        goto branch_end_11;
        branch_no_11:;
        {
            PyObject *tmp_assign_source_28;
            tmp_assign_source_28 = PyDict_New();
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_28;
        }
        branch_end_11:;
    }
    {
        PyObject *tmp_assign_source_29;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_PIL$ImageFilter_36 = tmp_set_locals_3;
            Py_INCREF( tmp_set_locals_3 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_36, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_11;
        }
        tmp_dictset_value = const_str_plain_BuiltinFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_36, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 36;

            goto try_except_handler_11;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_d6a737a2090ded6a94ef942f7ca9e61e_2, codeobj_d6a737a2090ded6a94ef942f7ca9e61e, module_PIL$ImageFilter, sizeof(void *) );
        frame_d6a737a2090ded6a94ef942f7ca9e61e_2 = cache_frame_d6a737a2090ded6a94ef942f7ca9e61e_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_1_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_36, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 37;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_d6a737a2090ded6a94ef942f7ca9e61e_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_d6a737a2090ded6a94ef942f7ca9e61e_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_d6a737a2090ded6a94ef942f7ca9e61e_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_d6a737a2090ded6a94ef942f7ca9e61e_2,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if ( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 == cache_frame_d6a737a2090ded6a94ef942f7ca9e61e_2 )
        {
            Py_DECREF( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 );
        }
        cache_frame_d6a737a2090ded6a94ef942f7ca9e61e_2 = NULL;

        assertFrameObject( frame_d6a737a2090ded6a94ef942f7ca9e61e_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_11;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_compexpr_left_4 = tmp_class_creation_3__bases;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_compexpr_right_4 = tmp_class_creation_3__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_11;
            }
            tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_dictset_value = tmp_class_creation_3__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_36, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_11;
            }
            branch_no_13:;
        }
        {
            PyObject *tmp_assign_source_30;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_called_name_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_11 = const_str_plain_BuiltinFilter;
            tmp_args_name_6 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_11 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_11 );
            tmp_tuple_element_11 = locals_PIL$ImageFilter_36;
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 2, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 36;
            tmp_assign_source_30 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_6, tmp_kw_name_6 );
            Py_DECREF( tmp_args_name_6 );
            if ( tmp_assign_source_30 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 36;

                goto try_except_handler_11;
            }
            assert( outline_2_var___class__ == NULL );
            outline_2_var___class__ = tmp_assign_source_30;
        }
        CHECK_OBJECT( outline_2_var___class__ );
        tmp_assign_source_29 = outline_2_var___class__;
        Py_INCREF( tmp_assign_source_29 );
        goto try_return_handler_11;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_11:;
        Py_DECREF( locals_PIL$ImageFilter_36 );
        locals_PIL$ImageFilter_36 = NULL;
        goto try_return_handler_10;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_36 );
        locals_PIL$ImageFilter_36 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_10;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_10:;
        CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
        Py_DECREF( outline_2_var___class__ );
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_3:;
        exception_lineno = 36;
        goto try_except_handler_9;
        outline_result_3:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter, tmp_assign_source_29 );
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases_orig );
    Py_DECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__prepared );
    Py_DECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 43;

            goto try_except_handler_12;
        }

        tmp_tuple_element_12 = tmp_mvar_value_5;
        tmp_assign_source_31 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_12 );
        PyTuple_SET_ITEM( tmp_assign_source_31, 0, tmp_tuple_element_12 );
        assert( tmp_class_creation_4__bases_orig == NULL );
        tmp_class_creation_4__bases_orig = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT( tmp_class_creation_4__bases_orig );
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF( tmp_dircall_arg1_4 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_32 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        assert( tmp_class_creation_4__bases == NULL );
        tmp_class_creation_4__bases = tmp_assign_source_32;
    }
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = PyDict_New();
        assert( tmp_class_creation_4__class_decl_dict == NULL );
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_metaclass_name_4;
        nuitka_bool tmp_condition_result_20;
        PyObject *tmp_key_name_10;
        PyObject *tmp_dict_name_10;
        PyObject *tmp_dict_name_11;
        PyObject *tmp_key_name_11;
        nuitka_bool tmp_condition_result_21;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_bases_name_4;
        tmp_key_name_10 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_10, tmp_key_name_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_7;
        }
        else
        {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_name_11 = const_str_plain_metaclass;
        tmp_metaclass_name_4 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_class_creation_4__bases );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        tmp_condition_result_21 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_8;
        }
        else
        {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_subscribed_name_4 = tmp_class_creation_4__bases;
        tmp_subscript_name_4 = const_int_0;
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 0 );
        if ( tmp_type_arg_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        tmp_metaclass_name_4 = BUILTIN_TYPE1( tmp_type_arg_7 );
        Py_DECREF( tmp_type_arg_7 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_4 );
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_bases_name_4 = tmp_class_creation_4__bases;
        tmp_assign_source_34 = SELECT_METACLASS( tmp_metaclass_name_4, tmp_bases_name_4 );
        Py_DECREF( tmp_metaclass_name_4 );
        if ( tmp_assign_source_34 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        assert( tmp_class_creation_4__metaclass == NULL );
        tmp_class_creation_4__metaclass = tmp_assign_source_34;
    }
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_key_name_12;
        PyObject *tmp_dict_name_12;
        tmp_key_name_12 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_12, tmp_key_name_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_12;
        }
        branch_no_14:;
    }
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_source_name_13;
        CHECK_OBJECT( tmp_class_creation_4__metaclass );
        tmp_source_name_13 = tmp_class_creation_4__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_13, const_str_plain___prepare__ );
        tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_assign_source_35;
            PyObject *tmp_called_name_7;
            PyObject *tmp_source_name_14;
            PyObject *tmp_args_name_7;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_kw_name_7;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_source_name_14 = tmp_class_creation_4__metaclass;
            tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain___prepare__ );
            if ( tmp_called_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_12;
            }
            tmp_tuple_element_13 = const_str_plain_Kernel;
            tmp_args_name_7 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_13 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_13 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_args_name_7, 1, tmp_tuple_element_13 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_7 = tmp_class_creation_4__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 43;
            tmp_assign_source_35 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_7, tmp_kw_name_7 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_name_7 );
            if ( tmp_assign_source_35 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_12;
            }
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_35;
        }
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_operand_name_4;
            PyObject *tmp_source_name_15;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_source_name_15 = tmp_class_creation_4__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_15, const_str_plain___getitem__ );
            tmp_operand_name_4 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_12;
            }
            tmp_condition_result_24 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            {
                PyObject *tmp_raise_type_4;
                PyObject *tmp_raise_value_4;
                PyObject *tmp_left_name_4;
                PyObject *tmp_right_name_4;
                PyObject *tmp_tuple_element_14;
                PyObject *tmp_getattr_target_4;
                PyObject *tmp_getattr_attr_4;
                PyObject *tmp_getattr_default_4;
                PyObject *tmp_source_name_16;
                PyObject *tmp_type_arg_8;
                tmp_raise_type_4 = PyExc_TypeError;
                tmp_left_name_4 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_4__metaclass );
                tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
                tmp_getattr_attr_4 = const_str_plain___name__;
                tmp_getattr_default_4 = const_str_angle_metaclass;
                tmp_tuple_element_14 = BUILTIN_GETATTR( tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4 );
                if ( tmp_tuple_element_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 43;

                    goto try_except_handler_12;
                }
                tmp_right_name_4 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_14 );
                CHECK_OBJECT( tmp_class_creation_4__prepared );
                tmp_type_arg_8 = tmp_class_creation_4__prepared;
                tmp_source_name_16 = BUILTIN_TYPE1( tmp_type_arg_8 );
                assert( !(tmp_source_name_16 == NULL) );
                tmp_tuple_element_14 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_16 );
                if ( tmp_tuple_element_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_4 );

                    exception_lineno = 43;

                    goto try_except_handler_12;
                }
                PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_14 );
                tmp_raise_value_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
                Py_DECREF( tmp_right_name_4 );
                if ( tmp_raise_value_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 43;

                    goto try_except_handler_12;
                }
                exception_type = tmp_raise_type_4;
                Py_INCREF( tmp_raise_type_4 );
                exception_value = tmp_raise_value_4;
                exception_lineno = 43;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_12;
            }
            branch_no_16:;
        }
        goto branch_end_15;
        branch_no_15:;
        {
            PyObject *tmp_assign_source_36;
            tmp_assign_source_36 = PyDict_New();
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_36;
        }
        branch_end_15:;
    }
    {
        PyObject *tmp_assign_source_37;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_PIL$ImageFilter_43 = tmp_set_locals_4;
            Py_INCREF( tmp_set_locals_4 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_14;
        }
        tmp_dictset_value = const_str_digest_8476291df6a035f15eac6851c1169bd1;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_14;
        }
        tmp_dictset_value = const_str_plain_Kernel;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 43;

            goto try_except_handler_14;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_ed24899f6cb8054107835c368af3e32f_3, codeobj_ed24899f6cb8054107835c368af3e32f, module_PIL$ImageFilter, sizeof(void *) );
        frame_ed24899f6cb8054107835c368af3e32f_3 = cache_frame_ed24899f6cb8054107835c368af3e32f_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_ed24899f6cb8054107835c368af3e32f_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_ed24899f6cb8054107835c368af3e32f_3 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Kernel;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_none_int_0_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_2___init__( tmp_defaults_1 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 62;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ed24899f6cb8054107835c368af3e32f_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ed24899f6cb8054107835c368af3e32f_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_ed24899f6cb8054107835c368af3e32f_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_ed24899f6cb8054107835c368af3e32f_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_ed24899f6cb8054107835c368af3e32f_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_ed24899f6cb8054107835c368af3e32f_3,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame.
        if ( frame_ed24899f6cb8054107835c368af3e32f_3 == cache_frame_ed24899f6cb8054107835c368af3e32f_3 )
        {
            Py_DECREF( frame_ed24899f6cb8054107835c368af3e32f_3 );
        }
        cache_frame_ed24899f6cb8054107835c368af3e32f_3 = NULL;

        assertFrameObject( frame_ed24899f6cb8054107835c368af3e32f_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_14;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_25;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_compexpr_left_5 = tmp_class_creation_4__bases;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_compexpr_right_5 = tmp_class_creation_4__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_14;
            }
            tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_dictset_value = tmp_class_creation_4__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_43, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_14;
            }
            branch_no_17:;
        }
        {
            PyObject *tmp_assign_source_38;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_name_8;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_kw_name_8;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_called_name_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_15 = const_str_plain_Kernel;
            tmp_args_name_8 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_15 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_15 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_15 );
            tmp_tuple_element_15 = locals_PIL$ImageFilter_43;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_8, 2, tmp_tuple_element_15 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 43;
            tmp_assign_source_38 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_8, tmp_kw_name_8 );
            Py_DECREF( tmp_args_name_8 );
            if ( tmp_assign_source_38 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 43;

                goto try_except_handler_14;
            }
            assert( outline_3_var___class__ == NULL );
            outline_3_var___class__ = tmp_assign_source_38;
        }
        CHECK_OBJECT( outline_3_var___class__ );
        tmp_assign_source_37 = outline_3_var___class__;
        Py_INCREF( tmp_assign_source_37 );
        goto try_return_handler_14;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_14:;
        Py_DECREF( locals_PIL$ImageFilter_43 );
        locals_PIL$ImageFilter_43 = NULL;
        goto try_return_handler_13;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_43 );
        locals_PIL$ImageFilter_43 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_13;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_13:;
        CHECK_OBJECT( (PyObject *)outline_3_var___class__ );
        Py_DECREF( outline_3_var___class__ );
        outline_3_var___class__ = NULL;

        goto outline_result_4;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto outline_exception_4;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_4:;
        exception_lineno = 43;
        goto try_except_handler_12;
        outline_result_4:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Kernel, tmp_assign_source_37 );
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases_orig );
    Py_DECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_decl_dict );
    Py_DECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__prepared );
    Py_DECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Filter );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Filter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 71;

            goto try_except_handler_15;
        }

        tmp_tuple_element_16 = tmp_mvar_value_6;
        tmp_assign_source_39 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_assign_source_39, 0, tmp_tuple_element_16 );
        assert( tmp_class_creation_5__bases_orig == NULL );
        tmp_class_creation_5__bases_orig = tmp_assign_source_39;
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT( tmp_class_creation_5__bases_orig );
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF( tmp_dircall_arg1_5 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_40 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_40 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        assert( tmp_class_creation_5__bases == NULL );
        tmp_class_creation_5__bases = tmp_assign_source_40;
    }
    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = PyDict_New();
        assert( tmp_class_creation_5__class_decl_dict == NULL );
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_41;
    }
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_metaclass_name_5;
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_key_name_13;
        PyObject *tmp_dict_name_13;
        PyObject *tmp_dict_name_14;
        PyObject *tmp_key_name_14;
        nuitka_bool tmp_condition_result_27;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_bases_name_5;
        tmp_key_name_13 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_13, tmp_key_name_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_9;
        }
        else
        {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_name_14 = const_str_plain_metaclass;
        tmp_metaclass_name_5 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
        if ( tmp_metaclass_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_truth_name_5 = CHECK_IF_TRUE( tmp_class_creation_5__bases );
        if ( tmp_truth_name_5 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        tmp_condition_result_27 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_10;
        }
        else
        {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_subscribed_name_5 = tmp_class_creation_5__bases;
        tmp_subscript_name_5 = const_int_0;
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 0 );
        if ( tmp_type_arg_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        tmp_metaclass_name_5 = BUILTIN_TYPE1( tmp_type_arg_9 );
        Py_DECREF( tmp_type_arg_9 );
        if ( tmp_metaclass_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_5 );
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_bases_name_5 = tmp_class_creation_5__bases;
        tmp_assign_source_42 = SELECT_METACLASS( tmp_metaclass_name_5, tmp_bases_name_5 );
        Py_DECREF( tmp_metaclass_name_5 );
        if ( tmp_assign_source_42 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        assert( tmp_class_creation_5__metaclass == NULL );
        tmp_class_creation_5__metaclass = tmp_assign_source_42;
    }
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_key_name_15;
        PyObject *tmp_dict_name_15;
        tmp_key_name_15 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_15, tmp_key_name_15 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_15;
        }
        branch_no_18:;
    }
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_source_name_17;
        CHECK_OBJECT( tmp_class_creation_5__metaclass );
        tmp_source_name_17 = tmp_class_creation_5__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_17, const_str_plain___prepare__ );
        tmp_condition_result_29 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_19;
        }
        else
        {
            goto branch_no_19;
        }
        branch_yes_19:;
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_18;
            PyObject *tmp_args_name_9;
            PyObject *tmp_tuple_element_17;
            PyObject *tmp_kw_name_9;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_source_name_18 = tmp_class_creation_5__metaclass;
            tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain___prepare__ );
            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_15;
            }
            tmp_tuple_element_17 = const_str_plain_RankFilter;
            tmp_args_name_9 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_17 );
            PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_17 );
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_tuple_element_17 = tmp_class_creation_5__bases;
            Py_INCREF( tmp_tuple_element_17 );
            PyTuple_SET_ITEM( tmp_args_name_9, 1, tmp_tuple_element_17 );
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_9 = tmp_class_creation_5__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 71;
            tmp_assign_source_43 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_9, tmp_kw_name_9 );
            Py_DECREF( tmp_called_name_9 );
            Py_DECREF( tmp_args_name_9 );
            if ( tmp_assign_source_43 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_15;
            }
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_43;
        }
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_operand_name_5;
            PyObject *tmp_source_name_19;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_source_name_19 = tmp_class_creation_5__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_19, const_str_plain___getitem__ );
            tmp_operand_name_5 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_15;
            }
            tmp_condition_result_30 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_raise_type_5;
                PyObject *tmp_raise_value_5;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                PyObject *tmp_tuple_element_18;
                PyObject *tmp_getattr_target_5;
                PyObject *tmp_getattr_attr_5;
                PyObject *tmp_getattr_default_5;
                PyObject *tmp_source_name_20;
                PyObject *tmp_type_arg_10;
                tmp_raise_type_5 = PyExc_TypeError;
                tmp_left_name_5 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_5__metaclass );
                tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
                tmp_getattr_attr_5 = const_str_plain___name__;
                tmp_getattr_default_5 = const_str_angle_metaclass;
                tmp_tuple_element_18 = BUILTIN_GETATTR( tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5 );
                if ( tmp_tuple_element_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 71;

                    goto try_except_handler_15;
                }
                tmp_right_name_5 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_18 );
                CHECK_OBJECT( tmp_class_creation_5__prepared );
                tmp_type_arg_10 = tmp_class_creation_5__prepared;
                tmp_source_name_20 = BUILTIN_TYPE1( tmp_type_arg_10 );
                assert( !(tmp_source_name_20 == NULL) );
                tmp_tuple_element_18 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_20 );
                if ( tmp_tuple_element_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_5 );

                    exception_lineno = 71;

                    goto try_except_handler_15;
                }
                PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_18 );
                tmp_raise_value_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
                Py_DECREF( tmp_right_name_5 );
                if ( tmp_raise_value_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 71;

                    goto try_except_handler_15;
                }
                exception_type = tmp_raise_type_5;
                Py_INCREF( tmp_raise_type_5 );
                exception_value = tmp_raise_value_5;
                exception_lineno = 71;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_15;
            }
            branch_no_20:;
        }
        goto branch_end_19;
        branch_no_19:;
        {
            PyObject *tmp_assign_source_44;
            tmp_assign_source_44 = PyDict_New();
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_44;
        }
        branch_end_19:;
    }
    {
        PyObject *tmp_assign_source_45;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_PIL$ImageFilter_71 = tmp_set_locals_5;
            Py_INCREF( tmp_set_locals_5 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_17;
        }
        tmp_dictset_value = const_str_digest_c3c1dd11c1e933e6a2ea4d04b622099b;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_17;
        }
        tmp_dictset_value = const_str_plain_RankFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;

            goto try_except_handler_17;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_41916f6d60312bba0f6326fc5c208686_4, codeobj_41916f6d60312bba0f6326fc5c208686, module_PIL$ImageFilter, sizeof(void *) );
        frame_41916f6d60312bba0f6326fc5c208686_4 = cache_frame_41916f6d60312bba0f6326fc5c208686_4;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_41916f6d60312bba0f6326fc5c208686_4 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_41916f6d60312bba0f6326fc5c208686_4 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Rank;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 81;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_3___init__(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 83;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_4_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 87;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_41916f6d60312bba0f6326fc5c208686_4 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_41916f6d60312bba0f6326fc5c208686_4 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_41916f6d60312bba0f6326fc5c208686_4, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_41916f6d60312bba0f6326fc5c208686_4->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_41916f6d60312bba0f6326fc5c208686_4, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_41916f6d60312bba0f6326fc5c208686_4,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame.
        if ( frame_41916f6d60312bba0f6326fc5c208686_4 == cache_frame_41916f6d60312bba0f6326fc5c208686_4 )
        {
            Py_DECREF( frame_41916f6d60312bba0f6326fc5c208686_4 );
        }
        cache_frame_41916f6d60312bba0f6326fc5c208686_4 = NULL;

        assertFrameObject( frame_41916f6d60312bba0f6326fc5c208686_4 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_17;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_compexpr_left_6 = tmp_class_creation_5__bases;
            CHECK_OBJECT( tmp_class_creation_5__bases_orig );
            tmp_compexpr_right_6 = tmp_class_creation_5__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_17;
            }
            tmp_condition_result_31 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_21;
            }
            else
            {
                goto branch_no_21;
            }
            branch_yes_21:;
            CHECK_OBJECT( tmp_class_creation_5__bases_orig );
            tmp_dictset_value = tmp_class_creation_5__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_71, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_17;
            }
            branch_no_21:;
        }
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_called_name_10;
            PyObject *tmp_args_name_10;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_kw_name_10;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_called_name_10 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_19 = const_str_plain_RankFilter;
            tmp_args_name_10 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_19 );
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_tuple_element_19 = tmp_class_creation_5__bases;
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_19 );
            tmp_tuple_element_19 = locals_PIL$ImageFilter_71;
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_10, 2, tmp_tuple_element_19 );
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 71;
            tmp_assign_source_46 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_10, tmp_kw_name_10 );
            Py_DECREF( tmp_args_name_10 );
            if ( tmp_assign_source_46 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 71;

                goto try_except_handler_17;
            }
            assert( outline_4_var___class__ == NULL );
            outline_4_var___class__ = tmp_assign_source_46;
        }
        CHECK_OBJECT( outline_4_var___class__ );
        tmp_assign_source_45 = outline_4_var___class__;
        Py_INCREF( tmp_assign_source_45 );
        goto try_return_handler_17;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_17:;
        Py_DECREF( locals_PIL$ImageFilter_71 );
        locals_PIL$ImageFilter_71 = NULL;
        goto try_return_handler_16;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_71 );
        locals_PIL$ImageFilter_71 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto try_except_handler_16;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_16:;
        CHECK_OBJECT( (PyObject *)outline_4_var___class__ );
        Py_DECREF( outline_4_var___class__ );
        outline_4_var___class__ = NULL;

        goto outline_result_5;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto outline_exception_5;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_5:;
        exception_lineno = 71;
        goto try_except_handler_15;
        outline_result_5:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_RankFilter, tmp_assign_source_45 );
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_5__bases_orig );
    tmp_class_creation_5__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases_orig );
    Py_DECREF( tmp_class_creation_5__bases_orig );
    tmp_class_creation_5__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_decl_dict );
    Py_DECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__prepared );
    Py_DECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_tuple_element_20;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_RankFilter );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RankFilter );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RankFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 94;

            goto try_except_handler_18;
        }

        tmp_tuple_element_20 = tmp_mvar_value_7;
        tmp_assign_source_47 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_20 );
        PyTuple_SET_ITEM( tmp_assign_source_47, 0, tmp_tuple_element_20 );
        assert( tmp_class_creation_6__bases_orig == NULL );
        tmp_class_creation_6__bases_orig = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT( tmp_class_creation_6__bases_orig );
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF( tmp_dircall_arg1_6 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_48 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_48 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        assert( tmp_class_creation_6__bases == NULL );
        tmp_class_creation_6__bases = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = PyDict_New();
        assert( tmp_class_creation_6__class_decl_dict == NULL );
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_metaclass_name_6;
        nuitka_bool tmp_condition_result_32;
        PyObject *tmp_key_name_16;
        PyObject *tmp_dict_name_16;
        PyObject *tmp_dict_name_17;
        PyObject *tmp_key_name_17;
        nuitka_bool tmp_condition_result_33;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_bases_name_6;
        tmp_key_name_16 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_16, tmp_key_name_16 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        tmp_condition_result_32 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_11;
        }
        else
        {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_name_17 = const_str_plain_metaclass;
        tmp_metaclass_name_6 = DICT_GET_ITEM( tmp_dict_name_17, tmp_key_name_17 );
        if ( tmp_metaclass_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_truth_name_6 = CHECK_IF_TRUE( tmp_class_creation_6__bases );
        if ( tmp_truth_name_6 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        tmp_condition_result_33 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_12;
        }
        else
        {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_subscribed_name_6 = tmp_class_creation_6__bases;
        tmp_subscript_name_6 = const_int_0;
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 0 );
        if ( tmp_type_arg_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        tmp_metaclass_name_6 = BUILTIN_TYPE1( tmp_type_arg_11 );
        Py_DECREF( tmp_type_arg_11 );
        if ( tmp_metaclass_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_name_6 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_6 );
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_bases_name_6 = tmp_class_creation_6__bases;
        tmp_assign_source_50 = SELECT_METACLASS( tmp_metaclass_name_6, tmp_bases_name_6 );
        Py_DECREF( tmp_metaclass_name_6 );
        if ( tmp_assign_source_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        assert( tmp_class_creation_6__metaclass == NULL );
        tmp_class_creation_6__metaclass = tmp_assign_source_50;
    }
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_key_name_18;
        PyObject *tmp_dict_name_18;
        tmp_key_name_18 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_18, tmp_key_name_18 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        tmp_condition_result_34 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_34 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_22;
        }
        else
        {
            goto branch_no_22;
        }
        branch_yes_22:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_18;
        }
        branch_no_22:;
    }
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_source_name_21;
        CHECK_OBJECT( tmp_class_creation_6__metaclass );
        tmp_source_name_21 = tmp_class_creation_6__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_21, const_str_plain___prepare__ );
        tmp_condition_result_35 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_35 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_23;
        }
        else
        {
            goto branch_no_23;
        }
        branch_yes_23:;
        {
            PyObject *tmp_assign_source_51;
            PyObject *tmp_called_name_11;
            PyObject *tmp_source_name_22;
            PyObject *tmp_args_name_11;
            PyObject *tmp_tuple_element_21;
            PyObject *tmp_kw_name_11;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_source_name_22 = tmp_class_creation_6__metaclass;
            tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain___prepare__ );
            if ( tmp_called_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_18;
            }
            tmp_tuple_element_21 = const_str_plain_MedianFilter;
            tmp_args_name_11 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_21 );
            PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_21 );
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_tuple_element_21 = tmp_class_creation_6__bases;
            Py_INCREF( tmp_tuple_element_21 );
            PyTuple_SET_ITEM( tmp_args_name_11, 1, tmp_tuple_element_21 );
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_11 = tmp_class_creation_6__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 94;
            tmp_assign_source_51 = CALL_FUNCTION( tmp_called_name_11, tmp_args_name_11, tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_name_11 );
            if ( tmp_assign_source_51 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_18;
            }
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_51;
        }
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_operand_name_6;
            PyObject *tmp_source_name_23;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_source_name_23 = tmp_class_creation_6__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_23, const_str_plain___getitem__ );
            tmp_operand_name_6 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_18;
            }
            tmp_condition_result_36 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_36 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_24;
            }
            else
            {
                goto branch_no_24;
            }
            branch_yes_24:;
            {
                PyObject *tmp_raise_type_6;
                PyObject *tmp_raise_value_6;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                PyObject *tmp_tuple_element_22;
                PyObject *tmp_getattr_target_6;
                PyObject *tmp_getattr_attr_6;
                PyObject *tmp_getattr_default_6;
                PyObject *tmp_source_name_24;
                PyObject *tmp_type_arg_12;
                tmp_raise_type_6 = PyExc_TypeError;
                tmp_left_name_6 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_6__metaclass );
                tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
                tmp_getattr_attr_6 = const_str_plain___name__;
                tmp_getattr_default_6 = const_str_angle_metaclass;
                tmp_tuple_element_22 = BUILTIN_GETATTR( tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6 );
                if ( tmp_tuple_element_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 94;

                    goto try_except_handler_18;
                }
                tmp_right_name_6 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_22 );
                CHECK_OBJECT( tmp_class_creation_6__prepared );
                tmp_type_arg_12 = tmp_class_creation_6__prepared;
                tmp_source_name_24 = BUILTIN_TYPE1( tmp_type_arg_12 );
                assert( !(tmp_source_name_24 == NULL) );
                tmp_tuple_element_22 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_24 );
                if ( tmp_tuple_element_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_6 );

                    exception_lineno = 94;

                    goto try_except_handler_18;
                }
                PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_22 );
                tmp_raise_value_6 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
                Py_DECREF( tmp_right_name_6 );
                if ( tmp_raise_value_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 94;

                    goto try_except_handler_18;
                }
                exception_type = tmp_raise_type_6;
                Py_INCREF( tmp_raise_type_6 );
                exception_value = tmp_raise_value_6;
                exception_lineno = 94;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_18;
            }
            branch_no_24:;
        }
        goto branch_end_23;
        branch_no_23:;
        {
            PyObject *tmp_assign_source_52;
            tmp_assign_source_52 = PyDict_New();
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_52;
        }
        branch_end_23:;
    }
    {
        PyObject *tmp_assign_source_53;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_PIL$ImageFilter_94 = tmp_set_locals_6;
            Py_INCREF( tmp_set_locals_6 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_20;
        }
        tmp_dictset_value = const_str_digest_e62e3b3ba046da0530d5673e420b801f;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_20;
        }
        tmp_dictset_value = const_str_plain_MedianFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;

            goto try_except_handler_20;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_29870514b17fb3d9855230d26a5e018e_5, codeobj_29870514b17fb3d9855230d26a5e018e, module_PIL$ImageFilter, sizeof(void *) );
        frame_29870514b17fb3d9855230d26a5e018e_5 = cache_frame_29870514b17fb3d9855230d26a5e018e_5;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_29870514b17fb3d9855230d26a5e018e_5 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_29870514b17fb3d9855230d26a5e018e_5 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Median;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 101;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = const_tuple_int_pos_3_tuple;
            Py_INCREF( tmp_defaults_2 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_5___init__( tmp_defaults_2 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 103;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_29870514b17fb3d9855230d26a5e018e_5 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_29870514b17fb3d9855230d26a5e018e_5 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_29870514b17fb3d9855230d26a5e018e_5, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_29870514b17fb3d9855230d26a5e018e_5->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_29870514b17fb3d9855230d26a5e018e_5, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_29870514b17fb3d9855230d26a5e018e_5,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame.
        if ( frame_29870514b17fb3d9855230d26a5e018e_5 == cache_frame_29870514b17fb3d9855230d26a5e018e_5 )
        {
            Py_DECREF( frame_29870514b17fb3d9855230d26a5e018e_5 );
        }
        cache_frame_29870514b17fb3d9855230d26a5e018e_5 = NULL;

        assertFrameObject( frame_29870514b17fb3d9855230d26a5e018e_5 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_20;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_37;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_compexpr_left_7 = tmp_class_creation_6__bases;
            CHECK_OBJECT( tmp_class_creation_6__bases_orig );
            tmp_compexpr_right_7 = tmp_class_creation_6__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_20;
            }
            tmp_condition_result_37 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_37 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_25;
            }
            else
            {
                goto branch_no_25;
            }
            branch_yes_25:;
            CHECK_OBJECT( tmp_class_creation_6__bases_orig );
            tmp_dictset_value = tmp_class_creation_6__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_94, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_20;
            }
            branch_no_25:;
        }
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_called_name_12;
            PyObject *tmp_args_name_12;
            PyObject *tmp_tuple_element_23;
            PyObject *tmp_kw_name_12;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_called_name_12 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_23 = const_str_plain_MedianFilter;
            tmp_args_name_12 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_23 );
            PyTuple_SET_ITEM( tmp_args_name_12, 0, tmp_tuple_element_23 );
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_tuple_element_23 = tmp_class_creation_6__bases;
            Py_INCREF( tmp_tuple_element_23 );
            PyTuple_SET_ITEM( tmp_args_name_12, 1, tmp_tuple_element_23 );
            tmp_tuple_element_23 = locals_PIL$ImageFilter_94;
            Py_INCREF( tmp_tuple_element_23 );
            PyTuple_SET_ITEM( tmp_args_name_12, 2, tmp_tuple_element_23 );
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_12 = tmp_class_creation_6__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 94;
            tmp_assign_source_54 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_12, tmp_kw_name_12 );
            Py_DECREF( tmp_args_name_12 );
            if ( tmp_assign_source_54 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 94;

                goto try_except_handler_20;
            }
            assert( outline_5_var___class__ == NULL );
            outline_5_var___class__ = tmp_assign_source_54;
        }
        CHECK_OBJECT( outline_5_var___class__ );
        tmp_assign_source_53 = outline_5_var___class__;
        Py_INCREF( tmp_assign_source_53 );
        goto try_return_handler_20;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_20:;
        Py_DECREF( locals_PIL$ImageFilter_94 );
        locals_PIL$ImageFilter_94 = NULL;
        goto try_return_handler_19;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_94 );
        locals_PIL$ImageFilter_94 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto try_except_handler_19;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_19:;
        CHECK_OBJECT( (PyObject *)outline_5_var___class__ );
        Py_DECREF( outline_5_var___class__ );
        outline_5_var___class__ = NULL;

        goto outline_result_6;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto outline_exception_6;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_6:;
        exception_lineno = 94;
        goto try_except_handler_18;
        outline_result_6:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MedianFilter, tmp_assign_source_53 );
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_6__bases_orig );
    tmp_class_creation_6__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases_orig );
    Py_DECREF( tmp_class_creation_6__bases_orig );
    tmp_class_creation_6__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_decl_dict );
    Py_DECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__prepared );
    Py_DECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_55;
        PyObject *tmp_tuple_element_24;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_RankFilter );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RankFilter );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RankFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 108;

            goto try_except_handler_21;
        }

        tmp_tuple_element_24 = tmp_mvar_value_8;
        tmp_assign_source_55 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_24 );
        PyTuple_SET_ITEM( tmp_assign_source_55, 0, tmp_tuple_element_24 );
        assert( tmp_class_creation_7__bases_orig == NULL );
        tmp_class_creation_7__bases_orig = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT( tmp_class_creation_7__bases_orig );
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF( tmp_dircall_arg1_7 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_56 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_56 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        assert( tmp_class_creation_7__bases == NULL );
        tmp_class_creation_7__bases = tmp_assign_source_56;
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = PyDict_New();
        assert( tmp_class_creation_7__class_decl_dict == NULL );
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_57;
    }
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_metaclass_name_7;
        nuitka_bool tmp_condition_result_38;
        PyObject *tmp_key_name_19;
        PyObject *tmp_dict_name_19;
        PyObject *tmp_dict_name_20;
        PyObject *tmp_key_name_20;
        nuitka_bool tmp_condition_result_39;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_subscribed_name_7;
        PyObject *tmp_subscript_name_7;
        PyObject *tmp_bases_name_7;
        tmp_key_name_19 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_19, tmp_key_name_19 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        tmp_condition_result_38 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_38 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_13;
        }
        else
        {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_name_20 = const_str_plain_metaclass;
        tmp_metaclass_name_7 = DICT_GET_ITEM( tmp_dict_name_20, tmp_key_name_20 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_truth_name_7 = CHECK_IF_TRUE( tmp_class_creation_7__bases );
        if ( tmp_truth_name_7 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        tmp_condition_result_39 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_39 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_14;
        }
        else
        {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_subscribed_name_7 = tmp_class_creation_7__bases;
        tmp_subscript_name_7 = const_int_0;
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 0 );
        if ( tmp_type_arg_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        tmp_metaclass_name_7 = BUILTIN_TYPE1( tmp_type_arg_13 );
        Py_DECREF( tmp_type_arg_13 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_name_7 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_7 );
        condexpr_end_14:;
        condexpr_end_13:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_bases_name_7 = tmp_class_creation_7__bases;
        tmp_assign_source_58 = SELECT_METACLASS( tmp_metaclass_name_7, tmp_bases_name_7 );
        Py_DECREF( tmp_metaclass_name_7 );
        if ( tmp_assign_source_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        assert( tmp_class_creation_7__metaclass == NULL );
        tmp_class_creation_7__metaclass = tmp_assign_source_58;
    }
    {
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_key_name_21;
        PyObject *tmp_dict_name_21;
        tmp_key_name_21 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_21, tmp_key_name_21 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        tmp_condition_result_40 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_40 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_26;
        }
        else
        {
            goto branch_no_26;
        }
        branch_yes_26:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_21;
        }
        branch_no_26:;
    }
    {
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_source_name_25;
        CHECK_OBJECT( tmp_class_creation_7__metaclass );
        tmp_source_name_25 = tmp_class_creation_7__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_25, const_str_plain___prepare__ );
        tmp_condition_result_41 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_41 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_27;
        }
        else
        {
            goto branch_no_27;
        }
        branch_yes_27:;
        {
            PyObject *tmp_assign_source_59;
            PyObject *tmp_called_name_13;
            PyObject *tmp_source_name_26;
            PyObject *tmp_args_name_13;
            PyObject *tmp_tuple_element_25;
            PyObject *tmp_kw_name_13;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_source_name_26 = tmp_class_creation_7__metaclass;
            tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain___prepare__ );
            if ( tmp_called_name_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_21;
            }
            tmp_tuple_element_25 = const_str_plain_MinFilter;
            tmp_args_name_13 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_25 );
            PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_25 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_25 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_25 );
            PyTuple_SET_ITEM( tmp_args_name_13, 1, tmp_tuple_element_25 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_13 = tmp_class_creation_7__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 108;
            tmp_assign_source_59 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_13, tmp_kw_name_13 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_name_13 );
            if ( tmp_assign_source_59 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_21;
            }
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_59;
        }
        {
            nuitka_bool tmp_condition_result_42;
            PyObject *tmp_operand_name_7;
            PyObject *tmp_source_name_27;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_source_name_27 = tmp_class_creation_7__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_27, const_str_plain___getitem__ );
            tmp_operand_name_7 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_21;
            }
            tmp_condition_result_42 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_42 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_28;
            }
            else
            {
                goto branch_no_28;
            }
            branch_yes_28:;
            {
                PyObject *tmp_raise_type_7;
                PyObject *tmp_raise_value_7;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                PyObject *tmp_tuple_element_26;
                PyObject *tmp_getattr_target_7;
                PyObject *tmp_getattr_attr_7;
                PyObject *tmp_getattr_default_7;
                PyObject *tmp_source_name_28;
                PyObject *tmp_type_arg_14;
                tmp_raise_type_7 = PyExc_TypeError;
                tmp_left_name_7 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_7__metaclass );
                tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
                tmp_getattr_attr_7 = const_str_plain___name__;
                tmp_getattr_default_7 = const_str_angle_metaclass;
                tmp_tuple_element_26 = BUILTIN_GETATTR( tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7 );
                if ( tmp_tuple_element_26 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 108;

                    goto try_except_handler_21;
                }
                tmp_right_name_7 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_7, 0, tmp_tuple_element_26 );
                CHECK_OBJECT( tmp_class_creation_7__prepared );
                tmp_type_arg_14 = tmp_class_creation_7__prepared;
                tmp_source_name_28 = BUILTIN_TYPE1( tmp_type_arg_14 );
                assert( !(tmp_source_name_28 == NULL) );
                tmp_tuple_element_26 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_28 );
                if ( tmp_tuple_element_26 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_7 );

                    exception_lineno = 108;

                    goto try_except_handler_21;
                }
                PyTuple_SET_ITEM( tmp_right_name_7, 1, tmp_tuple_element_26 );
                tmp_raise_value_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_raise_value_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 108;

                    goto try_except_handler_21;
                }
                exception_type = tmp_raise_type_7;
                Py_INCREF( tmp_raise_type_7 );
                exception_value = tmp_raise_value_7;
                exception_lineno = 108;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_21;
            }
            branch_no_28:;
        }
        goto branch_end_27;
        branch_no_27:;
        {
            PyObject *tmp_assign_source_60;
            tmp_assign_source_60 = PyDict_New();
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_60;
        }
        branch_end_27:;
    }
    {
        PyObject *tmp_assign_source_61;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_PIL$ImageFilter_108 = tmp_set_locals_7;
            Py_INCREF( tmp_set_locals_7 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_23;
        }
        tmp_dictset_value = const_str_digest_19bd478da4cd8d542b9dab88bfd5da36;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_23;
        }
        tmp_dictset_value = const_str_plain_MinFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;

            goto try_except_handler_23;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_85c1c33bfc54e852a587af0ca5d84895_6, codeobj_85c1c33bfc54e852a587af0ca5d84895, module_PIL$ImageFilter, sizeof(void *) );
        frame_85c1c33bfc54e852a587af0ca5d84895_6 = cache_frame_85c1c33bfc54e852a587af0ca5d84895_6;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_85c1c33bfc54e852a587af0ca5d84895_6 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_85c1c33bfc54e852a587af0ca5d84895_6 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Min;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 115;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = const_tuple_int_pos_3_tuple;
            Py_INCREF( tmp_defaults_3 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_6___init__( tmp_defaults_3 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_85c1c33bfc54e852a587af0ca5d84895_6 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_85c1c33bfc54e852a587af0ca5d84895_6 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_85c1c33bfc54e852a587af0ca5d84895_6, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_85c1c33bfc54e852a587af0ca5d84895_6->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_85c1c33bfc54e852a587af0ca5d84895_6, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_85c1c33bfc54e852a587af0ca5d84895_6,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame.
        if ( frame_85c1c33bfc54e852a587af0ca5d84895_6 == cache_frame_85c1c33bfc54e852a587af0ca5d84895_6 )
        {
            Py_DECREF( frame_85c1c33bfc54e852a587af0ca5d84895_6 );
        }
        cache_frame_85c1c33bfc54e852a587af0ca5d84895_6 = NULL;

        assertFrameObject( frame_85c1c33bfc54e852a587af0ca5d84895_6 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_23;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_43;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_compexpr_left_8 = tmp_class_creation_7__bases;
            CHECK_OBJECT( tmp_class_creation_7__bases_orig );
            tmp_compexpr_right_8 = tmp_class_creation_7__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_23;
            }
            tmp_condition_result_43 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_43 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_29;
            }
            else
            {
                goto branch_no_29;
            }
            branch_yes_29:;
            CHECK_OBJECT( tmp_class_creation_7__bases_orig );
            tmp_dictset_value = tmp_class_creation_7__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_108, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_23;
            }
            branch_no_29:;
        }
        {
            PyObject *tmp_assign_source_62;
            PyObject *tmp_called_name_14;
            PyObject *tmp_args_name_14;
            PyObject *tmp_tuple_element_27;
            PyObject *tmp_kw_name_14;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_called_name_14 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_27 = const_str_plain_MinFilter;
            tmp_args_name_14 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_27 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_27 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 1, tmp_tuple_element_27 );
            tmp_tuple_element_27 = locals_PIL$ImageFilter_108;
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 2, tmp_tuple_element_27 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_14 = tmp_class_creation_7__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 108;
            tmp_assign_source_62 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_14, tmp_kw_name_14 );
            Py_DECREF( tmp_args_name_14 );
            if ( tmp_assign_source_62 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 108;

                goto try_except_handler_23;
            }
            assert( outline_6_var___class__ == NULL );
            outline_6_var___class__ = tmp_assign_source_62;
        }
        CHECK_OBJECT( outline_6_var___class__ );
        tmp_assign_source_61 = outline_6_var___class__;
        Py_INCREF( tmp_assign_source_61 );
        goto try_return_handler_23;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_23:;
        Py_DECREF( locals_PIL$ImageFilter_108 );
        locals_PIL$ImageFilter_108 = NULL;
        goto try_return_handler_22;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_108 );
        locals_PIL$ImageFilter_108 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto try_except_handler_22;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_22:;
        CHECK_OBJECT( (PyObject *)outline_6_var___class__ );
        Py_DECREF( outline_6_var___class__ );
        outline_6_var___class__ = NULL;

        goto outline_result_7;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto outline_exception_7;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_7:;
        exception_lineno = 108;
        goto try_except_handler_21;
        outline_result_7:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MinFilter, tmp_assign_source_61 );
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases_orig );
    tmp_class_creation_7__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases_orig );
    Py_DECREF( tmp_class_creation_7__bases_orig );
    tmp_class_creation_7__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_decl_dict );
    Py_DECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__prepared );
    Py_DECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_RankFilter );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RankFilter );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RankFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 122;

            goto try_except_handler_24;
        }

        tmp_tuple_element_28 = tmp_mvar_value_9;
        tmp_assign_source_63 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_28 );
        PyTuple_SET_ITEM( tmp_assign_source_63, 0, tmp_tuple_element_28 );
        assert( tmp_class_creation_8__bases_orig == NULL );
        tmp_class_creation_8__bases_orig = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT( tmp_class_creation_8__bases_orig );
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF( tmp_dircall_arg1_8 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_64 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_64 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        assert( tmp_class_creation_8__bases == NULL );
        tmp_class_creation_8__bases = tmp_assign_source_64;
    }
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = PyDict_New();
        assert( tmp_class_creation_8__class_decl_dict == NULL );
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_65;
    }
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_metaclass_name_8;
        nuitka_bool tmp_condition_result_44;
        PyObject *tmp_key_name_22;
        PyObject *tmp_dict_name_22;
        PyObject *tmp_dict_name_23;
        PyObject *tmp_key_name_23;
        nuitka_bool tmp_condition_result_45;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_subscribed_name_8;
        PyObject *tmp_subscript_name_8;
        PyObject *tmp_bases_name_8;
        tmp_key_name_22 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
        tmp_dict_name_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_22, tmp_key_name_22 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        tmp_condition_result_44 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_44 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_15;
        }
        else
        {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
        tmp_dict_name_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_name_23 = const_str_plain_metaclass;
        tmp_metaclass_name_8 = DICT_GET_ITEM( tmp_dict_name_23, tmp_key_name_23 );
        if ( tmp_metaclass_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        goto condexpr_end_15;
        condexpr_false_15:;
        CHECK_OBJECT( tmp_class_creation_8__bases );
        tmp_truth_name_8 = CHECK_IF_TRUE( tmp_class_creation_8__bases );
        if ( tmp_truth_name_8 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        tmp_condition_result_45 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_45 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_16;
        }
        else
        {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT( tmp_class_creation_8__bases );
        tmp_subscribed_name_8 = tmp_class_creation_8__bases;
        tmp_subscript_name_8 = const_int_0;
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_8, tmp_subscript_name_8, 0 );
        if ( tmp_type_arg_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        tmp_metaclass_name_8 = BUILTIN_TYPE1( tmp_type_arg_15 );
        Py_DECREF( tmp_type_arg_15 );
        if ( tmp_metaclass_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_name_8 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_8 );
        condexpr_end_16:;
        condexpr_end_15:;
        CHECK_OBJECT( tmp_class_creation_8__bases );
        tmp_bases_name_8 = tmp_class_creation_8__bases;
        tmp_assign_source_66 = SELECT_METACLASS( tmp_metaclass_name_8, tmp_bases_name_8 );
        Py_DECREF( tmp_metaclass_name_8 );
        if ( tmp_assign_source_66 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        assert( tmp_class_creation_8__metaclass == NULL );
        tmp_class_creation_8__metaclass = tmp_assign_source_66;
    }
    {
        nuitka_bool tmp_condition_result_46;
        PyObject *tmp_key_name_24;
        PyObject *tmp_dict_name_24;
        tmp_key_name_24 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
        tmp_dict_name_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_24, tmp_key_name_24 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        tmp_condition_result_46 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_46 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_30;
        }
        else
        {
            goto branch_no_30;
        }
        branch_yes_30:;
        CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_24;
        }
        branch_no_30:;
    }
    {
        nuitka_bool tmp_condition_result_47;
        PyObject *tmp_source_name_29;
        CHECK_OBJECT( tmp_class_creation_8__metaclass );
        tmp_source_name_29 = tmp_class_creation_8__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_29, const_str_plain___prepare__ );
        tmp_condition_result_47 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_47 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_31;
        }
        else
        {
            goto branch_no_31;
        }
        branch_yes_31:;
        {
            PyObject *tmp_assign_source_67;
            PyObject *tmp_called_name_15;
            PyObject *tmp_source_name_30;
            PyObject *tmp_args_name_15;
            PyObject *tmp_tuple_element_29;
            PyObject *tmp_kw_name_15;
            CHECK_OBJECT( tmp_class_creation_8__metaclass );
            tmp_source_name_30 = tmp_class_creation_8__metaclass;
            tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain___prepare__ );
            if ( tmp_called_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_24;
            }
            tmp_tuple_element_29 = const_str_plain_MaxFilter;
            tmp_args_name_15 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_29 );
            PyTuple_SET_ITEM( tmp_args_name_15, 0, tmp_tuple_element_29 );
            CHECK_OBJECT( tmp_class_creation_8__bases );
            tmp_tuple_element_29 = tmp_class_creation_8__bases;
            Py_INCREF( tmp_tuple_element_29 );
            PyTuple_SET_ITEM( tmp_args_name_15, 1, tmp_tuple_element_29 );
            CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
            tmp_kw_name_15 = tmp_class_creation_8__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 122;
            tmp_assign_source_67 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_15, tmp_kw_name_15 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_name_15 );
            if ( tmp_assign_source_67 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_24;
            }
            assert( tmp_class_creation_8__prepared == NULL );
            tmp_class_creation_8__prepared = tmp_assign_source_67;
        }
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_operand_name_8;
            PyObject *tmp_source_name_31;
            CHECK_OBJECT( tmp_class_creation_8__prepared );
            tmp_source_name_31 = tmp_class_creation_8__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_31, const_str_plain___getitem__ );
            tmp_operand_name_8 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_24;
            }
            tmp_condition_result_48 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_48 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_32;
            }
            else
            {
                goto branch_no_32;
            }
            branch_yes_32:;
            {
                PyObject *tmp_raise_type_8;
                PyObject *tmp_raise_value_8;
                PyObject *tmp_left_name_8;
                PyObject *tmp_right_name_8;
                PyObject *tmp_tuple_element_30;
                PyObject *tmp_getattr_target_8;
                PyObject *tmp_getattr_attr_8;
                PyObject *tmp_getattr_default_8;
                PyObject *tmp_source_name_32;
                PyObject *tmp_type_arg_16;
                tmp_raise_type_8 = PyExc_TypeError;
                tmp_left_name_8 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_8__metaclass );
                tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
                tmp_getattr_attr_8 = const_str_plain___name__;
                tmp_getattr_default_8 = const_str_angle_metaclass;
                tmp_tuple_element_30 = BUILTIN_GETATTR( tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8 );
                if ( tmp_tuple_element_30 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 122;

                    goto try_except_handler_24;
                }
                tmp_right_name_8 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_8, 0, tmp_tuple_element_30 );
                CHECK_OBJECT( tmp_class_creation_8__prepared );
                tmp_type_arg_16 = tmp_class_creation_8__prepared;
                tmp_source_name_32 = BUILTIN_TYPE1( tmp_type_arg_16 );
                assert( !(tmp_source_name_32 == NULL) );
                tmp_tuple_element_30 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_32 );
                if ( tmp_tuple_element_30 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_8 );

                    exception_lineno = 122;

                    goto try_except_handler_24;
                }
                PyTuple_SET_ITEM( tmp_right_name_8, 1, tmp_tuple_element_30 );
                tmp_raise_value_8 = BINARY_OPERATION_REMAINDER( tmp_left_name_8, tmp_right_name_8 );
                Py_DECREF( tmp_right_name_8 );
                if ( tmp_raise_value_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 122;

                    goto try_except_handler_24;
                }
                exception_type = tmp_raise_type_8;
                Py_INCREF( tmp_raise_type_8 );
                exception_value = tmp_raise_value_8;
                exception_lineno = 122;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_24;
            }
            branch_no_32:;
        }
        goto branch_end_31;
        branch_no_31:;
        {
            PyObject *tmp_assign_source_68;
            tmp_assign_source_68 = PyDict_New();
            assert( tmp_class_creation_8__prepared == NULL );
            tmp_class_creation_8__prepared = tmp_assign_source_68;
        }
        branch_end_31:;
    }
    {
        PyObject *tmp_assign_source_69;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT( tmp_class_creation_8__prepared );
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_PIL$ImageFilter_122 = tmp_set_locals_8;
            Py_INCREF( tmp_set_locals_8 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_26;
        }
        tmp_dictset_value = const_str_digest_69d247ce8026388825b3f6362c81b3a0;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_26;
        }
        tmp_dictset_value = const_str_plain_MaxFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;

            goto try_except_handler_26;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_1f4d731788d8c0a553ef69f2df319dab_7, codeobj_1f4d731788d8c0a553ef69f2df319dab, module_PIL$ImageFilter, sizeof(void *) );
        frame_1f4d731788d8c0a553ef69f2df319dab_7 = cache_frame_1f4d731788d8c0a553ef69f2df319dab_7;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_1f4d731788d8c0a553ef69f2df319dab_7 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_1f4d731788d8c0a553ef69f2df319dab_7 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Max;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 129;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = const_tuple_int_pos_3_tuple;
            Py_INCREF( tmp_defaults_4 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_7___init__( tmp_defaults_4 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 131;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_1f4d731788d8c0a553ef69f2df319dab_7 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_1f4d731788d8c0a553ef69f2df319dab_7 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_1f4d731788d8c0a553ef69f2df319dab_7, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_1f4d731788d8c0a553ef69f2df319dab_7->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_1f4d731788d8c0a553ef69f2df319dab_7, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_1f4d731788d8c0a553ef69f2df319dab_7,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame.
        if ( frame_1f4d731788d8c0a553ef69f2df319dab_7 == cache_frame_1f4d731788d8c0a553ef69f2df319dab_7 )
        {
            Py_DECREF( frame_1f4d731788d8c0a553ef69f2df319dab_7 );
        }
        cache_frame_1f4d731788d8c0a553ef69f2df319dab_7 = NULL;

        assertFrameObject( frame_1f4d731788d8c0a553ef69f2df319dab_7 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_26;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_49;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            CHECK_OBJECT( tmp_class_creation_8__bases );
            tmp_compexpr_left_9 = tmp_class_creation_8__bases;
            CHECK_OBJECT( tmp_class_creation_8__bases_orig );
            tmp_compexpr_right_9 = tmp_class_creation_8__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_26;
            }
            tmp_condition_result_49 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_49 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_33;
            }
            else
            {
                goto branch_no_33;
            }
            branch_yes_33:;
            CHECK_OBJECT( tmp_class_creation_8__bases_orig );
            tmp_dictset_value = tmp_class_creation_8__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_122, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_26;
            }
            branch_no_33:;
        }
        {
            PyObject *tmp_assign_source_70;
            PyObject *tmp_called_name_16;
            PyObject *tmp_args_name_16;
            PyObject *tmp_tuple_element_31;
            PyObject *tmp_kw_name_16;
            CHECK_OBJECT( tmp_class_creation_8__metaclass );
            tmp_called_name_16 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_31 = const_str_plain_MaxFilter;
            tmp_args_name_16 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_31 );
            PyTuple_SET_ITEM( tmp_args_name_16, 0, tmp_tuple_element_31 );
            CHECK_OBJECT( tmp_class_creation_8__bases );
            tmp_tuple_element_31 = tmp_class_creation_8__bases;
            Py_INCREF( tmp_tuple_element_31 );
            PyTuple_SET_ITEM( tmp_args_name_16, 1, tmp_tuple_element_31 );
            tmp_tuple_element_31 = locals_PIL$ImageFilter_122;
            Py_INCREF( tmp_tuple_element_31 );
            PyTuple_SET_ITEM( tmp_args_name_16, 2, tmp_tuple_element_31 );
            CHECK_OBJECT( tmp_class_creation_8__class_decl_dict );
            tmp_kw_name_16 = tmp_class_creation_8__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 122;
            tmp_assign_source_70 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_16, tmp_kw_name_16 );
            Py_DECREF( tmp_args_name_16 );
            if ( tmp_assign_source_70 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 122;

                goto try_except_handler_26;
            }
            assert( outline_7_var___class__ == NULL );
            outline_7_var___class__ = tmp_assign_source_70;
        }
        CHECK_OBJECT( outline_7_var___class__ );
        tmp_assign_source_69 = outline_7_var___class__;
        Py_INCREF( tmp_assign_source_69 );
        goto try_return_handler_26;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_26:;
        Py_DECREF( locals_PIL$ImageFilter_122 );
        locals_PIL$ImageFilter_122 = NULL;
        goto try_return_handler_25;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_122 );
        locals_PIL$ImageFilter_122 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto try_except_handler_25;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_25:;
        CHECK_OBJECT( (PyObject *)outline_7_var___class__ );
        Py_DECREF( outline_7_var___class__ );
        outline_7_var___class__ = NULL;

        goto outline_result_8;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto outline_exception_8;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_8:;
        exception_lineno = 122;
        goto try_except_handler_24;
        outline_result_8:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MaxFilter, tmp_assign_source_69 );
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_8__bases_orig );
    tmp_class_creation_8__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    Py_XDECREF( tmp_class_creation_8__class_decl_dict );
    tmp_class_creation_8__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_8__prepared );
    tmp_class_creation_8__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases_orig );
    Py_DECREF( tmp_class_creation_8__bases_orig );
    tmp_class_creation_8__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__bases );
    Py_DECREF( tmp_class_creation_8__bases );
    tmp_class_creation_8__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__class_decl_dict );
    Py_DECREF( tmp_class_creation_8__class_decl_dict );
    tmp_class_creation_8__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__metaclass );
    Py_DECREF( tmp_class_creation_8__metaclass );
    tmp_class_creation_8__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_8__prepared );
    Py_DECREF( tmp_class_creation_8__prepared );
    tmp_class_creation_8__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Filter );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Filter );
        }

        if ( tmp_mvar_value_10 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Filter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 136;

            goto try_except_handler_27;
        }

        tmp_tuple_element_32 = tmp_mvar_value_10;
        tmp_assign_source_71 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_32 );
        PyTuple_SET_ITEM( tmp_assign_source_71, 0, tmp_tuple_element_32 );
        assert( tmp_class_creation_9__bases_orig == NULL );
        tmp_class_creation_9__bases_orig = tmp_assign_source_71;
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT( tmp_class_creation_9__bases_orig );
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF( tmp_dircall_arg1_9 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_72 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_72 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        assert( tmp_class_creation_9__bases == NULL );
        tmp_class_creation_9__bases = tmp_assign_source_72;
    }
    {
        PyObject *tmp_assign_source_73;
        tmp_assign_source_73 = PyDict_New();
        assert( tmp_class_creation_9__class_decl_dict == NULL );
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_73;
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_metaclass_name_9;
        nuitka_bool tmp_condition_result_50;
        PyObject *tmp_key_name_25;
        PyObject *tmp_dict_name_25;
        PyObject *tmp_dict_name_26;
        PyObject *tmp_key_name_26;
        nuitka_bool tmp_condition_result_51;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_subscribed_name_9;
        PyObject *tmp_subscript_name_9;
        PyObject *tmp_bases_name_9;
        tmp_key_name_25 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
        tmp_dict_name_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_25, tmp_key_name_25 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        tmp_condition_result_50 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_50 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_17;
        }
        else
        {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
        tmp_dict_name_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_name_26 = const_str_plain_metaclass;
        tmp_metaclass_name_9 = DICT_GET_ITEM( tmp_dict_name_26, tmp_key_name_26 );
        if ( tmp_metaclass_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT( tmp_class_creation_9__bases );
        tmp_truth_name_9 = CHECK_IF_TRUE( tmp_class_creation_9__bases );
        if ( tmp_truth_name_9 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        tmp_condition_result_51 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_51 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_18;
        }
        else
        {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT( tmp_class_creation_9__bases );
        tmp_subscribed_name_9 = tmp_class_creation_9__bases;
        tmp_subscript_name_9 = const_int_0;
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_9, tmp_subscript_name_9, 0 );
        if ( tmp_type_arg_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        tmp_metaclass_name_9 = BUILTIN_TYPE1( tmp_type_arg_17 );
        Py_DECREF( tmp_type_arg_17 );
        if ( tmp_metaclass_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_name_9 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_9 );
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT( tmp_class_creation_9__bases );
        tmp_bases_name_9 = tmp_class_creation_9__bases;
        tmp_assign_source_74 = SELECT_METACLASS( tmp_metaclass_name_9, tmp_bases_name_9 );
        Py_DECREF( tmp_metaclass_name_9 );
        if ( tmp_assign_source_74 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        assert( tmp_class_creation_9__metaclass == NULL );
        tmp_class_creation_9__metaclass = tmp_assign_source_74;
    }
    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_key_name_27;
        PyObject *tmp_dict_name_27;
        tmp_key_name_27 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
        tmp_dict_name_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_27, tmp_key_name_27 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        tmp_condition_result_52 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_52 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_34;
        }
        else
        {
            goto branch_no_34;
        }
        branch_yes_34:;
        CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_27;
        }
        branch_no_34:;
    }
    {
        nuitka_bool tmp_condition_result_53;
        PyObject *tmp_source_name_33;
        CHECK_OBJECT( tmp_class_creation_9__metaclass );
        tmp_source_name_33 = tmp_class_creation_9__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_33, const_str_plain___prepare__ );
        tmp_condition_result_53 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_53 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_35;
        }
        else
        {
            goto branch_no_35;
        }
        branch_yes_35:;
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_called_name_17;
            PyObject *tmp_source_name_34;
            PyObject *tmp_args_name_17;
            PyObject *tmp_tuple_element_33;
            PyObject *tmp_kw_name_17;
            CHECK_OBJECT( tmp_class_creation_9__metaclass );
            tmp_source_name_34 = tmp_class_creation_9__metaclass;
            tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain___prepare__ );
            if ( tmp_called_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_27;
            }
            tmp_tuple_element_33 = const_str_plain_ModeFilter;
            tmp_args_name_17 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_33 );
            PyTuple_SET_ITEM( tmp_args_name_17, 0, tmp_tuple_element_33 );
            CHECK_OBJECT( tmp_class_creation_9__bases );
            tmp_tuple_element_33 = tmp_class_creation_9__bases;
            Py_INCREF( tmp_tuple_element_33 );
            PyTuple_SET_ITEM( tmp_args_name_17, 1, tmp_tuple_element_33 );
            CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
            tmp_kw_name_17 = tmp_class_creation_9__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 136;
            tmp_assign_source_75 = CALL_FUNCTION( tmp_called_name_17, tmp_args_name_17, tmp_kw_name_17 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_name_17 );
            if ( tmp_assign_source_75 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_27;
            }
            assert( tmp_class_creation_9__prepared == NULL );
            tmp_class_creation_9__prepared = tmp_assign_source_75;
        }
        {
            nuitka_bool tmp_condition_result_54;
            PyObject *tmp_operand_name_9;
            PyObject *tmp_source_name_35;
            CHECK_OBJECT( tmp_class_creation_9__prepared );
            tmp_source_name_35 = tmp_class_creation_9__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_35, const_str_plain___getitem__ );
            tmp_operand_name_9 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_27;
            }
            tmp_condition_result_54 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_54 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_36;
            }
            else
            {
                goto branch_no_36;
            }
            branch_yes_36:;
            {
                PyObject *tmp_raise_type_9;
                PyObject *tmp_raise_value_9;
                PyObject *tmp_left_name_9;
                PyObject *tmp_right_name_9;
                PyObject *tmp_tuple_element_34;
                PyObject *tmp_getattr_target_9;
                PyObject *tmp_getattr_attr_9;
                PyObject *tmp_getattr_default_9;
                PyObject *tmp_source_name_36;
                PyObject *tmp_type_arg_18;
                tmp_raise_type_9 = PyExc_TypeError;
                tmp_left_name_9 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_9__metaclass );
                tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
                tmp_getattr_attr_9 = const_str_plain___name__;
                tmp_getattr_default_9 = const_str_angle_metaclass;
                tmp_tuple_element_34 = BUILTIN_GETATTR( tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9 );
                if ( tmp_tuple_element_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 136;

                    goto try_except_handler_27;
                }
                tmp_right_name_9 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_9, 0, tmp_tuple_element_34 );
                CHECK_OBJECT( tmp_class_creation_9__prepared );
                tmp_type_arg_18 = tmp_class_creation_9__prepared;
                tmp_source_name_36 = BUILTIN_TYPE1( tmp_type_arg_18 );
                assert( !(tmp_source_name_36 == NULL) );
                tmp_tuple_element_34 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_36 );
                if ( tmp_tuple_element_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_9 );

                    exception_lineno = 136;

                    goto try_except_handler_27;
                }
                PyTuple_SET_ITEM( tmp_right_name_9, 1, tmp_tuple_element_34 );
                tmp_raise_value_9 = BINARY_OPERATION_REMAINDER( tmp_left_name_9, tmp_right_name_9 );
                Py_DECREF( tmp_right_name_9 );
                if ( tmp_raise_value_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 136;

                    goto try_except_handler_27;
                }
                exception_type = tmp_raise_type_9;
                Py_INCREF( tmp_raise_type_9 );
                exception_value = tmp_raise_value_9;
                exception_lineno = 136;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_27;
            }
            branch_no_36:;
        }
        goto branch_end_35;
        branch_no_35:;
        {
            PyObject *tmp_assign_source_76;
            tmp_assign_source_76 = PyDict_New();
            assert( tmp_class_creation_9__prepared == NULL );
            tmp_class_creation_9__prepared = tmp_assign_source_76;
        }
        branch_end_35:;
    }
    {
        PyObject *tmp_assign_source_77;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT( tmp_class_creation_9__prepared );
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_PIL$ImageFilter_136 = tmp_set_locals_9;
            Py_INCREF( tmp_set_locals_9 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_29;
        }
        tmp_dictset_value = const_str_digest_7a9dee042dbeb8884044a9ee773ea0dc;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_29;
        }
        tmp_dictset_value = const_str_plain_ModeFilter;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;

            goto try_except_handler_29;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_66c5e2de7b3952341f8021f4bcf4172b_8, codeobj_66c5e2de7b3952341f8021f4bcf4172b, module_PIL$ImageFilter, sizeof(void *) );
        frame_66c5e2de7b3952341f8021f4bcf4172b_8 = cache_frame_66c5e2de7b3952341f8021f4bcf4172b_8;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_66c5e2de7b3952341f8021f4bcf4172b_8 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_66c5e2de7b3952341f8021f4bcf4172b_8 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Mode;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = const_tuple_int_pos_3_tuple;
            Py_INCREF( tmp_defaults_5 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_8___init__( tmp_defaults_5 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 146;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_9_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 149;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_66c5e2de7b3952341f8021f4bcf4172b_8 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_66c5e2de7b3952341f8021f4bcf4172b_8 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_66c5e2de7b3952341f8021f4bcf4172b_8, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_66c5e2de7b3952341f8021f4bcf4172b_8->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_66c5e2de7b3952341f8021f4bcf4172b_8, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_66c5e2de7b3952341f8021f4bcf4172b_8,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame.
        if ( frame_66c5e2de7b3952341f8021f4bcf4172b_8 == cache_frame_66c5e2de7b3952341f8021f4bcf4172b_8 )
        {
            Py_DECREF( frame_66c5e2de7b3952341f8021f4bcf4172b_8 );
        }
        cache_frame_66c5e2de7b3952341f8021f4bcf4172b_8 = NULL;

        assertFrameObject( frame_66c5e2de7b3952341f8021f4bcf4172b_8 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_29;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_55;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            CHECK_OBJECT( tmp_class_creation_9__bases );
            tmp_compexpr_left_10 = tmp_class_creation_9__bases;
            CHECK_OBJECT( tmp_class_creation_9__bases_orig );
            tmp_compexpr_right_10 = tmp_class_creation_9__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_29;
            }
            tmp_condition_result_55 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_55 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_37;
            }
            else
            {
                goto branch_no_37;
            }
            branch_yes_37:;
            CHECK_OBJECT( tmp_class_creation_9__bases_orig );
            tmp_dictset_value = tmp_class_creation_9__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_136, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_29;
            }
            branch_no_37:;
        }
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_called_name_18;
            PyObject *tmp_args_name_18;
            PyObject *tmp_tuple_element_35;
            PyObject *tmp_kw_name_18;
            CHECK_OBJECT( tmp_class_creation_9__metaclass );
            tmp_called_name_18 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_35 = const_str_plain_ModeFilter;
            tmp_args_name_18 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_35 );
            PyTuple_SET_ITEM( tmp_args_name_18, 0, tmp_tuple_element_35 );
            CHECK_OBJECT( tmp_class_creation_9__bases );
            tmp_tuple_element_35 = tmp_class_creation_9__bases;
            Py_INCREF( tmp_tuple_element_35 );
            PyTuple_SET_ITEM( tmp_args_name_18, 1, tmp_tuple_element_35 );
            tmp_tuple_element_35 = locals_PIL$ImageFilter_136;
            Py_INCREF( tmp_tuple_element_35 );
            PyTuple_SET_ITEM( tmp_args_name_18, 2, tmp_tuple_element_35 );
            CHECK_OBJECT( tmp_class_creation_9__class_decl_dict );
            tmp_kw_name_18 = tmp_class_creation_9__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 136;
            tmp_assign_source_78 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_18, tmp_kw_name_18 );
            Py_DECREF( tmp_args_name_18 );
            if ( tmp_assign_source_78 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 136;

                goto try_except_handler_29;
            }
            assert( outline_8_var___class__ == NULL );
            outline_8_var___class__ = tmp_assign_source_78;
        }
        CHECK_OBJECT( outline_8_var___class__ );
        tmp_assign_source_77 = outline_8_var___class__;
        Py_INCREF( tmp_assign_source_77 );
        goto try_return_handler_29;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_29:;
        Py_DECREF( locals_PIL$ImageFilter_136 );
        locals_PIL$ImageFilter_136 = NULL;
        goto try_return_handler_28;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_136 );
        locals_PIL$ImageFilter_136 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto try_except_handler_28;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_28:;
        CHECK_OBJECT( (PyObject *)outline_8_var___class__ );
        Py_DECREF( outline_8_var___class__ );
        outline_8_var___class__ = NULL;

        goto outline_result_9;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto outline_exception_9;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_9:;
        exception_lineno = 136;
        goto try_except_handler_27;
        outline_result_9:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_ModeFilter, tmp_assign_source_77 );
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_9__bases_orig );
    tmp_class_creation_9__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    Py_XDECREF( tmp_class_creation_9__class_decl_dict );
    tmp_class_creation_9__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_9__prepared );
    tmp_class_creation_9__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases_orig );
    Py_DECREF( tmp_class_creation_9__bases_orig );
    tmp_class_creation_9__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__bases );
    Py_DECREF( tmp_class_creation_9__bases );
    tmp_class_creation_9__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__class_decl_dict );
    Py_DECREF( tmp_class_creation_9__class_decl_dict );
    tmp_class_creation_9__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__metaclass );
    Py_DECREF( tmp_class_creation_9__metaclass );
    tmp_class_creation_9__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_9__prepared );
    Py_DECREF( tmp_class_creation_9__prepared );
    tmp_class_creation_9__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_mvar_value_11;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MultibandFilter );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MultibandFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 153;

            goto try_except_handler_30;
        }

        tmp_tuple_element_36 = tmp_mvar_value_11;
        tmp_assign_source_79 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_36 );
        PyTuple_SET_ITEM( tmp_assign_source_79, 0, tmp_tuple_element_36 );
        assert( tmp_class_creation_10__bases_orig == NULL );
        tmp_class_creation_10__bases_orig = tmp_assign_source_79;
    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT( tmp_class_creation_10__bases_orig );
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF( tmp_dircall_arg1_10 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_80 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_80 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        assert( tmp_class_creation_10__bases == NULL );
        tmp_class_creation_10__bases = tmp_assign_source_80;
    }
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = PyDict_New();
        assert( tmp_class_creation_10__class_decl_dict == NULL );
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_81;
    }
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_metaclass_name_10;
        nuitka_bool tmp_condition_result_56;
        PyObject *tmp_key_name_28;
        PyObject *tmp_dict_name_28;
        PyObject *tmp_dict_name_29;
        PyObject *tmp_key_name_29;
        nuitka_bool tmp_condition_result_57;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_subscribed_name_10;
        PyObject *tmp_subscript_name_10;
        PyObject *tmp_bases_name_10;
        tmp_key_name_28 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
        tmp_dict_name_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_28, tmp_key_name_28 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        tmp_condition_result_56 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_56 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_19;
        }
        else
        {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
        tmp_dict_name_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_name_29 = const_str_plain_metaclass;
        tmp_metaclass_name_10 = DICT_GET_ITEM( tmp_dict_name_29, tmp_key_name_29 );
        if ( tmp_metaclass_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        goto condexpr_end_19;
        condexpr_false_19:;
        CHECK_OBJECT( tmp_class_creation_10__bases );
        tmp_truth_name_10 = CHECK_IF_TRUE( tmp_class_creation_10__bases );
        if ( tmp_truth_name_10 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        tmp_condition_result_57 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_57 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_20;
        }
        else
        {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT( tmp_class_creation_10__bases );
        tmp_subscribed_name_10 = tmp_class_creation_10__bases;
        tmp_subscript_name_10 = const_int_0;
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_10, tmp_subscript_name_10, 0 );
        if ( tmp_type_arg_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        tmp_metaclass_name_10 = BUILTIN_TYPE1( tmp_type_arg_19 );
        Py_DECREF( tmp_type_arg_19 );
        if ( tmp_metaclass_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_name_10 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_10 );
        condexpr_end_20:;
        condexpr_end_19:;
        CHECK_OBJECT( tmp_class_creation_10__bases );
        tmp_bases_name_10 = tmp_class_creation_10__bases;
        tmp_assign_source_82 = SELECT_METACLASS( tmp_metaclass_name_10, tmp_bases_name_10 );
        Py_DECREF( tmp_metaclass_name_10 );
        if ( tmp_assign_source_82 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        assert( tmp_class_creation_10__metaclass == NULL );
        tmp_class_creation_10__metaclass = tmp_assign_source_82;
    }
    {
        nuitka_bool tmp_condition_result_58;
        PyObject *tmp_key_name_30;
        PyObject *tmp_dict_name_30;
        tmp_key_name_30 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
        tmp_dict_name_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_30, tmp_key_name_30 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        tmp_condition_result_58 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_58 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_38;
        }
        else
        {
            goto branch_no_38;
        }
        branch_yes_38:;
        CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_30;
        }
        branch_no_38:;
    }
    {
        nuitka_bool tmp_condition_result_59;
        PyObject *tmp_source_name_37;
        CHECK_OBJECT( tmp_class_creation_10__metaclass );
        tmp_source_name_37 = tmp_class_creation_10__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_37, const_str_plain___prepare__ );
        tmp_condition_result_59 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_59 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_39;
        }
        else
        {
            goto branch_no_39;
        }
        branch_yes_39:;
        {
            PyObject *tmp_assign_source_83;
            PyObject *tmp_called_name_19;
            PyObject *tmp_source_name_38;
            PyObject *tmp_args_name_19;
            PyObject *tmp_tuple_element_37;
            PyObject *tmp_kw_name_19;
            CHECK_OBJECT( tmp_class_creation_10__metaclass );
            tmp_source_name_38 = tmp_class_creation_10__metaclass;
            tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain___prepare__ );
            if ( tmp_called_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_30;
            }
            tmp_tuple_element_37 = const_str_plain_GaussianBlur;
            tmp_args_name_19 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_37 );
            PyTuple_SET_ITEM( tmp_args_name_19, 0, tmp_tuple_element_37 );
            CHECK_OBJECT( tmp_class_creation_10__bases );
            tmp_tuple_element_37 = tmp_class_creation_10__bases;
            Py_INCREF( tmp_tuple_element_37 );
            PyTuple_SET_ITEM( tmp_args_name_19, 1, tmp_tuple_element_37 );
            CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
            tmp_kw_name_19 = tmp_class_creation_10__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 153;
            tmp_assign_source_83 = CALL_FUNCTION( tmp_called_name_19, tmp_args_name_19, tmp_kw_name_19 );
            Py_DECREF( tmp_called_name_19 );
            Py_DECREF( tmp_args_name_19 );
            if ( tmp_assign_source_83 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_30;
            }
            assert( tmp_class_creation_10__prepared == NULL );
            tmp_class_creation_10__prepared = tmp_assign_source_83;
        }
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_operand_name_10;
            PyObject *tmp_source_name_39;
            CHECK_OBJECT( tmp_class_creation_10__prepared );
            tmp_source_name_39 = tmp_class_creation_10__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_39, const_str_plain___getitem__ );
            tmp_operand_name_10 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_30;
            }
            tmp_condition_result_60 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_60 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_40;
            }
            else
            {
                goto branch_no_40;
            }
            branch_yes_40:;
            {
                PyObject *tmp_raise_type_10;
                PyObject *tmp_raise_value_10;
                PyObject *tmp_left_name_10;
                PyObject *tmp_right_name_10;
                PyObject *tmp_tuple_element_38;
                PyObject *tmp_getattr_target_10;
                PyObject *tmp_getattr_attr_10;
                PyObject *tmp_getattr_default_10;
                PyObject *tmp_source_name_40;
                PyObject *tmp_type_arg_20;
                tmp_raise_type_10 = PyExc_TypeError;
                tmp_left_name_10 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_10__metaclass );
                tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
                tmp_getattr_attr_10 = const_str_plain___name__;
                tmp_getattr_default_10 = const_str_angle_metaclass;
                tmp_tuple_element_38 = BUILTIN_GETATTR( tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10 );
                if ( tmp_tuple_element_38 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 153;

                    goto try_except_handler_30;
                }
                tmp_right_name_10 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_10, 0, tmp_tuple_element_38 );
                CHECK_OBJECT( tmp_class_creation_10__prepared );
                tmp_type_arg_20 = tmp_class_creation_10__prepared;
                tmp_source_name_40 = BUILTIN_TYPE1( tmp_type_arg_20 );
                assert( !(tmp_source_name_40 == NULL) );
                tmp_tuple_element_38 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_40 );
                if ( tmp_tuple_element_38 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_10 );

                    exception_lineno = 153;

                    goto try_except_handler_30;
                }
                PyTuple_SET_ITEM( tmp_right_name_10, 1, tmp_tuple_element_38 );
                tmp_raise_value_10 = BINARY_OPERATION_REMAINDER( tmp_left_name_10, tmp_right_name_10 );
                Py_DECREF( tmp_right_name_10 );
                if ( tmp_raise_value_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 153;

                    goto try_except_handler_30;
                }
                exception_type = tmp_raise_type_10;
                Py_INCREF( tmp_raise_type_10 );
                exception_value = tmp_raise_value_10;
                exception_lineno = 153;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_30;
            }
            branch_no_40:;
        }
        goto branch_end_39;
        branch_no_39:;
        {
            PyObject *tmp_assign_source_84;
            tmp_assign_source_84 = PyDict_New();
            assert( tmp_class_creation_10__prepared == NULL );
            tmp_class_creation_10__prepared = tmp_assign_source_84;
        }
        branch_end_39:;
    }
    {
        PyObject *tmp_assign_source_85;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT( tmp_class_creation_10__prepared );
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_PIL$ImageFilter_153 = tmp_set_locals_10;
            Py_INCREF( tmp_set_locals_10 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_32;
        }
        tmp_dictset_value = const_str_digest_dbc0b3880c1030e6241640916a2febe4;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_32;
        }
        tmp_dictset_value = const_str_plain_GaussianBlur;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 153;

            goto try_except_handler_32;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_39503a432953dc1b0c966d2335b028bb_9, codeobj_39503a432953dc1b0c966d2335b028bb, module_PIL$ImageFilter, sizeof(void *) );
        frame_39503a432953dc1b0c966d2335b028bb_9 = cache_frame_39503a432953dc1b0c966d2335b028bb_9;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_39503a432953dc1b0c966d2335b028bb_9 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_39503a432953dc1b0c966d2335b028bb_9 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_GaussianBlur;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = const_tuple_int_pos_2_tuple;
            Py_INCREF( tmp_defaults_6 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_10___init__( tmp_defaults_6 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 160;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_11_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 163;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_39503a432953dc1b0c966d2335b028bb_9 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_39503a432953dc1b0c966d2335b028bb_9 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_39503a432953dc1b0c966d2335b028bb_9, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_39503a432953dc1b0c966d2335b028bb_9->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_39503a432953dc1b0c966d2335b028bb_9, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_39503a432953dc1b0c966d2335b028bb_9,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame.
        if ( frame_39503a432953dc1b0c966d2335b028bb_9 == cache_frame_39503a432953dc1b0c966d2335b028bb_9 )
        {
            Py_DECREF( frame_39503a432953dc1b0c966d2335b028bb_9 );
        }
        cache_frame_39503a432953dc1b0c966d2335b028bb_9 = NULL;

        assertFrameObject( frame_39503a432953dc1b0c966d2335b028bb_9 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_32;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_61;
            PyObject *tmp_compexpr_left_11;
            PyObject *tmp_compexpr_right_11;
            CHECK_OBJECT( tmp_class_creation_10__bases );
            tmp_compexpr_left_11 = tmp_class_creation_10__bases;
            CHECK_OBJECT( tmp_class_creation_10__bases_orig );
            tmp_compexpr_right_11 = tmp_class_creation_10__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_32;
            }
            tmp_condition_result_61 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_61 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_41;
            }
            else
            {
                goto branch_no_41;
            }
            branch_yes_41:;
            CHECK_OBJECT( tmp_class_creation_10__bases_orig );
            tmp_dictset_value = tmp_class_creation_10__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_153, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_32;
            }
            branch_no_41:;
        }
        {
            PyObject *tmp_assign_source_86;
            PyObject *tmp_called_name_20;
            PyObject *tmp_args_name_20;
            PyObject *tmp_tuple_element_39;
            PyObject *tmp_kw_name_20;
            CHECK_OBJECT( tmp_class_creation_10__metaclass );
            tmp_called_name_20 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_39 = const_str_plain_GaussianBlur;
            tmp_args_name_20 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_39 );
            PyTuple_SET_ITEM( tmp_args_name_20, 0, tmp_tuple_element_39 );
            CHECK_OBJECT( tmp_class_creation_10__bases );
            tmp_tuple_element_39 = tmp_class_creation_10__bases;
            Py_INCREF( tmp_tuple_element_39 );
            PyTuple_SET_ITEM( tmp_args_name_20, 1, tmp_tuple_element_39 );
            tmp_tuple_element_39 = locals_PIL$ImageFilter_153;
            Py_INCREF( tmp_tuple_element_39 );
            PyTuple_SET_ITEM( tmp_args_name_20, 2, tmp_tuple_element_39 );
            CHECK_OBJECT( tmp_class_creation_10__class_decl_dict );
            tmp_kw_name_20 = tmp_class_creation_10__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 153;
            tmp_assign_source_86 = CALL_FUNCTION( tmp_called_name_20, tmp_args_name_20, tmp_kw_name_20 );
            Py_DECREF( tmp_args_name_20 );
            if ( tmp_assign_source_86 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto try_except_handler_32;
            }
            assert( outline_9_var___class__ == NULL );
            outline_9_var___class__ = tmp_assign_source_86;
        }
        CHECK_OBJECT( outline_9_var___class__ );
        tmp_assign_source_85 = outline_9_var___class__;
        Py_INCREF( tmp_assign_source_85 );
        goto try_return_handler_32;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_32:;
        Py_DECREF( locals_PIL$ImageFilter_153 );
        locals_PIL$ImageFilter_153 = NULL;
        goto try_return_handler_31;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_30 = exception_type;
        exception_keeper_value_30 = exception_value;
        exception_keeper_tb_30 = exception_tb;
        exception_keeper_lineno_30 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_153 );
        locals_PIL$ImageFilter_153 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;
        exception_lineno = exception_keeper_lineno_30;

        goto try_except_handler_31;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_31:;
        CHECK_OBJECT( (PyObject *)outline_9_var___class__ );
        Py_DECREF( outline_9_var___class__ );
        outline_9_var___class__ = NULL;

        goto outline_result_10;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto outline_exception_10;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_10:;
        exception_lineno = 153;
        goto try_except_handler_30;
        outline_result_10:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_GaussianBlur, tmp_assign_source_85 );
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_10__bases_orig );
    tmp_class_creation_10__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    Py_XDECREF( tmp_class_creation_10__class_decl_dict );
    tmp_class_creation_10__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_10__prepared );
    tmp_class_creation_10__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases_orig );
    Py_DECREF( tmp_class_creation_10__bases_orig );
    tmp_class_creation_10__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__bases );
    Py_DECREF( tmp_class_creation_10__bases );
    tmp_class_creation_10__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__class_decl_dict );
    Py_DECREF( tmp_class_creation_10__class_decl_dict );
    tmp_class_creation_10__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__metaclass );
    Py_DECREF( tmp_class_creation_10__metaclass );
    tmp_class_creation_10__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_10__prepared );
    Py_DECREF( tmp_class_creation_10__prepared );
    tmp_class_creation_10__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_mvar_value_12;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MultibandFilter );
        }

        if ( tmp_mvar_value_12 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MultibandFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 167;

            goto try_except_handler_33;
        }

        tmp_tuple_element_40 = tmp_mvar_value_12;
        tmp_assign_source_87 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_40 );
        PyTuple_SET_ITEM( tmp_assign_source_87, 0, tmp_tuple_element_40 );
        assert( tmp_class_creation_11__bases_orig == NULL );
        tmp_class_creation_11__bases_orig = tmp_assign_source_87;
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT( tmp_class_creation_11__bases_orig );
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF( tmp_dircall_arg1_11 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_88 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_88 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        assert( tmp_class_creation_11__bases == NULL );
        tmp_class_creation_11__bases = tmp_assign_source_88;
    }
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = PyDict_New();
        assert( tmp_class_creation_11__class_decl_dict == NULL );
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_89;
    }
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_metaclass_name_11;
        nuitka_bool tmp_condition_result_62;
        PyObject *tmp_key_name_31;
        PyObject *tmp_dict_name_31;
        PyObject *tmp_dict_name_32;
        PyObject *tmp_key_name_32;
        nuitka_bool tmp_condition_result_63;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_subscribed_name_11;
        PyObject *tmp_subscript_name_11;
        PyObject *tmp_bases_name_11;
        tmp_key_name_31 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
        tmp_dict_name_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_31, tmp_key_name_31 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        tmp_condition_result_62 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_62 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_21;
        }
        else
        {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
        tmp_dict_name_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_name_32 = const_str_plain_metaclass;
        tmp_metaclass_name_11 = DICT_GET_ITEM( tmp_dict_name_32, tmp_key_name_32 );
        if ( tmp_metaclass_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        goto condexpr_end_21;
        condexpr_false_21:;
        CHECK_OBJECT( tmp_class_creation_11__bases );
        tmp_truth_name_11 = CHECK_IF_TRUE( tmp_class_creation_11__bases );
        if ( tmp_truth_name_11 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        tmp_condition_result_63 = tmp_truth_name_11 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_63 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_22;
        }
        else
        {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT( tmp_class_creation_11__bases );
        tmp_subscribed_name_11 = tmp_class_creation_11__bases;
        tmp_subscript_name_11 = const_int_0;
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_11, tmp_subscript_name_11, 0 );
        if ( tmp_type_arg_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        tmp_metaclass_name_11 = BUILTIN_TYPE1( tmp_type_arg_21 );
        Py_DECREF( tmp_type_arg_21 );
        if ( tmp_metaclass_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_name_11 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_11 );
        condexpr_end_22:;
        condexpr_end_21:;
        CHECK_OBJECT( tmp_class_creation_11__bases );
        tmp_bases_name_11 = tmp_class_creation_11__bases;
        tmp_assign_source_90 = SELECT_METACLASS( tmp_metaclass_name_11, tmp_bases_name_11 );
        Py_DECREF( tmp_metaclass_name_11 );
        if ( tmp_assign_source_90 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        assert( tmp_class_creation_11__metaclass == NULL );
        tmp_class_creation_11__metaclass = tmp_assign_source_90;
    }
    {
        nuitka_bool tmp_condition_result_64;
        PyObject *tmp_key_name_33;
        PyObject *tmp_dict_name_33;
        tmp_key_name_33 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
        tmp_dict_name_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_33, tmp_key_name_33 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        tmp_condition_result_64 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_64 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_42;
        }
        else
        {
            goto branch_no_42;
        }
        branch_yes_42:;
        CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_33;
        }
        branch_no_42:;
    }
    {
        nuitka_bool tmp_condition_result_65;
        PyObject *tmp_source_name_41;
        CHECK_OBJECT( tmp_class_creation_11__metaclass );
        tmp_source_name_41 = tmp_class_creation_11__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_41, const_str_plain___prepare__ );
        tmp_condition_result_65 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_65 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_43;
        }
        else
        {
            goto branch_no_43;
        }
        branch_yes_43:;
        {
            PyObject *tmp_assign_source_91;
            PyObject *tmp_called_name_21;
            PyObject *tmp_source_name_42;
            PyObject *tmp_args_name_21;
            PyObject *tmp_tuple_element_41;
            PyObject *tmp_kw_name_21;
            CHECK_OBJECT( tmp_class_creation_11__metaclass );
            tmp_source_name_42 = tmp_class_creation_11__metaclass;
            tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain___prepare__ );
            if ( tmp_called_name_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_33;
            }
            tmp_tuple_element_41 = const_str_plain_BoxBlur;
            tmp_args_name_21 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_41 );
            PyTuple_SET_ITEM( tmp_args_name_21, 0, tmp_tuple_element_41 );
            CHECK_OBJECT( tmp_class_creation_11__bases );
            tmp_tuple_element_41 = tmp_class_creation_11__bases;
            Py_INCREF( tmp_tuple_element_41 );
            PyTuple_SET_ITEM( tmp_args_name_21, 1, tmp_tuple_element_41 );
            CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
            tmp_kw_name_21 = tmp_class_creation_11__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 167;
            tmp_assign_source_91 = CALL_FUNCTION( tmp_called_name_21, tmp_args_name_21, tmp_kw_name_21 );
            Py_DECREF( tmp_called_name_21 );
            Py_DECREF( tmp_args_name_21 );
            if ( tmp_assign_source_91 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_33;
            }
            assert( tmp_class_creation_11__prepared == NULL );
            tmp_class_creation_11__prepared = tmp_assign_source_91;
        }
        {
            nuitka_bool tmp_condition_result_66;
            PyObject *tmp_operand_name_11;
            PyObject *tmp_source_name_43;
            CHECK_OBJECT( tmp_class_creation_11__prepared );
            tmp_source_name_43 = tmp_class_creation_11__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_43, const_str_plain___getitem__ );
            tmp_operand_name_11 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_11 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_33;
            }
            tmp_condition_result_66 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_66 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_44;
            }
            else
            {
                goto branch_no_44;
            }
            branch_yes_44:;
            {
                PyObject *tmp_raise_type_11;
                PyObject *tmp_raise_value_11;
                PyObject *tmp_left_name_11;
                PyObject *tmp_right_name_11;
                PyObject *tmp_tuple_element_42;
                PyObject *tmp_getattr_target_11;
                PyObject *tmp_getattr_attr_11;
                PyObject *tmp_getattr_default_11;
                PyObject *tmp_source_name_44;
                PyObject *tmp_type_arg_22;
                tmp_raise_type_11 = PyExc_TypeError;
                tmp_left_name_11 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_11__metaclass );
                tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
                tmp_getattr_attr_11 = const_str_plain___name__;
                tmp_getattr_default_11 = const_str_angle_metaclass;
                tmp_tuple_element_42 = BUILTIN_GETATTR( tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11 );
                if ( tmp_tuple_element_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 167;

                    goto try_except_handler_33;
                }
                tmp_right_name_11 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_11, 0, tmp_tuple_element_42 );
                CHECK_OBJECT( tmp_class_creation_11__prepared );
                tmp_type_arg_22 = tmp_class_creation_11__prepared;
                tmp_source_name_44 = BUILTIN_TYPE1( tmp_type_arg_22 );
                assert( !(tmp_source_name_44 == NULL) );
                tmp_tuple_element_42 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_44 );
                if ( tmp_tuple_element_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_11 );

                    exception_lineno = 167;

                    goto try_except_handler_33;
                }
                PyTuple_SET_ITEM( tmp_right_name_11, 1, tmp_tuple_element_42 );
                tmp_raise_value_11 = BINARY_OPERATION_REMAINDER( tmp_left_name_11, tmp_right_name_11 );
                Py_DECREF( tmp_right_name_11 );
                if ( tmp_raise_value_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 167;

                    goto try_except_handler_33;
                }
                exception_type = tmp_raise_type_11;
                Py_INCREF( tmp_raise_type_11 );
                exception_value = tmp_raise_value_11;
                exception_lineno = 167;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_33;
            }
            branch_no_44:;
        }
        goto branch_end_43;
        branch_no_43:;
        {
            PyObject *tmp_assign_source_92;
            tmp_assign_source_92 = PyDict_New();
            assert( tmp_class_creation_11__prepared == NULL );
            tmp_class_creation_11__prepared = tmp_assign_source_92;
        }
        branch_end_43:;
    }
    {
        PyObject *tmp_assign_source_93;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT( tmp_class_creation_11__prepared );
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_PIL$ImageFilter_167 = tmp_set_locals_11;
            Py_INCREF( tmp_set_locals_11 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_35;
        }
        tmp_dictset_value = const_str_digest_39604897ad47a5d142592f9ba992edf0;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_35;
        }
        tmp_dictset_value = const_str_plain_BoxBlur;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;

            goto try_except_handler_35;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_5ee4d9cbea512a1e3741d9b50288fed5_10, codeobj_5ee4d9cbea512a1e3741d9b50288fed5, module_PIL$ImageFilter, sizeof(void *) );
        frame_5ee4d9cbea512a1e3741d9b50288fed5_10 = cache_frame_5ee4d9cbea512a1e3741d9b50288fed5_10;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_BoxBlur;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 178;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_12___init__(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 180;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_13_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 183;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_5ee4d9cbea512a1e3741d9b50288fed5_10, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_5ee4d9cbea512a1e3741d9b50288fed5_10->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_5ee4d9cbea512a1e3741d9b50288fed5_10, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_5ee4d9cbea512a1e3741d9b50288fed5_10,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame.
        if ( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 == cache_frame_5ee4d9cbea512a1e3741d9b50288fed5_10 )
        {
            Py_DECREF( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 );
        }
        cache_frame_5ee4d9cbea512a1e3741d9b50288fed5_10 = NULL;

        assertFrameObject( frame_5ee4d9cbea512a1e3741d9b50288fed5_10 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_35;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_67;
            PyObject *tmp_compexpr_left_12;
            PyObject *tmp_compexpr_right_12;
            CHECK_OBJECT( tmp_class_creation_11__bases );
            tmp_compexpr_left_12 = tmp_class_creation_11__bases;
            CHECK_OBJECT( tmp_class_creation_11__bases_orig );
            tmp_compexpr_right_12 = tmp_class_creation_11__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_35;
            }
            tmp_condition_result_67 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_67 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_45;
            }
            else
            {
                goto branch_no_45;
            }
            branch_yes_45:;
            CHECK_OBJECT( tmp_class_creation_11__bases_orig );
            tmp_dictset_value = tmp_class_creation_11__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_167, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_35;
            }
            branch_no_45:;
        }
        {
            PyObject *tmp_assign_source_94;
            PyObject *tmp_called_name_22;
            PyObject *tmp_args_name_22;
            PyObject *tmp_tuple_element_43;
            PyObject *tmp_kw_name_22;
            CHECK_OBJECT( tmp_class_creation_11__metaclass );
            tmp_called_name_22 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_43 = const_str_plain_BoxBlur;
            tmp_args_name_22 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_43 );
            PyTuple_SET_ITEM( tmp_args_name_22, 0, tmp_tuple_element_43 );
            CHECK_OBJECT( tmp_class_creation_11__bases );
            tmp_tuple_element_43 = tmp_class_creation_11__bases;
            Py_INCREF( tmp_tuple_element_43 );
            PyTuple_SET_ITEM( tmp_args_name_22, 1, tmp_tuple_element_43 );
            tmp_tuple_element_43 = locals_PIL$ImageFilter_167;
            Py_INCREF( tmp_tuple_element_43 );
            PyTuple_SET_ITEM( tmp_args_name_22, 2, tmp_tuple_element_43 );
            CHECK_OBJECT( tmp_class_creation_11__class_decl_dict );
            tmp_kw_name_22 = tmp_class_creation_11__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 167;
            tmp_assign_source_94 = CALL_FUNCTION( tmp_called_name_22, tmp_args_name_22, tmp_kw_name_22 );
            Py_DECREF( tmp_args_name_22 );
            if ( tmp_assign_source_94 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 167;

                goto try_except_handler_35;
            }
            assert( outline_10_var___class__ == NULL );
            outline_10_var___class__ = tmp_assign_source_94;
        }
        CHECK_OBJECT( outline_10_var___class__ );
        tmp_assign_source_93 = outline_10_var___class__;
        Py_INCREF( tmp_assign_source_93 );
        goto try_return_handler_35;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_35:;
        Py_DECREF( locals_PIL$ImageFilter_167 );
        locals_PIL$ImageFilter_167 = NULL;
        goto try_return_handler_34;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_167 );
        locals_PIL$ImageFilter_167 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto try_except_handler_34;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_34:;
        CHECK_OBJECT( (PyObject *)outline_10_var___class__ );
        Py_DECREF( outline_10_var___class__ );
        outline_10_var___class__ = NULL;

        goto outline_result_11;
        // Exception handler code:
        try_except_handler_34:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto outline_exception_11;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_11:;
        exception_lineno = 167;
        goto try_except_handler_33;
        outline_result_11:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BoxBlur, tmp_assign_source_93 );
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_11__bases_orig );
    tmp_class_creation_11__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    Py_XDECREF( tmp_class_creation_11__class_decl_dict );
    tmp_class_creation_11__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_11__prepared );
    tmp_class_creation_11__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases_orig );
    Py_DECREF( tmp_class_creation_11__bases_orig );
    tmp_class_creation_11__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__bases );
    Py_DECREF( tmp_class_creation_11__bases );
    tmp_class_creation_11__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__class_decl_dict );
    Py_DECREF( tmp_class_creation_11__class_decl_dict );
    tmp_class_creation_11__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__metaclass );
    Py_DECREF( tmp_class_creation_11__metaclass );
    tmp_class_creation_11__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_11__prepared );
    Py_DECREF( tmp_class_creation_11__prepared );
    tmp_class_creation_11__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_mvar_value_13;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MultibandFilter );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MultibandFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 187;

            goto try_except_handler_36;
        }

        tmp_tuple_element_44 = tmp_mvar_value_13;
        tmp_assign_source_95 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_44 );
        PyTuple_SET_ITEM( tmp_assign_source_95, 0, tmp_tuple_element_44 );
        assert( tmp_class_creation_12__bases_orig == NULL );
        tmp_class_creation_12__bases_orig = tmp_assign_source_95;
    }
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT( tmp_class_creation_12__bases_orig );
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF( tmp_dircall_arg1_12 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_96 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_96 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        assert( tmp_class_creation_12__bases == NULL );
        tmp_class_creation_12__bases = tmp_assign_source_96;
    }
    {
        PyObject *tmp_assign_source_97;
        tmp_assign_source_97 = PyDict_New();
        assert( tmp_class_creation_12__class_decl_dict == NULL );
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_97;
    }
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_metaclass_name_12;
        nuitka_bool tmp_condition_result_68;
        PyObject *tmp_key_name_34;
        PyObject *tmp_dict_name_34;
        PyObject *tmp_dict_name_35;
        PyObject *tmp_key_name_35;
        nuitka_bool tmp_condition_result_69;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_subscribed_name_12;
        PyObject *tmp_subscript_name_12;
        PyObject *tmp_bases_name_12;
        tmp_key_name_34 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
        tmp_dict_name_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_34, tmp_key_name_34 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        tmp_condition_result_68 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_68 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_23;
        }
        else
        {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
        tmp_dict_name_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_name_35 = const_str_plain_metaclass;
        tmp_metaclass_name_12 = DICT_GET_ITEM( tmp_dict_name_35, tmp_key_name_35 );
        if ( tmp_metaclass_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        goto condexpr_end_23;
        condexpr_false_23:;
        CHECK_OBJECT( tmp_class_creation_12__bases );
        tmp_truth_name_12 = CHECK_IF_TRUE( tmp_class_creation_12__bases );
        if ( tmp_truth_name_12 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        tmp_condition_result_69 = tmp_truth_name_12 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_69 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_24;
        }
        else
        {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT( tmp_class_creation_12__bases );
        tmp_subscribed_name_12 = tmp_class_creation_12__bases;
        tmp_subscript_name_12 = const_int_0;
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_12, tmp_subscript_name_12, 0 );
        if ( tmp_type_arg_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        tmp_metaclass_name_12 = BUILTIN_TYPE1( tmp_type_arg_23 );
        Py_DECREF( tmp_type_arg_23 );
        if ( tmp_metaclass_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_name_12 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_12 );
        condexpr_end_24:;
        condexpr_end_23:;
        CHECK_OBJECT( tmp_class_creation_12__bases );
        tmp_bases_name_12 = tmp_class_creation_12__bases;
        tmp_assign_source_98 = SELECT_METACLASS( tmp_metaclass_name_12, tmp_bases_name_12 );
        Py_DECREF( tmp_metaclass_name_12 );
        if ( tmp_assign_source_98 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        assert( tmp_class_creation_12__metaclass == NULL );
        tmp_class_creation_12__metaclass = tmp_assign_source_98;
    }
    {
        nuitka_bool tmp_condition_result_70;
        PyObject *tmp_key_name_36;
        PyObject *tmp_dict_name_36;
        tmp_key_name_36 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
        tmp_dict_name_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_36, tmp_key_name_36 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        tmp_condition_result_70 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_70 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_46;
        }
        else
        {
            goto branch_no_46;
        }
        branch_yes_46:;
        CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_36;
        }
        branch_no_46:;
    }
    {
        nuitka_bool tmp_condition_result_71;
        PyObject *tmp_source_name_45;
        CHECK_OBJECT( tmp_class_creation_12__metaclass );
        tmp_source_name_45 = tmp_class_creation_12__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_45, const_str_plain___prepare__ );
        tmp_condition_result_71 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_71 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_47;
        }
        else
        {
            goto branch_no_47;
        }
        branch_yes_47:;
        {
            PyObject *tmp_assign_source_99;
            PyObject *tmp_called_name_23;
            PyObject *tmp_source_name_46;
            PyObject *tmp_args_name_23;
            PyObject *tmp_tuple_element_45;
            PyObject *tmp_kw_name_23;
            CHECK_OBJECT( tmp_class_creation_12__metaclass );
            tmp_source_name_46 = tmp_class_creation_12__metaclass;
            tmp_called_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain___prepare__ );
            if ( tmp_called_name_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_36;
            }
            tmp_tuple_element_45 = const_str_plain_UnsharpMask;
            tmp_args_name_23 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_45 );
            PyTuple_SET_ITEM( tmp_args_name_23, 0, tmp_tuple_element_45 );
            CHECK_OBJECT( tmp_class_creation_12__bases );
            tmp_tuple_element_45 = tmp_class_creation_12__bases;
            Py_INCREF( tmp_tuple_element_45 );
            PyTuple_SET_ITEM( tmp_args_name_23, 1, tmp_tuple_element_45 );
            CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
            tmp_kw_name_23 = tmp_class_creation_12__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 187;
            tmp_assign_source_99 = CALL_FUNCTION( tmp_called_name_23, tmp_args_name_23, tmp_kw_name_23 );
            Py_DECREF( tmp_called_name_23 );
            Py_DECREF( tmp_args_name_23 );
            if ( tmp_assign_source_99 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_36;
            }
            assert( tmp_class_creation_12__prepared == NULL );
            tmp_class_creation_12__prepared = tmp_assign_source_99;
        }
        {
            nuitka_bool tmp_condition_result_72;
            PyObject *tmp_operand_name_12;
            PyObject *tmp_source_name_47;
            CHECK_OBJECT( tmp_class_creation_12__prepared );
            tmp_source_name_47 = tmp_class_creation_12__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_47, const_str_plain___getitem__ );
            tmp_operand_name_12 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_12 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_36;
            }
            tmp_condition_result_72 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_72 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_48;
            }
            else
            {
                goto branch_no_48;
            }
            branch_yes_48:;
            {
                PyObject *tmp_raise_type_12;
                PyObject *tmp_raise_value_12;
                PyObject *tmp_left_name_12;
                PyObject *tmp_right_name_12;
                PyObject *tmp_tuple_element_46;
                PyObject *tmp_getattr_target_12;
                PyObject *tmp_getattr_attr_12;
                PyObject *tmp_getattr_default_12;
                PyObject *tmp_source_name_48;
                PyObject *tmp_type_arg_24;
                tmp_raise_type_12 = PyExc_TypeError;
                tmp_left_name_12 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_12__metaclass );
                tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
                tmp_getattr_attr_12 = const_str_plain___name__;
                tmp_getattr_default_12 = const_str_angle_metaclass;
                tmp_tuple_element_46 = BUILTIN_GETATTR( tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12 );
                if ( tmp_tuple_element_46 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 187;

                    goto try_except_handler_36;
                }
                tmp_right_name_12 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_12, 0, tmp_tuple_element_46 );
                CHECK_OBJECT( tmp_class_creation_12__prepared );
                tmp_type_arg_24 = tmp_class_creation_12__prepared;
                tmp_source_name_48 = BUILTIN_TYPE1( tmp_type_arg_24 );
                assert( !(tmp_source_name_48 == NULL) );
                tmp_tuple_element_46 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_48 );
                if ( tmp_tuple_element_46 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_12 );

                    exception_lineno = 187;

                    goto try_except_handler_36;
                }
                PyTuple_SET_ITEM( tmp_right_name_12, 1, tmp_tuple_element_46 );
                tmp_raise_value_12 = BINARY_OPERATION_REMAINDER( tmp_left_name_12, tmp_right_name_12 );
                Py_DECREF( tmp_right_name_12 );
                if ( tmp_raise_value_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 187;

                    goto try_except_handler_36;
                }
                exception_type = tmp_raise_type_12;
                Py_INCREF( tmp_raise_type_12 );
                exception_value = tmp_raise_value_12;
                exception_lineno = 187;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_36;
            }
            branch_no_48:;
        }
        goto branch_end_47;
        branch_no_47:;
        {
            PyObject *tmp_assign_source_100;
            tmp_assign_source_100 = PyDict_New();
            assert( tmp_class_creation_12__prepared == NULL );
            tmp_class_creation_12__prepared = tmp_assign_source_100;
        }
        branch_end_47:;
    }
    {
        PyObject *tmp_assign_source_101;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT( tmp_class_creation_12__prepared );
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_PIL$ImageFilter_187 = tmp_set_locals_12;
            Py_INCREF( tmp_set_locals_12 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_38;
        }
        tmp_dictset_value = const_str_digest_6035838ccdcd1553ac2e986b944be7a7;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_38;
        }
        tmp_dictset_value = const_str_plain_UnsharpMask;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 187;

            goto try_except_handler_38;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_92d894154318163f6084b76676199287_11, codeobj_92d894154318163f6084b76676199287, module_PIL$ImageFilter, sizeof(void *) );
        frame_92d894154318163f6084b76676199287_11 = cache_frame_92d894154318163f6084b76676199287_11;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_92d894154318163f6084b76676199287_11 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_92d894154318163f6084b76676199287_11 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_UnsharpMask;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 201;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }
        {
            PyObject *tmp_defaults_7;
            tmp_defaults_7 = const_tuple_int_pos_2_int_pos_150_int_pos_3_tuple;
            Py_INCREF( tmp_defaults_7 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_14___init__( tmp_defaults_7 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 203;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_15_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_92d894154318163f6084b76676199287_11 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_92d894154318163f6084b76676199287_11 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_92d894154318163f6084b76676199287_11, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_92d894154318163f6084b76676199287_11->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_92d894154318163f6084b76676199287_11, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_92d894154318163f6084b76676199287_11,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame.
        if ( frame_92d894154318163f6084b76676199287_11 == cache_frame_92d894154318163f6084b76676199287_11 )
        {
            Py_DECREF( frame_92d894154318163f6084b76676199287_11 );
        }
        cache_frame_92d894154318163f6084b76676199287_11 = NULL;

        assertFrameObject( frame_92d894154318163f6084b76676199287_11 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_38;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_73;
            PyObject *tmp_compexpr_left_13;
            PyObject *tmp_compexpr_right_13;
            CHECK_OBJECT( tmp_class_creation_12__bases );
            tmp_compexpr_left_13 = tmp_class_creation_12__bases;
            CHECK_OBJECT( tmp_class_creation_12__bases_orig );
            tmp_compexpr_right_13 = tmp_class_creation_12__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_38;
            }
            tmp_condition_result_73 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_73 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_49;
            }
            else
            {
                goto branch_no_49;
            }
            branch_yes_49:;
            CHECK_OBJECT( tmp_class_creation_12__bases_orig );
            tmp_dictset_value = tmp_class_creation_12__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_187, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_38;
            }
            branch_no_49:;
        }
        {
            PyObject *tmp_assign_source_102;
            PyObject *tmp_called_name_24;
            PyObject *tmp_args_name_24;
            PyObject *tmp_tuple_element_47;
            PyObject *tmp_kw_name_24;
            CHECK_OBJECT( tmp_class_creation_12__metaclass );
            tmp_called_name_24 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_47 = const_str_plain_UnsharpMask;
            tmp_args_name_24 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_47 );
            PyTuple_SET_ITEM( tmp_args_name_24, 0, tmp_tuple_element_47 );
            CHECK_OBJECT( tmp_class_creation_12__bases );
            tmp_tuple_element_47 = tmp_class_creation_12__bases;
            Py_INCREF( tmp_tuple_element_47 );
            PyTuple_SET_ITEM( tmp_args_name_24, 1, tmp_tuple_element_47 );
            tmp_tuple_element_47 = locals_PIL$ImageFilter_187;
            Py_INCREF( tmp_tuple_element_47 );
            PyTuple_SET_ITEM( tmp_args_name_24, 2, tmp_tuple_element_47 );
            CHECK_OBJECT( tmp_class_creation_12__class_decl_dict );
            tmp_kw_name_24 = tmp_class_creation_12__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 187;
            tmp_assign_source_102 = CALL_FUNCTION( tmp_called_name_24, tmp_args_name_24, tmp_kw_name_24 );
            Py_DECREF( tmp_args_name_24 );
            if ( tmp_assign_source_102 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 187;

                goto try_except_handler_38;
            }
            assert( outline_11_var___class__ == NULL );
            outline_11_var___class__ = tmp_assign_source_102;
        }
        CHECK_OBJECT( outline_11_var___class__ );
        tmp_assign_source_101 = outline_11_var___class__;
        Py_INCREF( tmp_assign_source_101 );
        goto try_return_handler_38;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_38:;
        Py_DECREF( locals_PIL$ImageFilter_187 );
        locals_PIL$ImageFilter_187 = NULL;
        goto try_return_handler_37;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_187 );
        locals_PIL$ImageFilter_187 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto try_except_handler_37;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_37:;
        CHECK_OBJECT( (PyObject *)outline_11_var___class__ );
        Py_DECREF( outline_11_var___class__ );
        outline_11_var___class__ = NULL;

        goto outline_result_12;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto outline_exception_12;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_12:;
        exception_lineno = 187;
        goto try_except_handler_36;
        outline_result_12:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_UnsharpMask, tmp_assign_source_101 );
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_12__bases_orig );
    tmp_class_creation_12__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    Py_XDECREF( tmp_class_creation_12__class_decl_dict );
    tmp_class_creation_12__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_12__prepared );
    tmp_class_creation_12__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__bases_orig );
    Py_DECREF( tmp_class_creation_12__bases_orig );
    tmp_class_creation_12__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__bases );
    Py_DECREF( tmp_class_creation_12__bases );
    tmp_class_creation_12__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__class_decl_dict );
    Py_DECREF( tmp_class_creation_12__class_decl_dict );
    tmp_class_creation_12__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__metaclass );
    Py_DECREF( tmp_class_creation_12__metaclass );
    tmp_class_creation_12__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_12__prepared );
    Py_DECREF( tmp_class_creation_12__prepared );
    tmp_class_creation_12__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_mvar_value_14;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 212;

            goto try_except_handler_39;
        }

        tmp_tuple_element_48 = tmp_mvar_value_14;
        tmp_assign_source_103 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_48 );
        PyTuple_SET_ITEM( tmp_assign_source_103, 0, tmp_tuple_element_48 );
        assert( tmp_class_creation_13__bases_orig == NULL );
        tmp_class_creation_13__bases_orig = tmp_assign_source_103;
    }
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT( tmp_class_creation_13__bases_orig );
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF( tmp_dircall_arg1_13 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_104 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_104 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        assert( tmp_class_creation_13__bases == NULL );
        tmp_class_creation_13__bases = tmp_assign_source_104;
    }
    {
        PyObject *tmp_assign_source_105;
        tmp_assign_source_105 = PyDict_New();
        assert( tmp_class_creation_13__class_decl_dict == NULL );
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_105;
    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_metaclass_name_13;
        nuitka_bool tmp_condition_result_74;
        PyObject *tmp_key_name_37;
        PyObject *tmp_dict_name_37;
        PyObject *tmp_dict_name_38;
        PyObject *tmp_key_name_38;
        nuitka_bool tmp_condition_result_75;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_subscribed_name_13;
        PyObject *tmp_subscript_name_13;
        PyObject *tmp_bases_name_13;
        tmp_key_name_37 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
        tmp_dict_name_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_37, tmp_key_name_37 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        tmp_condition_result_74 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_74 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_25;
        }
        else
        {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
        tmp_dict_name_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_name_38 = const_str_plain_metaclass;
        tmp_metaclass_name_13 = DICT_GET_ITEM( tmp_dict_name_38, tmp_key_name_38 );
        if ( tmp_metaclass_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        goto condexpr_end_25;
        condexpr_false_25:;
        CHECK_OBJECT( tmp_class_creation_13__bases );
        tmp_truth_name_13 = CHECK_IF_TRUE( tmp_class_creation_13__bases );
        if ( tmp_truth_name_13 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        tmp_condition_result_75 = tmp_truth_name_13 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_75 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_26;
        }
        else
        {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT( tmp_class_creation_13__bases );
        tmp_subscribed_name_13 = tmp_class_creation_13__bases;
        tmp_subscript_name_13 = const_int_0;
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_13, tmp_subscript_name_13, 0 );
        if ( tmp_type_arg_25 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        tmp_metaclass_name_13 = BUILTIN_TYPE1( tmp_type_arg_25 );
        Py_DECREF( tmp_type_arg_25 );
        if ( tmp_metaclass_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_name_13 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_13 );
        condexpr_end_26:;
        condexpr_end_25:;
        CHECK_OBJECT( tmp_class_creation_13__bases );
        tmp_bases_name_13 = tmp_class_creation_13__bases;
        tmp_assign_source_106 = SELECT_METACLASS( tmp_metaclass_name_13, tmp_bases_name_13 );
        Py_DECREF( tmp_metaclass_name_13 );
        if ( tmp_assign_source_106 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        assert( tmp_class_creation_13__metaclass == NULL );
        tmp_class_creation_13__metaclass = tmp_assign_source_106;
    }
    {
        nuitka_bool tmp_condition_result_76;
        PyObject *tmp_key_name_39;
        PyObject *tmp_dict_name_39;
        tmp_key_name_39 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
        tmp_dict_name_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_39, tmp_key_name_39 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        tmp_condition_result_76 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_76 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_50;
        }
        else
        {
            goto branch_no_50;
        }
        branch_yes_50:;
        CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_39;
        }
        branch_no_50:;
    }
    {
        nuitka_bool tmp_condition_result_77;
        PyObject *tmp_source_name_49;
        CHECK_OBJECT( tmp_class_creation_13__metaclass );
        tmp_source_name_49 = tmp_class_creation_13__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_49, const_str_plain___prepare__ );
        tmp_condition_result_77 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_77 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_51;
        }
        else
        {
            goto branch_no_51;
        }
        branch_yes_51:;
        {
            PyObject *tmp_assign_source_107;
            PyObject *tmp_called_name_25;
            PyObject *tmp_source_name_50;
            PyObject *tmp_args_name_25;
            PyObject *tmp_tuple_element_49;
            PyObject *tmp_kw_name_25;
            CHECK_OBJECT( tmp_class_creation_13__metaclass );
            tmp_source_name_50 = tmp_class_creation_13__metaclass;
            tmp_called_name_25 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain___prepare__ );
            if ( tmp_called_name_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_39;
            }
            tmp_tuple_element_49 = const_str_plain_BLUR;
            tmp_args_name_25 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_49 );
            PyTuple_SET_ITEM( tmp_args_name_25, 0, tmp_tuple_element_49 );
            CHECK_OBJECT( tmp_class_creation_13__bases );
            tmp_tuple_element_49 = tmp_class_creation_13__bases;
            Py_INCREF( tmp_tuple_element_49 );
            PyTuple_SET_ITEM( tmp_args_name_25, 1, tmp_tuple_element_49 );
            CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
            tmp_kw_name_25 = tmp_class_creation_13__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 212;
            tmp_assign_source_107 = CALL_FUNCTION( tmp_called_name_25, tmp_args_name_25, tmp_kw_name_25 );
            Py_DECREF( tmp_called_name_25 );
            Py_DECREF( tmp_args_name_25 );
            if ( tmp_assign_source_107 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_39;
            }
            assert( tmp_class_creation_13__prepared == NULL );
            tmp_class_creation_13__prepared = tmp_assign_source_107;
        }
        {
            nuitka_bool tmp_condition_result_78;
            PyObject *tmp_operand_name_13;
            PyObject *tmp_source_name_51;
            CHECK_OBJECT( tmp_class_creation_13__prepared );
            tmp_source_name_51 = tmp_class_creation_13__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_51, const_str_plain___getitem__ );
            tmp_operand_name_13 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_13 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_39;
            }
            tmp_condition_result_78 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_78 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_52;
            }
            else
            {
                goto branch_no_52;
            }
            branch_yes_52:;
            {
                PyObject *tmp_raise_type_13;
                PyObject *tmp_raise_value_13;
                PyObject *tmp_left_name_13;
                PyObject *tmp_right_name_13;
                PyObject *tmp_tuple_element_50;
                PyObject *tmp_getattr_target_13;
                PyObject *tmp_getattr_attr_13;
                PyObject *tmp_getattr_default_13;
                PyObject *tmp_source_name_52;
                PyObject *tmp_type_arg_26;
                tmp_raise_type_13 = PyExc_TypeError;
                tmp_left_name_13 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_13__metaclass );
                tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
                tmp_getattr_attr_13 = const_str_plain___name__;
                tmp_getattr_default_13 = const_str_angle_metaclass;
                tmp_tuple_element_50 = BUILTIN_GETATTR( tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13 );
                if ( tmp_tuple_element_50 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 212;

                    goto try_except_handler_39;
                }
                tmp_right_name_13 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_13, 0, tmp_tuple_element_50 );
                CHECK_OBJECT( tmp_class_creation_13__prepared );
                tmp_type_arg_26 = tmp_class_creation_13__prepared;
                tmp_source_name_52 = BUILTIN_TYPE1( tmp_type_arg_26 );
                assert( !(tmp_source_name_52 == NULL) );
                tmp_tuple_element_50 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_52 );
                if ( tmp_tuple_element_50 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_13 );

                    exception_lineno = 212;

                    goto try_except_handler_39;
                }
                PyTuple_SET_ITEM( tmp_right_name_13, 1, tmp_tuple_element_50 );
                tmp_raise_value_13 = BINARY_OPERATION_REMAINDER( tmp_left_name_13, tmp_right_name_13 );
                Py_DECREF( tmp_right_name_13 );
                if ( tmp_raise_value_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 212;

                    goto try_except_handler_39;
                }
                exception_type = tmp_raise_type_13;
                Py_INCREF( tmp_raise_type_13 );
                exception_value = tmp_raise_value_13;
                exception_lineno = 212;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_39;
            }
            branch_no_52:;
        }
        goto branch_end_51;
        branch_no_51:;
        {
            PyObject *tmp_assign_source_108;
            tmp_assign_source_108 = PyDict_New();
            assert( tmp_class_creation_13__prepared == NULL );
            tmp_class_creation_13__prepared = tmp_assign_source_108;
        }
        branch_end_51:;
    }
    {
        PyObject *tmp_assign_source_109;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT( tmp_class_creation_13__prepared );
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_PIL$ImageFilter_212 = tmp_set_locals_13;
            Py_INCREF( tmp_set_locals_13 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_212, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_41;
        }
        tmp_dictset_value = const_str_plain_BLUR;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_212, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 212;

            goto try_except_handler_41;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_b07a5374eb50cc907cb018a6f4658cfa_12, codeobj_b07a5374eb50cc907cb018a6f4658cfa, module_PIL$ImageFilter, sizeof(void *) );
        frame_b07a5374eb50cc907cb018a6f4658cfa_12 = cache_frame_b07a5374eb50cc907cb018a6f4658cfa_12;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_b07a5374eb50cc907cb018a6f4658cfa_12 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_b07a5374eb50cc907cb018a6f4658cfa_12 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Blur;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_212, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 213;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        tmp_dictset_value = const_tuple_92b7d27d42c9d6e1edf0bdd1df8db135_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_212, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b07a5374eb50cc907cb018a6f4658cfa_12 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b07a5374eb50cc907cb018a6f4658cfa_12 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_b07a5374eb50cc907cb018a6f4658cfa_12, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_b07a5374eb50cc907cb018a6f4658cfa_12->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_b07a5374eb50cc907cb018a6f4658cfa_12, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_b07a5374eb50cc907cb018a6f4658cfa_12,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame.
        if ( frame_b07a5374eb50cc907cb018a6f4658cfa_12 == cache_frame_b07a5374eb50cc907cb018a6f4658cfa_12 )
        {
            Py_DECREF( frame_b07a5374eb50cc907cb018a6f4658cfa_12 );
        }
        cache_frame_b07a5374eb50cc907cb018a6f4658cfa_12 = NULL;

        assertFrameObject( frame_b07a5374eb50cc907cb018a6f4658cfa_12 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_41;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_79;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            CHECK_OBJECT( tmp_class_creation_13__bases );
            tmp_compexpr_left_14 = tmp_class_creation_13__bases;
            CHECK_OBJECT( tmp_class_creation_13__bases_orig );
            tmp_compexpr_right_14 = tmp_class_creation_13__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_41;
            }
            tmp_condition_result_79 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_79 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_53;
            }
            else
            {
                goto branch_no_53;
            }
            branch_yes_53:;
            CHECK_OBJECT( tmp_class_creation_13__bases_orig );
            tmp_dictset_value = tmp_class_creation_13__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_212, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_41;
            }
            branch_no_53:;
        }
        {
            PyObject *tmp_assign_source_110;
            PyObject *tmp_called_name_26;
            PyObject *tmp_args_name_26;
            PyObject *tmp_tuple_element_51;
            PyObject *tmp_kw_name_26;
            CHECK_OBJECT( tmp_class_creation_13__metaclass );
            tmp_called_name_26 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_51 = const_str_plain_BLUR;
            tmp_args_name_26 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_51 );
            PyTuple_SET_ITEM( tmp_args_name_26, 0, tmp_tuple_element_51 );
            CHECK_OBJECT( tmp_class_creation_13__bases );
            tmp_tuple_element_51 = tmp_class_creation_13__bases;
            Py_INCREF( tmp_tuple_element_51 );
            PyTuple_SET_ITEM( tmp_args_name_26, 1, tmp_tuple_element_51 );
            tmp_tuple_element_51 = locals_PIL$ImageFilter_212;
            Py_INCREF( tmp_tuple_element_51 );
            PyTuple_SET_ITEM( tmp_args_name_26, 2, tmp_tuple_element_51 );
            CHECK_OBJECT( tmp_class_creation_13__class_decl_dict );
            tmp_kw_name_26 = tmp_class_creation_13__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 212;
            tmp_assign_source_110 = CALL_FUNCTION( tmp_called_name_26, tmp_args_name_26, tmp_kw_name_26 );
            Py_DECREF( tmp_args_name_26 );
            if ( tmp_assign_source_110 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 212;

                goto try_except_handler_41;
            }
            assert( outline_12_var___class__ == NULL );
            outline_12_var___class__ = tmp_assign_source_110;
        }
        CHECK_OBJECT( outline_12_var___class__ );
        tmp_assign_source_109 = outline_12_var___class__;
        Py_INCREF( tmp_assign_source_109 );
        goto try_return_handler_41;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_41:;
        Py_DECREF( locals_PIL$ImageFilter_212 );
        locals_PIL$ImageFilter_212 = NULL;
        goto try_return_handler_40;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_212 );
        locals_PIL$ImageFilter_212 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto try_except_handler_40;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_40:;
        CHECK_OBJECT( (PyObject *)outline_12_var___class__ );
        Py_DECREF( outline_12_var___class__ );
        outline_12_var___class__ = NULL;

        goto outline_result_13;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto outline_exception_13;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_13:;
        exception_lineno = 212;
        goto try_except_handler_39;
        outline_result_13:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BLUR, tmp_assign_source_109 );
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_13__bases_orig );
    tmp_class_creation_13__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    Py_XDECREF( tmp_class_creation_13__class_decl_dict );
    tmp_class_creation_13__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_13__prepared );
    tmp_class_creation_13__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases_orig );
    Py_DECREF( tmp_class_creation_13__bases_orig );
    tmp_class_creation_13__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__bases );
    Py_DECREF( tmp_class_creation_13__bases );
    tmp_class_creation_13__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__class_decl_dict );
    Py_DECREF( tmp_class_creation_13__class_decl_dict );
    tmp_class_creation_13__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__metaclass );
    Py_DECREF( tmp_class_creation_13__metaclass );
    tmp_class_creation_13__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_13__prepared );
    Py_DECREF( tmp_class_creation_13__prepared );
    tmp_class_creation_13__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_tuple_element_52;
        PyObject *tmp_mvar_value_15;
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_15 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 223;

            goto try_except_handler_42;
        }

        tmp_tuple_element_52 = tmp_mvar_value_15;
        tmp_assign_source_111 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_52 );
        PyTuple_SET_ITEM( tmp_assign_source_111, 0, tmp_tuple_element_52 );
        assert( tmp_class_creation_14__bases_orig == NULL );
        tmp_class_creation_14__bases_orig = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT( tmp_class_creation_14__bases_orig );
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF( tmp_dircall_arg1_14 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_112 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_112 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        assert( tmp_class_creation_14__bases == NULL );
        tmp_class_creation_14__bases = tmp_assign_source_112;
    }
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = PyDict_New();
        assert( tmp_class_creation_14__class_decl_dict == NULL );
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_113;
    }
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_metaclass_name_14;
        nuitka_bool tmp_condition_result_80;
        PyObject *tmp_key_name_40;
        PyObject *tmp_dict_name_40;
        PyObject *tmp_dict_name_41;
        PyObject *tmp_key_name_41;
        nuitka_bool tmp_condition_result_81;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_subscribed_name_14;
        PyObject *tmp_subscript_name_14;
        PyObject *tmp_bases_name_14;
        tmp_key_name_40 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
        tmp_dict_name_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_40, tmp_key_name_40 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        tmp_condition_result_80 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_80 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_27;
        }
        else
        {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
        tmp_dict_name_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_name_41 = const_str_plain_metaclass;
        tmp_metaclass_name_14 = DICT_GET_ITEM( tmp_dict_name_41, tmp_key_name_41 );
        if ( tmp_metaclass_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT( tmp_class_creation_14__bases );
        tmp_truth_name_14 = CHECK_IF_TRUE( tmp_class_creation_14__bases );
        if ( tmp_truth_name_14 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        tmp_condition_result_81 = tmp_truth_name_14 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_81 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_28;
        }
        else
        {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT( tmp_class_creation_14__bases );
        tmp_subscribed_name_14 = tmp_class_creation_14__bases;
        tmp_subscript_name_14 = const_int_0;
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_14, tmp_subscript_name_14, 0 );
        if ( tmp_type_arg_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        tmp_metaclass_name_14 = BUILTIN_TYPE1( tmp_type_arg_27 );
        Py_DECREF( tmp_type_arg_27 );
        if ( tmp_metaclass_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_name_14 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_14 );
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT( tmp_class_creation_14__bases );
        tmp_bases_name_14 = tmp_class_creation_14__bases;
        tmp_assign_source_114 = SELECT_METACLASS( tmp_metaclass_name_14, tmp_bases_name_14 );
        Py_DECREF( tmp_metaclass_name_14 );
        if ( tmp_assign_source_114 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        assert( tmp_class_creation_14__metaclass == NULL );
        tmp_class_creation_14__metaclass = tmp_assign_source_114;
    }
    {
        nuitka_bool tmp_condition_result_82;
        PyObject *tmp_key_name_42;
        PyObject *tmp_dict_name_42;
        tmp_key_name_42 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
        tmp_dict_name_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_42, tmp_key_name_42 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        tmp_condition_result_82 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_82 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_54;
        }
        else
        {
            goto branch_no_54;
        }
        branch_yes_54:;
        CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_42;
        }
        branch_no_54:;
    }
    {
        nuitka_bool tmp_condition_result_83;
        PyObject *tmp_source_name_53;
        CHECK_OBJECT( tmp_class_creation_14__metaclass );
        tmp_source_name_53 = tmp_class_creation_14__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_53, const_str_plain___prepare__ );
        tmp_condition_result_83 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_83 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_55;
        }
        else
        {
            goto branch_no_55;
        }
        branch_yes_55:;
        {
            PyObject *tmp_assign_source_115;
            PyObject *tmp_called_name_27;
            PyObject *tmp_source_name_54;
            PyObject *tmp_args_name_27;
            PyObject *tmp_tuple_element_53;
            PyObject *tmp_kw_name_27;
            CHECK_OBJECT( tmp_class_creation_14__metaclass );
            tmp_source_name_54 = tmp_class_creation_14__metaclass;
            tmp_called_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain___prepare__ );
            if ( tmp_called_name_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_42;
            }
            tmp_tuple_element_53 = const_str_plain_CONTOUR;
            tmp_args_name_27 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_53 );
            PyTuple_SET_ITEM( tmp_args_name_27, 0, tmp_tuple_element_53 );
            CHECK_OBJECT( tmp_class_creation_14__bases );
            tmp_tuple_element_53 = tmp_class_creation_14__bases;
            Py_INCREF( tmp_tuple_element_53 );
            PyTuple_SET_ITEM( tmp_args_name_27, 1, tmp_tuple_element_53 );
            CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
            tmp_kw_name_27 = tmp_class_creation_14__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 223;
            tmp_assign_source_115 = CALL_FUNCTION( tmp_called_name_27, tmp_args_name_27, tmp_kw_name_27 );
            Py_DECREF( tmp_called_name_27 );
            Py_DECREF( tmp_args_name_27 );
            if ( tmp_assign_source_115 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_42;
            }
            assert( tmp_class_creation_14__prepared == NULL );
            tmp_class_creation_14__prepared = tmp_assign_source_115;
        }
        {
            nuitka_bool tmp_condition_result_84;
            PyObject *tmp_operand_name_14;
            PyObject *tmp_source_name_55;
            CHECK_OBJECT( tmp_class_creation_14__prepared );
            tmp_source_name_55 = tmp_class_creation_14__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_55, const_str_plain___getitem__ );
            tmp_operand_name_14 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_42;
            }
            tmp_condition_result_84 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_84 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_56;
            }
            else
            {
                goto branch_no_56;
            }
            branch_yes_56:;
            {
                PyObject *tmp_raise_type_14;
                PyObject *tmp_raise_value_14;
                PyObject *tmp_left_name_14;
                PyObject *tmp_right_name_14;
                PyObject *tmp_tuple_element_54;
                PyObject *tmp_getattr_target_14;
                PyObject *tmp_getattr_attr_14;
                PyObject *tmp_getattr_default_14;
                PyObject *tmp_source_name_56;
                PyObject *tmp_type_arg_28;
                tmp_raise_type_14 = PyExc_TypeError;
                tmp_left_name_14 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_14__metaclass );
                tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
                tmp_getattr_attr_14 = const_str_plain___name__;
                tmp_getattr_default_14 = const_str_angle_metaclass;
                tmp_tuple_element_54 = BUILTIN_GETATTR( tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14 );
                if ( tmp_tuple_element_54 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 223;

                    goto try_except_handler_42;
                }
                tmp_right_name_14 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_14, 0, tmp_tuple_element_54 );
                CHECK_OBJECT( tmp_class_creation_14__prepared );
                tmp_type_arg_28 = tmp_class_creation_14__prepared;
                tmp_source_name_56 = BUILTIN_TYPE1( tmp_type_arg_28 );
                assert( !(tmp_source_name_56 == NULL) );
                tmp_tuple_element_54 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_56 );
                if ( tmp_tuple_element_54 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_14 );

                    exception_lineno = 223;

                    goto try_except_handler_42;
                }
                PyTuple_SET_ITEM( tmp_right_name_14, 1, tmp_tuple_element_54 );
                tmp_raise_value_14 = BINARY_OPERATION_REMAINDER( tmp_left_name_14, tmp_right_name_14 );
                Py_DECREF( tmp_right_name_14 );
                if ( tmp_raise_value_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 223;

                    goto try_except_handler_42;
                }
                exception_type = tmp_raise_type_14;
                Py_INCREF( tmp_raise_type_14 );
                exception_value = tmp_raise_value_14;
                exception_lineno = 223;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_42;
            }
            branch_no_56:;
        }
        goto branch_end_55;
        branch_no_55:;
        {
            PyObject *tmp_assign_source_116;
            tmp_assign_source_116 = PyDict_New();
            assert( tmp_class_creation_14__prepared == NULL );
            tmp_class_creation_14__prepared = tmp_assign_source_116;
        }
        branch_end_55:;
    }
    {
        PyObject *tmp_assign_source_117;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT( tmp_class_creation_14__prepared );
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_PIL$ImageFilter_223 = tmp_set_locals_14;
            Py_INCREF( tmp_set_locals_14 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_223, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_44;
        }
        tmp_dictset_value = const_str_plain_CONTOUR;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_223, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;

            goto try_except_handler_44;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_754301eb603ad00ab3c9cb5e5e717b63_13, codeobj_754301eb603ad00ab3c9cb5e5e717b63, module_PIL$ImageFilter, sizeof(void *) );
        frame_754301eb603ad00ab3c9cb5e5e717b63_13 = cache_frame_754301eb603ad00ab3c9cb5e5e717b63_13;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_754301eb603ad00ab3c9cb5e5e717b63_13 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_754301eb603ad00ab3c9cb5e5e717b63_13 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Contour;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_223, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }
        tmp_dictset_value = const_tuple_af62739cfe355bb874b0d64e1fa86bd3_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_223, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_754301eb603ad00ab3c9cb5e5e717b63_13 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_754301eb603ad00ab3c9cb5e5e717b63_13 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_754301eb603ad00ab3c9cb5e5e717b63_13, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_754301eb603ad00ab3c9cb5e5e717b63_13->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_754301eb603ad00ab3c9cb5e5e717b63_13, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_754301eb603ad00ab3c9cb5e5e717b63_13,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame.
        if ( frame_754301eb603ad00ab3c9cb5e5e717b63_13 == cache_frame_754301eb603ad00ab3c9cb5e5e717b63_13 )
        {
            Py_DECREF( frame_754301eb603ad00ab3c9cb5e5e717b63_13 );
        }
        cache_frame_754301eb603ad00ab3c9cb5e5e717b63_13 = NULL;

        assertFrameObject( frame_754301eb603ad00ab3c9cb5e5e717b63_13 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_44;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_85;
            PyObject *tmp_compexpr_left_15;
            PyObject *tmp_compexpr_right_15;
            CHECK_OBJECT( tmp_class_creation_14__bases );
            tmp_compexpr_left_15 = tmp_class_creation_14__bases;
            CHECK_OBJECT( tmp_class_creation_14__bases_orig );
            tmp_compexpr_right_15 = tmp_class_creation_14__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_44;
            }
            tmp_condition_result_85 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_85 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_57;
            }
            else
            {
                goto branch_no_57;
            }
            branch_yes_57:;
            CHECK_OBJECT( tmp_class_creation_14__bases_orig );
            tmp_dictset_value = tmp_class_creation_14__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_223, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_44;
            }
            branch_no_57:;
        }
        {
            PyObject *tmp_assign_source_118;
            PyObject *tmp_called_name_28;
            PyObject *tmp_args_name_28;
            PyObject *tmp_tuple_element_55;
            PyObject *tmp_kw_name_28;
            CHECK_OBJECT( tmp_class_creation_14__metaclass );
            tmp_called_name_28 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_55 = const_str_plain_CONTOUR;
            tmp_args_name_28 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_55 );
            PyTuple_SET_ITEM( tmp_args_name_28, 0, tmp_tuple_element_55 );
            CHECK_OBJECT( tmp_class_creation_14__bases );
            tmp_tuple_element_55 = tmp_class_creation_14__bases;
            Py_INCREF( tmp_tuple_element_55 );
            PyTuple_SET_ITEM( tmp_args_name_28, 1, tmp_tuple_element_55 );
            tmp_tuple_element_55 = locals_PIL$ImageFilter_223;
            Py_INCREF( tmp_tuple_element_55 );
            PyTuple_SET_ITEM( tmp_args_name_28, 2, tmp_tuple_element_55 );
            CHECK_OBJECT( tmp_class_creation_14__class_decl_dict );
            tmp_kw_name_28 = tmp_class_creation_14__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 223;
            tmp_assign_source_118 = CALL_FUNCTION( tmp_called_name_28, tmp_args_name_28, tmp_kw_name_28 );
            Py_DECREF( tmp_args_name_28 );
            if ( tmp_assign_source_118 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 223;

                goto try_except_handler_44;
            }
            assert( outline_13_var___class__ == NULL );
            outline_13_var___class__ = tmp_assign_source_118;
        }
        CHECK_OBJECT( outline_13_var___class__ );
        tmp_assign_source_117 = outline_13_var___class__;
        Py_INCREF( tmp_assign_source_117 );
        goto try_return_handler_44;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_44:;
        Py_DECREF( locals_PIL$ImageFilter_223 );
        locals_PIL$ImageFilter_223 = NULL;
        goto try_return_handler_43;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_223 );
        locals_PIL$ImageFilter_223 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto try_except_handler_43;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_43:;
        CHECK_OBJECT( (PyObject *)outline_13_var___class__ );
        Py_DECREF( outline_13_var___class__ );
        outline_13_var___class__ = NULL;

        goto outline_result_14;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto outline_exception_14;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_14:;
        exception_lineno = 223;
        goto try_except_handler_42;
        outline_result_14:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_CONTOUR, tmp_assign_source_117 );
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_14__bases_orig );
    tmp_class_creation_14__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    Py_XDECREF( tmp_class_creation_14__class_decl_dict );
    tmp_class_creation_14__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_14__prepared );
    tmp_class_creation_14__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases_orig );
    Py_DECREF( tmp_class_creation_14__bases_orig );
    tmp_class_creation_14__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__bases );
    Py_DECREF( tmp_class_creation_14__bases );
    tmp_class_creation_14__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__class_decl_dict );
    Py_DECREF( tmp_class_creation_14__class_decl_dict );
    tmp_class_creation_14__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__metaclass );
    Py_DECREF( tmp_class_creation_14__metaclass );
    tmp_class_creation_14__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_14__prepared );
    Py_DECREF( tmp_class_creation_14__prepared );
    tmp_class_creation_14__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_mvar_value_16;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_16 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;

            goto try_except_handler_45;
        }

        tmp_tuple_element_56 = tmp_mvar_value_16;
        tmp_assign_source_119 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_56 );
        PyTuple_SET_ITEM( tmp_assign_source_119, 0, tmp_tuple_element_56 );
        assert( tmp_class_creation_15__bases_orig == NULL );
        tmp_class_creation_15__bases_orig = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT( tmp_class_creation_15__bases_orig );
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF( tmp_dircall_arg1_15 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_120 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_120 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        assert( tmp_class_creation_15__bases == NULL );
        tmp_class_creation_15__bases = tmp_assign_source_120;
    }
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = PyDict_New();
        assert( tmp_class_creation_15__class_decl_dict == NULL );
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_121;
    }
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_metaclass_name_15;
        nuitka_bool tmp_condition_result_86;
        PyObject *tmp_key_name_43;
        PyObject *tmp_dict_name_43;
        PyObject *tmp_dict_name_44;
        PyObject *tmp_key_name_44;
        nuitka_bool tmp_condition_result_87;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_subscribed_name_15;
        PyObject *tmp_subscript_name_15;
        PyObject *tmp_bases_name_15;
        tmp_key_name_43 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
        tmp_dict_name_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_43, tmp_key_name_43 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        tmp_condition_result_86 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_86 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_29;
        }
        else
        {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
        tmp_dict_name_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_name_44 = const_str_plain_metaclass;
        tmp_metaclass_name_15 = DICT_GET_ITEM( tmp_dict_name_44, tmp_key_name_44 );
        if ( tmp_metaclass_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT( tmp_class_creation_15__bases );
        tmp_truth_name_15 = CHECK_IF_TRUE( tmp_class_creation_15__bases );
        if ( tmp_truth_name_15 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        tmp_condition_result_87 = tmp_truth_name_15 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_87 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_30;
        }
        else
        {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT( tmp_class_creation_15__bases );
        tmp_subscribed_name_15 = tmp_class_creation_15__bases;
        tmp_subscript_name_15 = const_int_0;
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_15, tmp_subscript_name_15, 0 );
        if ( tmp_type_arg_29 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        tmp_metaclass_name_15 = BUILTIN_TYPE1( tmp_type_arg_29 );
        Py_DECREF( tmp_type_arg_29 );
        if ( tmp_metaclass_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_name_15 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_15 );
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT( tmp_class_creation_15__bases );
        tmp_bases_name_15 = tmp_class_creation_15__bases;
        tmp_assign_source_122 = SELECT_METACLASS( tmp_metaclass_name_15, tmp_bases_name_15 );
        Py_DECREF( tmp_metaclass_name_15 );
        if ( tmp_assign_source_122 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        assert( tmp_class_creation_15__metaclass == NULL );
        tmp_class_creation_15__metaclass = tmp_assign_source_122;
    }
    {
        nuitka_bool tmp_condition_result_88;
        PyObject *tmp_key_name_45;
        PyObject *tmp_dict_name_45;
        tmp_key_name_45 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
        tmp_dict_name_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_45, tmp_key_name_45 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        tmp_condition_result_88 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_88 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_58;
        }
        else
        {
            goto branch_no_58;
        }
        branch_yes_58:;
        CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_45;
        }
        branch_no_58:;
    }
    {
        nuitka_bool tmp_condition_result_89;
        PyObject *tmp_source_name_57;
        CHECK_OBJECT( tmp_class_creation_15__metaclass );
        tmp_source_name_57 = tmp_class_creation_15__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_57, const_str_plain___prepare__ );
        tmp_condition_result_89 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_89 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_59;
        }
        else
        {
            goto branch_no_59;
        }
        branch_yes_59:;
        {
            PyObject *tmp_assign_source_123;
            PyObject *tmp_called_name_29;
            PyObject *tmp_source_name_58;
            PyObject *tmp_args_name_29;
            PyObject *tmp_tuple_element_57;
            PyObject *tmp_kw_name_29;
            CHECK_OBJECT( tmp_class_creation_15__metaclass );
            tmp_source_name_58 = tmp_class_creation_15__metaclass;
            tmp_called_name_29 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain___prepare__ );
            if ( tmp_called_name_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_45;
            }
            tmp_tuple_element_57 = const_str_plain_DETAIL;
            tmp_args_name_29 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_57 );
            PyTuple_SET_ITEM( tmp_args_name_29, 0, tmp_tuple_element_57 );
            CHECK_OBJECT( tmp_class_creation_15__bases );
            tmp_tuple_element_57 = tmp_class_creation_15__bases;
            Py_INCREF( tmp_tuple_element_57 );
            PyTuple_SET_ITEM( tmp_args_name_29, 1, tmp_tuple_element_57 );
            CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
            tmp_kw_name_29 = tmp_class_creation_15__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 232;
            tmp_assign_source_123 = CALL_FUNCTION( tmp_called_name_29, tmp_args_name_29, tmp_kw_name_29 );
            Py_DECREF( tmp_called_name_29 );
            Py_DECREF( tmp_args_name_29 );
            if ( tmp_assign_source_123 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_45;
            }
            assert( tmp_class_creation_15__prepared == NULL );
            tmp_class_creation_15__prepared = tmp_assign_source_123;
        }
        {
            nuitka_bool tmp_condition_result_90;
            PyObject *tmp_operand_name_15;
            PyObject *tmp_source_name_59;
            CHECK_OBJECT( tmp_class_creation_15__prepared );
            tmp_source_name_59 = tmp_class_creation_15__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_59, const_str_plain___getitem__ );
            tmp_operand_name_15 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_15 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_45;
            }
            tmp_condition_result_90 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_90 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_60;
            }
            else
            {
                goto branch_no_60;
            }
            branch_yes_60:;
            {
                PyObject *tmp_raise_type_15;
                PyObject *tmp_raise_value_15;
                PyObject *tmp_left_name_15;
                PyObject *tmp_right_name_15;
                PyObject *tmp_tuple_element_58;
                PyObject *tmp_getattr_target_15;
                PyObject *tmp_getattr_attr_15;
                PyObject *tmp_getattr_default_15;
                PyObject *tmp_source_name_60;
                PyObject *tmp_type_arg_30;
                tmp_raise_type_15 = PyExc_TypeError;
                tmp_left_name_15 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_15__metaclass );
                tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
                tmp_getattr_attr_15 = const_str_plain___name__;
                tmp_getattr_default_15 = const_str_angle_metaclass;
                tmp_tuple_element_58 = BUILTIN_GETATTR( tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15 );
                if ( tmp_tuple_element_58 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 232;

                    goto try_except_handler_45;
                }
                tmp_right_name_15 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_15, 0, tmp_tuple_element_58 );
                CHECK_OBJECT( tmp_class_creation_15__prepared );
                tmp_type_arg_30 = tmp_class_creation_15__prepared;
                tmp_source_name_60 = BUILTIN_TYPE1( tmp_type_arg_30 );
                assert( !(tmp_source_name_60 == NULL) );
                tmp_tuple_element_58 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_60 );
                if ( tmp_tuple_element_58 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_15 );

                    exception_lineno = 232;

                    goto try_except_handler_45;
                }
                PyTuple_SET_ITEM( tmp_right_name_15, 1, tmp_tuple_element_58 );
                tmp_raise_value_15 = BINARY_OPERATION_REMAINDER( tmp_left_name_15, tmp_right_name_15 );
                Py_DECREF( tmp_right_name_15 );
                if ( tmp_raise_value_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 232;

                    goto try_except_handler_45;
                }
                exception_type = tmp_raise_type_15;
                Py_INCREF( tmp_raise_type_15 );
                exception_value = tmp_raise_value_15;
                exception_lineno = 232;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_45;
            }
            branch_no_60:;
        }
        goto branch_end_59;
        branch_no_59:;
        {
            PyObject *tmp_assign_source_124;
            tmp_assign_source_124 = PyDict_New();
            assert( tmp_class_creation_15__prepared == NULL );
            tmp_class_creation_15__prepared = tmp_assign_source_124;
        }
        branch_end_59:;
    }
    {
        PyObject *tmp_assign_source_125;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT( tmp_class_creation_15__prepared );
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_PIL$ImageFilter_232 = tmp_set_locals_15;
            Py_INCREF( tmp_set_locals_15 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_232, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_47;
        }
        tmp_dictset_value = const_str_plain_DETAIL;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_232, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 232;

            goto try_except_handler_47;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_8fb5463d49dc32e1e8da1916b864889b_14, codeobj_8fb5463d49dc32e1e8da1916b864889b, module_PIL$ImageFilter, sizeof(void *) );
        frame_8fb5463d49dc32e1e8da1916b864889b_14 = cache_frame_8fb5463d49dc32e1e8da1916b864889b_14;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_8fb5463d49dc32e1e8da1916b864889b_14 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_8fb5463d49dc32e1e8da1916b864889b_14 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Detail;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_232, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 233;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }
        tmp_dictset_value = const_tuple_2fbe8f7d82421d40b5775b3a71318d59_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_232, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 234;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_8fb5463d49dc32e1e8da1916b864889b_14 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_8fb5463d49dc32e1e8da1916b864889b_14 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_8fb5463d49dc32e1e8da1916b864889b_14, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_8fb5463d49dc32e1e8da1916b864889b_14->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_8fb5463d49dc32e1e8da1916b864889b_14, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_8fb5463d49dc32e1e8da1916b864889b_14,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame.
        if ( frame_8fb5463d49dc32e1e8da1916b864889b_14 == cache_frame_8fb5463d49dc32e1e8da1916b864889b_14 )
        {
            Py_DECREF( frame_8fb5463d49dc32e1e8da1916b864889b_14 );
        }
        cache_frame_8fb5463d49dc32e1e8da1916b864889b_14 = NULL;

        assertFrameObject( frame_8fb5463d49dc32e1e8da1916b864889b_14 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_47;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_91;
            PyObject *tmp_compexpr_left_16;
            PyObject *tmp_compexpr_right_16;
            CHECK_OBJECT( tmp_class_creation_15__bases );
            tmp_compexpr_left_16 = tmp_class_creation_15__bases;
            CHECK_OBJECT( tmp_class_creation_15__bases_orig );
            tmp_compexpr_right_16 = tmp_class_creation_15__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_47;
            }
            tmp_condition_result_91 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_91 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_61;
            }
            else
            {
                goto branch_no_61;
            }
            branch_yes_61:;
            CHECK_OBJECT( tmp_class_creation_15__bases_orig );
            tmp_dictset_value = tmp_class_creation_15__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_232, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_47;
            }
            branch_no_61:;
        }
        {
            PyObject *tmp_assign_source_126;
            PyObject *tmp_called_name_30;
            PyObject *tmp_args_name_30;
            PyObject *tmp_tuple_element_59;
            PyObject *tmp_kw_name_30;
            CHECK_OBJECT( tmp_class_creation_15__metaclass );
            tmp_called_name_30 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_59 = const_str_plain_DETAIL;
            tmp_args_name_30 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_59 );
            PyTuple_SET_ITEM( tmp_args_name_30, 0, tmp_tuple_element_59 );
            CHECK_OBJECT( tmp_class_creation_15__bases );
            tmp_tuple_element_59 = tmp_class_creation_15__bases;
            Py_INCREF( tmp_tuple_element_59 );
            PyTuple_SET_ITEM( tmp_args_name_30, 1, tmp_tuple_element_59 );
            tmp_tuple_element_59 = locals_PIL$ImageFilter_232;
            Py_INCREF( tmp_tuple_element_59 );
            PyTuple_SET_ITEM( tmp_args_name_30, 2, tmp_tuple_element_59 );
            CHECK_OBJECT( tmp_class_creation_15__class_decl_dict );
            tmp_kw_name_30 = tmp_class_creation_15__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 232;
            tmp_assign_source_126 = CALL_FUNCTION( tmp_called_name_30, tmp_args_name_30, tmp_kw_name_30 );
            Py_DECREF( tmp_args_name_30 );
            if ( tmp_assign_source_126 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;

                goto try_except_handler_47;
            }
            assert( outline_14_var___class__ == NULL );
            outline_14_var___class__ = tmp_assign_source_126;
        }
        CHECK_OBJECT( outline_14_var___class__ );
        tmp_assign_source_125 = outline_14_var___class__;
        Py_INCREF( tmp_assign_source_125 );
        goto try_return_handler_47;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_47:;
        Py_DECREF( locals_PIL$ImageFilter_232 );
        locals_PIL$ImageFilter_232 = NULL;
        goto try_return_handler_46;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_45 = exception_type;
        exception_keeper_value_45 = exception_value;
        exception_keeper_tb_45 = exception_tb;
        exception_keeper_lineno_45 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_232 );
        locals_PIL$ImageFilter_232 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;
        exception_lineno = exception_keeper_lineno_45;

        goto try_except_handler_46;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_46:;
        CHECK_OBJECT( (PyObject *)outline_14_var___class__ );
        Py_DECREF( outline_14_var___class__ );
        outline_14_var___class__ = NULL;

        goto outline_result_15;
        // Exception handler code:
        try_except_handler_46:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto outline_exception_15;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_15:;
        exception_lineno = 232;
        goto try_except_handler_45;
        outline_result_15:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_DETAIL, tmp_assign_source_125 );
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_15__bases_orig );
    tmp_class_creation_15__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    Py_XDECREF( tmp_class_creation_15__class_decl_dict );
    tmp_class_creation_15__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_15__prepared );
    tmp_class_creation_15__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__bases_orig );
    Py_DECREF( tmp_class_creation_15__bases_orig );
    tmp_class_creation_15__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__bases );
    Py_DECREF( tmp_class_creation_15__bases );
    tmp_class_creation_15__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__class_decl_dict );
    Py_DECREF( tmp_class_creation_15__class_decl_dict );
    tmp_class_creation_15__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__metaclass );
    Py_DECREF( tmp_class_creation_15__metaclass );
    tmp_class_creation_15__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_15__prepared );
    Py_DECREF( tmp_class_creation_15__prepared );
    tmp_class_creation_15__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_mvar_value_17;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_17 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 241;

            goto try_except_handler_48;
        }

        tmp_tuple_element_60 = tmp_mvar_value_17;
        tmp_assign_source_127 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_60 );
        PyTuple_SET_ITEM( tmp_assign_source_127, 0, tmp_tuple_element_60 );
        assert( tmp_class_creation_16__bases_orig == NULL );
        tmp_class_creation_16__bases_orig = tmp_assign_source_127;
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT( tmp_class_creation_16__bases_orig );
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF( tmp_dircall_arg1_16 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_128 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_128 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        assert( tmp_class_creation_16__bases == NULL );
        tmp_class_creation_16__bases = tmp_assign_source_128;
    }
    {
        PyObject *tmp_assign_source_129;
        tmp_assign_source_129 = PyDict_New();
        assert( tmp_class_creation_16__class_decl_dict == NULL );
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_129;
    }
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_metaclass_name_16;
        nuitka_bool tmp_condition_result_92;
        PyObject *tmp_key_name_46;
        PyObject *tmp_dict_name_46;
        PyObject *tmp_dict_name_47;
        PyObject *tmp_key_name_47;
        nuitka_bool tmp_condition_result_93;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_subscribed_name_16;
        PyObject *tmp_subscript_name_16;
        PyObject *tmp_bases_name_16;
        tmp_key_name_46 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
        tmp_dict_name_46 = tmp_class_creation_16__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_46, tmp_key_name_46 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        tmp_condition_result_92 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_92 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_31;
        }
        else
        {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
        tmp_dict_name_47 = tmp_class_creation_16__class_decl_dict;
        tmp_key_name_47 = const_str_plain_metaclass;
        tmp_metaclass_name_16 = DICT_GET_ITEM( tmp_dict_name_47, tmp_key_name_47 );
        if ( tmp_metaclass_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT( tmp_class_creation_16__bases );
        tmp_truth_name_16 = CHECK_IF_TRUE( tmp_class_creation_16__bases );
        if ( tmp_truth_name_16 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        tmp_condition_result_93 = tmp_truth_name_16 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_93 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_32;
        }
        else
        {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT( tmp_class_creation_16__bases );
        tmp_subscribed_name_16 = tmp_class_creation_16__bases;
        tmp_subscript_name_16 = const_int_0;
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_16, tmp_subscript_name_16, 0 );
        if ( tmp_type_arg_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        tmp_metaclass_name_16 = BUILTIN_TYPE1( tmp_type_arg_31 );
        Py_DECREF( tmp_type_arg_31 );
        if ( tmp_metaclass_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_name_16 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_16 );
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT( tmp_class_creation_16__bases );
        tmp_bases_name_16 = tmp_class_creation_16__bases;
        tmp_assign_source_130 = SELECT_METACLASS( tmp_metaclass_name_16, tmp_bases_name_16 );
        Py_DECREF( tmp_metaclass_name_16 );
        if ( tmp_assign_source_130 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        assert( tmp_class_creation_16__metaclass == NULL );
        tmp_class_creation_16__metaclass = tmp_assign_source_130;
    }
    {
        nuitka_bool tmp_condition_result_94;
        PyObject *tmp_key_name_48;
        PyObject *tmp_dict_name_48;
        tmp_key_name_48 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
        tmp_dict_name_48 = tmp_class_creation_16__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_48, tmp_key_name_48 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        tmp_condition_result_94 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_94 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_62;
        }
        else
        {
            goto branch_no_62;
        }
        branch_yes_62:;
        CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_48;
        }
        branch_no_62:;
    }
    {
        nuitka_bool tmp_condition_result_95;
        PyObject *tmp_source_name_61;
        CHECK_OBJECT( tmp_class_creation_16__metaclass );
        tmp_source_name_61 = tmp_class_creation_16__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_61, const_str_plain___prepare__ );
        tmp_condition_result_95 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_95 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_63;
        }
        else
        {
            goto branch_no_63;
        }
        branch_yes_63:;
        {
            PyObject *tmp_assign_source_131;
            PyObject *tmp_called_name_31;
            PyObject *tmp_source_name_62;
            PyObject *tmp_args_name_31;
            PyObject *tmp_tuple_element_61;
            PyObject *tmp_kw_name_31;
            CHECK_OBJECT( tmp_class_creation_16__metaclass );
            tmp_source_name_62 = tmp_class_creation_16__metaclass;
            tmp_called_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain___prepare__ );
            if ( tmp_called_name_31 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_48;
            }
            tmp_tuple_element_61 = const_str_plain_EDGE_ENHANCE;
            tmp_args_name_31 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_61 );
            PyTuple_SET_ITEM( tmp_args_name_31, 0, tmp_tuple_element_61 );
            CHECK_OBJECT( tmp_class_creation_16__bases );
            tmp_tuple_element_61 = tmp_class_creation_16__bases;
            Py_INCREF( tmp_tuple_element_61 );
            PyTuple_SET_ITEM( tmp_args_name_31, 1, tmp_tuple_element_61 );
            CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
            tmp_kw_name_31 = tmp_class_creation_16__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 241;
            tmp_assign_source_131 = CALL_FUNCTION( tmp_called_name_31, tmp_args_name_31, tmp_kw_name_31 );
            Py_DECREF( tmp_called_name_31 );
            Py_DECREF( tmp_args_name_31 );
            if ( tmp_assign_source_131 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_48;
            }
            assert( tmp_class_creation_16__prepared == NULL );
            tmp_class_creation_16__prepared = tmp_assign_source_131;
        }
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_operand_name_16;
            PyObject *tmp_source_name_63;
            CHECK_OBJECT( tmp_class_creation_16__prepared );
            tmp_source_name_63 = tmp_class_creation_16__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_63, const_str_plain___getitem__ );
            tmp_operand_name_16 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_16 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_48;
            }
            tmp_condition_result_96 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_96 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_64;
            }
            else
            {
                goto branch_no_64;
            }
            branch_yes_64:;
            {
                PyObject *tmp_raise_type_16;
                PyObject *tmp_raise_value_16;
                PyObject *tmp_left_name_16;
                PyObject *tmp_right_name_16;
                PyObject *tmp_tuple_element_62;
                PyObject *tmp_getattr_target_16;
                PyObject *tmp_getattr_attr_16;
                PyObject *tmp_getattr_default_16;
                PyObject *tmp_source_name_64;
                PyObject *tmp_type_arg_32;
                tmp_raise_type_16 = PyExc_TypeError;
                tmp_left_name_16 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_16__metaclass );
                tmp_getattr_target_16 = tmp_class_creation_16__metaclass;
                tmp_getattr_attr_16 = const_str_plain___name__;
                tmp_getattr_default_16 = const_str_angle_metaclass;
                tmp_tuple_element_62 = BUILTIN_GETATTR( tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16 );
                if ( tmp_tuple_element_62 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 241;

                    goto try_except_handler_48;
                }
                tmp_right_name_16 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_16, 0, tmp_tuple_element_62 );
                CHECK_OBJECT( tmp_class_creation_16__prepared );
                tmp_type_arg_32 = tmp_class_creation_16__prepared;
                tmp_source_name_64 = BUILTIN_TYPE1( tmp_type_arg_32 );
                assert( !(tmp_source_name_64 == NULL) );
                tmp_tuple_element_62 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_64 );
                if ( tmp_tuple_element_62 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_16 );

                    exception_lineno = 241;

                    goto try_except_handler_48;
                }
                PyTuple_SET_ITEM( tmp_right_name_16, 1, tmp_tuple_element_62 );
                tmp_raise_value_16 = BINARY_OPERATION_REMAINDER( tmp_left_name_16, tmp_right_name_16 );
                Py_DECREF( tmp_right_name_16 );
                if ( tmp_raise_value_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 241;

                    goto try_except_handler_48;
                }
                exception_type = tmp_raise_type_16;
                Py_INCREF( tmp_raise_type_16 );
                exception_value = tmp_raise_value_16;
                exception_lineno = 241;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_48;
            }
            branch_no_64:;
        }
        goto branch_end_63;
        branch_no_63:;
        {
            PyObject *tmp_assign_source_132;
            tmp_assign_source_132 = PyDict_New();
            assert( tmp_class_creation_16__prepared == NULL );
            tmp_class_creation_16__prepared = tmp_assign_source_132;
        }
        branch_end_63:;
    }
    {
        PyObject *tmp_assign_source_133;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT( tmp_class_creation_16__prepared );
            tmp_set_locals_16 = tmp_class_creation_16__prepared;
            locals_PIL$ImageFilter_241 = tmp_set_locals_16;
            Py_INCREF( tmp_set_locals_16 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_241, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_50;
        }
        tmp_dictset_value = const_str_plain_EDGE_ENHANCE;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_241, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;

            goto try_except_handler_50;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_67fa2dda155a931ccb1670fd19fadfe3_15, codeobj_67fa2dda155a931ccb1670fd19fadfe3, module_PIL$ImageFilter, sizeof(void *) );
        frame_67fa2dda155a931ccb1670fd19fadfe3_15 = cache_frame_67fa2dda155a931ccb1670fd19fadfe3_15;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_67fa2dda155a931ccb1670fd19fadfe3_15 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_67fa2dda155a931ccb1670fd19fadfe3_15 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_digest_e749479ca4591258abaf0631a8cdf69c;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_241, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 242;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = const_tuple_6138090bb4631a56a96f8885085ea1e1_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_241, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_67fa2dda155a931ccb1670fd19fadfe3_15 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_67fa2dda155a931ccb1670fd19fadfe3_15 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_67fa2dda155a931ccb1670fd19fadfe3_15, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_67fa2dda155a931ccb1670fd19fadfe3_15->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_67fa2dda155a931ccb1670fd19fadfe3_15, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_67fa2dda155a931ccb1670fd19fadfe3_15,
            type_description_2,
            outline_15_var___class__
        );


        // Release cached frame.
        if ( frame_67fa2dda155a931ccb1670fd19fadfe3_15 == cache_frame_67fa2dda155a931ccb1670fd19fadfe3_15 )
        {
            Py_DECREF( frame_67fa2dda155a931ccb1670fd19fadfe3_15 );
        }
        cache_frame_67fa2dda155a931ccb1670fd19fadfe3_15 = NULL;

        assertFrameObject( frame_67fa2dda155a931ccb1670fd19fadfe3_15 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_50;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_97;
            PyObject *tmp_compexpr_left_17;
            PyObject *tmp_compexpr_right_17;
            CHECK_OBJECT( tmp_class_creation_16__bases );
            tmp_compexpr_left_17 = tmp_class_creation_16__bases;
            CHECK_OBJECT( tmp_class_creation_16__bases_orig );
            tmp_compexpr_right_17 = tmp_class_creation_16__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_17, tmp_compexpr_right_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_50;
            }
            tmp_condition_result_97 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_97 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_65;
            }
            else
            {
                goto branch_no_65;
            }
            branch_yes_65:;
            CHECK_OBJECT( tmp_class_creation_16__bases_orig );
            tmp_dictset_value = tmp_class_creation_16__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_241, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_50;
            }
            branch_no_65:;
        }
        {
            PyObject *tmp_assign_source_134;
            PyObject *tmp_called_name_32;
            PyObject *tmp_args_name_32;
            PyObject *tmp_tuple_element_63;
            PyObject *tmp_kw_name_32;
            CHECK_OBJECT( tmp_class_creation_16__metaclass );
            tmp_called_name_32 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_63 = const_str_plain_EDGE_ENHANCE;
            tmp_args_name_32 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_63 );
            PyTuple_SET_ITEM( tmp_args_name_32, 0, tmp_tuple_element_63 );
            CHECK_OBJECT( tmp_class_creation_16__bases );
            tmp_tuple_element_63 = tmp_class_creation_16__bases;
            Py_INCREF( tmp_tuple_element_63 );
            PyTuple_SET_ITEM( tmp_args_name_32, 1, tmp_tuple_element_63 );
            tmp_tuple_element_63 = locals_PIL$ImageFilter_241;
            Py_INCREF( tmp_tuple_element_63 );
            PyTuple_SET_ITEM( tmp_args_name_32, 2, tmp_tuple_element_63 );
            CHECK_OBJECT( tmp_class_creation_16__class_decl_dict );
            tmp_kw_name_32 = tmp_class_creation_16__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 241;
            tmp_assign_source_134 = CALL_FUNCTION( tmp_called_name_32, tmp_args_name_32, tmp_kw_name_32 );
            Py_DECREF( tmp_args_name_32 );
            if ( tmp_assign_source_134 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 241;

                goto try_except_handler_50;
            }
            assert( outline_15_var___class__ == NULL );
            outline_15_var___class__ = tmp_assign_source_134;
        }
        CHECK_OBJECT( outline_15_var___class__ );
        tmp_assign_source_133 = outline_15_var___class__;
        Py_INCREF( tmp_assign_source_133 );
        goto try_return_handler_50;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_50:;
        Py_DECREF( locals_PIL$ImageFilter_241 );
        locals_PIL$ImageFilter_241 = NULL;
        goto try_return_handler_49;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_241 );
        locals_PIL$ImageFilter_241 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto try_except_handler_49;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_49:;
        CHECK_OBJECT( (PyObject *)outline_15_var___class__ );
        Py_DECREF( outline_15_var___class__ );
        outline_15_var___class__ = NULL;

        goto outline_result_16;
        // Exception handler code:
        try_except_handler_49:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto outline_exception_16;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_16:;
        exception_lineno = 241;
        goto try_except_handler_48;
        outline_result_16:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_EDGE_ENHANCE, tmp_assign_source_133 );
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_keeper_lineno_50 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_16__bases_orig );
    tmp_class_creation_16__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    Py_XDECREF( tmp_class_creation_16__class_decl_dict );
    tmp_class_creation_16__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_16__prepared );
    tmp_class_creation_16__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_50;
    exception_value = exception_keeper_value_50;
    exception_tb = exception_keeper_tb_50;
    exception_lineno = exception_keeper_lineno_50;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__bases_orig );
    Py_DECREF( tmp_class_creation_16__bases_orig );
    tmp_class_creation_16__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__bases );
    Py_DECREF( tmp_class_creation_16__bases );
    tmp_class_creation_16__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__class_decl_dict );
    Py_DECREF( tmp_class_creation_16__class_decl_dict );
    tmp_class_creation_16__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__metaclass );
    Py_DECREF( tmp_class_creation_16__metaclass );
    tmp_class_creation_16__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_16__prepared );
    Py_DECREF( tmp_class_creation_16__prepared );
    tmp_class_creation_16__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_mvar_value_18;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_18 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 250;

            goto try_except_handler_51;
        }

        tmp_tuple_element_64 = tmp_mvar_value_18;
        tmp_assign_source_135 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_64 );
        PyTuple_SET_ITEM( tmp_assign_source_135, 0, tmp_tuple_element_64 );
        assert( tmp_class_creation_17__bases_orig == NULL );
        tmp_class_creation_17__bases_orig = tmp_assign_source_135;
    }
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT( tmp_class_creation_17__bases_orig );
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF( tmp_dircall_arg1_17 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_136 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_136 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        assert( tmp_class_creation_17__bases == NULL );
        tmp_class_creation_17__bases = tmp_assign_source_136;
    }
    {
        PyObject *tmp_assign_source_137;
        tmp_assign_source_137 = PyDict_New();
        assert( tmp_class_creation_17__class_decl_dict == NULL );
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_137;
    }
    {
        PyObject *tmp_assign_source_138;
        PyObject *tmp_metaclass_name_17;
        nuitka_bool tmp_condition_result_98;
        PyObject *tmp_key_name_49;
        PyObject *tmp_dict_name_49;
        PyObject *tmp_dict_name_50;
        PyObject *tmp_key_name_50;
        nuitka_bool tmp_condition_result_99;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_subscribed_name_17;
        PyObject *tmp_subscript_name_17;
        PyObject *tmp_bases_name_17;
        tmp_key_name_49 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
        tmp_dict_name_49 = tmp_class_creation_17__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_49, tmp_key_name_49 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        tmp_condition_result_98 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_98 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_33;
        }
        else
        {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
        tmp_dict_name_50 = tmp_class_creation_17__class_decl_dict;
        tmp_key_name_50 = const_str_plain_metaclass;
        tmp_metaclass_name_17 = DICT_GET_ITEM( tmp_dict_name_50, tmp_key_name_50 );
        if ( tmp_metaclass_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        goto condexpr_end_33;
        condexpr_false_33:;
        CHECK_OBJECT( tmp_class_creation_17__bases );
        tmp_truth_name_17 = CHECK_IF_TRUE( tmp_class_creation_17__bases );
        if ( tmp_truth_name_17 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        tmp_condition_result_99 = tmp_truth_name_17 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_99 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_34;
        }
        else
        {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT( tmp_class_creation_17__bases );
        tmp_subscribed_name_17 = tmp_class_creation_17__bases;
        tmp_subscript_name_17 = const_int_0;
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_17, tmp_subscript_name_17, 0 );
        if ( tmp_type_arg_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        tmp_metaclass_name_17 = BUILTIN_TYPE1( tmp_type_arg_33 );
        Py_DECREF( tmp_type_arg_33 );
        if ( tmp_metaclass_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_name_17 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_17 );
        condexpr_end_34:;
        condexpr_end_33:;
        CHECK_OBJECT( tmp_class_creation_17__bases );
        tmp_bases_name_17 = tmp_class_creation_17__bases;
        tmp_assign_source_138 = SELECT_METACLASS( tmp_metaclass_name_17, tmp_bases_name_17 );
        Py_DECREF( tmp_metaclass_name_17 );
        if ( tmp_assign_source_138 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        assert( tmp_class_creation_17__metaclass == NULL );
        tmp_class_creation_17__metaclass = tmp_assign_source_138;
    }
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_key_name_51;
        PyObject *tmp_dict_name_51;
        tmp_key_name_51 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
        tmp_dict_name_51 = tmp_class_creation_17__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_51, tmp_key_name_51 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        tmp_condition_result_100 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_100 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_66;
        }
        else
        {
            goto branch_no_66;
        }
        branch_yes_66:;
        CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_51;
        }
        branch_no_66:;
    }
    {
        nuitka_bool tmp_condition_result_101;
        PyObject *tmp_source_name_65;
        CHECK_OBJECT( tmp_class_creation_17__metaclass );
        tmp_source_name_65 = tmp_class_creation_17__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_65, const_str_plain___prepare__ );
        tmp_condition_result_101 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_101 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_67;
        }
        else
        {
            goto branch_no_67;
        }
        branch_yes_67:;
        {
            PyObject *tmp_assign_source_139;
            PyObject *tmp_called_name_33;
            PyObject *tmp_source_name_66;
            PyObject *tmp_args_name_33;
            PyObject *tmp_tuple_element_65;
            PyObject *tmp_kw_name_33;
            CHECK_OBJECT( tmp_class_creation_17__metaclass );
            tmp_source_name_66 = tmp_class_creation_17__metaclass;
            tmp_called_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain___prepare__ );
            if ( tmp_called_name_33 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_51;
            }
            tmp_tuple_element_65 = const_str_plain_EDGE_ENHANCE_MORE;
            tmp_args_name_33 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_65 );
            PyTuple_SET_ITEM( tmp_args_name_33, 0, tmp_tuple_element_65 );
            CHECK_OBJECT( tmp_class_creation_17__bases );
            tmp_tuple_element_65 = tmp_class_creation_17__bases;
            Py_INCREF( tmp_tuple_element_65 );
            PyTuple_SET_ITEM( tmp_args_name_33, 1, tmp_tuple_element_65 );
            CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
            tmp_kw_name_33 = tmp_class_creation_17__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 250;
            tmp_assign_source_139 = CALL_FUNCTION( tmp_called_name_33, tmp_args_name_33, tmp_kw_name_33 );
            Py_DECREF( tmp_called_name_33 );
            Py_DECREF( tmp_args_name_33 );
            if ( tmp_assign_source_139 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_51;
            }
            assert( tmp_class_creation_17__prepared == NULL );
            tmp_class_creation_17__prepared = tmp_assign_source_139;
        }
        {
            nuitka_bool tmp_condition_result_102;
            PyObject *tmp_operand_name_17;
            PyObject *tmp_source_name_67;
            CHECK_OBJECT( tmp_class_creation_17__prepared );
            tmp_source_name_67 = tmp_class_creation_17__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_67, const_str_plain___getitem__ );
            tmp_operand_name_17 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_51;
            }
            tmp_condition_result_102 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_102 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_68;
            }
            else
            {
                goto branch_no_68;
            }
            branch_yes_68:;
            {
                PyObject *tmp_raise_type_17;
                PyObject *tmp_raise_value_17;
                PyObject *tmp_left_name_17;
                PyObject *tmp_right_name_17;
                PyObject *tmp_tuple_element_66;
                PyObject *tmp_getattr_target_17;
                PyObject *tmp_getattr_attr_17;
                PyObject *tmp_getattr_default_17;
                PyObject *tmp_source_name_68;
                PyObject *tmp_type_arg_34;
                tmp_raise_type_17 = PyExc_TypeError;
                tmp_left_name_17 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_17__metaclass );
                tmp_getattr_target_17 = tmp_class_creation_17__metaclass;
                tmp_getattr_attr_17 = const_str_plain___name__;
                tmp_getattr_default_17 = const_str_angle_metaclass;
                tmp_tuple_element_66 = BUILTIN_GETATTR( tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17 );
                if ( tmp_tuple_element_66 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 250;

                    goto try_except_handler_51;
                }
                tmp_right_name_17 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_17, 0, tmp_tuple_element_66 );
                CHECK_OBJECT( tmp_class_creation_17__prepared );
                tmp_type_arg_34 = tmp_class_creation_17__prepared;
                tmp_source_name_68 = BUILTIN_TYPE1( tmp_type_arg_34 );
                assert( !(tmp_source_name_68 == NULL) );
                tmp_tuple_element_66 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_68 );
                if ( tmp_tuple_element_66 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_17 );

                    exception_lineno = 250;

                    goto try_except_handler_51;
                }
                PyTuple_SET_ITEM( tmp_right_name_17, 1, tmp_tuple_element_66 );
                tmp_raise_value_17 = BINARY_OPERATION_REMAINDER( tmp_left_name_17, tmp_right_name_17 );
                Py_DECREF( tmp_right_name_17 );
                if ( tmp_raise_value_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 250;

                    goto try_except_handler_51;
                }
                exception_type = tmp_raise_type_17;
                Py_INCREF( tmp_raise_type_17 );
                exception_value = tmp_raise_value_17;
                exception_lineno = 250;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_51;
            }
            branch_no_68:;
        }
        goto branch_end_67;
        branch_no_67:;
        {
            PyObject *tmp_assign_source_140;
            tmp_assign_source_140 = PyDict_New();
            assert( tmp_class_creation_17__prepared == NULL );
            tmp_class_creation_17__prepared = tmp_assign_source_140;
        }
        branch_end_67:;
    }
    {
        PyObject *tmp_assign_source_141;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT( tmp_class_creation_17__prepared );
            tmp_set_locals_17 = tmp_class_creation_17__prepared;
            locals_PIL$ImageFilter_250 = tmp_set_locals_17;
            Py_INCREF( tmp_set_locals_17 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_250, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_53;
        }
        tmp_dictset_value = const_str_plain_EDGE_ENHANCE_MORE;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_250, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;

            goto try_except_handler_53;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_2e892cabfe9a3181cfca6a2267122082_16, codeobj_2e892cabfe9a3181cfca6a2267122082, module_PIL$ImageFilter, sizeof(void *) );
        frame_2e892cabfe9a3181cfca6a2267122082_16 = cache_frame_2e892cabfe9a3181cfca6a2267122082_16;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_2e892cabfe9a3181cfca6a2267122082_16 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_2e892cabfe9a3181cfca6a2267122082_16 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_digest_bdf7b7c270cc9aaae166c2692fcee03b;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_250, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 251;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        tmp_dictset_value = const_tuple_a7195b1f80dd04b75072438f2f6e45c7_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_250, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 252;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_2e892cabfe9a3181cfca6a2267122082_16 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_2e892cabfe9a3181cfca6a2267122082_16 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_2e892cabfe9a3181cfca6a2267122082_16, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_2e892cabfe9a3181cfca6a2267122082_16->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_2e892cabfe9a3181cfca6a2267122082_16, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_2e892cabfe9a3181cfca6a2267122082_16,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame.
        if ( frame_2e892cabfe9a3181cfca6a2267122082_16 == cache_frame_2e892cabfe9a3181cfca6a2267122082_16 )
        {
            Py_DECREF( frame_2e892cabfe9a3181cfca6a2267122082_16 );
        }
        cache_frame_2e892cabfe9a3181cfca6a2267122082_16 = NULL;

        assertFrameObject( frame_2e892cabfe9a3181cfca6a2267122082_16 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_53;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_103;
            PyObject *tmp_compexpr_left_18;
            PyObject *tmp_compexpr_right_18;
            CHECK_OBJECT( tmp_class_creation_17__bases );
            tmp_compexpr_left_18 = tmp_class_creation_17__bases;
            CHECK_OBJECT( tmp_class_creation_17__bases_orig );
            tmp_compexpr_right_18 = tmp_class_creation_17__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_18, tmp_compexpr_right_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_53;
            }
            tmp_condition_result_103 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_103 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_69;
            }
            else
            {
                goto branch_no_69;
            }
            branch_yes_69:;
            CHECK_OBJECT( tmp_class_creation_17__bases_orig );
            tmp_dictset_value = tmp_class_creation_17__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_250, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_53;
            }
            branch_no_69:;
        }
        {
            PyObject *tmp_assign_source_142;
            PyObject *tmp_called_name_34;
            PyObject *tmp_args_name_34;
            PyObject *tmp_tuple_element_67;
            PyObject *tmp_kw_name_34;
            CHECK_OBJECT( tmp_class_creation_17__metaclass );
            tmp_called_name_34 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_67 = const_str_plain_EDGE_ENHANCE_MORE;
            tmp_args_name_34 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_67 );
            PyTuple_SET_ITEM( tmp_args_name_34, 0, tmp_tuple_element_67 );
            CHECK_OBJECT( tmp_class_creation_17__bases );
            tmp_tuple_element_67 = tmp_class_creation_17__bases;
            Py_INCREF( tmp_tuple_element_67 );
            PyTuple_SET_ITEM( tmp_args_name_34, 1, tmp_tuple_element_67 );
            tmp_tuple_element_67 = locals_PIL$ImageFilter_250;
            Py_INCREF( tmp_tuple_element_67 );
            PyTuple_SET_ITEM( tmp_args_name_34, 2, tmp_tuple_element_67 );
            CHECK_OBJECT( tmp_class_creation_17__class_decl_dict );
            tmp_kw_name_34 = tmp_class_creation_17__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 250;
            tmp_assign_source_142 = CALL_FUNCTION( tmp_called_name_34, tmp_args_name_34, tmp_kw_name_34 );
            Py_DECREF( tmp_args_name_34 );
            if ( tmp_assign_source_142 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 250;

                goto try_except_handler_53;
            }
            assert( outline_16_var___class__ == NULL );
            outline_16_var___class__ = tmp_assign_source_142;
        }
        CHECK_OBJECT( outline_16_var___class__ );
        tmp_assign_source_141 = outline_16_var___class__;
        Py_INCREF( tmp_assign_source_141 );
        goto try_return_handler_53;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_53:;
        Py_DECREF( locals_PIL$ImageFilter_250 );
        locals_PIL$ImageFilter_250 = NULL;
        goto try_return_handler_52;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_250 );
        locals_PIL$ImageFilter_250 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto try_except_handler_52;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_52:;
        CHECK_OBJECT( (PyObject *)outline_16_var___class__ );
        Py_DECREF( outline_16_var___class__ );
        outline_16_var___class__ = NULL;

        goto outline_result_17;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto outline_exception_17;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_17:;
        exception_lineno = 250;
        goto try_except_handler_51;
        outline_result_17:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_EDGE_ENHANCE_MORE, tmp_assign_source_141 );
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_keeper_lineno_53 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_17__bases_orig );
    tmp_class_creation_17__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    Py_XDECREF( tmp_class_creation_17__class_decl_dict );
    tmp_class_creation_17__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_17__prepared );
    tmp_class_creation_17__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_53;
    exception_value = exception_keeper_value_53;
    exception_tb = exception_keeper_tb_53;
    exception_lineno = exception_keeper_lineno_53;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__bases_orig );
    Py_DECREF( tmp_class_creation_17__bases_orig );
    tmp_class_creation_17__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__bases );
    Py_DECREF( tmp_class_creation_17__bases );
    tmp_class_creation_17__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__class_decl_dict );
    Py_DECREF( tmp_class_creation_17__class_decl_dict );
    tmp_class_creation_17__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__metaclass );
    Py_DECREF( tmp_class_creation_17__metaclass );
    tmp_class_creation_17__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_17__prepared );
    Py_DECREF( tmp_class_creation_17__prepared );
    tmp_class_creation_17__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_tuple_element_68;
        PyObject *tmp_mvar_value_19;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_19 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 259;

            goto try_except_handler_54;
        }

        tmp_tuple_element_68 = tmp_mvar_value_19;
        tmp_assign_source_143 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_68 );
        PyTuple_SET_ITEM( tmp_assign_source_143, 0, tmp_tuple_element_68 );
        assert( tmp_class_creation_18__bases_orig == NULL );
        tmp_class_creation_18__bases_orig = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT( tmp_class_creation_18__bases_orig );
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF( tmp_dircall_arg1_18 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_144 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_144 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        assert( tmp_class_creation_18__bases == NULL );
        tmp_class_creation_18__bases = tmp_assign_source_144;
    }
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = PyDict_New();
        assert( tmp_class_creation_18__class_decl_dict == NULL );
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_145;
    }
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_metaclass_name_18;
        nuitka_bool tmp_condition_result_104;
        PyObject *tmp_key_name_52;
        PyObject *tmp_dict_name_52;
        PyObject *tmp_dict_name_53;
        PyObject *tmp_key_name_53;
        nuitka_bool tmp_condition_result_105;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_subscribed_name_18;
        PyObject *tmp_subscript_name_18;
        PyObject *tmp_bases_name_18;
        tmp_key_name_52 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
        tmp_dict_name_52 = tmp_class_creation_18__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_52, tmp_key_name_52 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        tmp_condition_result_104 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_104 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_35;
        }
        else
        {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
        tmp_dict_name_53 = tmp_class_creation_18__class_decl_dict;
        tmp_key_name_53 = const_str_plain_metaclass;
        tmp_metaclass_name_18 = DICT_GET_ITEM( tmp_dict_name_53, tmp_key_name_53 );
        if ( tmp_metaclass_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT( tmp_class_creation_18__bases );
        tmp_truth_name_18 = CHECK_IF_TRUE( tmp_class_creation_18__bases );
        if ( tmp_truth_name_18 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        tmp_condition_result_105 = tmp_truth_name_18 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_105 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_36;
        }
        else
        {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT( tmp_class_creation_18__bases );
        tmp_subscribed_name_18 = tmp_class_creation_18__bases;
        tmp_subscript_name_18 = const_int_0;
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_18, tmp_subscript_name_18, 0 );
        if ( tmp_type_arg_35 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        tmp_metaclass_name_18 = BUILTIN_TYPE1( tmp_type_arg_35 );
        Py_DECREF( tmp_type_arg_35 );
        if ( tmp_metaclass_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_name_18 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_18 );
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT( tmp_class_creation_18__bases );
        tmp_bases_name_18 = tmp_class_creation_18__bases;
        tmp_assign_source_146 = SELECT_METACLASS( tmp_metaclass_name_18, tmp_bases_name_18 );
        Py_DECREF( tmp_metaclass_name_18 );
        if ( tmp_assign_source_146 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        assert( tmp_class_creation_18__metaclass == NULL );
        tmp_class_creation_18__metaclass = tmp_assign_source_146;
    }
    {
        nuitka_bool tmp_condition_result_106;
        PyObject *tmp_key_name_54;
        PyObject *tmp_dict_name_54;
        tmp_key_name_54 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
        tmp_dict_name_54 = tmp_class_creation_18__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_54, tmp_key_name_54 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        tmp_condition_result_106 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_106 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_70;
        }
        else
        {
            goto branch_no_70;
        }
        branch_yes_70:;
        CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_54;
        }
        branch_no_70:;
    }
    {
        nuitka_bool tmp_condition_result_107;
        PyObject *tmp_source_name_69;
        CHECK_OBJECT( tmp_class_creation_18__metaclass );
        tmp_source_name_69 = tmp_class_creation_18__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_69, const_str_plain___prepare__ );
        tmp_condition_result_107 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_107 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_71;
        }
        else
        {
            goto branch_no_71;
        }
        branch_yes_71:;
        {
            PyObject *tmp_assign_source_147;
            PyObject *tmp_called_name_35;
            PyObject *tmp_source_name_70;
            PyObject *tmp_args_name_35;
            PyObject *tmp_tuple_element_69;
            PyObject *tmp_kw_name_35;
            CHECK_OBJECT( tmp_class_creation_18__metaclass );
            tmp_source_name_70 = tmp_class_creation_18__metaclass;
            tmp_called_name_35 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain___prepare__ );
            if ( tmp_called_name_35 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_54;
            }
            tmp_tuple_element_69 = const_str_plain_EMBOSS;
            tmp_args_name_35 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_69 );
            PyTuple_SET_ITEM( tmp_args_name_35, 0, tmp_tuple_element_69 );
            CHECK_OBJECT( tmp_class_creation_18__bases );
            tmp_tuple_element_69 = tmp_class_creation_18__bases;
            Py_INCREF( tmp_tuple_element_69 );
            PyTuple_SET_ITEM( tmp_args_name_35, 1, tmp_tuple_element_69 );
            CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
            tmp_kw_name_35 = tmp_class_creation_18__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 259;
            tmp_assign_source_147 = CALL_FUNCTION( tmp_called_name_35, tmp_args_name_35, tmp_kw_name_35 );
            Py_DECREF( tmp_called_name_35 );
            Py_DECREF( tmp_args_name_35 );
            if ( tmp_assign_source_147 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_54;
            }
            assert( tmp_class_creation_18__prepared == NULL );
            tmp_class_creation_18__prepared = tmp_assign_source_147;
        }
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_operand_name_18;
            PyObject *tmp_source_name_71;
            CHECK_OBJECT( tmp_class_creation_18__prepared );
            tmp_source_name_71 = tmp_class_creation_18__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_71, const_str_plain___getitem__ );
            tmp_operand_name_18 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_54;
            }
            tmp_condition_result_108 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_108 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_72;
            }
            else
            {
                goto branch_no_72;
            }
            branch_yes_72:;
            {
                PyObject *tmp_raise_type_18;
                PyObject *tmp_raise_value_18;
                PyObject *tmp_left_name_18;
                PyObject *tmp_right_name_18;
                PyObject *tmp_tuple_element_70;
                PyObject *tmp_getattr_target_18;
                PyObject *tmp_getattr_attr_18;
                PyObject *tmp_getattr_default_18;
                PyObject *tmp_source_name_72;
                PyObject *tmp_type_arg_36;
                tmp_raise_type_18 = PyExc_TypeError;
                tmp_left_name_18 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_18__metaclass );
                tmp_getattr_target_18 = tmp_class_creation_18__metaclass;
                tmp_getattr_attr_18 = const_str_plain___name__;
                tmp_getattr_default_18 = const_str_angle_metaclass;
                tmp_tuple_element_70 = BUILTIN_GETATTR( tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18 );
                if ( tmp_tuple_element_70 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 259;

                    goto try_except_handler_54;
                }
                tmp_right_name_18 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_18, 0, tmp_tuple_element_70 );
                CHECK_OBJECT( tmp_class_creation_18__prepared );
                tmp_type_arg_36 = tmp_class_creation_18__prepared;
                tmp_source_name_72 = BUILTIN_TYPE1( tmp_type_arg_36 );
                assert( !(tmp_source_name_72 == NULL) );
                tmp_tuple_element_70 = LOOKUP_ATTRIBUTE( tmp_source_name_72, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_72 );
                if ( tmp_tuple_element_70 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_18 );

                    exception_lineno = 259;

                    goto try_except_handler_54;
                }
                PyTuple_SET_ITEM( tmp_right_name_18, 1, tmp_tuple_element_70 );
                tmp_raise_value_18 = BINARY_OPERATION_REMAINDER( tmp_left_name_18, tmp_right_name_18 );
                Py_DECREF( tmp_right_name_18 );
                if ( tmp_raise_value_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 259;

                    goto try_except_handler_54;
                }
                exception_type = tmp_raise_type_18;
                Py_INCREF( tmp_raise_type_18 );
                exception_value = tmp_raise_value_18;
                exception_lineno = 259;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_54;
            }
            branch_no_72:;
        }
        goto branch_end_71;
        branch_no_71:;
        {
            PyObject *tmp_assign_source_148;
            tmp_assign_source_148 = PyDict_New();
            assert( tmp_class_creation_18__prepared == NULL );
            tmp_class_creation_18__prepared = tmp_assign_source_148;
        }
        branch_end_71:;
    }
    {
        PyObject *tmp_assign_source_149;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT( tmp_class_creation_18__prepared );
            tmp_set_locals_18 = tmp_class_creation_18__prepared;
            locals_PIL$ImageFilter_259 = tmp_set_locals_18;
            Py_INCREF( tmp_set_locals_18 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_259, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_56;
        }
        tmp_dictset_value = const_str_plain_EMBOSS;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_259, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;

            goto try_except_handler_56;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_182b80444fd463d65783e55f79c5b45c_17, codeobj_182b80444fd463d65783e55f79c5b45c, module_PIL$ImageFilter, sizeof(void *) );
        frame_182b80444fd463d65783e55f79c5b45c_17 = cache_frame_182b80444fd463d65783e55f79c5b45c_17;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_182b80444fd463d65783e55f79c5b45c_17 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_182b80444fd463d65783e55f79c5b45c_17 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Emboss;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_259, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        tmp_dictset_value = const_tuple_47caae1f57ffb2023780891e9eb87d19_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_259, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 261;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_182b80444fd463d65783e55f79c5b45c_17 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_182b80444fd463d65783e55f79c5b45c_17 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_182b80444fd463d65783e55f79c5b45c_17, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_182b80444fd463d65783e55f79c5b45c_17->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_182b80444fd463d65783e55f79c5b45c_17, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_182b80444fd463d65783e55f79c5b45c_17,
            type_description_2,
            outline_17_var___class__
        );


        // Release cached frame.
        if ( frame_182b80444fd463d65783e55f79c5b45c_17 == cache_frame_182b80444fd463d65783e55f79c5b45c_17 )
        {
            Py_DECREF( frame_182b80444fd463d65783e55f79c5b45c_17 );
        }
        cache_frame_182b80444fd463d65783e55f79c5b45c_17 = NULL;

        assertFrameObject( frame_182b80444fd463d65783e55f79c5b45c_17 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_56;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_109;
            PyObject *tmp_compexpr_left_19;
            PyObject *tmp_compexpr_right_19;
            CHECK_OBJECT( tmp_class_creation_18__bases );
            tmp_compexpr_left_19 = tmp_class_creation_18__bases;
            CHECK_OBJECT( tmp_class_creation_18__bases_orig );
            tmp_compexpr_right_19 = tmp_class_creation_18__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_19, tmp_compexpr_right_19 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_56;
            }
            tmp_condition_result_109 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_109 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_73;
            }
            else
            {
                goto branch_no_73;
            }
            branch_yes_73:;
            CHECK_OBJECT( tmp_class_creation_18__bases_orig );
            tmp_dictset_value = tmp_class_creation_18__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_259, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_56;
            }
            branch_no_73:;
        }
        {
            PyObject *tmp_assign_source_150;
            PyObject *tmp_called_name_36;
            PyObject *tmp_args_name_36;
            PyObject *tmp_tuple_element_71;
            PyObject *tmp_kw_name_36;
            CHECK_OBJECT( tmp_class_creation_18__metaclass );
            tmp_called_name_36 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_71 = const_str_plain_EMBOSS;
            tmp_args_name_36 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_71 );
            PyTuple_SET_ITEM( tmp_args_name_36, 0, tmp_tuple_element_71 );
            CHECK_OBJECT( tmp_class_creation_18__bases );
            tmp_tuple_element_71 = tmp_class_creation_18__bases;
            Py_INCREF( tmp_tuple_element_71 );
            PyTuple_SET_ITEM( tmp_args_name_36, 1, tmp_tuple_element_71 );
            tmp_tuple_element_71 = locals_PIL$ImageFilter_259;
            Py_INCREF( tmp_tuple_element_71 );
            PyTuple_SET_ITEM( tmp_args_name_36, 2, tmp_tuple_element_71 );
            CHECK_OBJECT( tmp_class_creation_18__class_decl_dict );
            tmp_kw_name_36 = tmp_class_creation_18__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 259;
            tmp_assign_source_150 = CALL_FUNCTION( tmp_called_name_36, tmp_args_name_36, tmp_kw_name_36 );
            Py_DECREF( tmp_args_name_36 );
            if ( tmp_assign_source_150 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 259;

                goto try_except_handler_56;
            }
            assert( outline_17_var___class__ == NULL );
            outline_17_var___class__ = tmp_assign_source_150;
        }
        CHECK_OBJECT( outline_17_var___class__ );
        tmp_assign_source_149 = outline_17_var___class__;
        Py_INCREF( tmp_assign_source_149 );
        goto try_return_handler_56;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_56:;
        Py_DECREF( locals_PIL$ImageFilter_259 );
        locals_PIL$ImageFilter_259 = NULL;
        goto try_return_handler_55;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_259 );
        locals_PIL$ImageFilter_259 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto try_except_handler_55;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_55:;
        CHECK_OBJECT( (PyObject *)outline_17_var___class__ );
        Py_DECREF( outline_17_var___class__ );
        outline_17_var___class__ = NULL;

        goto outline_result_18;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto outline_exception_18;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_18:;
        exception_lineno = 259;
        goto try_except_handler_54;
        outline_result_18:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_EMBOSS, tmp_assign_source_149 );
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_54:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_keeper_lineno_56 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_18__bases_orig );
    tmp_class_creation_18__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    Py_XDECREF( tmp_class_creation_18__class_decl_dict );
    tmp_class_creation_18__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_18__prepared );
    tmp_class_creation_18__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_56;
    exception_value = exception_keeper_value_56;
    exception_tb = exception_keeper_tb_56;
    exception_lineno = exception_keeper_lineno_56;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__bases_orig );
    Py_DECREF( tmp_class_creation_18__bases_orig );
    tmp_class_creation_18__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__bases );
    Py_DECREF( tmp_class_creation_18__bases );
    tmp_class_creation_18__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__class_decl_dict );
    Py_DECREF( tmp_class_creation_18__class_decl_dict );
    tmp_class_creation_18__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__metaclass );
    Py_DECREF( tmp_class_creation_18__metaclass );
    tmp_class_creation_18__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_18__prepared );
    Py_DECREF( tmp_class_creation_18__prepared );
    tmp_class_creation_18__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_mvar_value_20;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_20 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 268;

            goto try_except_handler_57;
        }

        tmp_tuple_element_72 = tmp_mvar_value_20;
        tmp_assign_source_151 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_72 );
        PyTuple_SET_ITEM( tmp_assign_source_151, 0, tmp_tuple_element_72 );
        assert( tmp_class_creation_19__bases_orig == NULL );
        tmp_class_creation_19__bases_orig = tmp_assign_source_151;
    }
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT( tmp_class_creation_19__bases_orig );
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF( tmp_dircall_arg1_19 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_152 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_152 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        assert( tmp_class_creation_19__bases == NULL );
        tmp_class_creation_19__bases = tmp_assign_source_152;
    }
    {
        PyObject *tmp_assign_source_153;
        tmp_assign_source_153 = PyDict_New();
        assert( tmp_class_creation_19__class_decl_dict == NULL );
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_153;
    }
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_metaclass_name_19;
        nuitka_bool tmp_condition_result_110;
        PyObject *tmp_key_name_55;
        PyObject *tmp_dict_name_55;
        PyObject *tmp_dict_name_56;
        PyObject *tmp_key_name_56;
        nuitka_bool tmp_condition_result_111;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_subscribed_name_19;
        PyObject *tmp_subscript_name_19;
        PyObject *tmp_bases_name_19;
        tmp_key_name_55 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
        tmp_dict_name_55 = tmp_class_creation_19__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_55, tmp_key_name_55 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        tmp_condition_result_110 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_110 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_37;
        }
        else
        {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
        tmp_dict_name_56 = tmp_class_creation_19__class_decl_dict;
        tmp_key_name_56 = const_str_plain_metaclass;
        tmp_metaclass_name_19 = DICT_GET_ITEM( tmp_dict_name_56, tmp_key_name_56 );
        if ( tmp_metaclass_name_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT( tmp_class_creation_19__bases );
        tmp_truth_name_19 = CHECK_IF_TRUE( tmp_class_creation_19__bases );
        if ( tmp_truth_name_19 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        tmp_condition_result_111 = tmp_truth_name_19 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_111 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_38;
        }
        else
        {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT( tmp_class_creation_19__bases );
        tmp_subscribed_name_19 = tmp_class_creation_19__bases;
        tmp_subscript_name_19 = const_int_0;
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_19, tmp_subscript_name_19, 0 );
        if ( tmp_type_arg_37 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        tmp_metaclass_name_19 = BUILTIN_TYPE1( tmp_type_arg_37 );
        Py_DECREF( tmp_type_arg_37 );
        if ( tmp_metaclass_name_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_name_19 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_19 );
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT( tmp_class_creation_19__bases );
        tmp_bases_name_19 = tmp_class_creation_19__bases;
        tmp_assign_source_154 = SELECT_METACLASS( tmp_metaclass_name_19, tmp_bases_name_19 );
        Py_DECREF( tmp_metaclass_name_19 );
        if ( tmp_assign_source_154 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        assert( tmp_class_creation_19__metaclass == NULL );
        tmp_class_creation_19__metaclass = tmp_assign_source_154;
    }
    {
        nuitka_bool tmp_condition_result_112;
        PyObject *tmp_key_name_57;
        PyObject *tmp_dict_name_57;
        tmp_key_name_57 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
        tmp_dict_name_57 = tmp_class_creation_19__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_57, tmp_key_name_57 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        tmp_condition_result_112 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_112 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_74;
        }
        else
        {
            goto branch_no_74;
        }
        branch_yes_74:;
        CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_57;
        }
        branch_no_74:;
    }
    {
        nuitka_bool tmp_condition_result_113;
        PyObject *tmp_source_name_73;
        CHECK_OBJECT( tmp_class_creation_19__metaclass );
        tmp_source_name_73 = tmp_class_creation_19__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_73, const_str_plain___prepare__ );
        tmp_condition_result_113 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_113 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_75;
        }
        else
        {
            goto branch_no_75;
        }
        branch_yes_75:;
        {
            PyObject *tmp_assign_source_155;
            PyObject *tmp_called_name_37;
            PyObject *tmp_source_name_74;
            PyObject *tmp_args_name_37;
            PyObject *tmp_tuple_element_73;
            PyObject *tmp_kw_name_37;
            CHECK_OBJECT( tmp_class_creation_19__metaclass );
            tmp_source_name_74 = tmp_class_creation_19__metaclass;
            tmp_called_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_74, const_str_plain___prepare__ );
            if ( tmp_called_name_37 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_57;
            }
            tmp_tuple_element_73 = const_str_plain_FIND_EDGES;
            tmp_args_name_37 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_73 );
            PyTuple_SET_ITEM( tmp_args_name_37, 0, tmp_tuple_element_73 );
            CHECK_OBJECT( tmp_class_creation_19__bases );
            tmp_tuple_element_73 = tmp_class_creation_19__bases;
            Py_INCREF( tmp_tuple_element_73 );
            PyTuple_SET_ITEM( tmp_args_name_37, 1, tmp_tuple_element_73 );
            CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
            tmp_kw_name_37 = tmp_class_creation_19__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 268;
            tmp_assign_source_155 = CALL_FUNCTION( tmp_called_name_37, tmp_args_name_37, tmp_kw_name_37 );
            Py_DECREF( tmp_called_name_37 );
            Py_DECREF( tmp_args_name_37 );
            if ( tmp_assign_source_155 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_57;
            }
            assert( tmp_class_creation_19__prepared == NULL );
            tmp_class_creation_19__prepared = tmp_assign_source_155;
        }
        {
            nuitka_bool tmp_condition_result_114;
            PyObject *tmp_operand_name_19;
            PyObject *tmp_source_name_75;
            CHECK_OBJECT( tmp_class_creation_19__prepared );
            tmp_source_name_75 = tmp_class_creation_19__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_75, const_str_plain___getitem__ );
            tmp_operand_name_19 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_19 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_57;
            }
            tmp_condition_result_114 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_114 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_76;
            }
            else
            {
                goto branch_no_76;
            }
            branch_yes_76:;
            {
                PyObject *tmp_raise_type_19;
                PyObject *tmp_raise_value_19;
                PyObject *tmp_left_name_19;
                PyObject *tmp_right_name_19;
                PyObject *tmp_tuple_element_74;
                PyObject *tmp_getattr_target_19;
                PyObject *tmp_getattr_attr_19;
                PyObject *tmp_getattr_default_19;
                PyObject *tmp_source_name_76;
                PyObject *tmp_type_arg_38;
                tmp_raise_type_19 = PyExc_TypeError;
                tmp_left_name_19 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_19__metaclass );
                tmp_getattr_target_19 = tmp_class_creation_19__metaclass;
                tmp_getattr_attr_19 = const_str_plain___name__;
                tmp_getattr_default_19 = const_str_angle_metaclass;
                tmp_tuple_element_74 = BUILTIN_GETATTR( tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19 );
                if ( tmp_tuple_element_74 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 268;

                    goto try_except_handler_57;
                }
                tmp_right_name_19 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_19, 0, tmp_tuple_element_74 );
                CHECK_OBJECT( tmp_class_creation_19__prepared );
                tmp_type_arg_38 = tmp_class_creation_19__prepared;
                tmp_source_name_76 = BUILTIN_TYPE1( tmp_type_arg_38 );
                assert( !(tmp_source_name_76 == NULL) );
                tmp_tuple_element_74 = LOOKUP_ATTRIBUTE( tmp_source_name_76, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_76 );
                if ( tmp_tuple_element_74 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_19 );

                    exception_lineno = 268;

                    goto try_except_handler_57;
                }
                PyTuple_SET_ITEM( tmp_right_name_19, 1, tmp_tuple_element_74 );
                tmp_raise_value_19 = BINARY_OPERATION_REMAINDER( tmp_left_name_19, tmp_right_name_19 );
                Py_DECREF( tmp_right_name_19 );
                if ( tmp_raise_value_19 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 268;

                    goto try_except_handler_57;
                }
                exception_type = tmp_raise_type_19;
                Py_INCREF( tmp_raise_type_19 );
                exception_value = tmp_raise_value_19;
                exception_lineno = 268;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_57;
            }
            branch_no_76:;
        }
        goto branch_end_75;
        branch_no_75:;
        {
            PyObject *tmp_assign_source_156;
            tmp_assign_source_156 = PyDict_New();
            assert( tmp_class_creation_19__prepared == NULL );
            tmp_class_creation_19__prepared = tmp_assign_source_156;
        }
        branch_end_75:;
    }
    {
        PyObject *tmp_assign_source_157;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT( tmp_class_creation_19__prepared );
            tmp_set_locals_19 = tmp_class_creation_19__prepared;
            locals_PIL$ImageFilter_268 = tmp_set_locals_19;
            Py_INCREF( tmp_set_locals_19 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_268, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_59;
        }
        tmp_dictset_value = const_str_plain_FIND_EDGES;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_268, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;

            goto try_except_handler_59;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_ab9b3a7a0657d006b795a8fdddc781ce_18, codeobj_ab9b3a7a0657d006b795a8fdddc781ce, module_PIL$ImageFilter, sizeof(void *) );
        frame_ab9b3a7a0657d006b795a8fdddc781ce_18 = cache_frame_ab9b3a7a0657d006b795a8fdddc781ce_18;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_digest_e68099e6f7452c9074c97a4e07393094;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_268, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 269;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        tmp_dictset_value = const_tuple_3ade3b84924198dad5e0bc3568ee92df_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_268, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_ab9b3a7a0657d006b795a8fdddc781ce_18, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_ab9b3a7a0657d006b795a8fdddc781ce_18->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_ab9b3a7a0657d006b795a8fdddc781ce_18, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_ab9b3a7a0657d006b795a8fdddc781ce_18,
            type_description_2,
            outline_18_var___class__
        );


        // Release cached frame.
        if ( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 == cache_frame_ab9b3a7a0657d006b795a8fdddc781ce_18 )
        {
            Py_DECREF( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 );
        }
        cache_frame_ab9b3a7a0657d006b795a8fdddc781ce_18 = NULL;

        assertFrameObject( frame_ab9b3a7a0657d006b795a8fdddc781ce_18 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_59;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_115;
            PyObject *tmp_compexpr_left_20;
            PyObject *tmp_compexpr_right_20;
            CHECK_OBJECT( tmp_class_creation_19__bases );
            tmp_compexpr_left_20 = tmp_class_creation_19__bases;
            CHECK_OBJECT( tmp_class_creation_19__bases_orig );
            tmp_compexpr_right_20 = tmp_class_creation_19__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_20, tmp_compexpr_right_20 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_59;
            }
            tmp_condition_result_115 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_115 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_77;
            }
            else
            {
                goto branch_no_77;
            }
            branch_yes_77:;
            CHECK_OBJECT( tmp_class_creation_19__bases_orig );
            tmp_dictset_value = tmp_class_creation_19__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_268, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_59;
            }
            branch_no_77:;
        }
        {
            PyObject *tmp_assign_source_158;
            PyObject *tmp_called_name_38;
            PyObject *tmp_args_name_38;
            PyObject *tmp_tuple_element_75;
            PyObject *tmp_kw_name_38;
            CHECK_OBJECT( tmp_class_creation_19__metaclass );
            tmp_called_name_38 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_75 = const_str_plain_FIND_EDGES;
            tmp_args_name_38 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_75 );
            PyTuple_SET_ITEM( tmp_args_name_38, 0, tmp_tuple_element_75 );
            CHECK_OBJECT( tmp_class_creation_19__bases );
            tmp_tuple_element_75 = tmp_class_creation_19__bases;
            Py_INCREF( tmp_tuple_element_75 );
            PyTuple_SET_ITEM( tmp_args_name_38, 1, tmp_tuple_element_75 );
            tmp_tuple_element_75 = locals_PIL$ImageFilter_268;
            Py_INCREF( tmp_tuple_element_75 );
            PyTuple_SET_ITEM( tmp_args_name_38, 2, tmp_tuple_element_75 );
            CHECK_OBJECT( tmp_class_creation_19__class_decl_dict );
            tmp_kw_name_38 = tmp_class_creation_19__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 268;
            tmp_assign_source_158 = CALL_FUNCTION( tmp_called_name_38, tmp_args_name_38, tmp_kw_name_38 );
            Py_DECREF( tmp_args_name_38 );
            if ( tmp_assign_source_158 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 268;

                goto try_except_handler_59;
            }
            assert( outline_18_var___class__ == NULL );
            outline_18_var___class__ = tmp_assign_source_158;
        }
        CHECK_OBJECT( outline_18_var___class__ );
        tmp_assign_source_157 = outline_18_var___class__;
        Py_INCREF( tmp_assign_source_157 );
        goto try_return_handler_59;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_59:;
        Py_DECREF( locals_PIL$ImageFilter_268 );
        locals_PIL$ImageFilter_268 = NULL;
        goto try_return_handler_58;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_268 );
        locals_PIL$ImageFilter_268 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto try_except_handler_58;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_58:;
        CHECK_OBJECT( (PyObject *)outline_18_var___class__ );
        Py_DECREF( outline_18_var___class__ );
        outline_18_var___class__ = NULL;

        goto outline_result_19;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto outline_exception_19;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_19:;
        exception_lineno = 268;
        goto try_except_handler_57;
        outline_result_19:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_FIND_EDGES, tmp_assign_source_157 );
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_keeper_lineno_59 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_19__bases_orig );
    tmp_class_creation_19__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    Py_XDECREF( tmp_class_creation_19__class_decl_dict );
    tmp_class_creation_19__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_19__prepared );
    tmp_class_creation_19__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_59;
    exception_value = exception_keeper_value_59;
    exception_tb = exception_keeper_tb_59;
    exception_lineno = exception_keeper_lineno_59;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__bases_orig );
    Py_DECREF( tmp_class_creation_19__bases_orig );
    tmp_class_creation_19__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__bases );
    Py_DECREF( tmp_class_creation_19__bases );
    tmp_class_creation_19__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__class_decl_dict );
    Py_DECREF( tmp_class_creation_19__class_decl_dict );
    tmp_class_creation_19__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__metaclass );
    Py_DECREF( tmp_class_creation_19__metaclass );
    tmp_class_creation_19__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_19__prepared );
    Py_DECREF( tmp_class_creation_19__prepared );
    tmp_class_creation_19__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_mvar_value_21;
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_21 == NULL ))
        {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_21 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 277;

            goto try_except_handler_60;
        }

        tmp_tuple_element_76 = tmp_mvar_value_21;
        tmp_assign_source_159 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_76 );
        PyTuple_SET_ITEM( tmp_assign_source_159, 0, tmp_tuple_element_76 );
        assert( tmp_class_creation_20__bases_orig == NULL );
        tmp_class_creation_20__bases_orig = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT( tmp_class_creation_20__bases_orig );
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF( tmp_dircall_arg1_20 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_160 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_160 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        assert( tmp_class_creation_20__bases == NULL );
        tmp_class_creation_20__bases = tmp_assign_source_160;
    }
    {
        PyObject *tmp_assign_source_161;
        tmp_assign_source_161 = PyDict_New();
        assert( tmp_class_creation_20__class_decl_dict == NULL );
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_161;
    }
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_metaclass_name_20;
        nuitka_bool tmp_condition_result_116;
        PyObject *tmp_key_name_58;
        PyObject *tmp_dict_name_58;
        PyObject *tmp_dict_name_59;
        PyObject *tmp_key_name_59;
        nuitka_bool tmp_condition_result_117;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_subscribed_name_20;
        PyObject *tmp_subscript_name_20;
        PyObject *tmp_bases_name_20;
        tmp_key_name_58 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
        tmp_dict_name_58 = tmp_class_creation_20__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_58, tmp_key_name_58 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        tmp_condition_result_116 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_116 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_39;
        }
        else
        {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
        tmp_dict_name_59 = tmp_class_creation_20__class_decl_dict;
        tmp_key_name_59 = const_str_plain_metaclass;
        tmp_metaclass_name_20 = DICT_GET_ITEM( tmp_dict_name_59, tmp_key_name_59 );
        if ( tmp_metaclass_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        goto condexpr_end_39;
        condexpr_false_39:;
        CHECK_OBJECT( tmp_class_creation_20__bases );
        tmp_truth_name_20 = CHECK_IF_TRUE( tmp_class_creation_20__bases );
        if ( tmp_truth_name_20 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        tmp_condition_result_117 = tmp_truth_name_20 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_117 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_40;
        }
        else
        {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT( tmp_class_creation_20__bases );
        tmp_subscribed_name_20 = tmp_class_creation_20__bases;
        tmp_subscript_name_20 = const_int_0;
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_20, tmp_subscript_name_20, 0 );
        if ( tmp_type_arg_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        tmp_metaclass_name_20 = BUILTIN_TYPE1( tmp_type_arg_39 );
        Py_DECREF( tmp_type_arg_39 );
        if ( tmp_metaclass_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_name_20 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_20 );
        condexpr_end_40:;
        condexpr_end_39:;
        CHECK_OBJECT( tmp_class_creation_20__bases );
        tmp_bases_name_20 = tmp_class_creation_20__bases;
        tmp_assign_source_162 = SELECT_METACLASS( tmp_metaclass_name_20, tmp_bases_name_20 );
        Py_DECREF( tmp_metaclass_name_20 );
        if ( tmp_assign_source_162 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        assert( tmp_class_creation_20__metaclass == NULL );
        tmp_class_creation_20__metaclass = tmp_assign_source_162;
    }
    {
        nuitka_bool tmp_condition_result_118;
        PyObject *tmp_key_name_60;
        PyObject *tmp_dict_name_60;
        tmp_key_name_60 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
        tmp_dict_name_60 = tmp_class_creation_20__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_60, tmp_key_name_60 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        tmp_condition_result_118 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_118 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_78;
        }
        else
        {
            goto branch_no_78;
        }
        branch_yes_78:;
        CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_60;
        }
        branch_no_78:;
    }
    {
        nuitka_bool tmp_condition_result_119;
        PyObject *tmp_source_name_77;
        CHECK_OBJECT( tmp_class_creation_20__metaclass );
        tmp_source_name_77 = tmp_class_creation_20__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_77, const_str_plain___prepare__ );
        tmp_condition_result_119 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_119 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_79;
        }
        else
        {
            goto branch_no_79;
        }
        branch_yes_79:;
        {
            PyObject *tmp_assign_source_163;
            PyObject *tmp_called_name_39;
            PyObject *tmp_source_name_78;
            PyObject *tmp_args_name_39;
            PyObject *tmp_tuple_element_77;
            PyObject *tmp_kw_name_39;
            CHECK_OBJECT( tmp_class_creation_20__metaclass );
            tmp_source_name_78 = tmp_class_creation_20__metaclass;
            tmp_called_name_39 = LOOKUP_ATTRIBUTE( tmp_source_name_78, const_str_plain___prepare__ );
            if ( tmp_called_name_39 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_60;
            }
            tmp_tuple_element_77 = const_str_plain_SHARPEN;
            tmp_args_name_39 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_77 );
            PyTuple_SET_ITEM( tmp_args_name_39, 0, tmp_tuple_element_77 );
            CHECK_OBJECT( tmp_class_creation_20__bases );
            tmp_tuple_element_77 = tmp_class_creation_20__bases;
            Py_INCREF( tmp_tuple_element_77 );
            PyTuple_SET_ITEM( tmp_args_name_39, 1, tmp_tuple_element_77 );
            CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
            tmp_kw_name_39 = tmp_class_creation_20__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 277;
            tmp_assign_source_163 = CALL_FUNCTION( tmp_called_name_39, tmp_args_name_39, tmp_kw_name_39 );
            Py_DECREF( tmp_called_name_39 );
            Py_DECREF( tmp_args_name_39 );
            if ( tmp_assign_source_163 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_60;
            }
            assert( tmp_class_creation_20__prepared == NULL );
            tmp_class_creation_20__prepared = tmp_assign_source_163;
        }
        {
            nuitka_bool tmp_condition_result_120;
            PyObject *tmp_operand_name_20;
            PyObject *tmp_source_name_79;
            CHECK_OBJECT( tmp_class_creation_20__prepared );
            tmp_source_name_79 = tmp_class_creation_20__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_79, const_str_plain___getitem__ );
            tmp_operand_name_20 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_20 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_60;
            }
            tmp_condition_result_120 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_120 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_80;
            }
            else
            {
                goto branch_no_80;
            }
            branch_yes_80:;
            {
                PyObject *tmp_raise_type_20;
                PyObject *tmp_raise_value_20;
                PyObject *tmp_left_name_20;
                PyObject *tmp_right_name_20;
                PyObject *tmp_tuple_element_78;
                PyObject *tmp_getattr_target_20;
                PyObject *tmp_getattr_attr_20;
                PyObject *tmp_getattr_default_20;
                PyObject *tmp_source_name_80;
                PyObject *tmp_type_arg_40;
                tmp_raise_type_20 = PyExc_TypeError;
                tmp_left_name_20 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_20__metaclass );
                tmp_getattr_target_20 = tmp_class_creation_20__metaclass;
                tmp_getattr_attr_20 = const_str_plain___name__;
                tmp_getattr_default_20 = const_str_angle_metaclass;
                tmp_tuple_element_78 = BUILTIN_GETATTR( tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20 );
                if ( tmp_tuple_element_78 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 277;

                    goto try_except_handler_60;
                }
                tmp_right_name_20 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_20, 0, tmp_tuple_element_78 );
                CHECK_OBJECT( tmp_class_creation_20__prepared );
                tmp_type_arg_40 = tmp_class_creation_20__prepared;
                tmp_source_name_80 = BUILTIN_TYPE1( tmp_type_arg_40 );
                assert( !(tmp_source_name_80 == NULL) );
                tmp_tuple_element_78 = LOOKUP_ATTRIBUTE( tmp_source_name_80, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_80 );
                if ( tmp_tuple_element_78 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_20 );

                    exception_lineno = 277;

                    goto try_except_handler_60;
                }
                PyTuple_SET_ITEM( tmp_right_name_20, 1, tmp_tuple_element_78 );
                tmp_raise_value_20 = BINARY_OPERATION_REMAINDER( tmp_left_name_20, tmp_right_name_20 );
                Py_DECREF( tmp_right_name_20 );
                if ( tmp_raise_value_20 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 277;

                    goto try_except_handler_60;
                }
                exception_type = tmp_raise_type_20;
                Py_INCREF( tmp_raise_type_20 );
                exception_value = tmp_raise_value_20;
                exception_lineno = 277;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_60;
            }
            branch_no_80:;
        }
        goto branch_end_79;
        branch_no_79:;
        {
            PyObject *tmp_assign_source_164;
            tmp_assign_source_164 = PyDict_New();
            assert( tmp_class_creation_20__prepared == NULL );
            tmp_class_creation_20__prepared = tmp_assign_source_164;
        }
        branch_end_79:;
    }
    {
        PyObject *tmp_assign_source_165;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT( tmp_class_creation_20__prepared );
            tmp_set_locals_20 = tmp_class_creation_20__prepared;
            locals_PIL$ImageFilter_277 = tmp_set_locals_20;
            Py_INCREF( tmp_set_locals_20 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_277, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_62;
        }
        tmp_dictset_value = const_str_plain_SHARPEN;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_277, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto try_except_handler_62;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_c837e80cd14b39a226f3e311fa8f88f4_19, codeobj_c837e80cd14b39a226f3e311fa8f88f4, module_PIL$ImageFilter, sizeof(void *) );
        frame_c837e80cd14b39a226f3e311fa8f88f4_19 = cache_frame_c837e80cd14b39a226f3e311fa8f88f4_19;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_c837e80cd14b39a226f3e311fa8f88f4_19 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_c837e80cd14b39a226f3e311fa8f88f4_19 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Sharpen;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_277, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        tmp_dictset_value = const_tuple_d40f88e7c952e2e385fbd16e093a4650_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_277, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 279;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c837e80cd14b39a226f3e311fa8f88f4_19 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c837e80cd14b39a226f3e311fa8f88f4_19 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_c837e80cd14b39a226f3e311fa8f88f4_19, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_c837e80cd14b39a226f3e311fa8f88f4_19->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_c837e80cd14b39a226f3e311fa8f88f4_19, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_c837e80cd14b39a226f3e311fa8f88f4_19,
            type_description_2,
            outline_19_var___class__
        );


        // Release cached frame.
        if ( frame_c837e80cd14b39a226f3e311fa8f88f4_19 == cache_frame_c837e80cd14b39a226f3e311fa8f88f4_19 )
        {
            Py_DECREF( frame_c837e80cd14b39a226f3e311fa8f88f4_19 );
        }
        cache_frame_c837e80cd14b39a226f3e311fa8f88f4_19 = NULL;

        assertFrameObject( frame_c837e80cd14b39a226f3e311fa8f88f4_19 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_62;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_121;
            PyObject *tmp_compexpr_left_21;
            PyObject *tmp_compexpr_right_21;
            CHECK_OBJECT( tmp_class_creation_20__bases );
            tmp_compexpr_left_21 = tmp_class_creation_20__bases;
            CHECK_OBJECT( tmp_class_creation_20__bases_orig );
            tmp_compexpr_right_21 = tmp_class_creation_20__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_21, tmp_compexpr_right_21 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_62;
            }
            tmp_condition_result_121 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_121 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_81;
            }
            else
            {
                goto branch_no_81;
            }
            branch_yes_81:;
            CHECK_OBJECT( tmp_class_creation_20__bases_orig );
            tmp_dictset_value = tmp_class_creation_20__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_277, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_62;
            }
            branch_no_81:;
        }
        {
            PyObject *tmp_assign_source_166;
            PyObject *tmp_called_name_40;
            PyObject *tmp_args_name_40;
            PyObject *tmp_tuple_element_79;
            PyObject *tmp_kw_name_40;
            CHECK_OBJECT( tmp_class_creation_20__metaclass );
            tmp_called_name_40 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_79 = const_str_plain_SHARPEN;
            tmp_args_name_40 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_79 );
            PyTuple_SET_ITEM( tmp_args_name_40, 0, tmp_tuple_element_79 );
            CHECK_OBJECT( tmp_class_creation_20__bases );
            tmp_tuple_element_79 = tmp_class_creation_20__bases;
            Py_INCREF( tmp_tuple_element_79 );
            PyTuple_SET_ITEM( tmp_args_name_40, 1, tmp_tuple_element_79 );
            tmp_tuple_element_79 = locals_PIL$ImageFilter_277;
            Py_INCREF( tmp_tuple_element_79 );
            PyTuple_SET_ITEM( tmp_args_name_40, 2, tmp_tuple_element_79 );
            CHECK_OBJECT( tmp_class_creation_20__class_decl_dict );
            tmp_kw_name_40 = tmp_class_creation_20__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 277;
            tmp_assign_source_166 = CALL_FUNCTION( tmp_called_name_40, tmp_args_name_40, tmp_kw_name_40 );
            Py_DECREF( tmp_args_name_40 );
            if ( tmp_assign_source_166 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;

                goto try_except_handler_62;
            }
            assert( outline_19_var___class__ == NULL );
            outline_19_var___class__ = tmp_assign_source_166;
        }
        CHECK_OBJECT( outline_19_var___class__ );
        tmp_assign_source_165 = outline_19_var___class__;
        Py_INCREF( tmp_assign_source_165 );
        goto try_return_handler_62;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_62:;
        Py_DECREF( locals_PIL$ImageFilter_277 );
        locals_PIL$ImageFilter_277 = NULL;
        goto try_return_handler_61;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_60 = exception_type;
        exception_keeper_value_60 = exception_value;
        exception_keeper_tb_60 = exception_tb;
        exception_keeper_lineno_60 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_277 );
        locals_PIL$ImageFilter_277 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;
        exception_lineno = exception_keeper_lineno_60;

        goto try_except_handler_61;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_61:;
        CHECK_OBJECT( (PyObject *)outline_19_var___class__ );
        Py_DECREF( outline_19_var___class__ );
        outline_19_var___class__ = NULL;

        goto outline_result_20;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto outline_exception_20;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_20:;
        exception_lineno = 277;
        goto try_except_handler_60;
        outline_result_20:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_SHARPEN, tmp_assign_source_165 );
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_keeper_lineno_62 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_20__bases_orig );
    tmp_class_creation_20__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    Py_XDECREF( tmp_class_creation_20__class_decl_dict );
    tmp_class_creation_20__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_20__prepared );
    tmp_class_creation_20__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_62;
    exception_value = exception_keeper_value_62;
    exception_tb = exception_keeper_tb_62;
    exception_lineno = exception_keeper_lineno_62;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__bases_orig );
    Py_DECREF( tmp_class_creation_20__bases_orig );
    tmp_class_creation_20__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__bases );
    Py_DECREF( tmp_class_creation_20__bases );
    tmp_class_creation_20__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__class_decl_dict );
    Py_DECREF( tmp_class_creation_20__class_decl_dict );
    tmp_class_creation_20__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__metaclass );
    Py_DECREF( tmp_class_creation_20__metaclass );
    tmp_class_creation_20__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_20__prepared );
    Py_DECREF( tmp_class_creation_20__prepared );
    tmp_class_creation_20__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_mvar_value_22;
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_22 == NULL ))
        {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_22 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 286;

            goto try_except_handler_63;
        }

        tmp_tuple_element_80 = tmp_mvar_value_22;
        tmp_assign_source_167 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_80 );
        PyTuple_SET_ITEM( tmp_assign_source_167, 0, tmp_tuple_element_80 );
        assert( tmp_class_creation_21__bases_orig == NULL );
        tmp_class_creation_21__bases_orig = tmp_assign_source_167;
    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT( tmp_class_creation_21__bases_orig );
        tmp_dircall_arg1_21 = tmp_class_creation_21__bases_orig;
        Py_INCREF( tmp_dircall_arg1_21 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_168 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_168 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        assert( tmp_class_creation_21__bases == NULL );
        tmp_class_creation_21__bases = tmp_assign_source_168;
    }
    {
        PyObject *tmp_assign_source_169;
        tmp_assign_source_169 = PyDict_New();
        assert( tmp_class_creation_21__class_decl_dict == NULL );
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_169;
    }
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_metaclass_name_21;
        nuitka_bool tmp_condition_result_122;
        PyObject *tmp_key_name_61;
        PyObject *tmp_dict_name_61;
        PyObject *tmp_dict_name_62;
        PyObject *tmp_key_name_62;
        nuitka_bool tmp_condition_result_123;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_subscribed_name_21;
        PyObject *tmp_subscript_name_21;
        PyObject *tmp_bases_name_21;
        tmp_key_name_61 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
        tmp_dict_name_61 = tmp_class_creation_21__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_61, tmp_key_name_61 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        tmp_condition_result_122 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_122 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_41;
        }
        else
        {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
        tmp_dict_name_62 = tmp_class_creation_21__class_decl_dict;
        tmp_key_name_62 = const_str_plain_metaclass;
        tmp_metaclass_name_21 = DICT_GET_ITEM( tmp_dict_name_62, tmp_key_name_62 );
        if ( tmp_metaclass_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        goto condexpr_end_41;
        condexpr_false_41:;
        CHECK_OBJECT( tmp_class_creation_21__bases );
        tmp_truth_name_21 = CHECK_IF_TRUE( tmp_class_creation_21__bases );
        if ( tmp_truth_name_21 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        tmp_condition_result_123 = tmp_truth_name_21 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_123 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_42;
        }
        else
        {
            goto condexpr_false_42;
        }
        condexpr_true_42:;
        CHECK_OBJECT( tmp_class_creation_21__bases );
        tmp_subscribed_name_21 = tmp_class_creation_21__bases;
        tmp_subscript_name_21 = const_int_0;
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_21, tmp_subscript_name_21, 0 );
        if ( tmp_type_arg_41 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        tmp_metaclass_name_21 = BUILTIN_TYPE1( tmp_type_arg_41 );
        Py_DECREF( tmp_type_arg_41 );
        if ( tmp_metaclass_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        goto condexpr_end_42;
        condexpr_false_42:;
        tmp_metaclass_name_21 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_21 );
        condexpr_end_42:;
        condexpr_end_41:;
        CHECK_OBJECT( tmp_class_creation_21__bases );
        tmp_bases_name_21 = tmp_class_creation_21__bases;
        tmp_assign_source_170 = SELECT_METACLASS( tmp_metaclass_name_21, tmp_bases_name_21 );
        Py_DECREF( tmp_metaclass_name_21 );
        if ( tmp_assign_source_170 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        assert( tmp_class_creation_21__metaclass == NULL );
        tmp_class_creation_21__metaclass = tmp_assign_source_170;
    }
    {
        nuitka_bool tmp_condition_result_124;
        PyObject *tmp_key_name_63;
        PyObject *tmp_dict_name_63;
        tmp_key_name_63 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
        tmp_dict_name_63 = tmp_class_creation_21__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_63, tmp_key_name_63 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        tmp_condition_result_124 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_124 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_82;
        }
        else
        {
            goto branch_no_82;
        }
        branch_yes_82:;
        CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_63;
        }
        branch_no_82:;
    }
    {
        nuitka_bool tmp_condition_result_125;
        PyObject *tmp_source_name_81;
        CHECK_OBJECT( tmp_class_creation_21__metaclass );
        tmp_source_name_81 = tmp_class_creation_21__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_81, const_str_plain___prepare__ );
        tmp_condition_result_125 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_125 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_83;
        }
        else
        {
            goto branch_no_83;
        }
        branch_yes_83:;
        {
            PyObject *tmp_assign_source_171;
            PyObject *tmp_called_name_41;
            PyObject *tmp_source_name_82;
            PyObject *tmp_args_name_41;
            PyObject *tmp_tuple_element_81;
            PyObject *tmp_kw_name_41;
            CHECK_OBJECT( tmp_class_creation_21__metaclass );
            tmp_source_name_82 = tmp_class_creation_21__metaclass;
            tmp_called_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_82, const_str_plain___prepare__ );
            if ( tmp_called_name_41 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_63;
            }
            tmp_tuple_element_81 = const_str_plain_SMOOTH;
            tmp_args_name_41 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_81 );
            PyTuple_SET_ITEM( tmp_args_name_41, 0, tmp_tuple_element_81 );
            CHECK_OBJECT( tmp_class_creation_21__bases );
            tmp_tuple_element_81 = tmp_class_creation_21__bases;
            Py_INCREF( tmp_tuple_element_81 );
            PyTuple_SET_ITEM( tmp_args_name_41, 1, tmp_tuple_element_81 );
            CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
            tmp_kw_name_41 = tmp_class_creation_21__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 286;
            tmp_assign_source_171 = CALL_FUNCTION( tmp_called_name_41, tmp_args_name_41, tmp_kw_name_41 );
            Py_DECREF( tmp_called_name_41 );
            Py_DECREF( tmp_args_name_41 );
            if ( tmp_assign_source_171 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_63;
            }
            assert( tmp_class_creation_21__prepared == NULL );
            tmp_class_creation_21__prepared = tmp_assign_source_171;
        }
        {
            nuitka_bool tmp_condition_result_126;
            PyObject *tmp_operand_name_21;
            PyObject *tmp_source_name_83;
            CHECK_OBJECT( tmp_class_creation_21__prepared );
            tmp_source_name_83 = tmp_class_creation_21__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_83, const_str_plain___getitem__ );
            tmp_operand_name_21 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_21 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_63;
            }
            tmp_condition_result_126 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_126 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_84;
            }
            else
            {
                goto branch_no_84;
            }
            branch_yes_84:;
            {
                PyObject *tmp_raise_type_21;
                PyObject *tmp_raise_value_21;
                PyObject *tmp_left_name_21;
                PyObject *tmp_right_name_21;
                PyObject *tmp_tuple_element_82;
                PyObject *tmp_getattr_target_21;
                PyObject *tmp_getattr_attr_21;
                PyObject *tmp_getattr_default_21;
                PyObject *tmp_source_name_84;
                PyObject *tmp_type_arg_42;
                tmp_raise_type_21 = PyExc_TypeError;
                tmp_left_name_21 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_21__metaclass );
                tmp_getattr_target_21 = tmp_class_creation_21__metaclass;
                tmp_getattr_attr_21 = const_str_plain___name__;
                tmp_getattr_default_21 = const_str_angle_metaclass;
                tmp_tuple_element_82 = BUILTIN_GETATTR( tmp_getattr_target_21, tmp_getattr_attr_21, tmp_getattr_default_21 );
                if ( tmp_tuple_element_82 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 286;

                    goto try_except_handler_63;
                }
                tmp_right_name_21 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_21, 0, tmp_tuple_element_82 );
                CHECK_OBJECT( tmp_class_creation_21__prepared );
                tmp_type_arg_42 = tmp_class_creation_21__prepared;
                tmp_source_name_84 = BUILTIN_TYPE1( tmp_type_arg_42 );
                assert( !(tmp_source_name_84 == NULL) );
                tmp_tuple_element_82 = LOOKUP_ATTRIBUTE( tmp_source_name_84, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_84 );
                if ( tmp_tuple_element_82 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_21 );

                    exception_lineno = 286;

                    goto try_except_handler_63;
                }
                PyTuple_SET_ITEM( tmp_right_name_21, 1, tmp_tuple_element_82 );
                tmp_raise_value_21 = BINARY_OPERATION_REMAINDER( tmp_left_name_21, tmp_right_name_21 );
                Py_DECREF( tmp_right_name_21 );
                if ( tmp_raise_value_21 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 286;

                    goto try_except_handler_63;
                }
                exception_type = tmp_raise_type_21;
                Py_INCREF( tmp_raise_type_21 );
                exception_value = tmp_raise_value_21;
                exception_lineno = 286;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_63;
            }
            branch_no_84:;
        }
        goto branch_end_83;
        branch_no_83:;
        {
            PyObject *tmp_assign_source_172;
            tmp_assign_source_172 = PyDict_New();
            assert( tmp_class_creation_21__prepared == NULL );
            tmp_class_creation_21__prepared = tmp_assign_source_172;
        }
        branch_end_83:;
    }
    {
        PyObject *tmp_assign_source_173;
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT( tmp_class_creation_21__prepared );
            tmp_set_locals_21 = tmp_class_creation_21__prepared;
            locals_PIL$ImageFilter_286 = tmp_set_locals_21;
            Py_INCREF( tmp_set_locals_21 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_286, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_65;
        }
        tmp_dictset_value = const_str_plain_SMOOTH;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_286, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;

            goto try_except_handler_65;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_c7001ee9bb9b3765bc12a295c5d90a0d_20, codeobj_c7001ee9bb9b3765bc12a295c5d90a0d, module_PIL$ImageFilter, sizeof(void *) );
        frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 = cache_frame_c7001ee9bb9b3765bc12a295c5d90a0d_20;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_plain_Smooth;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_286, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 287;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        tmp_dictset_value = const_tuple_33b6a390a515ed3d519d6a4e6fbf7560_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_286, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 288;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_c7001ee9bb9b3765bc12a295c5d90a0d_20->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_c7001ee9bb9b3765bc12a295c5d90a0d_20, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_c7001ee9bb9b3765bc12a295c5d90a0d_20,
            type_description_2,
            outline_20_var___class__
        );


        // Release cached frame.
        if ( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 == cache_frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 )
        {
            Py_DECREF( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 );
        }
        cache_frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 = NULL;

        assertFrameObject( frame_c7001ee9bb9b3765bc12a295c5d90a0d_20 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_65;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_127;
            PyObject *tmp_compexpr_left_22;
            PyObject *tmp_compexpr_right_22;
            CHECK_OBJECT( tmp_class_creation_21__bases );
            tmp_compexpr_left_22 = tmp_class_creation_21__bases;
            CHECK_OBJECT( tmp_class_creation_21__bases_orig );
            tmp_compexpr_right_22 = tmp_class_creation_21__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_22, tmp_compexpr_right_22 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_65;
            }
            tmp_condition_result_127 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_127 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_85;
            }
            else
            {
                goto branch_no_85;
            }
            branch_yes_85:;
            CHECK_OBJECT( tmp_class_creation_21__bases_orig );
            tmp_dictset_value = tmp_class_creation_21__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_286, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_65;
            }
            branch_no_85:;
        }
        {
            PyObject *tmp_assign_source_174;
            PyObject *tmp_called_name_42;
            PyObject *tmp_args_name_42;
            PyObject *tmp_tuple_element_83;
            PyObject *tmp_kw_name_42;
            CHECK_OBJECT( tmp_class_creation_21__metaclass );
            tmp_called_name_42 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_83 = const_str_plain_SMOOTH;
            tmp_args_name_42 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_83 );
            PyTuple_SET_ITEM( tmp_args_name_42, 0, tmp_tuple_element_83 );
            CHECK_OBJECT( tmp_class_creation_21__bases );
            tmp_tuple_element_83 = tmp_class_creation_21__bases;
            Py_INCREF( tmp_tuple_element_83 );
            PyTuple_SET_ITEM( tmp_args_name_42, 1, tmp_tuple_element_83 );
            tmp_tuple_element_83 = locals_PIL$ImageFilter_286;
            Py_INCREF( tmp_tuple_element_83 );
            PyTuple_SET_ITEM( tmp_args_name_42, 2, tmp_tuple_element_83 );
            CHECK_OBJECT( tmp_class_creation_21__class_decl_dict );
            tmp_kw_name_42 = tmp_class_creation_21__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 286;
            tmp_assign_source_174 = CALL_FUNCTION( tmp_called_name_42, tmp_args_name_42, tmp_kw_name_42 );
            Py_DECREF( tmp_args_name_42 );
            if ( tmp_assign_source_174 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 286;

                goto try_except_handler_65;
            }
            assert( outline_20_var___class__ == NULL );
            outline_20_var___class__ = tmp_assign_source_174;
        }
        CHECK_OBJECT( outline_20_var___class__ );
        tmp_assign_source_173 = outline_20_var___class__;
        Py_INCREF( tmp_assign_source_173 );
        goto try_return_handler_65;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_65:;
        Py_DECREF( locals_PIL$ImageFilter_286 );
        locals_PIL$ImageFilter_286 = NULL;
        goto try_return_handler_64;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_63 = exception_type;
        exception_keeper_value_63 = exception_value;
        exception_keeper_tb_63 = exception_tb;
        exception_keeper_lineno_63 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_286 );
        locals_PIL$ImageFilter_286 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;
        exception_lineno = exception_keeper_lineno_63;

        goto try_except_handler_64;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_64:;
        CHECK_OBJECT( (PyObject *)outline_20_var___class__ );
        Py_DECREF( outline_20_var___class__ );
        outline_20_var___class__ = NULL;

        goto outline_result_21;
        // Exception handler code:
        try_except_handler_64:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto outline_exception_21;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_21:;
        exception_lineno = 286;
        goto try_except_handler_63;
        outline_result_21:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_SMOOTH, tmp_assign_source_173 );
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_63:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_keeper_lineno_65 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_21__bases_orig );
    tmp_class_creation_21__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_21__bases );
    tmp_class_creation_21__bases = NULL;

    Py_XDECREF( tmp_class_creation_21__class_decl_dict );
    tmp_class_creation_21__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_21__metaclass );
    tmp_class_creation_21__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_21__prepared );
    tmp_class_creation_21__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_65;
    exception_value = exception_keeper_value_65;
    exception_tb = exception_keeper_tb_65;
    exception_lineno = exception_keeper_lineno_65;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_21__bases_orig );
    Py_DECREF( tmp_class_creation_21__bases_orig );
    tmp_class_creation_21__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_21__bases );
    Py_DECREF( tmp_class_creation_21__bases );
    tmp_class_creation_21__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_21__class_decl_dict );
    Py_DECREF( tmp_class_creation_21__class_decl_dict );
    tmp_class_creation_21__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_21__metaclass );
    Py_DECREF( tmp_class_creation_21__metaclass );
    tmp_class_creation_21__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_21__prepared );
    Py_DECREF( tmp_class_creation_21__prepared );
    tmp_class_creation_21__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_mvar_value_23;
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );

        if (unlikely( tmp_mvar_value_23 == NULL ))
        {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BuiltinFilter );
        }

        if ( tmp_mvar_value_23 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BuiltinFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 295;

            goto try_except_handler_66;
        }

        tmp_tuple_element_84 = tmp_mvar_value_23;
        tmp_assign_source_175 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_84 );
        PyTuple_SET_ITEM( tmp_assign_source_175, 0, tmp_tuple_element_84 );
        assert( tmp_class_creation_22__bases_orig == NULL );
        tmp_class_creation_22__bases_orig = tmp_assign_source_175;
    }
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT( tmp_class_creation_22__bases_orig );
        tmp_dircall_arg1_22 = tmp_class_creation_22__bases_orig;
        Py_INCREF( tmp_dircall_arg1_22 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_176 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_176 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        assert( tmp_class_creation_22__bases == NULL );
        tmp_class_creation_22__bases = tmp_assign_source_176;
    }
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = PyDict_New();
        assert( tmp_class_creation_22__class_decl_dict == NULL );
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_177;
    }
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_metaclass_name_22;
        nuitka_bool tmp_condition_result_128;
        PyObject *tmp_key_name_64;
        PyObject *tmp_dict_name_64;
        PyObject *tmp_dict_name_65;
        PyObject *tmp_key_name_65;
        nuitka_bool tmp_condition_result_129;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_subscribed_name_22;
        PyObject *tmp_subscript_name_22;
        PyObject *tmp_bases_name_22;
        tmp_key_name_64 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
        tmp_dict_name_64 = tmp_class_creation_22__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_64, tmp_key_name_64 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        tmp_condition_result_128 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_128 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_43;
        }
        else
        {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
        tmp_dict_name_65 = tmp_class_creation_22__class_decl_dict;
        tmp_key_name_65 = const_str_plain_metaclass;
        tmp_metaclass_name_22 = DICT_GET_ITEM( tmp_dict_name_65, tmp_key_name_65 );
        if ( tmp_metaclass_name_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        goto condexpr_end_43;
        condexpr_false_43:;
        CHECK_OBJECT( tmp_class_creation_22__bases );
        tmp_truth_name_22 = CHECK_IF_TRUE( tmp_class_creation_22__bases );
        if ( tmp_truth_name_22 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        tmp_condition_result_129 = tmp_truth_name_22 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_129 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_44;
        }
        else
        {
            goto condexpr_false_44;
        }
        condexpr_true_44:;
        CHECK_OBJECT( tmp_class_creation_22__bases );
        tmp_subscribed_name_22 = tmp_class_creation_22__bases;
        tmp_subscript_name_22 = const_int_0;
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_22, tmp_subscript_name_22, 0 );
        if ( tmp_type_arg_43 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        tmp_metaclass_name_22 = BUILTIN_TYPE1( tmp_type_arg_43 );
        Py_DECREF( tmp_type_arg_43 );
        if ( tmp_metaclass_name_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        goto condexpr_end_44;
        condexpr_false_44:;
        tmp_metaclass_name_22 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_22 );
        condexpr_end_44:;
        condexpr_end_43:;
        CHECK_OBJECT( tmp_class_creation_22__bases );
        tmp_bases_name_22 = tmp_class_creation_22__bases;
        tmp_assign_source_178 = SELECT_METACLASS( tmp_metaclass_name_22, tmp_bases_name_22 );
        Py_DECREF( tmp_metaclass_name_22 );
        if ( tmp_assign_source_178 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        assert( tmp_class_creation_22__metaclass == NULL );
        tmp_class_creation_22__metaclass = tmp_assign_source_178;
    }
    {
        nuitka_bool tmp_condition_result_130;
        PyObject *tmp_key_name_66;
        PyObject *tmp_dict_name_66;
        tmp_key_name_66 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
        tmp_dict_name_66 = tmp_class_creation_22__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_66, tmp_key_name_66 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        tmp_condition_result_130 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_130 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_86;
        }
        else
        {
            goto branch_no_86;
        }
        branch_yes_86:;
        CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_66;
        }
        branch_no_86:;
    }
    {
        nuitka_bool tmp_condition_result_131;
        PyObject *tmp_source_name_85;
        CHECK_OBJECT( tmp_class_creation_22__metaclass );
        tmp_source_name_85 = tmp_class_creation_22__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_85, const_str_plain___prepare__ );
        tmp_condition_result_131 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_131 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_87;
        }
        else
        {
            goto branch_no_87;
        }
        branch_yes_87:;
        {
            PyObject *tmp_assign_source_179;
            PyObject *tmp_called_name_43;
            PyObject *tmp_source_name_86;
            PyObject *tmp_args_name_43;
            PyObject *tmp_tuple_element_85;
            PyObject *tmp_kw_name_43;
            CHECK_OBJECT( tmp_class_creation_22__metaclass );
            tmp_source_name_86 = tmp_class_creation_22__metaclass;
            tmp_called_name_43 = LOOKUP_ATTRIBUTE( tmp_source_name_86, const_str_plain___prepare__ );
            if ( tmp_called_name_43 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_66;
            }
            tmp_tuple_element_85 = const_str_plain_SMOOTH_MORE;
            tmp_args_name_43 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_85 );
            PyTuple_SET_ITEM( tmp_args_name_43, 0, tmp_tuple_element_85 );
            CHECK_OBJECT( tmp_class_creation_22__bases );
            tmp_tuple_element_85 = tmp_class_creation_22__bases;
            Py_INCREF( tmp_tuple_element_85 );
            PyTuple_SET_ITEM( tmp_args_name_43, 1, tmp_tuple_element_85 );
            CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
            tmp_kw_name_43 = tmp_class_creation_22__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 295;
            tmp_assign_source_179 = CALL_FUNCTION( tmp_called_name_43, tmp_args_name_43, tmp_kw_name_43 );
            Py_DECREF( tmp_called_name_43 );
            Py_DECREF( tmp_args_name_43 );
            if ( tmp_assign_source_179 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_66;
            }
            assert( tmp_class_creation_22__prepared == NULL );
            tmp_class_creation_22__prepared = tmp_assign_source_179;
        }
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_operand_name_22;
            PyObject *tmp_source_name_87;
            CHECK_OBJECT( tmp_class_creation_22__prepared );
            tmp_source_name_87 = tmp_class_creation_22__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_87, const_str_plain___getitem__ );
            tmp_operand_name_22 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_22 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_66;
            }
            tmp_condition_result_132 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_132 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_88;
            }
            else
            {
                goto branch_no_88;
            }
            branch_yes_88:;
            {
                PyObject *tmp_raise_type_22;
                PyObject *tmp_raise_value_22;
                PyObject *tmp_left_name_22;
                PyObject *tmp_right_name_22;
                PyObject *tmp_tuple_element_86;
                PyObject *tmp_getattr_target_22;
                PyObject *tmp_getattr_attr_22;
                PyObject *tmp_getattr_default_22;
                PyObject *tmp_source_name_88;
                PyObject *tmp_type_arg_44;
                tmp_raise_type_22 = PyExc_TypeError;
                tmp_left_name_22 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_22__metaclass );
                tmp_getattr_target_22 = tmp_class_creation_22__metaclass;
                tmp_getattr_attr_22 = const_str_plain___name__;
                tmp_getattr_default_22 = const_str_angle_metaclass;
                tmp_tuple_element_86 = BUILTIN_GETATTR( tmp_getattr_target_22, tmp_getattr_attr_22, tmp_getattr_default_22 );
                if ( tmp_tuple_element_86 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 295;

                    goto try_except_handler_66;
                }
                tmp_right_name_22 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_22, 0, tmp_tuple_element_86 );
                CHECK_OBJECT( tmp_class_creation_22__prepared );
                tmp_type_arg_44 = tmp_class_creation_22__prepared;
                tmp_source_name_88 = BUILTIN_TYPE1( tmp_type_arg_44 );
                assert( !(tmp_source_name_88 == NULL) );
                tmp_tuple_element_86 = LOOKUP_ATTRIBUTE( tmp_source_name_88, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_88 );
                if ( tmp_tuple_element_86 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_22 );

                    exception_lineno = 295;

                    goto try_except_handler_66;
                }
                PyTuple_SET_ITEM( tmp_right_name_22, 1, tmp_tuple_element_86 );
                tmp_raise_value_22 = BINARY_OPERATION_REMAINDER( tmp_left_name_22, tmp_right_name_22 );
                Py_DECREF( tmp_right_name_22 );
                if ( tmp_raise_value_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 295;

                    goto try_except_handler_66;
                }
                exception_type = tmp_raise_type_22;
                Py_INCREF( tmp_raise_type_22 );
                exception_value = tmp_raise_value_22;
                exception_lineno = 295;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_66;
            }
            branch_no_88:;
        }
        goto branch_end_87;
        branch_no_87:;
        {
            PyObject *tmp_assign_source_180;
            tmp_assign_source_180 = PyDict_New();
            assert( tmp_class_creation_22__prepared == NULL );
            tmp_class_creation_22__prepared = tmp_assign_source_180;
        }
        branch_end_87:;
    }
    {
        PyObject *tmp_assign_source_181;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT( tmp_class_creation_22__prepared );
            tmp_set_locals_22 = tmp_class_creation_22__prepared;
            locals_PIL$ImageFilter_295 = tmp_set_locals_22;
            Py_INCREF( tmp_set_locals_22 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_295, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_68;
        }
        tmp_dictset_value = const_str_plain_SMOOTH_MORE;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_295, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;

            goto try_except_handler_68;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_12bbd41a59cbe9216355af244887535d_21, codeobj_12bbd41a59cbe9216355af244887535d, module_PIL$ImageFilter, sizeof(void *) );
        frame_12bbd41a59cbe9216355af244887535d_21 = cache_frame_12bbd41a59cbe9216355af244887535d_21;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_12bbd41a59cbe9216355af244887535d_21 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_12bbd41a59cbe9216355af244887535d_21 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_digest_12d9cad19106401652c949f7d99360ec;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_295, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 296;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        tmp_dictset_value = const_tuple_d84b88ab4836b0cc4311549e35293e2e_tuple;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_295, const_str_plain_filterargs, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 297;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_12bbd41a59cbe9216355af244887535d_21 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_12bbd41a59cbe9216355af244887535d_21 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_12bbd41a59cbe9216355af244887535d_21, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_12bbd41a59cbe9216355af244887535d_21->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_12bbd41a59cbe9216355af244887535d_21, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_12bbd41a59cbe9216355af244887535d_21,
            type_description_2,
            outline_21_var___class__
        );


        // Release cached frame.
        if ( frame_12bbd41a59cbe9216355af244887535d_21 == cache_frame_12bbd41a59cbe9216355af244887535d_21 )
        {
            Py_DECREF( frame_12bbd41a59cbe9216355af244887535d_21 );
        }
        cache_frame_12bbd41a59cbe9216355af244887535d_21 = NULL;

        assertFrameObject( frame_12bbd41a59cbe9216355af244887535d_21 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_68;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_133;
            PyObject *tmp_compexpr_left_23;
            PyObject *tmp_compexpr_right_23;
            CHECK_OBJECT( tmp_class_creation_22__bases );
            tmp_compexpr_left_23 = tmp_class_creation_22__bases;
            CHECK_OBJECT( tmp_class_creation_22__bases_orig );
            tmp_compexpr_right_23 = tmp_class_creation_22__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_23, tmp_compexpr_right_23 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_68;
            }
            tmp_condition_result_133 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_133 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_89;
            }
            else
            {
                goto branch_no_89;
            }
            branch_yes_89:;
            CHECK_OBJECT( tmp_class_creation_22__bases_orig );
            tmp_dictset_value = tmp_class_creation_22__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_295, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_68;
            }
            branch_no_89:;
        }
        {
            PyObject *tmp_assign_source_182;
            PyObject *tmp_called_name_44;
            PyObject *tmp_args_name_44;
            PyObject *tmp_tuple_element_87;
            PyObject *tmp_kw_name_44;
            CHECK_OBJECT( tmp_class_creation_22__metaclass );
            tmp_called_name_44 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_87 = const_str_plain_SMOOTH_MORE;
            tmp_args_name_44 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_87 );
            PyTuple_SET_ITEM( tmp_args_name_44, 0, tmp_tuple_element_87 );
            CHECK_OBJECT( tmp_class_creation_22__bases );
            tmp_tuple_element_87 = tmp_class_creation_22__bases;
            Py_INCREF( tmp_tuple_element_87 );
            PyTuple_SET_ITEM( tmp_args_name_44, 1, tmp_tuple_element_87 );
            tmp_tuple_element_87 = locals_PIL$ImageFilter_295;
            Py_INCREF( tmp_tuple_element_87 );
            PyTuple_SET_ITEM( tmp_args_name_44, 2, tmp_tuple_element_87 );
            CHECK_OBJECT( tmp_class_creation_22__class_decl_dict );
            tmp_kw_name_44 = tmp_class_creation_22__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 295;
            tmp_assign_source_182 = CALL_FUNCTION( tmp_called_name_44, tmp_args_name_44, tmp_kw_name_44 );
            Py_DECREF( tmp_args_name_44 );
            if ( tmp_assign_source_182 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;

                goto try_except_handler_68;
            }
            assert( outline_21_var___class__ == NULL );
            outline_21_var___class__ = tmp_assign_source_182;
        }
        CHECK_OBJECT( outline_21_var___class__ );
        tmp_assign_source_181 = outline_21_var___class__;
        Py_INCREF( tmp_assign_source_181 );
        goto try_return_handler_68;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_68:;
        Py_DECREF( locals_PIL$ImageFilter_295 );
        locals_PIL$ImageFilter_295 = NULL;
        goto try_return_handler_67;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_295 );
        locals_PIL$ImageFilter_295 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto try_except_handler_67;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_67:;
        CHECK_OBJECT( (PyObject *)outline_21_var___class__ );
        Py_DECREF( outline_21_var___class__ );
        outline_21_var___class__ = NULL;

        goto outline_result_22;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto outline_exception_22;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_22:;
        exception_lineno = 295;
        goto try_except_handler_66;
        outline_result_22:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_SMOOTH_MORE, tmp_assign_source_181 );
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_66:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_keeper_lineno_68 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_22__bases_orig );
    tmp_class_creation_22__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_22__bases );
    tmp_class_creation_22__bases = NULL;

    Py_XDECREF( tmp_class_creation_22__class_decl_dict );
    tmp_class_creation_22__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_22__metaclass );
    tmp_class_creation_22__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_22__prepared );
    tmp_class_creation_22__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_68;
    exception_value = exception_keeper_value_68;
    exception_tb = exception_keeper_tb_68;
    exception_lineno = exception_keeper_lineno_68;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_22__bases_orig );
    Py_DECREF( tmp_class_creation_22__bases_orig );
    tmp_class_creation_22__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_22__bases );
    Py_DECREF( tmp_class_creation_22__bases );
    tmp_class_creation_22__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_22__class_decl_dict );
    Py_DECREF( tmp_class_creation_22__class_decl_dict );
    tmp_class_creation_22__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_22__metaclass );
    Py_DECREF( tmp_class_creation_22__metaclass );
    tmp_class_creation_22__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_22__prepared );
    Py_DECREF( tmp_class_creation_22__prepared );
    tmp_class_creation_22__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_mvar_value_24;
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_MultibandFilter );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_MultibandFilter );
        }

        if ( tmp_mvar_value_24 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "MultibandFilter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 306;

            goto try_except_handler_69;
        }

        tmp_tuple_element_88 = tmp_mvar_value_24;
        tmp_assign_source_183 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_88 );
        PyTuple_SET_ITEM( tmp_assign_source_183, 0, tmp_tuple_element_88 );
        assert( tmp_class_creation_23__bases_orig == NULL );
        tmp_class_creation_23__bases_orig = tmp_assign_source_183;
    }
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT( tmp_class_creation_23__bases_orig );
        tmp_dircall_arg1_23 = tmp_class_creation_23__bases_orig;
        Py_INCREF( tmp_dircall_arg1_23 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_184 = impl___internal__$$$function_4__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_184 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        assert( tmp_class_creation_23__bases == NULL );
        tmp_class_creation_23__bases = tmp_assign_source_184;
    }
    {
        PyObject *tmp_assign_source_185;
        tmp_assign_source_185 = PyDict_New();
        assert( tmp_class_creation_23__class_decl_dict == NULL );
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_185;
    }
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_metaclass_name_23;
        nuitka_bool tmp_condition_result_134;
        PyObject *tmp_key_name_67;
        PyObject *tmp_dict_name_67;
        PyObject *tmp_dict_name_68;
        PyObject *tmp_key_name_68;
        nuitka_bool tmp_condition_result_135;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_subscribed_name_23;
        PyObject *tmp_subscript_name_23;
        PyObject *tmp_bases_name_23;
        tmp_key_name_67 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
        tmp_dict_name_67 = tmp_class_creation_23__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_67, tmp_key_name_67 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        tmp_condition_result_134 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_134 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_45;
        }
        else
        {
            goto condexpr_false_45;
        }
        condexpr_true_45:;
        CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
        tmp_dict_name_68 = tmp_class_creation_23__class_decl_dict;
        tmp_key_name_68 = const_str_plain_metaclass;
        tmp_metaclass_name_23 = DICT_GET_ITEM( tmp_dict_name_68, tmp_key_name_68 );
        if ( tmp_metaclass_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        goto condexpr_end_45;
        condexpr_false_45:;
        CHECK_OBJECT( tmp_class_creation_23__bases );
        tmp_truth_name_23 = CHECK_IF_TRUE( tmp_class_creation_23__bases );
        if ( tmp_truth_name_23 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        tmp_condition_result_135 = tmp_truth_name_23 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_135 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_46;
        }
        else
        {
            goto condexpr_false_46;
        }
        condexpr_true_46:;
        CHECK_OBJECT( tmp_class_creation_23__bases );
        tmp_subscribed_name_23 = tmp_class_creation_23__bases;
        tmp_subscript_name_23 = const_int_0;
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_23, tmp_subscript_name_23, 0 );
        if ( tmp_type_arg_45 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        tmp_metaclass_name_23 = BUILTIN_TYPE1( tmp_type_arg_45 );
        Py_DECREF( tmp_type_arg_45 );
        if ( tmp_metaclass_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        goto condexpr_end_46;
        condexpr_false_46:;
        tmp_metaclass_name_23 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_23 );
        condexpr_end_46:;
        condexpr_end_45:;
        CHECK_OBJECT( tmp_class_creation_23__bases );
        tmp_bases_name_23 = tmp_class_creation_23__bases;
        tmp_assign_source_186 = SELECT_METACLASS( tmp_metaclass_name_23, tmp_bases_name_23 );
        Py_DECREF( tmp_metaclass_name_23 );
        if ( tmp_assign_source_186 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        assert( tmp_class_creation_23__metaclass == NULL );
        tmp_class_creation_23__metaclass = tmp_assign_source_186;
    }
    {
        nuitka_bool tmp_condition_result_136;
        PyObject *tmp_key_name_69;
        PyObject *tmp_dict_name_69;
        tmp_key_name_69 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
        tmp_dict_name_69 = tmp_class_creation_23__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_69, tmp_key_name_69 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        tmp_condition_result_136 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_136 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_90;
        }
        else
        {
            goto branch_no_90;
        }
        branch_yes_90:;
        CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_69;
        }
        branch_no_90:;
    }
    {
        nuitka_bool tmp_condition_result_137;
        PyObject *tmp_source_name_89;
        CHECK_OBJECT( tmp_class_creation_23__metaclass );
        tmp_source_name_89 = tmp_class_creation_23__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_89, const_str_plain___prepare__ );
        tmp_condition_result_137 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_137 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_91;
        }
        else
        {
            goto branch_no_91;
        }
        branch_yes_91:;
        {
            PyObject *tmp_assign_source_187;
            PyObject *tmp_called_name_45;
            PyObject *tmp_source_name_90;
            PyObject *tmp_args_name_45;
            PyObject *tmp_tuple_element_89;
            PyObject *tmp_kw_name_45;
            CHECK_OBJECT( tmp_class_creation_23__metaclass );
            tmp_source_name_90 = tmp_class_creation_23__metaclass;
            tmp_called_name_45 = LOOKUP_ATTRIBUTE( tmp_source_name_90, const_str_plain___prepare__ );
            if ( tmp_called_name_45 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_69;
            }
            tmp_tuple_element_89 = const_str_plain_Color3DLUT;
            tmp_args_name_45 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_89 );
            PyTuple_SET_ITEM( tmp_args_name_45, 0, tmp_tuple_element_89 );
            CHECK_OBJECT( tmp_class_creation_23__bases );
            tmp_tuple_element_89 = tmp_class_creation_23__bases;
            Py_INCREF( tmp_tuple_element_89 );
            PyTuple_SET_ITEM( tmp_args_name_45, 1, tmp_tuple_element_89 );
            CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
            tmp_kw_name_45 = tmp_class_creation_23__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 306;
            tmp_assign_source_187 = CALL_FUNCTION( tmp_called_name_45, tmp_args_name_45, tmp_kw_name_45 );
            Py_DECREF( tmp_called_name_45 );
            Py_DECREF( tmp_args_name_45 );
            if ( tmp_assign_source_187 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_69;
            }
            assert( tmp_class_creation_23__prepared == NULL );
            tmp_class_creation_23__prepared = tmp_assign_source_187;
        }
        {
            nuitka_bool tmp_condition_result_138;
            PyObject *tmp_operand_name_23;
            PyObject *tmp_source_name_91;
            CHECK_OBJECT( tmp_class_creation_23__prepared );
            tmp_source_name_91 = tmp_class_creation_23__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_91, const_str_plain___getitem__ );
            tmp_operand_name_23 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_23 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_69;
            }
            tmp_condition_result_138 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_138 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_92;
            }
            else
            {
                goto branch_no_92;
            }
            branch_yes_92:;
            {
                PyObject *tmp_raise_type_23;
                PyObject *tmp_raise_value_23;
                PyObject *tmp_left_name_23;
                PyObject *tmp_right_name_23;
                PyObject *tmp_tuple_element_90;
                PyObject *tmp_getattr_target_23;
                PyObject *tmp_getattr_attr_23;
                PyObject *tmp_getattr_default_23;
                PyObject *tmp_source_name_92;
                PyObject *tmp_type_arg_46;
                tmp_raise_type_23 = PyExc_TypeError;
                tmp_left_name_23 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_23__metaclass );
                tmp_getattr_target_23 = tmp_class_creation_23__metaclass;
                tmp_getattr_attr_23 = const_str_plain___name__;
                tmp_getattr_default_23 = const_str_angle_metaclass;
                tmp_tuple_element_90 = BUILTIN_GETATTR( tmp_getattr_target_23, tmp_getattr_attr_23, tmp_getattr_default_23 );
                if ( tmp_tuple_element_90 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 306;

                    goto try_except_handler_69;
                }
                tmp_right_name_23 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_23, 0, tmp_tuple_element_90 );
                CHECK_OBJECT( tmp_class_creation_23__prepared );
                tmp_type_arg_46 = tmp_class_creation_23__prepared;
                tmp_source_name_92 = BUILTIN_TYPE1( tmp_type_arg_46 );
                assert( !(tmp_source_name_92 == NULL) );
                tmp_tuple_element_90 = LOOKUP_ATTRIBUTE( tmp_source_name_92, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_92 );
                if ( tmp_tuple_element_90 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_23 );

                    exception_lineno = 306;

                    goto try_except_handler_69;
                }
                PyTuple_SET_ITEM( tmp_right_name_23, 1, tmp_tuple_element_90 );
                tmp_raise_value_23 = BINARY_OPERATION_REMAINDER( tmp_left_name_23, tmp_right_name_23 );
                Py_DECREF( tmp_right_name_23 );
                if ( tmp_raise_value_23 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 306;

                    goto try_except_handler_69;
                }
                exception_type = tmp_raise_type_23;
                Py_INCREF( tmp_raise_type_23 );
                exception_value = tmp_raise_value_23;
                exception_lineno = 306;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_69;
            }
            branch_no_92:;
        }
        goto branch_end_91;
        branch_no_91:;
        {
            PyObject *tmp_assign_source_188;
            tmp_assign_source_188 = PyDict_New();
            assert( tmp_class_creation_23__prepared == NULL );
            tmp_class_creation_23__prepared = tmp_assign_source_188;
        }
        branch_end_91:;
    }
    {
        PyObject *tmp_assign_source_189;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT( tmp_class_creation_23__prepared );
            tmp_set_locals_23 = tmp_class_creation_23__prepared;
            locals_PIL$ImageFilter_306 = tmp_set_locals_23;
            Py_INCREF( tmp_set_locals_23 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_digest_6cfc1b78ac358dd2a7a8b796dc8926b2;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_71;
        }
        tmp_dictset_value = const_str_digest_6fd317c67cef4fda31becb2c393a305b;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_71;
        }
        tmp_dictset_value = const_str_plain_Color3DLUT;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;

            goto try_except_handler_71;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_17cef2d0d46cf49192779f0042bde399_22, codeobj_17cef2d0d46cf49192779f0042bde399, module_PIL$ImageFilter, sizeof(void *) );
        frame_17cef2d0d46cf49192779f0042bde399_22 = cache_frame_17cef2d0d46cf49192779f0042bde399_22;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_17cef2d0d46cf49192779f0042bde399_22 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_17cef2d0d46cf49192779f0042bde399_22 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = const_str_digest_26ae68f5dc56101c76ce65d3edf0ea42;
        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain_name, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 330;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = const_tuple_int_pos_3_none_tuple;
            Py_INCREF( tmp_defaults_8 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_16___init__( tmp_defaults_8 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 332;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            nuitka_bool tmp_condition_result_139;
            PyObject *tmp_called_name_46;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_staticmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$ImageFilter_306, const_str_plain_staticmethod );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_condition_result_139 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_139 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_47;
            }
            else
            {
                goto condexpr_false_47;
            }
            condexpr_true_47:;
            tmp_called_name_46 = PyObject_GetItem( locals_PIL$ImageFilter_306, const_str_plain_staticmethod );

            if ( tmp_called_name_46 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "staticmethod" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if ( tmp_called_name_46 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_args_element_name_1 = MAKE_FUNCTION_PIL$ImageFilter$$$function_17__check_size(  );



            frame_17cef2d0d46cf49192779f0042bde399_22->m_frame.f_lineno = 377;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_46, call_args );
            }

            Py_DECREF( tmp_called_name_46 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            goto condexpr_end_47;
            condexpr_false_47:;
            tmp_staticmethod_arg_1 = MAKE_FUNCTION_PIL$ImageFilter$$$function_17__check_size(  );



            tmp_dictset_value = BUILTIN_STATICMETHOD( tmp_staticmethod_arg_1 );
            Py_DECREF( tmp_staticmethod_arg_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            condexpr_end_47:;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain__check_size, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            nuitka_bool tmp_condition_result_140;
            PyObject *tmp_called_name_47;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_defaults_9;
            PyObject *tmp_classmethod_arg_1;
            PyObject *tmp_defaults_10;
            tmp_res = MAPPING_HAS_ITEM( locals_PIL$ImageFilter_306, const_str_plain_classmethod );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_condition_result_140 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_140 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_48;
            }
            else
            {
                goto condexpr_false_48;
            }
            condexpr_true_48:;
            tmp_called_name_47 = PyObject_GetItem( locals_PIL$ImageFilter_306, const_str_plain_classmethod );

            if ( tmp_called_name_47 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "classmethod" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if ( tmp_called_name_47 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            tmp_defaults_9 = const_tuple_int_pos_3_none_tuple;
            Py_INCREF( tmp_defaults_9 );
            tmp_args_element_name_2 = MAKE_FUNCTION_PIL$ImageFilter$$$function_18_generate( tmp_defaults_9 );



            frame_17cef2d0d46cf49192779f0042bde399_22->m_frame.f_lineno = 392;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_47, call_args );
            }

            Py_DECREF( tmp_called_name_47 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            goto condexpr_end_48;
            condexpr_false_48:;
            tmp_defaults_10 = const_tuple_int_pos_3_none_tuple;
            Py_INCREF( tmp_defaults_10 );
            tmp_classmethod_arg_1 = MAKE_FUNCTION_PIL$ImageFilter$$$function_18_generate( tmp_defaults_10 );



            tmp_dictset_value = BUILTIN_CLASSMETHOD( tmp_classmethod_arg_1 );
            Py_DECREF( tmp_classmethod_arg_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            condexpr_end_48:;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain_generate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        {
            PyObject *tmp_defaults_11;
            tmp_defaults_11 = const_tuple_false_none_none_tuple;
            Py_INCREF( tmp_defaults_11 );
            tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_19_transform( tmp_defaults_11 );



            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain_transform, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 421;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_20___repr__(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___repr__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 467;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        tmp_dictset_value = MAKE_FUNCTION_PIL$ImageFilter$$$function_21_filter(  );



        tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain_filter, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 478;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_17cef2d0d46cf49192779f0042bde399_22 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_17cef2d0d46cf49192779f0042bde399_22 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_17cef2d0d46cf49192779f0042bde399_22, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_17cef2d0d46cf49192779f0042bde399_22->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_17cef2d0d46cf49192779f0042bde399_22, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_17cef2d0d46cf49192779f0042bde399_22,
            type_description_2,
            outline_22_var___class__
        );


        // Release cached frame.
        if ( frame_17cef2d0d46cf49192779f0042bde399_22 == cache_frame_17cef2d0d46cf49192779f0042bde399_22 )
        {
            Py_DECREF( frame_17cef2d0d46cf49192779f0042bde399_22 );
        }
        cache_frame_17cef2d0d46cf49192779f0042bde399_22 = NULL;

        assertFrameObject( frame_17cef2d0d46cf49192779f0042bde399_22 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_71;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_141;
            PyObject *tmp_compexpr_left_24;
            PyObject *tmp_compexpr_right_24;
            CHECK_OBJECT( tmp_class_creation_23__bases );
            tmp_compexpr_left_24 = tmp_class_creation_23__bases;
            CHECK_OBJECT( tmp_class_creation_23__bases_orig );
            tmp_compexpr_right_24 = tmp_class_creation_23__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_24, tmp_compexpr_right_24 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_71;
            }
            tmp_condition_result_141 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_141 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_93;
            }
            else
            {
                goto branch_no_93;
            }
            branch_yes_93:;
            CHECK_OBJECT( tmp_class_creation_23__bases_orig );
            tmp_dictset_value = tmp_class_creation_23__bases_orig;
            tmp_res = PyObject_SetItem( locals_PIL$ImageFilter_306, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_71;
            }
            branch_no_93:;
        }
        {
            PyObject *tmp_assign_source_190;
            PyObject *tmp_called_name_48;
            PyObject *tmp_args_name_46;
            PyObject *tmp_tuple_element_91;
            PyObject *tmp_kw_name_46;
            CHECK_OBJECT( tmp_class_creation_23__metaclass );
            tmp_called_name_48 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_91 = const_str_plain_Color3DLUT;
            tmp_args_name_46 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_91 );
            PyTuple_SET_ITEM( tmp_args_name_46, 0, tmp_tuple_element_91 );
            CHECK_OBJECT( tmp_class_creation_23__bases );
            tmp_tuple_element_91 = tmp_class_creation_23__bases;
            Py_INCREF( tmp_tuple_element_91 );
            PyTuple_SET_ITEM( tmp_args_name_46, 1, tmp_tuple_element_91 );
            tmp_tuple_element_91 = locals_PIL$ImageFilter_306;
            Py_INCREF( tmp_tuple_element_91 );
            PyTuple_SET_ITEM( tmp_args_name_46, 2, tmp_tuple_element_91 );
            CHECK_OBJECT( tmp_class_creation_23__class_decl_dict );
            tmp_kw_name_46 = tmp_class_creation_23__class_decl_dict;
            frame_573a114d73ab0e159b5d270a6c427242->m_frame.f_lineno = 306;
            tmp_assign_source_190 = CALL_FUNCTION( tmp_called_name_48, tmp_args_name_46, tmp_kw_name_46 );
            Py_DECREF( tmp_args_name_46 );
            if ( tmp_assign_source_190 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 306;

                goto try_except_handler_71;
            }
            assert( outline_22_var___class__ == NULL );
            outline_22_var___class__ = tmp_assign_source_190;
        }
        CHECK_OBJECT( outline_22_var___class__ );
        tmp_assign_source_189 = outline_22_var___class__;
        Py_INCREF( tmp_assign_source_189 );
        goto try_return_handler_71;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_71:;
        Py_DECREF( locals_PIL$ImageFilter_306 );
        locals_PIL$ImageFilter_306 = NULL;
        goto try_return_handler_70;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_PIL$ImageFilter_306 );
        locals_PIL$ImageFilter_306 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto try_except_handler_70;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_70:;
        CHECK_OBJECT( (PyObject *)outline_22_var___class__ );
        Py_DECREF( outline_22_var___class__ );
        outline_22_var___class__ = NULL;

        goto outline_result_23;
        // Exception handler code:
        try_except_handler_70:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto outline_exception_23;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( PIL$ImageFilter );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_23:;
        exception_lineno = 306;
        goto try_except_handler_69;
        outline_result_23:;
        UPDATE_STRING_DICT1( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain_Color3DLUT, tmp_assign_source_189 );
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_69:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_keeper_lineno_71 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_23__bases_orig );
    tmp_class_creation_23__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_23__bases );
    tmp_class_creation_23__bases = NULL;

    Py_XDECREF( tmp_class_creation_23__class_decl_dict );
    tmp_class_creation_23__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_23__metaclass );
    tmp_class_creation_23__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_23__prepared );
    tmp_class_creation_23__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_71;
    exception_value = exception_keeper_value_71;
    exception_tb = exception_keeper_tb_71;
    exception_lineno = exception_keeper_lineno_71;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_573a114d73ab0e159b5d270a6c427242 );
#endif
    popFrameStack();

    assertFrameObject( frame_573a114d73ab0e159b5d270a6c427242 );

    goto frame_no_exception_22;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_573a114d73ab0e159b5d270a6c427242 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_573a114d73ab0e159b5d270a6c427242, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_573a114d73ab0e159b5d270a6c427242->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_573a114d73ab0e159b5d270a6c427242, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_22:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_23__bases_orig );
    Py_DECREF( tmp_class_creation_23__bases_orig );
    tmp_class_creation_23__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_23__bases );
    Py_DECREF( tmp_class_creation_23__bases );
    tmp_class_creation_23__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_23__class_decl_dict );
    Py_DECREF( tmp_class_creation_23__class_decl_dict );
    tmp_class_creation_23__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_23__metaclass );
    Py_DECREF( tmp_class_creation_23__metaclass );
    tmp_class_creation_23__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_23__prepared );
    Py_DECREF( tmp_class_creation_23__prepared );
    tmp_class_creation_23__prepared = NULL;


#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict_PIL$ImageFilter, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module_PIL$ImageFilter );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
